
STM32C011J6M6-PCBV4_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059ac  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  08005a6c  08005a6c  00006a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e08  08005e08  00007060  2**0
                  CONTENTS
  4 .ARM          00000000  08005e08  08005e08  00007060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e08  08005e08  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e08  08005e08  00006e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005e0c  08005e0c  00006e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005e10  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  20000060  08005e70  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  08005e70  00007328  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011255  00000000  00000000  00007088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002697  00000000  00000000  000182dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  0001a978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b25  00000000  00000000  0001b7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001473c  00000000  00000000  0001c2cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012638  00000000  00000000  00030a09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e618  00000000  00000000  00043041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c1659  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003740  00000000  00000000  000c169c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000c4ddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005a54 	.word	0x08005a54

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	08005a54 	.word	0x08005a54

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__aeabi_fdiv>:
 80003f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003f6:	464f      	mov	r7, r9
 80003f8:	4646      	mov	r6, r8
 80003fa:	46d6      	mov	lr, sl
 80003fc:	0244      	lsls	r4, r0, #9
 80003fe:	b5c0      	push	{r6, r7, lr}
 8000400:	0047      	lsls	r7, r0, #1
 8000402:	1c0e      	adds	r6, r1, #0
 8000404:	0a64      	lsrs	r4, r4, #9
 8000406:	0e3f      	lsrs	r7, r7, #24
 8000408:	0fc5      	lsrs	r5, r0, #31
 800040a:	2f00      	cmp	r7, #0
 800040c:	d03c      	beq.n	8000488 <__aeabi_fdiv+0x94>
 800040e:	2fff      	cmp	r7, #255	@ 0xff
 8000410:	d042      	beq.n	8000498 <__aeabi_fdiv+0xa4>
 8000412:	2300      	movs	r3, #0
 8000414:	2280      	movs	r2, #128	@ 0x80
 8000416:	4699      	mov	r9, r3
 8000418:	469a      	mov	sl, r3
 800041a:	00e4      	lsls	r4, r4, #3
 800041c:	04d2      	lsls	r2, r2, #19
 800041e:	4314      	orrs	r4, r2
 8000420:	3f7f      	subs	r7, #127	@ 0x7f
 8000422:	0273      	lsls	r3, r6, #9
 8000424:	0a5b      	lsrs	r3, r3, #9
 8000426:	4698      	mov	r8, r3
 8000428:	0073      	lsls	r3, r6, #1
 800042a:	0e1b      	lsrs	r3, r3, #24
 800042c:	0ff6      	lsrs	r6, r6, #31
 800042e:	2b00      	cmp	r3, #0
 8000430:	d01b      	beq.n	800046a <__aeabi_fdiv+0x76>
 8000432:	2bff      	cmp	r3, #255	@ 0xff
 8000434:	d013      	beq.n	800045e <__aeabi_fdiv+0x6a>
 8000436:	4642      	mov	r2, r8
 8000438:	2180      	movs	r1, #128	@ 0x80
 800043a:	00d2      	lsls	r2, r2, #3
 800043c:	04c9      	lsls	r1, r1, #19
 800043e:	4311      	orrs	r1, r2
 8000440:	4688      	mov	r8, r1
 8000442:	2000      	movs	r0, #0
 8000444:	3b7f      	subs	r3, #127	@ 0x7f
 8000446:	0029      	movs	r1, r5
 8000448:	1aff      	subs	r7, r7, r3
 800044a:	464b      	mov	r3, r9
 800044c:	4071      	eors	r1, r6
 800044e:	b2c9      	uxtb	r1, r1
 8000450:	2b0f      	cmp	r3, #15
 8000452:	d900      	bls.n	8000456 <__aeabi_fdiv+0x62>
 8000454:	e0b5      	b.n	80005c2 <__aeabi_fdiv+0x1ce>
 8000456:	4a74      	ldr	r2, [pc, #464]	@ (8000628 <__aeabi_fdiv+0x234>)
 8000458:	009b      	lsls	r3, r3, #2
 800045a:	58d3      	ldr	r3, [r2, r3]
 800045c:	469f      	mov	pc, r3
 800045e:	4643      	mov	r3, r8
 8000460:	2b00      	cmp	r3, #0
 8000462:	d13f      	bne.n	80004e4 <__aeabi_fdiv+0xf0>
 8000464:	3fff      	subs	r7, #255	@ 0xff
 8000466:	3302      	adds	r3, #2
 8000468:	e003      	b.n	8000472 <__aeabi_fdiv+0x7e>
 800046a:	4643      	mov	r3, r8
 800046c:	2b00      	cmp	r3, #0
 800046e:	d12d      	bne.n	80004cc <__aeabi_fdiv+0xd8>
 8000470:	2301      	movs	r3, #1
 8000472:	0029      	movs	r1, r5
 8000474:	464a      	mov	r2, r9
 8000476:	4071      	eors	r1, r6
 8000478:	b2c9      	uxtb	r1, r1
 800047a:	431a      	orrs	r2, r3
 800047c:	2a0e      	cmp	r2, #14
 800047e:	d838      	bhi.n	80004f2 <__aeabi_fdiv+0xfe>
 8000480:	486a      	ldr	r0, [pc, #424]	@ (800062c <__aeabi_fdiv+0x238>)
 8000482:	0092      	lsls	r2, r2, #2
 8000484:	5882      	ldr	r2, [r0, r2]
 8000486:	4697      	mov	pc, r2
 8000488:	2c00      	cmp	r4, #0
 800048a:	d113      	bne.n	80004b4 <__aeabi_fdiv+0xc0>
 800048c:	2304      	movs	r3, #4
 800048e:	4699      	mov	r9, r3
 8000490:	3b03      	subs	r3, #3
 8000492:	2700      	movs	r7, #0
 8000494:	469a      	mov	sl, r3
 8000496:	e7c4      	b.n	8000422 <__aeabi_fdiv+0x2e>
 8000498:	2c00      	cmp	r4, #0
 800049a:	d105      	bne.n	80004a8 <__aeabi_fdiv+0xb4>
 800049c:	2308      	movs	r3, #8
 800049e:	4699      	mov	r9, r3
 80004a0:	3b06      	subs	r3, #6
 80004a2:	27ff      	movs	r7, #255	@ 0xff
 80004a4:	469a      	mov	sl, r3
 80004a6:	e7bc      	b.n	8000422 <__aeabi_fdiv+0x2e>
 80004a8:	230c      	movs	r3, #12
 80004aa:	4699      	mov	r9, r3
 80004ac:	3b09      	subs	r3, #9
 80004ae:	27ff      	movs	r7, #255	@ 0xff
 80004b0:	469a      	mov	sl, r3
 80004b2:	e7b6      	b.n	8000422 <__aeabi_fdiv+0x2e>
 80004b4:	0020      	movs	r0, r4
 80004b6:	f000 fa3d 	bl	8000934 <__clzsi2>
 80004ba:	2776      	movs	r7, #118	@ 0x76
 80004bc:	1f43      	subs	r3, r0, #5
 80004be:	409c      	lsls	r4, r3
 80004c0:	2300      	movs	r3, #0
 80004c2:	427f      	negs	r7, r7
 80004c4:	4699      	mov	r9, r3
 80004c6:	469a      	mov	sl, r3
 80004c8:	1a3f      	subs	r7, r7, r0
 80004ca:	e7aa      	b.n	8000422 <__aeabi_fdiv+0x2e>
 80004cc:	4640      	mov	r0, r8
 80004ce:	f000 fa31 	bl	8000934 <__clzsi2>
 80004d2:	4642      	mov	r2, r8
 80004d4:	1f43      	subs	r3, r0, #5
 80004d6:	409a      	lsls	r2, r3
 80004d8:	2376      	movs	r3, #118	@ 0x76
 80004da:	425b      	negs	r3, r3
 80004dc:	1a1b      	subs	r3, r3, r0
 80004de:	4690      	mov	r8, r2
 80004e0:	2000      	movs	r0, #0
 80004e2:	e7b0      	b.n	8000446 <__aeabi_fdiv+0x52>
 80004e4:	2303      	movs	r3, #3
 80004e6:	464a      	mov	r2, r9
 80004e8:	431a      	orrs	r2, r3
 80004ea:	4691      	mov	r9, r2
 80004ec:	2003      	movs	r0, #3
 80004ee:	33fc      	adds	r3, #252	@ 0xfc
 80004f0:	e7a9      	b.n	8000446 <__aeabi_fdiv+0x52>
 80004f2:	000d      	movs	r5, r1
 80004f4:	20ff      	movs	r0, #255	@ 0xff
 80004f6:	2200      	movs	r2, #0
 80004f8:	05c0      	lsls	r0, r0, #23
 80004fa:	07ed      	lsls	r5, r5, #31
 80004fc:	4310      	orrs	r0, r2
 80004fe:	4328      	orrs	r0, r5
 8000500:	bce0      	pop	{r5, r6, r7}
 8000502:	46ba      	mov	sl, r7
 8000504:	46b1      	mov	r9, r6
 8000506:	46a8      	mov	r8, r5
 8000508:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800050a:	000d      	movs	r5, r1
 800050c:	2000      	movs	r0, #0
 800050e:	2200      	movs	r2, #0
 8000510:	e7f2      	b.n	80004f8 <__aeabi_fdiv+0x104>
 8000512:	4653      	mov	r3, sl
 8000514:	2b02      	cmp	r3, #2
 8000516:	d0ed      	beq.n	80004f4 <__aeabi_fdiv+0x100>
 8000518:	2b03      	cmp	r3, #3
 800051a:	d033      	beq.n	8000584 <__aeabi_fdiv+0x190>
 800051c:	46a0      	mov	r8, r4
 800051e:	2b01      	cmp	r3, #1
 8000520:	d105      	bne.n	800052e <__aeabi_fdiv+0x13a>
 8000522:	2000      	movs	r0, #0
 8000524:	2200      	movs	r2, #0
 8000526:	e7e7      	b.n	80004f8 <__aeabi_fdiv+0x104>
 8000528:	0035      	movs	r5, r6
 800052a:	2803      	cmp	r0, #3
 800052c:	d07a      	beq.n	8000624 <__aeabi_fdiv+0x230>
 800052e:	003b      	movs	r3, r7
 8000530:	337f      	adds	r3, #127	@ 0x7f
 8000532:	2b00      	cmp	r3, #0
 8000534:	dd2d      	ble.n	8000592 <__aeabi_fdiv+0x19e>
 8000536:	4642      	mov	r2, r8
 8000538:	0752      	lsls	r2, r2, #29
 800053a:	d007      	beq.n	800054c <__aeabi_fdiv+0x158>
 800053c:	220f      	movs	r2, #15
 800053e:	4641      	mov	r1, r8
 8000540:	400a      	ands	r2, r1
 8000542:	2a04      	cmp	r2, #4
 8000544:	d002      	beq.n	800054c <__aeabi_fdiv+0x158>
 8000546:	2204      	movs	r2, #4
 8000548:	4694      	mov	ip, r2
 800054a:	44e0      	add	r8, ip
 800054c:	4642      	mov	r2, r8
 800054e:	0112      	lsls	r2, r2, #4
 8000550:	d505      	bpl.n	800055e <__aeabi_fdiv+0x16a>
 8000552:	4642      	mov	r2, r8
 8000554:	4b36      	ldr	r3, [pc, #216]	@ (8000630 <__aeabi_fdiv+0x23c>)
 8000556:	401a      	ands	r2, r3
 8000558:	003b      	movs	r3, r7
 800055a:	4690      	mov	r8, r2
 800055c:	3380      	adds	r3, #128	@ 0x80
 800055e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000560:	dcc8      	bgt.n	80004f4 <__aeabi_fdiv+0x100>
 8000562:	4642      	mov	r2, r8
 8000564:	0192      	lsls	r2, r2, #6
 8000566:	0a52      	lsrs	r2, r2, #9
 8000568:	b2d8      	uxtb	r0, r3
 800056a:	e7c5      	b.n	80004f8 <__aeabi_fdiv+0x104>
 800056c:	2280      	movs	r2, #128	@ 0x80
 800056e:	2500      	movs	r5, #0
 8000570:	20ff      	movs	r0, #255	@ 0xff
 8000572:	03d2      	lsls	r2, r2, #15
 8000574:	e7c0      	b.n	80004f8 <__aeabi_fdiv+0x104>
 8000576:	2280      	movs	r2, #128	@ 0x80
 8000578:	03d2      	lsls	r2, r2, #15
 800057a:	4214      	tst	r4, r2
 800057c:	d002      	beq.n	8000584 <__aeabi_fdiv+0x190>
 800057e:	4643      	mov	r3, r8
 8000580:	4213      	tst	r3, r2
 8000582:	d049      	beq.n	8000618 <__aeabi_fdiv+0x224>
 8000584:	2280      	movs	r2, #128	@ 0x80
 8000586:	03d2      	lsls	r2, r2, #15
 8000588:	4322      	orrs	r2, r4
 800058a:	0252      	lsls	r2, r2, #9
 800058c:	20ff      	movs	r0, #255	@ 0xff
 800058e:	0a52      	lsrs	r2, r2, #9
 8000590:	e7b2      	b.n	80004f8 <__aeabi_fdiv+0x104>
 8000592:	2201      	movs	r2, #1
 8000594:	1ad3      	subs	r3, r2, r3
 8000596:	2b1b      	cmp	r3, #27
 8000598:	dcc3      	bgt.n	8000522 <__aeabi_fdiv+0x12e>
 800059a:	4642      	mov	r2, r8
 800059c:	40da      	lsrs	r2, r3
 800059e:	4643      	mov	r3, r8
 80005a0:	379e      	adds	r7, #158	@ 0x9e
 80005a2:	40bb      	lsls	r3, r7
 80005a4:	1e59      	subs	r1, r3, #1
 80005a6:	418b      	sbcs	r3, r1
 80005a8:	431a      	orrs	r2, r3
 80005aa:	0753      	lsls	r3, r2, #29
 80005ac:	d004      	beq.n	80005b8 <__aeabi_fdiv+0x1c4>
 80005ae:	230f      	movs	r3, #15
 80005b0:	4013      	ands	r3, r2
 80005b2:	2b04      	cmp	r3, #4
 80005b4:	d000      	beq.n	80005b8 <__aeabi_fdiv+0x1c4>
 80005b6:	3204      	adds	r2, #4
 80005b8:	0153      	lsls	r3, r2, #5
 80005ba:	d529      	bpl.n	8000610 <__aeabi_fdiv+0x21c>
 80005bc:	2001      	movs	r0, #1
 80005be:	2200      	movs	r2, #0
 80005c0:	e79a      	b.n	80004f8 <__aeabi_fdiv+0x104>
 80005c2:	4642      	mov	r2, r8
 80005c4:	0163      	lsls	r3, r4, #5
 80005c6:	0155      	lsls	r5, r2, #5
 80005c8:	42ab      	cmp	r3, r5
 80005ca:	d215      	bcs.n	80005f8 <__aeabi_fdiv+0x204>
 80005cc:	201b      	movs	r0, #27
 80005ce:	2200      	movs	r2, #0
 80005d0:	3f01      	subs	r7, #1
 80005d2:	2601      	movs	r6, #1
 80005d4:	001c      	movs	r4, r3
 80005d6:	0052      	lsls	r2, r2, #1
 80005d8:	005b      	lsls	r3, r3, #1
 80005da:	2c00      	cmp	r4, #0
 80005dc:	db01      	blt.n	80005e2 <__aeabi_fdiv+0x1ee>
 80005de:	429d      	cmp	r5, r3
 80005e0:	d801      	bhi.n	80005e6 <__aeabi_fdiv+0x1f2>
 80005e2:	1b5b      	subs	r3, r3, r5
 80005e4:	4332      	orrs	r2, r6
 80005e6:	3801      	subs	r0, #1
 80005e8:	2800      	cmp	r0, #0
 80005ea:	d1f3      	bne.n	80005d4 <__aeabi_fdiv+0x1e0>
 80005ec:	1e58      	subs	r0, r3, #1
 80005ee:	4183      	sbcs	r3, r0
 80005f0:	4313      	orrs	r3, r2
 80005f2:	4698      	mov	r8, r3
 80005f4:	000d      	movs	r5, r1
 80005f6:	e79a      	b.n	800052e <__aeabi_fdiv+0x13a>
 80005f8:	201a      	movs	r0, #26
 80005fa:	2201      	movs	r2, #1
 80005fc:	1b5b      	subs	r3, r3, r5
 80005fe:	e7e8      	b.n	80005d2 <__aeabi_fdiv+0x1de>
 8000600:	3b02      	subs	r3, #2
 8000602:	425a      	negs	r2, r3
 8000604:	4153      	adcs	r3, r2
 8000606:	425b      	negs	r3, r3
 8000608:	0035      	movs	r5, r6
 800060a:	2200      	movs	r2, #0
 800060c:	b2d8      	uxtb	r0, r3
 800060e:	e773      	b.n	80004f8 <__aeabi_fdiv+0x104>
 8000610:	0192      	lsls	r2, r2, #6
 8000612:	2000      	movs	r0, #0
 8000614:	0a52      	lsrs	r2, r2, #9
 8000616:	e76f      	b.n	80004f8 <__aeabi_fdiv+0x104>
 8000618:	431a      	orrs	r2, r3
 800061a:	0252      	lsls	r2, r2, #9
 800061c:	0035      	movs	r5, r6
 800061e:	20ff      	movs	r0, #255	@ 0xff
 8000620:	0a52      	lsrs	r2, r2, #9
 8000622:	e769      	b.n	80004f8 <__aeabi_fdiv+0x104>
 8000624:	4644      	mov	r4, r8
 8000626:	e7ad      	b.n	8000584 <__aeabi_fdiv+0x190>
 8000628:	08005a6c 	.word	0x08005a6c
 800062c:	08005aac 	.word	0x08005aac
 8000630:	f7ffffff 	.word	0xf7ffffff

08000634 <__aeabi_fmul>:
 8000634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000636:	464f      	mov	r7, r9
 8000638:	4646      	mov	r6, r8
 800063a:	46d6      	mov	lr, sl
 800063c:	0243      	lsls	r3, r0, #9
 800063e:	0a5b      	lsrs	r3, r3, #9
 8000640:	0045      	lsls	r5, r0, #1
 8000642:	b5c0      	push	{r6, r7, lr}
 8000644:	4699      	mov	r9, r3
 8000646:	1c0f      	adds	r7, r1, #0
 8000648:	0e2d      	lsrs	r5, r5, #24
 800064a:	0fc6      	lsrs	r6, r0, #31
 800064c:	2d00      	cmp	r5, #0
 800064e:	d100      	bne.n	8000652 <__aeabi_fmul+0x1e>
 8000650:	e088      	b.n	8000764 <__aeabi_fmul+0x130>
 8000652:	2dff      	cmp	r5, #255	@ 0xff
 8000654:	d100      	bne.n	8000658 <__aeabi_fmul+0x24>
 8000656:	e08d      	b.n	8000774 <__aeabi_fmul+0x140>
 8000658:	2280      	movs	r2, #128	@ 0x80
 800065a:	00db      	lsls	r3, r3, #3
 800065c:	04d2      	lsls	r2, r2, #19
 800065e:	431a      	orrs	r2, r3
 8000660:	2300      	movs	r3, #0
 8000662:	4691      	mov	r9, r2
 8000664:	4698      	mov	r8, r3
 8000666:	469a      	mov	sl, r3
 8000668:	3d7f      	subs	r5, #127	@ 0x7f
 800066a:	027c      	lsls	r4, r7, #9
 800066c:	007b      	lsls	r3, r7, #1
 800066e:	0a64      	lsrs	r4, r4, #9
 8000670:	0e1b      	lsrs	r3, r3, #24
 8000672:	0fff      	lsrs	r7, r7, #31
 8000674:	2b00      	cmp	r3, #0
 8000676:	d068      	beq.n	800074a <__aeabi_fmul+0x116>
 8000678:	2bff      	cmp	r3, #255	@ 0xff
 800067a:	d021      	beq.n	80006c0 <__aeabi_fmul+0x8c>
 800067c:	2280      	movs	r2, #128	@ 0x80
 800067e:	00e4      	lsls	r4, r4, #3
 8000680:	04d2      	lsls	r2, r2, #19
 8000682:	4314      	orrs	r4, r2
 8000684:	4642      	mov	r2, r8
 8000686:	3b7f      	subs	r3, #127	@ 0x7f
 8000688:	195b      	adds	r3, r3, r5
 800068a:	2100      	movs	r1, #0
 800068c:	1c5d      	adds	r5, r3, #1
 800068e:	2a0a      	cmp	r2, #10
 8000690:	dc2e      	bgt.n	80006f0 <__aeabi_fmul+0xbc>
 8000692:	407e      	eors	r6, r7
 8000694:	4642      	mov	r2, r8
 8000696:	2a02      	cmp	r2, #2
 8000698:	dc23      	bgt.n	80006e2 <__aeabi_fmul+0xae>
 800069a:	3a01      	subs	r2, #1
 800069c:	2a01      	cmp	r2, #1
 800069e:	d900      	bls.n	80006a2 <__aeabi_fmul+0x6e>
 80006a0:	e0bd      	b.n	800081e <__aeabi_fmul+0x1ea>
 80006a2:	2902      	cmp	r1, #2
 80006a4:	d06e      	beq.n	8000784 <__aeabi_fmul+0x150>
 80006a6:	2901      	cmp	r1, #1
 80006a8:	d12c      	bne.n	8000704 <__aeabi_fmul+0xd0>
 80006aa:	2000      	movs	r0, #0
 80006ac:	2200      	movs	r2, #0
 80006ae:	05c0      	lsls	r0, r0, #23
 80006b0:	07f6      	lsls	r6, r6, #31
 80006b2:	4310      	orrs	r0, r2
 80006b4:	4330      	orrs	r0, r6
 80006b6:	bce0      	pop	{r5, r6, r7}
 80006b8:	46ba      	mov	sl, r7
 80006ba:	46b1      	mov	r9, r6
 80006bc:	46a8      	mov	r8, r5
 80006be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c0:	002b      	movs	r3, r5
 80006c2:	33ff      	adds	r3, #255	@ 0xff
 80006c4:	2c00      	cmp	r4, #0
 80006c6:	d065      	beq.n	8000794 <__aeabi_fmul+0x160>
 80006c8:	2203      	movs	r2, #3
 80006ca:	4641      	mov	r1, r8
 80006cc:	4311      	orrs	r1, r2
 80006ce:	0032      	movs	r2, r6
 80006d0:	3501      	adds	r5, #1
 80006d2:	4688      	mov	r8, r1
 80006d4:	407a      	eors	r2, r7
 80006d6:	35ff      	adds	r5, #255	@ 0xff
 80006d8:	290a      	cmp	r1, #10
 80006da:	dd00      	ble.n	80006de <__aeabi_fmul+0xaa>
 80006dc:	e0d8      	b.n	8000890 <__aeabi_fmul+0x25c>
 80006de:	0016      	movs	r6, r2
 80006e0:	2103      	movs	r1, #3
 80006e2:	4640      	mov	r0, r8
 80006e4:	2201      	movs	r2, #1
 80006e6:	4082      	lsls	r2, r0
 80006e8:	20a6      	movs	r0, #166	@ 0xa6
 80006ea:	00c0      	lsls	r0, r0, #3
 80006ec:	4202      	tst	r2, r0
 80006ee:	d020      	beq.n	8000732 <__aeabi_fmul+0xfe>
 80006f0:	4653      	mov	r3, sl
 80006f2:	2b02      	cmp	r3, #2
 80006f4:	d046      	beq.n	8000784 <__aeabi_fmul+0x150>
 80006f6:	2b03      	cmp	r3, #3
 80006f8:	d100      	bne.n	80006fc <__aeabi_fmul+0xc8>
 80006fa:	e0bb      	b.n	8000874 <__aeabi_fmul+0x240>
 80006fc:	4651      	mov	r1, sl
 80006fe:	464c      	mov	r4, r9
 8000700:	2901      	cmp	r1, #1
 8000702:	d0d2      	beq.n	80006aa <__aeabi_fmul+0x76>
 8000704:	002b      	movs	r3, r5
 8000706:	337f      	adds	r3, #127	@ 0x7f
 8000708:	2b00      	cmp	r3, #0
 800070a:	dd70      	ble.n	80007ee <__aeabi_fmul+0x1ba>
 800070c:	0762      	lsls	r2, r4, #29
 800070e:	d004      	beq.n	800071a <__aeabi_fmul+0xe6>
 8000710:	220f      	movs	r2, #15
 8000712:	4022      	ands	r2, r4
 8000714:	2a04      	cmp	r2, #4
 8000716:	d000      	beq.n	800071a <__aeabi_fmul+0xe6>
 8000718:	3404      	adds	r4, #4
 800071a:	0122      	lsls	r2, r4, #4
 800071c:	d503      	bpl.n	8000726 <__aeabi_fmul+0xf2>
 800071e:	4b63      	ldr	r3, [pc, #396]	@ (80008ac <__aeabi_fmul+0x278>)
 8000720:	401c      	ands	r4, r3
 8000722:	002b      	movs	r3, r5
 8000724:	3380      	adds	r3, #128	@ 0x80
 8000726:	2bfe      	cmp	r3, #254	@ 0xfe
 8000728:	dc2c      	bgt.n	8000784 <__aeabi_fmul+0x150>
 800072a:	01a2      	lsls	r2, r4, #6
 800072c:	0a52      	lsrs	r2, r2, #9
 800072e:	b2d8      	uxtb	r0, r3
 8000730:	e7bd      	b.n	80006ae <__aeabi_fmul+0x7a>
 8000732:	2090      	movs	r0, #144	@ 0x90
 8000734:	0080      	lsls	r0, r0, #2
 8000736:	4202      	tst	r2, r0
 8000738:	d127      	bne.n	800078a <__aeabi_fmul+0x156>
 800073a:	38b9      	subs	r0, #185	@ 0xb9
 800073c:	38ff      	subs	r0, #255	@ 0xff
 800073e:	4210      	tst	r0, r2
 8000740:	d06d      	beq.n	800081e <__aeabi_fmul+0x1ea>
 8000742:	003e      	movs	r6, r7
 8000744:	46a1      	mov	r9, r4
 8000746:	468a      	mov	sl, r1
 8000748:	e7d2      	b.n	80006f0 <__aeabi_fmul+0xbc>
 800074a:	2c00      	cmp	r4, #0
 800074c:	d141      	bne.n	80007d2 <__aeabi_fmul+0x19e>
 800074e:	2301      	movs	r3, #1
 8000750:	4642      	mov	r2, r8
 8000752:	431a      	orrs	r2, r3
 8000754:	4690      	mov	r8, r2
 8000756:	002b      	movs	r3, r5
 8000758:	4642      	mov	r2, r8
 800075a:	2101      	movs	r1, #1
 800075c:	1c5d      	adds	r5, r3, #1
 800075e:	2a0a      	cmp	r2, #10
 8000760:	dd97      	ble.n	8000692 <__aeabi_fmul+0x5e>
 8000762:	e7c5      	b.n	80006f0 <__aeabi_fmul+0xbc>
 8000764:	2b00      	cmp	r3, #0
 8000766:	d126      	bne.n	80007b6 <__aeabi_fmul+0x182>
 8000768:	2304      	movs	r3, #4
 800076a:	4698      	mov	r8, r3
 800076c:	3b03      	subs	r3, #3
 800076e:	2500      	movs	r5, #0
 8000770:	469a      	mov	sl, r3
 8000772:	e77a      	b.n	800066a <__aeabi_fmul+0x36>
 8000774:	2b00      	cmp	r3, #0
 8000776:	d118      	bne.n	80007aa <__aeabi_fmul+0x176>
 8000778:	2308      	movs	r3, #8
 800077a:	4698      	mov	r8, r3
 800077c:	3b06      	subs	r3, #6
 800077e:	25ff      	movs	r5, #255	@ 0xff
 8000780:	469a      	mov	sl, r3
 8000782:	e772      	b.n	800066a <__aeabi_fmul+0x36>
 8000784:	20ff      	movs	r0, #255	@ 0xff
 8000786:	2200      	movs	r2, #0
 8000788:	e791      	b.n	80006ae <__aeabi_fmul+0x7a>
 800078a:	2280      	movs	r2, #128	@ 0x80
 800078c:	2600      	movs	r6, #0
 800078e:	20ff      	movs	r0, #255	@ 0xff
 8000790:	03d2      	lsls	r2, r2, #15
 8000792:	e78c      	b.n	80006ae <__aeabi_fmul+0x7a>
 8000794:	4641      	mov	r1, r8
 8000796:	2202      	movs	r2, #2
 8000798:	3501      	adds	r5, #1
 800079a:	4311      	orrs	r1, r2
 800079c:	4688      	mov	r8, r1
 800079e:	35ff      	adds	r5, #255	@ 0xff
 80007a0:	290a      	cmp	r1, #10
 80007a2:	dca5      	bgt.n	80006f0 <__aeabi_fmul+0xbc>
 80007a4:	2102      	movs	r1, #2
 80007a6:	407e      	eors	r6, r7
 80007a8:	e774      	b.n	8000694 <__aeabi_fmul+0x60>
 80007aa:	230c      	movs	r3, #12
 80007ac:	4698      	mov	r8, r3
 80007ae:	3b09      	subs	r3, #9
 80007b0:	25ff      	movs	r5, #255	@ 0xff
 80007b2:	469a      	mov	sl, r3
 80007b4:	e759      	b.n	800066a <__aeabi_fmul+0x36>
 80007b6:	0018      	movs	r0, r3
 80007b8:	f000 f8bc 	bl	8000934 <__clzsi2>
 80007bc:	464a      	mov	r2, r9
 80007be:	1f43      	subs	r3, r0, #5
 80007c0:	2576      	movs	r5, #118	@ 0x76
 80007c2:	409a      	lsls	r2, r3
 80007c4:	2300      	movs	r3, #0
 80007c6:	426d      	negs	r5, r5
 80007c8:	4691      	mov	r9, r2
 80007ca:	4698      	mov	r8, r3
 80007cc:	469a      	mov	sl, r3
 80007ce:	1a2d      	subs	r5, r5, r0
 80007d0:	e74b      	b.n	800066a <__aeabi_fmul+0x36>
 80007d2:	0020      	movs	r0, r4
 80007d4:	f000 f8ae 	bl	8000934 <__clzsi2>
 80007d8:	4642      	mov	r2, r8
 80007da:	1f43      	subs	r3, r0, #5
 80007dc:	409c      	lsls	r4, r3
 80007de:	1a2b      	subs	r3, r5, r0
 80007e0:	3b76      	subs	r3, #118	@ 0x76
 80007e2:	2100      	movs	r1, #0
 80007e4:	1c5d      	adds	r5, r3, #1
 80007e6:	2a0a      	cmp	r2, #10
 80007e8:	dc00      	bgt.n	80007ec <__aeabi_fmul+0x1b8>
 80007ea:	e752      	b.n	8000692 <__aeabi_fmul+0x5e>
 80007ec:	e780      	b.n	80006f0 <__aeabi_fmul+0xbc>
 80007ee:	2201      	movs	r2, #1
 80007f0:	1ad3      	subs	r3, r2, r3
 80007f2:	2b1b      	cmp	r3, #27
 80007f4:	dd00      	ble.n	80007f8 <__aeabi_fmul+0x1c4>
 80007f6:	e758      	b.n	80006aa <__aeabi_fmul+0x76>
 80007f8:	359e      	adds	r5, #158	@ 0x9e
 80007fa:	0022      	movs	r2, r4
 80007fc:	40ac      	lsls	r4, r5
 80007fe:	40da      	lsrs	r2, r3
 8000800:	1e63      	subs	r3, r4, #1
 8000802:	419c      	sbcs	r4, r3
 8000804:	4322      	orrs	r2, r4
 8000806:	0753      	lsls	r3, r2, #29
 8000808:	d004      	beq.n	8000814 <__aeabi_fmul+0x1e0>
 800080a:	230f      	movs	r3, #15
 800080c:	4013      	ands	r3, r2
 800080e:	2b04      	cmp	r3, #4
 8000810:	d000      	beq.n	8000814 <__aeabi_fmul+0x1e0>
 8000812:	3204      	adds	r2, #4
 8000814:	0153      	lsls	r3, r2, #5
 8000816:	d537      	bpl.n	8000888 <__aeabi_fmul+0x254>
 8000818:	2001      	movs	r0, #1
 800081a:	2200      	movs	r2, #0
 800081c:	e747      	b.n	80006ae <__aeabi_fmul+0x7a>
 800081e:	0c21      	lsrs	r1, r4, #16
 8000820:	464a      	mov	r2, r9
 8000822:	0424      	lsls	r4, r4, #16
 8000824:	0c24      	lsrs	r4, r4, #16
 8000826:	0027      	movs	r7, r4
 8000828:	0c10      	lsrs	r0, r2, #16
 800082a:	0412      	lsls	r2, r2, #16
 800082c:	0c12      	lsrs	r2, r2, #16
 800082e:	4344      	muls	r4, r0
 8000830:	4357      	muls	r7, r2
 8000832:	4348      	muls	r0, r1
 8000834:	4351      	muls	r1, r2
 8000836:	0c3a      	lsrs	r2, r7, #16
 8000838:	1909      	adds	r1, r1, r4
 800083a:	1852      	adds	r2, r2, r1
 800083c:	4294      	cmp	r4, r2
 800083e:	d903      	bls.n	8000848 <__aeabi_fmul+0x214>
 8000840:	2180      	movs	r1, #128	@ 0x80
 8000842:	0249      	lsls	r1, r1, #9
 8000844:	468c      	mov	ip, r1
 8000846:	4460      	add	r0, ip
 8000848:	043f      	lsls	r7, r7, #16
 800084a:	0411      	lsls	r1, r2, #16
 800084c:	0c3f      	lsrs	r7, r7, #16
 800084e:	19c9      	adds	r1, r1, r7
 8000850:	018c      	lsls	r4, r1, #6
 8000852:	1e67      	subs	r7, r4, #1
 8000854:	41bc      	sbcs	r4, r7
 8000856:	0c12      	lsrs	r2, r2, #16
 8000858:	0e89      	lsrs	r1, r1, #26
 800085a:	1812      	adds	r2, r2, r0
 800085c:	430c      	orrs	r4, r1
 800085e:	0192      	lsls	r2, r2, #6
 8000860:	4314      	orrs	r4, r2
 8000862:	0112      	lsls	r2, r2, #4
 8000864:	d50e      	bpl.n	8000884 <__aeabi_fmul+0x250>
 8000866:	2301      	movs	r3, #1
 8000868:	0862      	lsrs	r2, r4, #1
 800086a:	401c      	ands	r4, r3
 800086c:	4314      	orrs	r4, r2
 800086e:	e749      	b.n	8000704 <__aeabi_fmul+0xd0>
 8000870:	003e      	movs	r6, r7
 8000872:	46a1      	mov	r9, r4
 8000874:	2280      	movs	r2, #128	@ 0x80
 8000876:	464b      	mov	r3, r9
 8000878:	03d2      	lsls	r2, r2, #15
 800087a:	431a      	orrs	r2, r3
 800087c:	0252      	lsls	r2, r2, #9
 800087e:	20ff      	movs	r0, #255	@ 0xff
 8000880:	0a52      	lsrs	r2, r2, #9
 8000882:	e714      	b.n	80006ae <__aeabi_fmul+0x7a>
 8000884:	001d      	movs	r5, r3
 8000886:	e73d      	b.n	8000704 <__aeabi_fmul+0xd0>
 8000888:	0192      	lsls	r2, r2, #6
 800088a:	2000      	movs	r0, #0
 800088c:	0a52      	lsrs	r2, r2, #9
 800088e:	e70e      	b.n	80006ae <__aeabi_fmul+0x7a>
 8000890:	290f      	cmp	r1, #15
 8000892:	d1ed      	bne.n	8000870 <__aeabi_fmul+0x23c>
 8000894:	2280      	movs	r2, #128	@ 0x80
 8000896:	464b      	mov	r3, r9
 8000898:	03d2      	lsls	r2, r2, #15
 800089a:	4213      	tst	r3, r2
 800089c:	d0ea      	beq.n	8000874 <__aeabi_fmul+0x240>
 800089e:	4214      	tst	r4, r2
 80008a0:	d1e8      	bne.n	8000874 <__aeabi_fmul+0x240>
 80008a2:	003e      	movs	r6, r7
 80008a4:	20ff      	movs	r0, #255	@ 0xff
 80008a6:	4322      	orrs	r2, r4
 80008a8:	e701      	b.n	80006ae <__aeabi_fmul+0x7a>
 80008aa:	46c0      	nop			@ (mov r8, r8)
 80008ac:	f7ffffff 	.word	0xf7ffffff

080008b0 <__aeabi_ui2f>:
 80008b0:	b570      	push	{r4, r5, r6, lr}
 80008b2:	1e04      	subs	r4, r0, #0
 80008b4:	d00e      	beq.n	80008d4 <__aeabi_ui2f+0x24>
 80008b6:	f000 f83d 	bl	8000934 <__clzsi2>
 80008ba:	239e      	movs	r3, #158	@ 0x9e
 80008bc:	0001      	movs	r1, r0
 80008be:	1a1b      	subs	r3, r3, r0
 80008c0:	2b96      	cmp	r3, #150	@ 0x96
 80008c2:	dc0c      	bgt.n	80008de <__aeabi_ui2f+0x2e>
 80008c4:	2808      	cmp	r0, #8
 80008c6:	d02f      	beq.n	8000928 <__aeabi_ui2f+0x78>
 80008c8:	3908      	subs	r1, #8
 80008ca:	408c      	lsls	r4, r1
 80008cc:	0264      	lsls	r4, r4, #9
 80008ce:	0a64      	lsrs	r4, r4, #9
 80008d0:	b2d8      	uxtb	r0, r3
 80008d2:	e001      	b.n	80008d8 <__aeabi_ui2f+0x28>
 80008d4:	2000      	movs	r0, #0
 80008d6:	2400      	movs	r4, #0
 80008d8:	05c0      	lsls	r0, r0, #23
 80008da:	4320      	orrs	r0, r4
 80008dc:	bd70      	pop	{r4, r5, r6, pc}
 80008de:	2b99      	cmp	r3, #153	@ 0x99
 80008e0:	dc16      	bgt.n	8000910 <__aeabi_ui2f+0x60>
 80008e2:	1f42      	subs	r2, r0, #5
 80008e4:	2805      	cmp	r0, #5
 80008e6:	d000      	beq.n	80008ea <__aeabi_ui2f+0x3a>
 80008e8:	4094      	lsls	r4, r2
 80008ea:	0022      	movs	r2, r4
 80008ec:	4810      	ldr	r0, [pc, #64]	@ (8000930 <__aeabi_ui2f+0x80>)
 80008ee:	4002      	ands	r2, r0
 80008f0:	0765      	lsls	r5, r4, #29
 80008f2:	d009      	beq.n	8000908 <__aeabi_ui2f+0x58>
 80008f4:	250f      	movs	r5, #15
 80008f6:	402c      	ands	r4, r5
 80008f8:	2c04      	cmp	r4, #4
 80008fa:	d005      	beq.n	8000908 <__aeabi_ui2f+0x58>
 80008fc:	3204      	adds	r2, #4
 80008fe:	0154      	lsls	r4, r2, #5
 8000900:	d502      	bpl.n	8000908 <__aeabi_ui2f+0x58>
 8000902:	239f      	movs	r3, #159	@ 0x9f
 8000904:	4002      	ands	r2, r0
 8000906:	1a5b      	subs	r3, r3, r1
 8000908:	0192      	lsls	r2, r2, #6
 800090a:	0a54      	lsrs	r4, r2, #9
 800090c:	b2d8      	uxtb	r0, r3
 800090e:	e7e3      	b.n	80008d8 <__aeabi_ui2f+0x28>
 8000910:	0002      	movs	r2, r0
 8000912:	0020      	movs	r0, r4
 8000914:	321b      	adds	r2, #27
 8000916:	4090      	lsls	r0, r2
 8000918:	0002      	movs	r2, r0
 800091a:	1e50      	subs	r0, r2, #1
 800091c:	4182      	sbcs	r2, r0
 800091e:	2005      	movs	r0, #5
 8000920:	1a40      	subs	r0, r0, r1
 8000922:	40c4      	lsrs	r4, r0
 8000924:	4314      	orrs	r4, r2
 8000926:	e7e0      	b.n	80008ea <__aeabi_ui2f+0x3a>
 8000928:	0264      	lsls	r4, r4, #9
 800092a:	2096      	movs	r0, #150	@ 0x96
 800092c:	0a64      	lsrs	r4, r4, #9
 800092e:	e7d3      	b.n	80008d8 <__aeabi_ui2f+0x28>
 8000930:	fbffffff 	.word	0xfbffffff

08000934 <__clzsi2>:
 8000934:	211c      	movs	r1, #28
 8000936:	2301      	movs	r3, #1
 8000938:	041b      	lsls	r3, r3, #16
 800093a:	4298      	cmp	r0, r3
 800093c:	d301      	bcc.n	8000942 <__clzsi2+0xe>
 800093e:	0c00      	lsrs	r0, r0, #16
 8000940:	3910      	subs	r1, #16
 8000942:	0a1b      	lsrs	r3, r3, #8
 8000944:	4298      	cmp	r0, r3
 8000946:	d301      	bcc.n	800094c <__clzsi2+0x18>
 8000948:	0a00      	lsrs	r0, r0, #8
 800094a:	3908      	subs	r1, #8
 800094c:	091b      	lsrs	r3, r3, #4
 800094e:	4298      	cmp	r0, r3
 8000950:	d301      	bcc.n	8000956 <__clzsi2+0x22>
 8000952:	0900      	lsrs	r0, r0, #4
 8000954:	3904      	subs	r1, #4
 8000956:	a202      	add	r2, pc, #8	@ (adr r2, 8000960 <__clzsi2+0x2c>)
 8000958:	5c10      	ldrb	r0, [r2, r0]
 800095a:	1840      	adds	r0, r0, r1
 800095c:	4770      	bx	lr
 800095e:	46c0      	nop			@ (mov r8, r8)
 8000960:	02020304 	.word	0x02020304
 8000964:	01010101 	.word	0x01010101
	...

08000970 <main>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);


int main(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  HAL_Init();
 8000974:	f000 fe4e 	bl	8001614 <HAL_Init>
  SystemClock_Config();
 8000978:	f000 f822 	bl	80009c0 <SystemClock_Config>
  MX_GPIO_Init();
 800097c:	f000 f86c 	bl	8000a58 <MX_GPIO_Init>

  //if (MX_RPM_Init(&htim1)){Error_Handler();}

  if (MBUS_Init()){
 8000980:	f000 f9ca 	bl	8000d18 <MBUS_Init>
 8000984:	1e03      	subs	r3, r0, #0
 8000986:	d001      	beq.n	800098c <main+0x1c>
	  Error_Handler();
 8000988:	f000 f888 	bl	8000a9c <Error_Handler>
  while (1)
  {
	  //MBUS_Transmit(&hmbus);

	  //HAL_UART_Transmit_IT(&huart, MSG, 3);
	  counter++;
 800098c:	4b0a      	ldr	r3, [pc, #40]	@ (80009b8 <main+0x48>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	1c5a      	adds	r2, r3, #1
 8000992:	4b09      	ldr	r3, [pc, #36]	@ (80009b8 <main+0x48>)
 8000994:	601a      	str	r2, [r3, #0]
											,const uint8_t aPayload[PAYLOAD_MAX_SIZE]){
	  • 0x06: Monitor (COM_MON)
	  • 0x07: Debug Output
	  */

	  if(MBUS_UpdateTransmittedData(0x01,0x06,0x03,MSG)){
 8000996:	4b09      	ldr	r3, [pc, #36]	@ (80009bc <main+0x4c>)
 8000998:	2203      	movs	r2, #3
 800099a:	2106      	movs	r1, #6
 800099c:	2001      	movs	r0, #1
 800099e:	f000 f92f 	bl	8000c00 <MBUS_UpdateTransmittedData>
 80009a2:	1e03      	subs	r3, r0, #0
 80009a4:	d001      	beq.n	80009aa <main+0x3a>
		  Error_Handler();
 80009a6:	f000 f879 	bl	8000a9c <Error_Handler>
	  }


	  HAL_Delay(2000);
 80009aa:	23fa      	movs	r3, #250	@ 0xfa
 80009ac:	00db      	lsls	r3, r3, #3
 80009ae:	0018      	movs	r0, r3
 80009b0:	f000 feae 	bl	8001710 <HAL_Delay>
	  counter++;
 80009b4:	e7ea      	b.n	800098c <main+0x1c>
 80009b6:	46c0      	nop			@ (mov r8, r8)
 80009b8:	200000c8 	.word	0x200000c8
 80009bc:	20000000 	.word	0x20000000

080009c0 <SystemClock_Config>:
  }
}


void SystemClock_Config(void)
{
 80009c0:	b590      	push	{r4, r7, lr}
 80009c2:	b08d      	sub	sp, #52	@ 0x34
 80009c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c6:	2414      	movs	r4, #20
 80009c8:	193b      	adds	r3, r7, r4
 80009ca:	0018      	movs	r0, r3
 80009cc:	231c      	movs	r3, #28
 80009ce:	001a      	movs	r2, r3
 80009d0:	2100      	movs	r1, #0
 80009d2:	f004 ffa5 	bl	8005920 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d6:	003b      	movs	r3, r7
 80009d8:	0018      	movs	r0, r3
 80009da:	2314      	movs	r3, #20
 80009dc:	001a      	movs	r2, r3
 80009de:	2100      	movs	r1, #0
 80009e0:	f004 ff9e 	bl	8005920 <memset>

  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 80009e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a54 <SystemClock_Config+0x94>)
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a54 <SystemClock_Config+0x94>)
 80009ea:	2107      	movs	r1, #7
 80009ec:	438a      	bics	r2, r1
 80009ee:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009f0:	193b      	adds	r3, r7, r4
 80009f2:	2202      	movs	r2, #2
 80009f4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009f6:	193b      	adds	r3, r7, r4
 80009f8:	2280      	movs	r2, #128	@ 0x80
 80009fa:	0052      	lsls	r2, r2, #1
 80009fc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 80009fe:	193b      	adds	r3, r7, r4
 8000a00:	2280      	movs	r2, #128	@ 0x80
 8000a02:	0152      	lsls	r2, r2, #5
 8000a04:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a06:	193b      	adds	r3, r7, r4
 8000a08:	2240      	movs	r2, #64	@ 0x40
 8000a0a:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a0c:	193b      	adds	r3, r7, r4
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f001 f9d2 	bl	8001db8 <HAL_RCC_OscConfig>
 8000a14:	1e03      	subs	r3, r0, #0
 8000a16:	d001      	beq.n	8000a1c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000a18:	f000 f840 	bl	8000a9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a1c:	003b      	movs	r3, r7
 8000a1e:	2207      	movs	r2, #7
 8000a20:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a22:	003b      	movs	r3, r7
 8000a24:	2200      	movs	r2, #0
 8000a26:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a28:	003b      	movs	r3, r7
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a2e:	003b      	movs	r3, r7
 8000a30:	2200      	movs	r2, #0
 8000a32:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000a34:	003b      	movs	r3, r7
 8000a36:	2200      	movs	r2, #0
 8000a38:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a3a:	003b      	movs	r3, r7
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f001 fb9e 	bl	8002180 <HAL_RCC_ClockConfig>
 8000a44:	1e03      	subs	r3, r0, #0
 8000a46:	d001      	beq.n	8000a4c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000a48:	f000 f828 	bl	8000a9c <Error_Handler>
  }
}
 8000a4c:	46c0      	nop			@ (mov r8, r8)
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	b00d      	add	sp, #52	@ 0x34
 8000a52:	bd90      	pop	{r4, r7, pc}
 8000a54:	40022000 	.word	0x40022000

08000a58 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a98 <MX_GPIO_Init+0x40>)
 8000a60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a62:	4b0d      	ldr	r3, [pc, #52]	@ (8000a98 <MX_GPIO_Init+0x40>)
 8000a64:	2102      	movs	r1, #2
 8000a66:	430a      	orrs	r2, r1
 8000a68:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a98 <MX_GPIO_Init+0x40>)
 8000a6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a6e:	2202      	movs	r2, #2
 8000a70:	4013      	ands	r3, r2
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a76:	4b08      	ldr	r3, [pc, #32]	@ (8000a98 <MX_GPIO_Init+0x40>)
 8000a78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a7a:	4b07      	ldr	r3, [pc, #28]	@ (8000a98 <MX_GPIO_Init+0x40>)
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	430a      	orrs	r2, r1
 8000a80:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a82:	4b05      	ldr	r3, [pc, #20]	@ (8000a98 <MX_GPIO_Init+0x40>)
 8000a84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a86:	2201      	movs	r2, #1
 8000a88:	4013      	ands	r3, r2
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]
}
 8000a8e:	46c0      	nop			@ (mov r8, r8)
 8000a90:	46bd      	mov	sp, r7
 8000a92:	b002      	add	sp, #8
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	46c0      	nop			@ (mov r8, r8)
 8000a98:	40021000 	.word	0x40021000

08000a9c <Error_Handler>:

void Error_Handler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa0:	b672      	cpsid	i
}
 8000aa2:	46c0      	nop			@ (mov r8, r8)
 __disable_irq();
  while (1)
 8000aa4:	46c0      	nop			@ (mov r8, r8)
 8000aa6:	e7fd      	b.n	8000aa4 <Error_Handler+0x8>

08000aa8 <HALCPU_CRC_CRC16CCITT>:
• 0x08: Object protocol (COM_OBJ)
• 0x09: Data Object Protocol 2 (DOP2)
 **/

// INTERNAL: FRAME CHECKSUM SUBFUNCTION
void static HALCPU_CRC_CRC16CCITT(const uint8_t aData[], const uint16_t aSize, uint8_t aCRCresult[2],uint16_t aCRCinput) {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	0008      	movs	r0, r1
 8000ab2:	607a      	str	r2, [r7, #4]
 8000ab4:	0019      	movs	r1, r3
 8000ab6:	230a      	movs	r3, #10
 8000ab8:	18fb      	adds	r3, r7, r3
 8000aba:	1c02      	adds	r2, r0, #0
 8000abc:	801a      	strh	r2, [r3, #0]
 8000abe:	2308      	movs	r3, #8
 8000ac0:	18fb      	adds	r3, r7, r3
 8000ac2:	1c0a      	adds	r2, r1, #0
 8000ac4:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < aSize; i++) {
 8000ac6:	2316      	movs	r3, #22
 8000ac8:	18fb      	adds	r3, r7, r3
 8000aca:	2200      	movs	r2, #0
 8000acc:	801a      	strh	r2, [r3, #0]
 8000ace:	e01f      	b.n	8000b10 <HALCPU_CRC_CRC16CCITT+0x68>
    	aCRCinput = HALCPU_CRC_CRC16CCITT_LUT8B_au16[(uint8_t)(aData[i] ^ (aCRCinput >> 8))] ^ (aCRCinput << 8);
 8000ad0:	2116      	movs	r1, #22
 8000ad2:	187b      	adds	r3, r7, r1
 8000ad4:	881b      	ldrh	r3, [r3, #0]
 8000ad6:	68fa      	ldr	r2, [r7, #12]
 8000ad8:	18d3      	adds	r3, r2, r3
 8000ada:	781a      	ldrb	r2, [r3, #0]
 8000adc:	2008      	movs	r0, #8
 8000ade:	183b      	adds	r3, r7, r0
 8000ae0:	881b      	ldrh	r3, [r3, #0]
 8000ae2:	0a1b      	lsrs	r3, r3, #8
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	4053      	eors	r3, r2
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	001a      	movs	r2, r3
 8000aee:	4b15      	ldr	r3, [pc, #84]	@ (8000b44 <HALCPU_CRC_CRC16CCITT+0x9c>)
 8000af0:	0052      	lsls	r2, r2, #1
 8000af2:	5ad3      	ldrh	r3, [r2, r3]
 8000af4:	b21a      	sxth	r2, r3
 8000af6:	183b      	adds	r3, r7, r0
 8000af8:	881b      	ldrh	r3, [r3, #0]
 8000afa:	021b      	lsls	r3, r3, #8
 8000afc:	b21b      	sxth	r3, r3
 8000afe:	4053      	eors	r3, r2
 8000b00:	b21a      	sxth	r2, r3
 8000b02:	183b      	adds	r3, r7, r0
 8000b04:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < aSize; i++) {
 8000b06:	187b      	adds	r3, r7, r1
 8000b08:	881a      	ldrh	r2, [r3, #0]
 8000b0a:	187b      	adds	r3, r7, r1
 8000b0c:	3201      	adds	r2, #1
 8000b0e:	801a      	strh	r2, [r3, #0]
 8000b10:	2316      	movs	r3, #22
 8000b12:	18fa      	adds	r2, r7, r3
 8000b14:	230a      	movs	r3, #10
 8000b16:	18fb      	adds	r3, r7, r3
 8000b18:	8812      	ldrh	r2, [r2, #0]
 8000b1a:	881b      	ldrh	r3, [r3, #0]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d3d7      	bcc.n	8000ad0 <HALCPU_CRC_CRC16CCITT+0x28>
    }
    aCRCresult[0] = (uint8_t)(aCRCinput & 0xFF);
 8000b20:	2108      	movs	r1, #8
 8000b22:	187b      	adds	r3, r7, r1
 8000b24:	881b      	ldrh	r3, [r3, #0]
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	701a      	strb	r2, [r3, #0]
    aCRCresult[1] = (uint8_t)((aCRCinput >> 8) & 0xFF);
 8000b2c:	187b      	adds	r3, r7, r1
 8000b2e:	881b      	ldrh	r3, [r3, #0]
 8000b30:	0a1b      	lsrs	r3, r3, #8
 8000b32:	b29a      	uxth	r2, r3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	3301      	adds	r3, #1
 8000b38:	b2d2      	uxtb	r2, r2
 8000b3a:	701a      	strb	r2, [r3, #0]
}
 8000b3c:	46c0      	nop			@ (mov r8, r8)
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	b006      	add	sp, #24
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	08005ae8 	.word	0x08005ae8

08000b48 <CalculateFCS>:

// INTERNAL: FRAME CHECKSUM CALCULATION
void static CalculateFCS(uint8_t aFCS[2],struct FrameBuffer *aFrameBuffer){
 8000b48:	b590      	push	{r4, r7, lr}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	6039      	str	r1, [r7, #0]
	uint16_t CurrentFrameSize=4*sizeof(uint8_t)+MBUS_FrameBuffer->PS[0];
 8000b52:	4b29      	ldr	r3, [pc, #164]	@ (8000bf8 <CalculateFCS+0xb0>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	791b      	ldrb	r3, [r3, #4]
 8000b58:	001a      	movs	r2, r3
 8000b5a:	210c      	movs	r1, #12
 8000b5c:	187b      	adds	r3, r7, r1
 8000b5e:	3204      	adds	r2, #4
 8000b60:	801a      	strh	r2, [r3, #0]
	uint8_t *tmpFrameBuffer;
	tmpFrameBuffer=malloc(CurrentFrameSize*sizeof(uint8_t));
 8000b62:	187b      	adds	r3, r7, r1
 8000b64:	881b      	ldrh	r3, [r3, #0]
 8000b66:	0018      	movs	r0, r3
 8000b68:	f004 fe14 	bl	8005794 <malloc>
 8000b6c:	0003      	movs	r3, r0
 8000b6e:	60bb      	str	r3, [r7, #8]
	//if (!tmpFrameBuffer) {return 1;}

	tmpFrameBuffer[0]=aFrameBuffer->TXID[0];
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	785a      	ldrb	r2, [r3, #1]
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	701a      	strb	r2, [r3, #0]
	tmpFrameBuffer[1]=aFrameBuffer->RXID[0];
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	683a      	ldr	r2, [r7, #0]
 8000b7e:	7892      	ldrb	r2, [r2, #2]
 8000b80:	701a      	strb	r2, [r3, #0]
	tmpFrameBuffer[2]=aFrameBuffer->CHID[0];
 8000b82:	68bb      	ldr	r3, [r7, #8]
 8000b84:	3302      	adds	r3, #2
 8000b86:	683a      	ldr	r2, [r7, #0]
 8000b88:	78d2      	ldrb	r2, [r2, #3]
 8000b8a:	701a      	strb	r2, [r3, #0]
	tmpFrameBuffer[3]=aFrameBuffer->PS[0];
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	3303      	adds	r3, #3
 8000b90:	683a      	ldr	r2, [r7, #0]
 8000b92:	7912      	ldrb	r2, [r2, #4]
 8000b94:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0 ; i < aFrameBuffer->PS[0]; i++ ){
 8000b96:	230e      	movs	r3, #14
 8000b98:	18fb      	adds	r3, r7, r3
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	801a      	strh	r2, [r3, #0]
 8000b9e:	e011      	b.n	8000bc4 <CalculateFCS+0x7c>
		tmpFrameBuffer[4+i]=aFrameBuffer->Payload[i];	// copy data from Payload to Frame_buffer
 8000ba0:	200e      	movs	r0, #14
 8000ba2:	183b      	adds	r3, r7, r0
 8000ba4:	881a      	ldrh	r2, [r3, #0]
 8000ba6:	183b      	adds	r3, r7, r0
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	3304      	adds	r3, #4
 8000bac:	0019      	movs	r1, r3
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	185b      	adds	r3, r3, r1
 8000bb2:	6839      	ldr	r1, [r7, #0]
 8000bb4:	188a      	adds	r2, r1, r2
 8000bb6:	7952      	ldrb	r2, [r2, #5]
 8000bb8:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0 ; i < aFrameBuffer->PS[0]; i++ ){
 8000bba:	183b      	adds	r3, r7, r0
 8000bbc:	881a      	ldrh	r2, [r3, #0]
 8000bbe:	183b      	adds	r3, r7, r0
 8000bc0:	3201      	adds	r2, #1
 8000bc2:	801a      	strh	r2, [r3, #0]
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	791b      	ldrb	r3, [r3, #4]
 8000bc8:	001a      	movs	r2, r3
 8000bca:	230e      	movs	r3, #14
 8000bcc:	18fb      	adds	r3, r7, r3
 8000bce:	881b      	ldrh	r3, [r3, #0]
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d3e5      	bcc.n	8000ba0 <CalculateFCS+0x58>
	}

	HALCPU_CRC_CRC16CCITT(tmpFrameBuffer,CurrentFrameSize,aFCS,0xFFFF);
 8000bd4:	4c09      	ldr	r4, [pc, #36]	@ (8000bfc <CalculateFCS+0xb4>)
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	230c      	movs	r3, #12
 8000bda:	18fb      	adds	r3, r7, r3
 8000bdc:	8819      	ldrh	r1, [r3, #0]
 8000bde:	68b8      	ldr	r0, [r7, #8]
 8000be0:	0023      	movs	r3, r4
 8000be2:	f7ff ff61 	bl	8000aa8 <HALCPU_CRC_CRC16CCITT>
	free(tmpFrameBuffer);
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	0018      	movs	r0, r3
 8000bea:	f004 fddd 	bl	80057a8 <free>
}
 8000bee:	46c0      	nop			@ (mov r8, r8)
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	b005      	add	sp, #20
 8000bf4:	bd90      	pop	{r4, r7, pc}
 8000bf6:	46c0      	nop			@ (mov r8, r8)
 8000bf8:	200001b0 	.word	0x200001b0
 8000bfc:	0000ffff 	.word	0x0000ffff

08000c00 <MBUS_UpdateTransmittedData>:

// API: UPDATE DATA TO TRANSMIT
unsigned MBUS_UpdateTransmittedData(const uint8_t aRXID,const uint8_t aCHID,const uint8_t aPayloadSize,const uint8_t aPayload[PAYLOAD_MAX_SIZE]){
 8000c00:	b590      	push	{r4, r7, lr}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	0004      	movs	r4, r0
 8000c08:	0008      	movs	r0, r1
 8000c0a:	0011      	movs	r1, r2
 8000c0c:	603b      	str	r3, [r7, #0]
 8000c0e:	1dfb      	adds	r3, r7, #7
 8000c10:	1c22      	adds	r2, r4, #0
 8000c12:	701a      	strb	r2, [r3, #0]
 8000c14:	1dbb      	adds	r3, r7, #6
 8000c16:	1c02      	adds	r2, r0, #0
 8000c18:	701a      	strb	r2, [r3, #0]
 8000c1a:	1d7b      	adds	r3, r7, #5
 8000c1c:	1c0a      	adds	r2, r1, #0
 8000c1e:	701a      	strb	r2, [r3, #0]
	MBUS_FrameBuffer_ToTransmit->TXID[0]=myID;
 8000c20:	4b21      	ldr	r3, [pc, #132]	@ (8000ca8 <MBUS_UpdateTransmittedData+0xa8>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	220a      	movs	r2, #10
 8000c26:	705a      	strb	r2, [r3, #1]
	if(aRXID>=0x00 && aRXID<=0x0F && aRXID!=myID){	// invalid arguments
 8000c28:	1dfb      	adds	r3, r7, #7
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b0f      	cmp	r3, #15
 8000c2e:	d813      	bhi.n	8000c58 <MBUS_UpdateTransmittedData+0x58>
 8000c30:	220a      	movs	r2, #10
 8000c32:	1dfb      	adds	r3, r7, #7
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d00e      	beq.n	8000c58 <MBUS_UpdateTransmittedData+0x58>
		MBUS_FrameBuffer_ToTransmit->RXID[0]=aRXID;
 8000c3a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ca8 <MBUS_UpdateTransmittedData+0xa8>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	1dfa      	adds	r2, r7, #7
 8000c40:	7812      	ldrb	r2, [r2, #0]
 8000c42:	709a      	strb	r2, [r3, #2]
	}
	else{return 1;}

	MBUS_FrameBuffer_ToTransmit->CHID[0]=aCHID;
 8000c44:	4b18      	ldr	r3, [pc, #96]	@ (8000ca8 <MBUS_UpdateTransmittedData+0xa8>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	1dba      	adds	r2, r7, #6
 8000c4a:	7812      	ldrb	r2, [r2, #0]
 8000c4c:	70da      	strb	r2, [r3, #3]

	if(aPayloadSize>0 && aPayloadSize<=PAYLOAD_MAX_SIZE && aPayload){	// invalid arguments
 8000c4e:	1d7b      	adds	r3, r7, #5
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d102      	bne.n	8000c5c <MBUS_UpdateTransmittedData+0x5c>
 8000c56:	e022      	b.n	8000c9e <MBUS_UpdateTransmittedData+0x9e>
	else{return 1;}
 8000c58:	2301      	movs	r3, #1
 8000c5a:	e021      	b.n	8000ca0 <MBUS_UpdateTransmittedData+0xa0>
	if(aPayloadSize>0 && aPayloadSize<=PAYLOAD_MAX_SIZE && aPayload){	// invalid arguments
 8000c5c:	1d7b      	adds	r3, r7, #5
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	2b20      	cmp	r3, #32
 8000c62:	d81c      	bhi.n	8000c9e <MBUS_UpdateTransmittedData+0x9e>
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d019      	beq.n	8000c9e <MBUS_UpdateTransmittedData+0x9e>
		MBUS_FrameBuffer_ToTransmit->PS[0]=aPayloadSize;
 8000c6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca8 <MBUS_UpdateTransmittedData+0xa8>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	1d7a      	adds	r2, r7, #5
 8000c70:	7812      	ldrb	r2, [r2, #0]
 8000c72:	711a      	strb	r2, [r3, #4]
		memcpy(MBUS_FrameBuffer_ToTransmit->Payload,aPayload,aPayloadSize);
 8000c74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca8 <MBUS_UpdateTransmittedData+0xa8>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	1d58      	adds	r0, r3, #5
 8000c7a:	1d7b      	adds	r3, r7, #5
 8000c7c:	781a      	ldrb	r2, [r3, #0]
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	0019      	movs	r1, r3
 8000c82:	f004 fe93 	bl	80059ac <memcpy>
	}
	else{return 2;}

	CalculateFCS(MBUS_FrameBuffer_ToTransmit->FCS,MBUS_FrameBuffer_ToTransmit);
 8000c86:	4b08      	ldr	r3, [pc, #32]	@ (8000ca8 <MBUS_UpdateTransmittedData+0xa8>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	3325      	adds	r3, #37	@ 0x25
 8000c8c:	001a      	movs	r2, r3
 8000c8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ca8 <MBUS_UpdateTransmittedData+0xa8>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	0019      	movs	r1, r3
 8000c94:	0010      	movs	r0, r2
 8000c96:	f7ff ff57 	bl	8000b48 <CalculateFCS>
	return 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	e000      	b.n	8000ca0 <MBUS_UpdateTransmittedData+0xa0>
	else{return 2;}
 8000c9e:	2302      	movs	r3, #2
}
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	b003      	add	sp, #12
 8000ca6:	bd90      	pop	{r4, r7, pc}
 8000ca8:	200001b4 	.word	0x200001b4

08000cac <MBUS_FillTransmitBuffer>:
		return 0;
	}
}

// INTERNAL: INPUT DATA TO TRANSMIT
void static MBUS_FillTransmitBuffer(void){
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
	MBUS_FrameBuffer=MBUS_FrameBuffer_ToTransmit;
 8000cb0:	4b03      	ldr	r3, [pc, #12]	@ (8000cc0 <MBUS_FillTransmitBuffer+0x14>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	4b03      	ldr	r3, [pc, #12]	@ (8000cc4 <MBUS_FillTransmitBuffer+0x18>)
 8000cb6:	601a      	str	r2, [r3, #0]
}
 8000cb8:	46c0      	nop			@ (mov r8, r8)
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	46c0      	nop			@ (mov r8, r8)
 8000cc0:	200001b4 	.word	0x200001b4
 8000cc4:	200001b0 	.word	0x200001b0

08000cc8 <MBUS_FillReceivedBuffer>:

// INTERNAL: RECEIVED DATA TO OUTPUT
void static MBUS_FillReceivedBuffer(void){
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
	MBUS_FrameBuffer_Received=MBUS_FrameBuffer;
 8000ccc:	4b03      	ldr	r3, [pc, #12]	@ (8000cdc <MBUS_FillReceivedBuffer+0x14>)
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	4b03      	ldr	r3, [pc, #12]	@ (8000ce0 <MBUS_FillReceivedBuffer+0x18>)
 8000cd2:	601a      	str	r2, [r3, #0]
}
 8000cd4:	46c0      	nop			@ (mov r8, r8)
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	46c0      	nop			@ (mov r8, r8)
 8000cdc:	200001b0 	.word	0x200001b0
 8000ce0:	200001b8 	.word	0x200001b8

08000ce4 <MBUS_Reset>:

// INTERNAL: RESET COMMUNICATION
void static MBUS_Reset(void){
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
	//HAL_TIM_Base_Stop_IT(&htim3);

	//HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_1);
    //__HAL_TIM_SET_COUNTER(&htim3, 0);	// RESET TIMEOUT TIMER

    MBUS_FrameBuffer->TXID[0]=0xFF;
 8000ce8:	4b08      	ldr	r3, [pc, #32]	@ (8000d0c <MBUS_Reset+0x28>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	22ff      	movs	r2, #255	@ 0xff
 8000cee:	705a      	strb	r2, [r3, #1]
	HAL_UART_Receive_IT(&huart,MBUS_FrameBuffer->BREAK, sizeof(MBUS_FrameBuffer->BREAK));
 8000cf0:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <MBUS_Reset+0x28>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	0019      	movs	r1, r3
 8000cf6:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <MBUS_Reset+0x2c>)
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f002 fc80 	bl	8003600 <HAL_UART_Receive_IT>
	MBUS_FrameStatus=IDLE;
 8000d00:	4b04      	ldr	r3, [pc, #16]	@ (8000d14 <MBUS_Reset+0x30>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	701a      	strb	r2, [r3, #0]
}
 8000d06:	46c0      	nop			@ (mov r8, r8)
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	200001b0 	.word	0x200001b0
 8000d10:	20000118 	.word	0x20000118
 8000d14:	200001ac 	.word	0x200001ac

08000d18 <MBUS_Init>:

// API: INIT FUNCTION FOR UART AND TIMEOUT TIMER
unsigned MBUS_Init(void) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08a      	sub	sp, #40	@ 0x28
 8000d1c:	af00      	add	r7, sp, #0
	// MBUS UART INIT
	huart.Instance = USART1;
 8000d1e:	4b61      	ldr	r3, [pc, #388]	@ (8000ea4 <MBUS_Init+0x18c>)
 8000d20:	4a61      	ldr	r2, [pc, #388]	@ (8000ea8 <MBUS_Init+0x190>)
 8000d22:	601a      	str	r2, [r3, #0]
	huart.Init.BaudRate = 57600;
 8000d24:	4b5f      	ldr	r3, [pc, #380]	@ (8000ea4 <MBUS_Init+0x18c>)
 8000d26:	22e1      	movs	r2, #225	@ 0xe1
 8000d28:	0212      	lsls	r2, r2, #8
 8000d2a:	605a      	str	r2, [r3, #4]
	huart.Init.WordLength = UART_WORDLENGTH_8B;
 8000d2c:	4b5d      	ldr	r3, [pc, #372]	@ (8000ea4 <MBUS_Init+0x18c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]

	huart.Init.StopBits = UART_STOPBITS_1;
 8000d32:	4b5c      	ldr	r3, [pc, #368]	@ (8000ea4 <MBUS_Init+0x18c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	60da      	str	r2, [r3, #12]
	huart.Init.Parity = UART_PARITY_NONE;
 8000d38:	4b5a      	ldr	r3, [pc, #360]	@ (8000ea4 <MBUS_Init+0x18c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	611a      	str	r2, [r3, #16]
	huart.Init.Mode = UART_MODE_TX_RX;
 8000d3e:	4b59      	ldr	r3, [pc, #356]	@ (8000ea4 <MBUS_Init+0x18c>)
 8000d40:	220c      	movs	r2, #12
 8000d42:	615a      	str	r2, [r3, #20]
	huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d44:	4b57      	ldr	r3, [pc, #348]	@ (8000ea4 <MBUS_Init+0x18c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	619a      	str	r2, [r3, #24]
	huart.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d4a:	4b56      	ldr	r3, [pc, #344]	@ (8000ea4 <MBUS_Init+0x18c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	61da      	str	r2, [r3, #28]
	huart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d50:	4b54      	ldr	r3, [pc, #336]	@ (8000ea4 <MBUS_Init+0x18c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	621a      	str	r2, [r3, #32]
	huart.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d56:	4b53      	ldr	r3, [pc, #332]	@ (8000ea4 <MBUS_Init+0x18c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	625a      	str	r2, [r3, #36]	@ 0x24
	huart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d5c:	4b51      	ldr	r3, [pc, #324]	@ (8000ea4 <MBUS_Init+0x18c>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	629a      	str	r2, [r3, #40]	@ 0x28

	if (HAL_UART_Init(&huart) != HAL_OK) {return 1;}
 8000d62:	4b50      	ldr	r3, [pc, #320]	@ (8000ea4 <MBUS_Init+0x18c>)
 8000d64:	0018      	movs	r0, r3
 8000d66:	f002 fb4d 	bl	8003404 <HAL_UART_Init>
 8000d6a:	1e03      	subs	r3, r0, #0
 8000d6c:	d001      	beq.n	8000d72 <MBUS_Init+0x5a>
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e093      	b.n	8000e9a <MBUS_Init+0x182>
	if (HAL_UARTEx_SetTxFifoThreshold(&huart, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK) {return 2;}
 8000d72:	4b4c      	ldr	r3, [pc, #304]	@ (8000ea4 <MBUS_Init+0x18c>)
 8000d74:	2100      	movs	r1, #0
 8000d76:	0018      	movs	r0, r3
 8000d78:	f004 fbf4 	bl	8005564 <HAL_UARTEx_SetTxFifoThreshold>
 8000d7c:	1e03      	subs	r3, r0, #0
 8000d7e:	d001      	beq.n	8000d84 <MBUS_Init+0x6c>
 8000d80:	2302      	movs	r3, #2
 8000d82:	e08a      	b.n	8000e9a <MBUS_Init+0x182>
	if (HAL_UARTEx_SetRxFifoThreshold(&huart, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK) {return 3;}
 8000d84:	4b47      	ldr	r3, [pc, #284]	@ (8000ea4 <MBUS_Init+0x18c>)
 8000d86:	2100      	movs	r1, #0
 8000d88:	0018      	movs	r0, r3
 8000d8a:	f004 fc2b 	bl	80055e4 <HAL_UARTEx_SetRxFifoThreshold>
 8000d8e:	1e03      	subs	r3, r0, #0
 8000d90:	d001      	beq.n	8000d96 <MBUS_Init+0x7e>
 8000d92:	2303      	movs	r3, #3
 8000d94:	e081      	b.n	8000e9a <MBUS_Init+0x182>
	if (HAL_UARTEx_DisableFifoMode(&huart) != HAL_OK) {return 4;}
 8000d96:	4b43      	ldr	r3, [pc, #268]	@ (8000ea4 <MBUS_Init+0x18c>)
 8000d98:	0018      	movs	r0, r3
 8000d9a:	f004 fba9 	bl	80054f0 <HAL_UARTEx_DisableFifoMode>
 8000d9e:	1e03      	subs	r3, r0, #0
 8000da0:	d001      	beq.n	8000da6 <MBUS_Init+0x8e>
 8000da2:	2304      	movs	r3, #4
 8000da4:	e079      	b.n	8000e9a <MBUS_Init+0x182>

	MBUS_FrameBuffer=calloc(1,sizeof(struct FrameBuffer));
 8000da6:	2128      	movs	r1, #40	@ 0x28
 8000da8:	2001      	movs	r0, #1
 8000daa:	f004 fcbb 	bl	8005724 <calloc>
 8000dae:	0003      	movs	r3, r0
 8000db0:	001a      	movs	r2, r3
 8000db2:	4b3e      	ldr	r3, [pc, #248]	@ (8000eac <MBUS_Init+0x194>)
 8000db4:	601a      	str	r2, [r3, #0]
	MBUS_FrameBuffer_ToTransmit=calloc(1,sizeof(struct FrameBuffer));
 8000db6:	2128      	movs	r1, #40	@ 0x28
 8000db8:	2001      	movs	r0, #1
 8000dba:	f004 fcb3 	bl	8005724 <calloc>
 8000dbe:	0003      	movs	r3, r0
 8000dc0:	001a      	movs	r2, r3
 8000dc2:	4b3b      	ldr	r3, [pc, #236]	@ (8000eb0 <MBUS_Init+0x198>)
 8000dc4:	601a      	str	r2, [r3, #0]
	MBUS_FrameBuffer_Received=calloc(1,sizeof(struct FrameBuffer));
 8000dc6:	2128      	movs	r1, #40	@ 0x28
 8000dc8:	2001      	movs	r0, #1
 8000dca:	f004 fcab 	bl	8005724 <calloc>
 8000dce:	0003      	movs	r3, r0
 8000dd0:	001a      	movs	r2, r3
 8000dd2:	4b38      	ldr	r3, [pc, #224]	@ (8000eb4 <MBUS_Init+0x19c>)
 8000dd4:	601a      	str	r2, [r3, #0]
	if (!MBUS_FrameBuffer || !MBUS_FrameBuffer_ToTransmit || !MBUS_FrameBuffer_Received) {return 5;}
 8000dd6:	4b35      	ldr	r3, [pc, #212]	@ (8000eac <MBUS_Init+0x194>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d007      	beq.n	8000dee <MBUS_Init+0xd6>
 8000dde:	4b34      	ldr	r3, [pc, #208]	@ (8000eb0 <MBUS_Init+0x198>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d003      	beq.n	8000dee <MBUS_Init+0xd6>
 8000de6:	4b33      	ldr	r3, [pc, #204]	@ (8000eb4 <MBUS_Init+0x19c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d101      	bne.n	8000df2 <MBUS_Init+0xda>
 8000dee:	2305      	movs	r3, #5
 8000df0:	e053      	b.n	8000e9a <MBUS_Init+0x182>


	// MBUS TIMEOUT INIT
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df2:	231c      	movs	r3, #28
 8000df4:	18fb      	adds	r3, r7, r3
 8000df6:	0018      	movs	r0, r3
 8000df8:	230c      	movs	r3, #12
 8000dfa:	001a      	movs	r2, r3
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	f004 fd8f 	bl	8005920 <memset>
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000e02:	003b      	movs	r3, r7
 8000e04:	0018      	movs	r0, r3
 8000e06:	231c      	movs	r3, #28
 8000e08:	001a      	movs	r2, r3
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	f004 fd88 	bl	8005920 <memset>

	htim3.Instance = TIM3;
 8000e10:	4b29      	ldr	r3, [pc, #164]	@ (8000eb8 <MBUS_Init+0x1a0>)
 8000e12:	4a2a      	ldr	r2, [pc, #168]	@ (8000ebc <MBUS_Init+0x1a4>)
 8000e14:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 4;
 8000e16:	4b28      	ldr	r3, [pc, #160]	@ (8000eb8 <MBUS_Init+0x1a0>)
 8000e18:	2204      	movs	r2, #4
 8000e1a:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e1c:	4b26      	ldr	r3, [pc, #152]	@ (8000eb8 <MBUS_Init+0x1a0>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8000e22:	4b25      	ldr	r3, [pc, #148]	@ (8000eb8 <MBUS_Init+0x1a0>)
 8000e24:	4a26      	ldr	r2, [pc, #152]	@ (8000ec0 <MBUS_Init+0x1a8>)
 8000e26:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000e28:	4b23      	ldr	r3, [pc, #140]	@ (8000eb8 <MBUS_Init+0x1a0>)
 8000e2a:	2280      	movs	r2, #128	@ 0x80
 8000e2c:	0092      	lsls	r2, r2, #2
 8000e2e:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e30:	4b21      	ldr	r3, [pc, #132]	@ (8000eb8 <MBUS_Init+0x1a0>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_OC_Init(&htim3) != HAL_OK){return 6;}
 8000e36:	4b20      	ldr	r3, [pc, #128]	@ (8000eb8 <MBUS_Init+0x1a0>)
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f001 fc05 	bl	8002648 <HAL_TIM_OC_Init>
 8000e3e:	1e03      	subs	r3, r0, #0
 8000e40:	d001      	beq.n	8000e46 <MBUS_Init+0x12e>
 8000e42:	2306      	movs	r3, #6
 8000e44:	e029      	b.n	8000e9a <MBUS_Init+0x182>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e46:	211c      	movs	r1, #28
 8000e48:	187b      	adds	r3, r7, r1
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e4e:	187b      	adds	r3, r7, r1
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK){return 7;}
 8000e54:	187a      	adds	r2, r7, r1
 8000e56:	4b18      	ldr	r3, [pc, #96]	@ (8000eb8 <MBUS_Init+0x1a0>)
 8000e58:	0011      	movs	r1, r2
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	f002 fa58 	bl	8003310 <HAL_TIMEx_MasterConfigSynchronization>
 8000e60:	1e03      	subs	r3, r0, #0
 8000e62:	d001      	beq.n	8000e68 <MBUS_Init+0x150>
 8000e64:	2307      	movs	r3, #7
 8000e66:	e018      	b.n	8000e9a <MBUS_Init+0x182>
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000e68:	003b      	movs	r3, r7
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 8000e6e:	003b      	movs	r3, r7
 8000e70:	2200      	movs	r2, #0
 8000e72:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e74:	003b      	movs	r3, r7
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e7a:	003b      	movs	r3, r7
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	611a      	str	r2, [r3, #16]
	if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK){return 8;}
 8000e80:	0039      	movs	r1, r7
 8000e82:	4b0d      	ldr	r3, [pc, #52]	@ (8000eb8 <MBUS_Init+0x1a0>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	0018      	movs	r0, r3
 8000e88:	f001 fe5c 	bl	8002b44 <HAL_TIM_OC_ConfigChannel>
 8000e8c:	1e03      	subs	r3, r0, #0
 8000e8e:	d001      	beq.n	8000e94 <MBUS_Init+0x17c>
 8000e90:	2308      	movs	r3, #8
 8000e92:	e002      	b.n	8000e9a <MBUS_Init+0x182>
	//HAL_TIM_Base_Start_IT(&htim3);
	//HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);

	// START COMMUNICATIOn
	MBUS_Reset();
 8000e94:	f7ff ff26 	bl	8000ce4 <MBUS_Reset>
	return 0;
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	b00a      	add	sp, #40	@ 0x28
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	46c0      	nop			@ (mov r8, r8)
 8000ea4:	20000118 	.word	0x20000118
 8000ea8:	40013800 	.word	0x40013800
 8000eac:	200001b0 	.word	0x200001b0
 8000eb0:	200001b4 	.word	0x200001b4
 8000eb4:	200001b8 	.word	0x200001b8
 8000eb8:	200000cc 	.word	0x200000cc
 8000ebc:	40000400 	.word	0x40000400
 8000ec0:	0000ffff 	.word	0x0000ffff

08000ec4 <HAL_UART_ErrorCallback>:

// INTERNAL: BREAK EVENT
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
	if (HAL_UART_ERROR_FE) {	//huart->ErrorCode &
		__HAL_UART_CLEAR_FEFLAG(huart);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2202      	movs	r2, #2
 8000ed2:	621a      	str	r2, [r3, #32]
    	//HAL_TIM_Base_Start_IT(&htim3);

		HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000ed4:	4b09      	ldr	r3, [pc, #36]	@ (8000efc <HAL_UART_ErrorCallback+0x38>)
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f001 fc0d 	bl	80026f8 <HAL_TIM_OC_Start_IT>

    	HAL_UART_Receive_IT(huart,MBUS_FrameBuffer->TXID, sizeof(MBUS_FrameBuffer->TXID));
 8000ede:	4b08      	ldr	r3, [pc, #32]	@ (8000f00 <HAL_UART_ErrorCallback+0x3c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	1c59      	adds	r1, r3, #1
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	0018      	movs	r0, r3
 8000eea:	f002 fb89 	bl	8003600 <HAL_UART_Receive_IT>
    	MBUS_FrameStatus=TXID;
 8000eee:	4b05      	ldr	r3, [pc, #20]	@ (8000f04 <HAL_UART_ErrorCallback+0x40>)
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	701a      	strb	r2, [r3, #0]
    }
}
 8000ef4:	46c0      	nop			@ (mov r8, r8)
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	b002      	add	sp, #8
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	200000cc 	.word	0x200000cc
 8000f00:	200001b0 	.word	0x200001b0
 8000f04:	200001ac 	.word	0x200001ac

08000f08 <HAL_UART_TxCpltCallback>:

// INTERNAL: INTERRUPT - UART FINISHED TRANSMITTING
 void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1){
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a35      	ldr	r2, [pc, #212]	@ (8000fec <HAL_UART_TxCpltCallback+0xe4>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d164      	bne.n	8000fe4 <HAL_UART_TxCpltCallback+0xdc>
    	switch (MBUS_FrameStatus) {
 8000f1a:	4b35      	ldr	r3, [pc, #212]	@ (8000ff0 <HAL_UART_TxCpltCallback+0xe8>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b07      	cmp	r3, #7
 8000f20:	d85d      	bhi.n	8000fde <HAL_UART_TxCpltCallback+0xd6>
 8000f22:	009a      	lsls	r2, r3, #2
 8000f24:	4b33      	ldr	r3, [pc, #204]	@ (8000ff4 <HAL_UART_TxCpltCallback+0xec>)
 8000f26:	18d3      	adds	r3, r2, r3
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	469f      	mov	pc, r3
    	    case IDLE:
    	    	MBUS_Reset();
 8000f2c:	f7ff feda 	bl	8000ce4 <MBUS_Reset>
    	        break;
 8000f30:	e058      	b.n	8000fe4 <HAL_UART_TxCpltCallback+0xdc>

    	    case TXID:
    	    	// FAULT:
    	    	MBUS_Reset();
 8000f32:	f7ff fed7 	bl	8000ce4 <MBUS_Reset>
    	    	break;
 8000f36:	e055      	b.n	8000fe4 <HAL_UART_TxCpltCallback+0xdc>

    	    case RXID:
    	    	// MASTER:
        		HAL_UART_Transmit_IT(huart,MBUS_FrameBuffer->CHID, sizeof(MBUS_FrameBuffer->CHID));
 8000f38:	4b2f      	ldr	r3, [pc, #188]	@ (8000ff8 <HAL_UART_TxCpltCallback+0xf0>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	1cd9      	adds	r1, r3, #3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2201      	movs	r2, #1
 8000f42:	0018      	movs	r0, r3
 8000f44:	f002 fab4 	bl	80034b0 <HAL_UART_Transmit_IT>
	        	MBUS_FrameStatus=CHID;
 8000f48:	4b29      	ldr	r3, [pc, #164]	@ (8000ff0 <HAL_UART_TxCpltCallback+0xe8>)
 8000f4a:	2203      	movs	r2, #3
 8000f4c:	701a      	strb	r2, [r3, #0]
        		break;
 8000f4e:	e049      	b.n	8000fe4 <HAL_UART_TxCpltCallback+0xdc>

    	    case CHID:
    	        // MASTER:
        		HAL_UART_Transmit_IT(huart,MBUS_FrameBuffer->PS, sizeof(MBUS_FrameBuffer->PS));
 8000f50:	4b29      	ldr	r3, [pc, #164]	@ (8000ff8 <HAL_UART_TxCpltCallback+0xf0>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	1d19      	adds	r1, r3, #4
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2201      	movs	r2, #1
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	f002 faa8 	bl	80034b0 <HAL_UART_Transmit_IT>
	        	MBUS_FrameStatus=PS;
 8000f60:	4b23      	ldr	r3, [pc, #140]	@ (8000ff0 <HAL_UART_TxCpltCallback+0xe8>)
 8000f62:	2204      	movs	r2, #4
 8000f64:	701a      	strb	r2, [r3, #0]
        		break;
 8000f66:	e03d      	b.n	8000fe4 <HAL_UART_TxCpltCallback+0xdc>

    	    case PS:
    	    	// MASTER:
    	    	HAL_UART_Transmit_IT(huart,MBUS_FrameBuffer->Payload,MBUS_FrameBuffer->PS[0]);	// odesilam pocet Bytu, co jsem nastavil v PS
 8000f68:	4b23      	ldr	r3, [pc, #140]	@ (8000ff8 <HAL_UART_TxCpltCallback+0xf0>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	1d59      	adds	r1, r3, #5
 8000f6e:	4b22      	ldr	r3, [pc, #136]	@ (8000ff8 <HAL_UART_TxCpltCallback+0xf0>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	791b      	ldrb	r3, [r3, #4]
 8000f74:	001a      	movs	r2, r3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	0018      	movs	r0, r3
 8000f7a:	f002 fa99 	bl	80034b0 <HAL_UART_Transmit_IT>
	        	MBUS_FrameStatus=Payload;
 8000f7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ff0 <HAL_UART_TxCpltCallback+0xe8>)
 8000f80:	2205      	movs	r2, #5
 8000f82:	701a      	strb	r2, [r3, #0]
    	        break;
 8000f84:	e02e      	b.n	8000fe4 <HAL_UART_TxCpltCallback+0xdc>

    	    case Payload:
    	    	// MASTER:
    	    	HAL_UART_Transmit_IT(huart,MBUS_FrameBuffer->FCS, sizeof(MBUS_FrameBuffer->FCS));	// odvysilani Checksum po celem Frame
 8000f86:	4b1c      	ldr	r3, [pc, #112]	@ (8000ff8 <HAL_UART_TxCpltCallback+0xf0>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	3325      	adds	r3, #37	@ 0x25
 8000f8c:	0019      	movs	r1, r3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2202      	movs	r2, #2
 8000f92:	0018      	movs	r0, r3
 8000f94:	f002 fa8c 	bl	80034b0 <HAL_UART_Transmit_IT>
	        	MBUS_FrameStatus=FCS;
 8000f98:	4b15      	ldr	r3, [pc, #84]	@ (8000ff0 <HAL_UART_TxCpltCallback+0xe8>)
 8000f9a:	2206      	movs	r2, #6
 8000f9c:	701a      	strb	r2, [r3, #0]
        		break;
 8000f9e:	e021      	b.n	8000fe4 <HAL_UART_TxCpltCallback+0xdc>

    	    case FCS:
    	    	// MASTER:
    	    	if(myID==MBUS_FrameBuffer->TXID[0] && MBUS_FrameBuffer->RXID[0]!=broadcastID){	// po odvysilani celeho Frame ocekavam ACK, pokud to neni broadcast
 8000fa0:	4b15      	ldr	r3, [pc, #84]	@ (8000ff8 <HAL_UART_TxCpltCallback+0xf0>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	785b      	ldrb	r3, [r3, #1]
 8000fa6:	220a      	movs	r2, #10
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d112      	bne.n	8000fd2 <HAL_UART_TxCpltCallback+0xca>
 8000fac:	4b12      	ldr	r3, [pc, #72]	@ (8000ff8 <HAL_UART_TxCpltCallback+0xf0>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	789b      	ldrb	r3, [r3, #2]
 8000fb2:	220f      	movs	r2, #15
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d00c      	beq.n	8000fd2 <HAL_UART_TxCpltCallback+0xca>
    	        	HAL_UART_Receive_IT(huart,MBUS_FrameBuffer->ACK, sizeof(MBUS_FrameBuffer->ACK));
 8000fb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff8 <HAL_UART_TxCpltCallback+0xf0>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	3327      	adds	r3, #39	@ 0x27
 8000fbe:	0019      	movs	r1, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	f002 fb1b 	bl	8003600 <HAL_UART_Receive_IT>
    	        	MBUS_FrameStatus=ACK;
 8000fca:	4b09      	ldr	r3, [pc, #36]	@ (8000ff0 <HAL_UART_TxCpltCallback+0xe8>)
 8000fcc:	2207      	movs	r2, #7
 8000fce:	701a      	strb	r2, [r3, #0]
    	    	}
    	    	else{	// FAULT OR RXID IS BROADCAST
    	    		MBUS_Reset();
    	    	}
    	        break;
 8000fd0:	e008      	b.n	8000fe4 <HAL_UART_TxCpltCallback+0xdc>
    	    		MBUS_Reset();
 8000fd2:	f7ff fe87 	bl	8000ce4 <MBUS_Reset>
    	        break;
 8000fd6:	e005      	b.n	8000fe4 <HAL_UART_TxCpltCallback+0xdc>

    	    case ACK:
    	    	// SLAVE:
    	    	MBUS_Reset();
 8000fd8:	f7ff fe84 	bl	8000ce4 <MBUS_Reset>
    	        break;
 8000fdc:	e002      	b.n	8000fe4 <HAL_UART_TxCpltCallback+0xdc>

    	    default:
    	    	MBUS_Reset();
 8000fde:	f7ff fe81 	bl	8000ce4 <MBUS_Reset>
    	    	break;
 8000fe2:	46c0      	nop			@ (mov r8, r8)
    	}

    }
}
 8000fe4:	46c0      	nop			@ (mov r8, r8)
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	b002      	add	sp, #8
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40013800 	.word	0x40013800
 8000ff0:	200001ac 	.word	0x200001ac
 8000ff4:	08005cec 	.word	0x08005cec
 8000ff8:	200001b0 	.word	0x200001b0

08000ffc <HAL_UART_RxCpltCallback>:

// INTERNAL: INTERRUPT - UART FINISHED RECEIVING
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1){
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a67      	ldr	r2, [pc, #412]	@ (80011a8 <HAL_UART_RxCpltCallback+0x1ac>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d000      	beq.n	8001010 <HAL_UART_RxCpltCallback+0x14>
 800100e:	e0c6      	b.n	800119e <HAL_UART_RxCpltCallback+0x1a2>
		switch (MBUS_FrameStatus) {
 8001010:	4b66      	ldr	r3, [pc, #408]	@ (80011ac <HAL_UART_RxCpltCallback+0x1b0>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b07      	cmp	r3, #7
 8001016:	d900      	bls.n	800101a <HAL_UART_RxCpltCallback+0x1e>
 8001018:	e0bd      	b.n	8001196 <HAL_UART_RxCpltCallback+0x19a>
 800101a:	009a      	lsls	r2, r3, #2
 800101c:	4b64      	ldr	r3, [pc, #400]	@ (80011b0 <HAL_UART_RxCpltCallback+0x1b4>)
 800101e:	18d3      	adds	r3, r2, r3
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	469f      	mov	pc, r3
		    	//MBUS_Reset();
				break;

		    case TXID:
		    	// MASTER:
		        if(MBUS_FrameBuffer->TXID[0]==myID){
 8001024:	4b63      	ldr	r3, [pc, #396]	@ (80011b4 <HAL_UART_RxCpltCallback+0x1b8>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	785b      	ldrb	r3, [r3, #1]
 800102a:	220a      	movs	r2, #10
 800102c:	4293      	cmp	r3, r2
 800102e:	d10d      	bne.n	800104c <HAL_UART_RxCpltCallback+0x50>
		        	MBUS_FillTransmitBuffer();
 8001030:	f7ff fe3c 	bl	8000cac <MBUS_FillTransmitBuffer>
	        		HAL_UART_Transmit_IT(huart,MBUS_FrameBuffer->RXID, sizeof(MBUS_FrameBuffer->RXID));
 8001034:	4b5f      	ldr	r3, [pc, #380]	@ (80011b4 <HAL_UART_RxCpltCallback+0x1b8>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	1c99      	adds	r1, r3, #2
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2201      	movs	r2, #1
 800103e:	0018      	movs	r0, r3
 8001040:	f002 fa36 	bl	80034b0 <HAL_UART_Transmit_IT>
		        	MBUS_FrameStatus=RXID;
 8001044:	4b59      	ldr	r3, [pc, #356]	@ (80011ac <HAL_UART_RxCpltCallback+0x1b0>)
 8001046:	2202      	movs	r2, #2
 8001048:	701a      	strb	r2, [r3, #0]
		        }
		        // RESET:
		        else{	// SYNCbyte nebo nevalidni ID -> jdu cekat na novy zacatek
		        	MBUS_Reset();
		        }
		        break;
 800104a:	e0a8      	b.n	800119e <HAL_UART_RxCpltCallback+0x1a2>
		        else if (MBUS_FrameBuffer->TXID[0]>=0x00 && MBUS_FrameBuffer->TXID[0]<=0x0E){	//nevysilam, ale dal posloucham, jestli nejake zpravy nebudou pro me
 800104c:	4b59      	ldr	r3, [pc, #356]	@ (80011b4 <HAL_UART_RxCpltCallback+0x1b8>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	785b      	ldrb	r3, [r3, #1]
 8001052:	2b0e      	cmp	r3, #14
 8001054:	d80b      	bhi.n	800106e <HAL_UART_RxCpltCallback+0x72>
		        	HAL_UART_Receive_IT(huart,MBUS_FrameBuffer->RXID, sizeof(MBUS_FrameBuffer->RXID));
 8001056:	4b57      	ldr	r3, [pc, #348]	@ (80011b4 <HAL_UART_RxCpltCallback+0x1b8>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	1c99      	adds	r1, r3, #2
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2201      	movs	r2, #1
 8001060:	0018      	movs	r0, r3
 8001062:	f002 facd 	bl	8003600 <HAL_UART_Receive_IT>
			        MBUS_FrameStatus=RXID;
 8001066:	4b51      	ldr	r3, [pc, #324]	@ (80011ac <HAL_UART_RxCpltCallback+0x1b0>)
 8001068:	2202      	movs	r2, #2
 800106a:	701a      	strb	r2, [r3, #0]
		        break;
 800106c:	e097      	b.n	800119e <HAL_UART_RxCpltCallback+0x1a2>
		        	MBUS_Reset();
 800106e:	f7ff fe39 	bl	8000ce4 <MBUS_Reset>
		        break;
 8001072:	e094      	b.n	800119e <HAL_UART_RxCpltCallback+0x1a2>

		    case RXID:
		    	// SLAVE:
		        if(myID==MBUS_FrameBuffer->RXID[0] || broadcastID ==MBUS_FrameBuffer->RXID[0]){	// ID je moje nebo broadcast, budu prijimat Frame
 8001074:	4b4f      	ldr	r3, [pc, #316]	@ (80011b4 <HAL_UART_RxCpltCallback+0x1b8>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	789b      	ldrb	r3, [r3, #2]
 800107a:	220a      	movs	r2, #10
 800107c:	4293      	cmp	r3, r2
 800107e:	d005      	beq.n	800108c <HAL_UART_RxCpltCallback+0x90>
 8001080:	4b4c      	ldr	r3, [pc, #304]	@ (80011b4 <HAL_UART_RxCpltCallback+0x1b8>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	789b      	ldrb	r3, [r3, #2]
 8001086:	220f      	movs	r2, #15
 8001088:	4293      	cmp	r3, r2
 800108a:	d10b      	bne.n	80010a4 <HAL_UART_RxCpltCallback+0xa8>
		        	HAL_UART_Receive_IT(huart,MBUS_FrameBuffer->CHID, sizeof(MBUS_FrameBuffer->CHID));
 800108c:	4b49      	ldr	r3, [pc, #292]	@ (80011b4 <HAL_UART_RxCpltCallback+0x1b8>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	1cd9      	adds	r1, r3, #3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2201      	movs	r2, #1
 8001096:	0018      	movs	r0, r3
 8001098:	f002 fab2 	bl	8003600 <HAL_UART_Receive_IT>
		        	MBUS_FrameStatus=CHID;
 800109c:	4b43      	ldr	r3, [pc, #268]	@ (80011ac <HAL_UART_RxCpltCallback+0x1b0>)
 800109e:	2203      	movs	r2, #3
 80010a0:	701a      	strb	r2, [r3, #0]
		        }
		        else{	// zpravy nejsou pro me, jdu cekat na novy zacatek
		        	MBUS_Reset();
		        }
		        break;
 80010a2:	e07c      	b.n	800119e <HAL_UART_RxCpltCallback+0x1a2>
		        	MBUS_Reset();
 80010a4:	f7ff fe1e 	bl	8000ce4 <MBUS_Reset>
		        break;
 80010a8:	e079      	b.n	800119e <HAL_UART_RxCpltCallback+0x1a2>

		    case CHID:
		    	// SLAVE:
	        	HAL_UART_Receive_IT(huart,MBUS_FrameBuffer->PS, sizeof(MBUS_FrameBuffer->PS));
 80010aa:	4b42      	ldr	r3, [pc, #264]	@ (80011b4 <HAL_UART_RxCpltCallback+0x1b8>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	1d19      	adds	r1, r3, #4
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2201      	movs	r2, #1
 80010b4:	0018      	movs	r0, r3
 80010b6:	f002 faa3 	bl	8003600 <HAL_UART_Receive_IT>
	        	MBUS_FrameStatus=PS;
 80010ba:	4b3c      	ldr	r3, [pc, #240]	@ (80011ac <HAL_UART_RxCpltCallback+0x1b0>)
 80010bc:	2204      	movs	r2, #4
 80010be:	701a      	strb	r2, [r3, #0]
		        break;
 80010c0:	e06d      	b.n	800119e <HAL_UART_RxCpltCallback+0x1a2>

		    case PS:
		    	// SLAVE:
	        	HAL_UART_Receive_IT(huart,MBUS_FrameBuffer->Payload,MBUS_FrameBuffer->PS[0]);
 80010c2:	4b3c      	ldr	r3, [pc, #240]	@ (80011b4 <HAL_UART_RxCpltCallback+0x1b8>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	1d59      	adds	r1, r3, #5
 80010c8:	4b3a      	ldr	r3, [pc, #232]	@ (80011b4 <HAL_UART_RxCpltCallback+0x1b8>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	791b      	ldrb	r3, [r3, #4]
 80010ce:	001a      	movs	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	0018      	movs	r0, r3
 80010d4:	f002 fa94 	bl	8003600 <HAL_UART_Receive_IT>
	        	MBUS_FrameStatus=Payload;
 80010d8:	4b34      	ldr	r3, [pc, #208]	@ (80011ac <HAL_UART_RxCpltCallback+0x1b0>)
 80010da:	2205      	movs	r2, #5
 80010dc:	701a      	strb	r2, [r3, #0]
		        break;
 80010de:	e05e      	b.n	800119e <HAL_UART_RxCpltCallback+0x1a2>

		    case Payload:
		    	// SLAVE:
	        	HAL_UART_Receive_IT(huart,MBUS_FrameBuffer->FCS,sizeof(MBUS_FrameBuffer->FCS));
 80010e0:	4b34      	ldr	r3, [pc, #208]	@ (80011b4 <HAL_UART_RxCpltCallback+0x1b8>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	3325      	adds	r3, #37	@ 0x25
 80010e6:	0019      	movs	r1, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2202      	movs	r2, #2
 80010ec:	0018      	movs	r0, r3
 80010ee:	f002 fa87 	bl	8003600 <HAL_UART_Receive_IT>
	    		CalculateFCS(FCS_calc_buffer,MBUS_FrameBuffer);
 80010f2:	4b30      	ldr	r3, [pc, #192]	@ (80011b4 <HAL_UART_RxCpltCallback+0x1b8>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	4b30      	ldr	r3, [pc, #192]	@ (80011b8 <HAL_UART_RxCpltCallback+0x1bc>)
 80010f8:	0011      	movs	r1, r2
 80010fa:	0018      	movs	r0, r3
 80010fc:	f7ff fd24 	bl	8000b48 <CalculateFCS>
	        	MBUS_FrameStatus=FCS;
 8001100:	4b2a      	ldr	r3, [pc, #168]	@ (80011ac <HAL_UART_RxCpltCallback+0x1b0>)
 8001102:	2206      	movs	r2, #6
 8001104:	701a      	strb	r2, [r3, #0]
	    		break;
 8001106:	e04a      	b.n	800119e <HAL_UART_RxCpltCallback+0x1a2>

		    case FCS:
		    	// MASTER:
		    	if(myID==MBUS_FrameBuffer->TXID[0]){
 8001108:	4b2a      	ldr	r3, [pc, #168]	@ (80011b4 <HAL_UART_RxCpltCallback+0x1b8>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	785b      	ldrb	r3, [r3, #1]
 800110e:	220a      	movs	r2, #10
 8001110:	4293      	cmp	r3, r2
 8001112:	d109      	bne.n	8001128 <HAL_UART_RxCpltCallback+0x12c>
		    		HAL_UART_Receive_IT(huart,MBUS_FrameBuffer->ACK, sizeof(MBUS_FrameBuffer->ACK));
 8001114:	4b27      	ldr	r3, [pc, #156]	@ (80011b4 <HAL_UART_RxCpltCallback+0x1b8>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	3327      	adds	r3, #39	@ 0x27
 800111a:	0019      	movs	r1, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2201      	movs	r2, #1
 8001120:	0018      	movs	r0, r3
 8001122:	f002 fa6d 	bl	8003600 <HAL_UART_Receive_IT>
 8001126:	e020      	b.n	800116a <HAL_UART_RxCpltCallback+0x16e>
		    	}
		    	// SLAVE:
		    	else{
		    		if(MBUS_FrameBuffer->FCS[0]==FCS_calc_buffer[0] && MBUS_FrameBuffer->FCS[1]==FCS_calc_buffer[1]){	//srovnej checksum
 8001128:	4b22      	ldr	r3, [pc, #136]	@ (80011b4 <HAL_UART_RxCpltCallback+0x1b8>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2225      	movs	r2, #37	@ 0x25
 800112e:	5c9a      	ldrb	r2, [r3, r2]
 8001130:	4b21      	ldr	r3, [pc, #132]	@ (80011b8 <HAL_UART_RxCpltCallback+0x1bc>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	429a      	cmp	r2, r3
 8001136:	d118      	bne.n	800116a <HAL_UART_RxCpltCallback+0x16e>
 8001138:	4b1e      	ldr	r3, [pc, #120]	@ (80011b4 <HAL_UART_RxCpltCallback+0x1b8>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2226      	movs	r2, #38	@ 0x26
 800113e:	5c9a      	ldrb	r2, [r3, r2]
 8001140:	4b1d      	ldr	r3, [pc, #116]	@ (80011b8 <HAL_UART_RxCpltCallback+0x1bc>)
 8001142:	785b      	ldrb	r3, [r3, #1]
 8001144:	429a      	cmp	r2, r3
 8001146:	d110      	bne.n	800116a <HAL_UART_RxCpltCallback+0x16e>
		    			if(MBUS_FrameBuffer->RXID[0]==broadcastID){	// na broadcast nedavam ACK
 8001148:	4b1a      	ldr	r3, [pc, #104]	@ (80011b4 <HAL_UART_RxCpltCallback+0x1b8>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	789b      	ldrb	r3, [r3, #2]
 800114e:	220f      	movs	r2, #15
 8001150:	4293      	cmp	r3, r2
 8001152:	d104      	bne.n	800115e <HAL_UART_RxCpltCallback+0x162>
		    				MBUS_FillReceivedBuffer();
 8001154:	f7ff fdb8 	bl	8000cc8 <MBUS_FillReceivedBuffer>
		    				MBUS_Reset();
 8001158:	f7ff fdc4 	bl	8000ce4 <MBUS_Reset>
		    	        	break;
 800115c:	e01f      	b.n	800119e <HAL_UART_RxCpltCallback+0x1a2>
		    			}
		    			else{HAL_UART_Transmit_IT(huart, &ACKbyte, sizeof(ACKbyte));}	// ACk na prijate zpravy
 800115e:	4917      	ldr	r1, [pc, #92]	@ (80011bc <HAL_UART_RxCpltCallback+0x1c0>)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2201      	movs	r2, #1
 8001164:	0018      	movs	r0, r3
 8001166:	f002 f9a3 	bl	80034b0 <HAL_UART_Transmit_IT>
		    		}
		    	}
	        	MBUS_FrameStatus=ACK;
 800116a:	4b10      	ldr	r3, [pc, #64]	@ (80011ac <HAL_UART_RxCpltCallback+0x1b0>)
 800116c:	2207      	movs	r2, #7
 800116e:	701a      	strb	r2, [r3, #0]
		        break;
 8001170:	e015      	b.n	800119e <HAL_UART_RxCpltCallback+0x1a2>

		    case ACK:
		    	// MASTER:
		    	if(myID==MBUS_FrameBuffer->TXID[0]){
 8001172:	4b10      	ldr	r3, [pc, #64]	@ (80011b4 <HAL_UART_RxCpltCallback+0x1b8>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	785b      	ldrb	r3, [r3, #1]
 8001178:	220a      	movs	r2, #10
 800117a:	4293      	cmp	r3, r2
 800117c:	d108      	bne.n	8001190 <HAL_UART_RxCpltCallback+0x194>
		    		if(MBUS_FrameBuffer->ACK[0]==ACKbyte){	// && broadcastID!=*RXID_buffer -> uz jsem overisl drive
 800117e:	4b0d      	ldr	r3, [pc, #52]	@ (80011b4 <HAL_UART_RxCpltCallback+0x1b8>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2227      	movs	r2, #39	@ 0x27
 8001184:	5c9b      	ldrb	r3, [r3, r2]
 8001186:	22a5      	movs	r2, #165	@ 0xa5
 8001188:	4293      	cmp	r3, r2
 800118a:	d101      	bne.n	8001190 <HAL_UART_RxCpltCallback+0x194>
		    			MBUS_FillReceivedBuffer();	//CORRECT FRAME
 800118c:	f7ff fd9c 	bl	8000cc8 <MBUS_FillReceivedBuffer>
		    		}
		    		else{
		    			//COM_ERR - nedostal jsem ACk na moje vysilani -> budu muset opakovat (pokud me vyzve arbitr)
		    		}
		    	}
		    	MBUS_Reset();
 8001190:	f7ff fda8 	bl	8000ce4 <MBUS_Reset>
    	    	break;
 8001194:	e003      	b.n	800119e <HAL_UART_RxCpltCallback+0x1a2>

		    default:
		    	MBUS_Reset();
 8001196:	f7ff fda5 	bl	8000ce4 <MBUS_Reset>
		    	break;
 800119a:	e000      	b.n	800119e <HAL_UART_RxCpltCallback+0x1a2>
				break;
 800119c:	46c0      	nop			@ (mov r8, r8)
		    }
	}
}
 800119e:	46c0      	nop			@ (mov r8, r8)
 80011a0:	46bd      	mov	sp, r7
 80011a2:	b002      	add	sp, #8
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	46c0      	nop			@ (mov r8, r8)
 80011a8:	40013800 	.word	0x40013800
 80011ac:	200001ac 	.word	0x200001ac
 80011b0:	08005d0c 	.word	0x08005d0c
 80011b4:	200001b0 	.word	0x200001b0
 80011b8:	200001bc 	.word	0x200001bc
 80011bc:	08005ce8 	.word	0x08005ce8

080011c0 <HAL_TIM_IC_CaptureCallback>:
static float frequency = 0;
static float rpm=0;
static volatile bool flag=0;
static uint32_t ticks=0;
static unsigned int overflows=0;
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	7f1b      	ldrb	r3, [r3, #28]
 80011cc:	2b08      	cmp	r3, #8
 80011ce:	d14e      	bne.n	800126e <HAL_TIM_IC_CaptureCallback+0xae>
  __ASM volatile ("cpsid i" : : : "memory");
 80011d0:	b672      	cpsid	i
}
 80011d2:	46c0      	nop			@ (mov r8, r8)
    	__disable_irq();
        captureValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	210c      	movs	r1, #12
 80011d8:	0018      	movs	r0, r3
 80011da:	f001 fd13 	bl	8002c04 <HAL_TIM_ReadCapturedValue>
 80011de:	0003      	movs	r3, r0
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	4b25      	ldr	r3, [pc, #148]	@ (8001278 <HAL_TIM_IC_CaptureCallback+0xb8>)
 80011e4:	801a      	strh	r2, [r3, #0]
        //__HAL_TIM_SET_COUNTER(&htim1, 0);
    	//tady tento pristup ma nejmensi chybu, ale nutno osetrit overflow

        if(overflows){
 80011e6:	4b25      	ldr	r3, [pc, #148]	@ (800127c <HAL_TIM_IC_CaptureCallback+0xbc>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d011      	beq.n	8001212 <HAL_TIM_IC_CaptureCallback+0x52>
            ticks=65535*overflows + captureValue - previousCaptureValue;
 80011ee:	4b23      	ldr	r3, [pc, #140]	@ (800127c <HAL_TIM_IC_CaptureCallback+0xbc>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	0013      	movs	r3, r2
 80011f4:	041b      	lsls	r3, r3, #16
 80011f6:	1a9b      	subs	r3, r3, r2
 80011f8:	4a1f      	ldr	r2, [pc, #124]	@ (8001278 <HAL_TIM_IC_CaptureCallback+0xb8>)
 80011fa:	8812      	ldrh	r2, [r2, #0]
 80011fc:	189b      	adds	r3, r3, r2
 80011fe:	4a20      	ldr	r2, [pc, #128]	@ (8001280 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001200:	8812      	ldrh	r2, [r2, #0]
 8001202:	1a9a      	subs	r2, r3, r2
 8001204:	4b1f      	ldr	r3, [pc, #124]	@ (8001284 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8001206:	601a      	str	r2, [r3, #0]
            __NOP();
 8001208:	46c0      	nop			@ (mov r8, r8)
            overflows=0;
 800120a:	4b1c      	ldr	r3, [pc, #112]	@ (800127c <HAL_TIM_IC_CaptureCallback+0xbc>)
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	e009      	b.n	8001226 <HAL_TIM_IC_CaptureCallback+0x66>
        }
        else{
        	ticks=captureValue - previousCaptureValue;
 8001212:	4b19      	ldr	r3, [pc, #100]	@ (8001278 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8001214:	881b      	ldrh	r3, [r3, #0]
 8001216:	001a      	movs	r2, r3
 8001218:	4b19      	ldr	r3, [pc, #100]	@ (8001280 <HAL_TIM_IC_CaptureCallback+0xc0>)
 800121a:	881b      	ldrh	r3, [r3, #0]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	001a      	movs	r2, r3
 8001220:	4b18      	ldr	r3, [pc, #96]	@ (8001284 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8001222:	601a      	str	r2, [r3, #0]
        	__NOP();
 8001224:	46c0      	nop			@ (mov r8, r8)
        }
        frequency = clock / ticks;
 8001226:	4b18      	ldr	r3, [pc, #96]	@ (8001288 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	4b16      	ldr	r3, [pc, #88]	@ (8001284 <HAL_TIM_IC_CaptureCallback+0xc4>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	0019      	movs	r1, r3
 8001230:	0010      	movs	r0, r2
 8001232:	f7fe ff69 	bl	8000108 <__udivsi3>
 8001236:	0003      	movs	r3, r0
 8001238:	0018      	movs	r0, r3
 800123a:	f7ff fb39 	bl	80008b0 <__aeabi_ui2f>
 800123e:	1c02      	adds	r2, r0, #0
 8001240:	4b12      	ldr	r3, [pc, #72]	@ (800128c <HAL_TIM_IC_CaptureCallback+0xcc>)
 8001242:	601a      	str	r2, [r3, #0]
        rpm=(frequency*60)/PULSES;
 8001244:	4b11      	ldr	r3, [pc, #68]	@ (800128c <HAL_TIM_IC_CaptureCallback+0xcc>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4911      	ldr	r1, [pc, #68]	@ (8001290 <HAL_TIM_IC_CaptureCallback+0xd0>)
 800124a:	1c18      	adds	r0, r3, #0
 800124c:	f7ff f9f2 	bl	8000634 <__aeabi_fmul>
 8001250:	1c03      	adds	r3, r0, #0
 8001252:	4910      	ldr	r1, [pc, #64]	@ (8001294 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8001254:	1c18      	adds	r0, r3, #0
 8001256:	f7ff f8cd 	bl	80003f4 <__aeabi_fdiv>
 800125a:	1c03      	adds	r3, r0, #0
 800125c:	1c1a      	adds	r2, r3, #0
 800125e:	4b0e      	ldr	r3, [pc, #56]	@ (8001298 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8001260:	601a      	str	r2, [r3, #0]
        previousCaptureValue = captureValue;
 8001262:	4b05      	ldr	r3, [pc, #20]	@ (8001278 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8001264:	881a      	ldrh	r2, [r3, #0]
 8001266:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001268:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800126a:	b662      	cpsie	i
}
 800126c:	46c0      	nop			@ (mov r8, r8)
        //flag=1;

        __enable_irq();
    }
}
 800126e:	46c0      	nop			@ (mov r8, r8)
 8001270:	46bd      	mov	sp, r7
 8001272:	b002      	add	sp, #8
 8001274:	bd80      	pop	{r7, pc}
 8001276:	46c0      	nop			@ (mov r8, r8)
 8001278:	200001c4 	.word	0x200001c4
 800127c:	200001d4 	.word	0x200001d4
 8001280:	200001c6 	.word	0x200001c6
 8001284:	200001d0 	.word	0x200001d0
 8001288:	200001c0 	.word	0x200001c0
 800128c:	200001c8 	.word	0x200001c8
 8001290:	42700000 	.word	0x42700000
 8001294:	40c00000 	.word	0x40c00000
 8001298:	200001cc 	.word	0x200001cc

0800129c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1){
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a09      	ldr	r2, [pc, #36]	@ (80012d0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d10c      	bne.n	80012c8 <HAL_TIM_PeriodElapsedCallback+0x2c>
		__NOP();
 80012ae:	46c0      	nop			@ (mov r8, r8)
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE)) {overflows++;}
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	2201      	movs	r2, #1
 80012b8:	4013      	ands	r3, r2
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d104      	bne.n	80012c8 <HAL_TIM_PeriodElapsedCallback+0x2c>
 80012be:	4b05      	ldr	r3, [pc, #20]	@ (80012d4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	1c5a      	adds	r2, r3, #1
 80012c4:	4b03      	ldr	r3, [pc, #12]	@ (80012d4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80012c6:	601a      	str	r2, [r3, #0]

	}
}
 80012c8:	46c0      	nop			@ (mov r8, r8)
 80012ca:	46bd      	mov	sp, r7
 80012cc:	b002      	add	sp, #8
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40012c00 	.word	0x40012c00
 80012d4:	200001d4 	.word	0x200001d4

080012d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012de:	4b0f      	ldr	r3, [pc, #60]	@ (800131c <HAL_MspInit+0x44>)
 80012e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012e2:	4b0e      	ldr	r3, [pc, #56]	@ (800131c <HAL_MspInit+0x44>)
 80012e4:	2101      	movs	r1, #1
 80012e6:	430a      	orrs	r2, r1
 80012e8:	641a      	str	r2, [r3, #64]	@ 0x40
 80012ea:	4b0c      	ldr	r3, [pc, #48]	@ (800131c <HAL_MspInit+0x44>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ee:	2201      	movs	r2, #1
 80012f0:	4013      	ands	r3, r2
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f6:	4b09      	ldr	r3, [pc, #36]	@ (800131c <HAL_MspInit+0x44>)
 80012f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012fa:	4b08      	ldr	r3, [pc, #32]	@ (800131c <HAL_MspInit+0x44>)
 80012fc:	2180      	movs	r1, #128	@ 0x80
 80012fe:	0549      	lsls	r1, r1, #21
 8001300:	430a      	orrs	r2, r1
 8001302:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001304:	4b05      	ldr	r3, [pc, #20]	@ (800131c <HAL_MspInit+0x44>)
 8001306:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001308:	2380      	movs	r3, #128	@ 0x80
 800130a:	055b      	lsls	r3, r3, #21
 800130c:	4013      	ands	r3, r2
 800130e:	603b      	str	r3, [r7, #0]
 8001310:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001312:	46c0      	nop			@ (mov r8, r8)
 8001314:	46bd      	mov	sp, r7
 8001316:	b002      	add	sp, #8
 8001318:	bd80      	pop	{r7, pc}
 800131a:	46c0      	nop			@ (mov r8, r8)
 800131c:	40021000 	.word	0x40021000

08001320 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a0d      	ldr	r2, [pc, #52]	@ (8001364 <HAL_TIM_OC_MspInit+0x44>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d113      	bne.n	800135a <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001332:	4b0d      	ldr	r3, [pc, #52]	@ (8001368 <HAL_TIM_OC_MspInit+0x48>)
 8001334:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001336:	4b0c      	ldr	r3, [pc, #48]	@ (8001368 <HAL_TIM_OC_MspInit+0x48>)
 8001338:	2102      	movs	r1, #2
 800133a:	430a      	orrs	r2, r1
 800133c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800133e:	4b0a      	ldr	r3, [pc, #40]	@ (8001368 <HAL_TIM_OC_MspInit+0x48>)
 8001340:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001342:	2202      	movs	r2, #2
 8001344:	4013      	ands	r3, r2
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800134a:	2200      	movs	r2, #0
 800134c:	2100      	movs	r1, #0
 800134e:	2010      	movs	r0, #16
 8001350:	f000 faba 	bl	80018c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001354:	2010      	movs	r0, #16
 8001356:	f000 facc 	bl	80018f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */

  }
}
 800135a:	46c0      	nop			@ (mov r8, r8)
 800135c:	46bd      	mov	sp, r7
 800135e:	b004      	add	sp, #16
 8001360:	bd80      	pop	{r7, pc}
 8001362:	46c0      	nop			@ (mov r8, r8)
 8001364:	40000400 	.word	0x40000400
 8001368:	40021000 	.word	0x40021000

0800136c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800136c:	b590      	push	{r4, r7, lr}
 800136e:	b091      	sub	sp, #68	@ 0x44
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	232c      	movs	r3, #44	@ 0x2c
 8001376:	18fb      	adds	r3, r7, r3
 8001378:	0018      	movs	r0, r3
 800137a:	2314      	movs	r3, #20
 800137c:	001a      	movs	r2, r3
 800137e:	2100      	movs	r1, #0
 8001380:	f004 face 	bl	8005920 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001384:	2410      	movs	r4, #16
 8001386:	193b      	adds	r3, r7, r4
 8001388:	0018      	movs	r0, r3
 800138a:	231c      	movs	r3, #28
 800138c:	001a      	movs	r2, r3
 800138e:	2100      	movs	r1, #0
 8001390:	f004 fac6 	bl	8005920 <memset>
  if(huart->Instance==USART1)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a34      	ldr	r2, [pc, #208]	@ (800146c <HAL_UART_MspInit+0x100>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d162      	bne.n	8001464 <HAL_UART_MspInit+0xf8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800139e:	193b      	adds	r3, r7, r4
 80013a0:	2201      	movs	r2, #1
 80013a2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80013a4:	193b      	adds	r3, r7, r4
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013aa:	193b      	adds	r3, r7, r4
 80013ac:	0018      	movs	r0, r3
 80013ae:	f001 f85f 	bl	8002470 <HAL_RCCEx_PeriphCLKConfig>
 80013b2:	1e03      	subs	r3, r0, #0
 80013b4:	d001      	beq.n	80013ba <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80013b6:	f7ff fb71 	bl	8000a9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001470 <HAL_UART_MspInit+0x104>)
 80013bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013be:	4b2c      	ldr	r3, [pc, #176]	@ (8001470 <HAL_UART_MspInit+0x104>)
 80013c0:	2180      	movs	r1, #128	@ 0x80
 80013c2:	01c9      	lsls	r1, r1, #7
 80013c4:	430a      	orrs	r2, r1
 80013c6:	641a      	str	r2, [r3, #64]	@ 0x40
 80013c8:	4b29      	ldr	r3, [pc, #164]	@ (8001470 <HAL_UART_MspInit+0x104>)
 80013ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013cc:	2380      	movs	r3, #128	@ 0x80
 80013ce:	01db      	lsls	r3, r3, #7
 80013d0:	4013      	ands	r3, r2
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d6:	4b26      	ldr	r3, [pc, #152]	@ (8001470 <HAL_UART_MspInit+0x104>)
 80013d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013da:	4b25      	ldr	r3, [pc, #148]	@ (8001470 <HAL_UART_MspInit+0x104>)
 80013dc:	2101      	movs	r1, #1
 80013de:	430a      	orrs	r2, r1
 80013e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80013e2:	4b23      	ldr	r3, [pc, #140]	@ (8001470 <HAL_UART_MspInit+0x104>)
 80013e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013e6:	2201      	movs	r2, #1
 80013e8:	4013      	ands	r3, r2
 80013ea:	60bb      	str	r3, [r7, #8]
 80013ec:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA0     ------> USART1_TX
    PA8     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin;
 80013ee:	242c      	movs	r4, #44	@ 0x2c
 80013f0:	193b      	adds	r3, r7, r4
 80013f2:	2201      	movs	r2, #1
 80013f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f6:	193b      	adds	r3, r7, r4
 80013f8:	2202      	movs	r2, #2
 80013fa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	193b      	adds	r3, r7, r4
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001402:	193b      	adds	r3, r7, r4
 8001404:	2200      	movs	r2, #0
 8001406:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001408:	193b      	adds	r3, r7, r4
 800140a:	2204      	movs	r2, #4
 800140c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 800140e:	193a      	adds	r2, r7, r4
 8001410:	23a0      	movs	r3, #160	@ 0xa0
 8001412:	05db      	lsls	r3, r3, #23
 8001414:	0011      	movs	r1, r2
 8001416:	0018      	movs	r0, r3
 8001418:	f000 fb64 	bl	8001ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART1_RX_Pin;
 800141c:	0021      	movs	r1, r4
 800141e:	187b      	adds	r3, r7, r1
 8001420:	2280      	movs	r2, #128	@ 0x80
 8001422:	0052      	lsls	r2, r2, #1
 8001424:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001426:	187b      	adds	r3, r7, r1
 8001428:	2202      	movs	r2, #2
 800142a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	187b      	adds	r3, r7, r1
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001432:	187b      	adds	r3, r7, r1
 8001434:	2200      	movs	r2, #0
 8001436:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF14_USART1;
 8001438:	187b      	adds	r3, r7, r1
 800143a:	220e      	movs	r2, #14
 800143c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(USART1_RX_GPIO_Port, &GPIO_InitStruct);
 800143e:	187a      	adds	r2, r7, r1
 8001440:	23a0      	movs	r3, #160	@ 0xa0
 8001442:	05db      	lsls	r3, r3, #23
 8001444:	0011      	movs	r1, r2
 8001446:	0018      	movs	r0, r3
 8001448:	f000 fb4c 	bl	8001ae4 <HAL_GPIO_Init>

    HAL_SYSCFG_SetPinBinding(HAL_BIND_SO8_PIN4_PA0|HAL_BIND_SO8_PIN5_PA8);
 800144c:	4b09      	ldr	r3, [pc, #36]	@ (8001474 <HAL_UART_MspInit+0x108>)
 800144e:	0018      	movs	r0, r3
 8001450:	f000 f982 	bl	8001758 <HAL_SYSCFG_SetPinBinding>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001454:	2200      	movs	r2, #0
 8001456:	2100      	movs	r1, #0
 8001458:	201b      	movs	r0, #27
 800145a:	f000 fa35 	bl	80018c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800145e:	201b      	movs	r0, #27
 8001460:	f000 fa47 	bl	80018f2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001464:	46c0      	nop			@ (mov r8, r8)
 8001466:	46bd      	mov	sp, r7
 8001468:	b011      	add	sp, #68	@ 0x44
 800146a:	bd90      	pop	{r4, r7, pc}
 800146c:	40013800 	.word	0x40013800
 8001470:	40021000 	.word	0x40021000
 8001474:	003c0004 	.word	0x003c0004

08001478 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800147c:	46c0      	nop			@ (mov r8, r8)
 800147e:	e7fd      	b.n	800147c <NMI_Handler+0x4>

08001480 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001484:	46c0      	nop			@ (mov r8, r8)
 8001486:	e7fd      	b.n	8001484 <HardFault_Handler+0x4>

08001488 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800148c:	46c0      	nop			@ (mov r8, r8)
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001496:	46c0      	nop			@ (mov r8, r8)
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014a0:	f000 f91a 	bl	80016d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014a4:	46c0      	nop			@ (mov r8, r8)
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014b0:	4b03      	ldr	r3, [pc, #12]	@ (80014c0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80014b2:	0018      	movs	r0, r3
 80014b4:	f001 fa3e 	bl	8002934 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80014b8:	46c0      	nop			@ (mov r8, r8)
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	46c0      	nop			@ (mov r8, r8)
 80014c0:	2000007c 	.word	0x2000007c

080014c4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014c8:	4b03      	ldr	r3, [pc, #12]	@ (80014d8 <TIM1_CC_IRQHandler+0x14>)
 80014ca:	0018      	movs	r0, r3
 80014cc:	f001 fa32 	bl	8002934 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80014d0:	46c0      	nop			@ (mov r8, r8)
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	46c0      	nop			@ (mov r8, r8)
 80014d8:	2000007c 	.word	0x2000007c

080014dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80014e0:	4b03      	ldr	r3, [pc, #12]	@ (80014f0 <TIM3_IRQHandler+0x14>)
 80014e2:	0018      	movs	r0, r3
 80014e4:	f001 fa26 	bl	8002934 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80014e8:	46c0      	nop			@ (mov r8, r8)
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	46c0      	nop			@ (mov r8, r8)
 80014f0:	200000cc 	.word	0x200000cc

080014f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 interrupt.
  */
void USART1_IRQHandler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart);
 80014f8:	4b03      	ldr	r3, [pc, #12]	@ (8001508 <USART1_IRQHandler+0x14>)
 80014fa:	0018      	movs	r0, r3
 80014fc:	f002 f8d8 	bl	80036b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001500:	46c0      	nop			@ (mov r8, r8)
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	46c0      	nop			@ (mov r8, r8)
 8001508:	20000118 	.word	0x20000118

0800150c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001514:	4a14      	ldr	r2, [pc, #80]	@ (8001568 <_sbrk+0x5c>)
 8001516:	4b15      	ldr	r3, [pc, #84]	@ (800156c <_sbrk+0x60>)
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001520:	4b13      	ldr	r3, [pc, #76]	@ (8001570 <_sbrk+0x64>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d102      	bne.n	800152e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001528:	4b11      	ldr	r3, [pc, #68]	@ (8001570 <_sbrk+0x64>)
 800152a:	4a12      	ldr	r2, [pc, #72]	@ (8001574 <_sbrk+0x68>)
 800152c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800152e:	4b10      	ldr	r3, [pc, #64]	@ (8001570 <_sbrk+0x64>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	18d3      	adds	r3, r2, r3
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	429a      	cmp	r2, r3
 800153a:	d207      	bcs.n	800154c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800153c:	f004 fa0a 	bl	8005954 <__errno>
 8001540:	0003      	movs	r3, r0
 8001542:	220c      	movs	r2, #12
 8001544:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001546:	2301      	movs	r3, #1
 8001548:	425b      	negs	r3, r3
 800154a:	e009      	b.n	8001560 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800154c:	4b08      	ldr	r3, [pc, #32]	@ (8001570 <_sbrk+0x64>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001552:	4b07      	ldr	r3, [pc, #28]	@ (8001570 <_sbrk+0x64>)
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	18d2      	adds	r2, r2, r3
 800155a:	4b05      	ldr	r3, [pc, #20]	@ (8001570 <_sbrk+0x64>)
 800155c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800155e:	68fb      	ldr	r3, [r7, #12]
}
 8001560:	0018      	movs	r0, r3
 8001562:	46bd      	mov	sp, r7
 8001564:	b006      	add	sp, #24
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20001800 	.word	0x20001800
 800156c:	00000400 	.word	0x00000400
 8001570:	200001d8 	.word	0x200001d8
 8001574:	20000328 	.word	0x20000328

08001578 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800157c:	4b03      	ldr	r3, [pc, #12]	@ (800158c <SystemInit+0x14>)
 800157e:	2280      	movs	r2, #128	@ 0x80
 8001580:	0512      	lsls	r2, r2, #20
 8001582:	609a      	str	r2, [r3, #8]
#endif
}
 8001584:	46c0      	nop			@ (mov r8, r8)
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	46c0      	nop			@ (mov r8, r8)
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001590:	480d      	ldr	r0, [pc, #52]	@ (80015c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001592:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001594:	f7ff fff0 	bl	8001578 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001598:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800159a:	e003      	b.n	80015a4 <LoopCopyDataInit>

0800159c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800159c:	4b0b      	ldr	r3, [pc, #44]	@ (80015cc <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800159e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80015a0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80015a2:	3104      	adds	r1, #4

080015a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80015a4:	480a      	ldr	r0, [pc, #40]	@ (80015d0 <LoopForever+0xa>)
  ldr r3, =_edata
 80015a6:	4b0b      	ldr	r3, [pc, #44]	@ (80015d4 <LoopForever+0xe>)
  adds r2, r0, r1
 80015a8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80015aa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80015ac:	d3f6      	bcc.n	800159c <CopyDataInit>
  ldr r2, =_sbss
 80015ae:	4a0a      	ldr	r2, [pc, #40]	@ (80015d8 <LoopForever+0x12>)
  b LoopFillZerobss
 80015b0:	e002      	b.n	80015b8 <LoopFillZerobss>

080015b2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80015b2:	2300      	movs	r3, #0
  str  r3, [r2]
 80015b4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015b6:	3204      	adds	r2, #4

080015b8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80015b8:	4b08      	ldr	r3, [pc, #32]	@ (80015dc <LoopForever+0x16>)
  cmp r2, r3
 80015ba:	429a      	cmp	r2, r3
  bcc FillZerobss
 80015bc:	d3f9      	bcc.n	80015b2 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80015be:	f004 f9cf 	bl	8005960 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015c2:	f7ff f9d5 	bl	8000970 <main>

080015c6 <LoopForever>:

LoopForever:
    b LoopForever
 80015c6:	e7fe      	b.n	80015c6 <LoopForever>
  ldr   r0, =_estack
 80015c8:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 80015cc:	08005e10 	.word	0x08005e10
  ldr r0, =_sdata
 80015d0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80015d4:	20000060 	.word	0x20000060
  ldr r2, =_sbss
 80015d8:	20000060 	.word	0x20000060
  ldr r3, = _ebss
 80015dc:	20000328 	.word	0x20000328

080015e0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015e0:	e7fe      	b.n	80015e0 <ADC1_IRQHandler>
	...

080015e4 <LL_SYSCFG_ConfigPinMux>:
  * @rmtoll SYSCFG_CFGR3 CLL   LL_SYSCFG_ConfigPinMux\n
  * @param  mux_cfg This parameter can be a value of @ref SYSTEM_LL_PINMUX_CFG
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_ConfigPinMux(uint32_t mux_cfg)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(SYSCFG->CFGR3, (mux_cfg >> 16U), (mux_cfg & 0x0000FFFFU));
 80015ec:	4b08      	ldr	r3, [pc, #32]	@ (8001610 <LL_SYSCFG_ConfigPinMux+0x2c>)
 80015ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	0c12      	lsrs	r2, r2, #16
 80015f4:	43d2      	mvns	r2, r2
 80015f6:	401a      	ands	r2, r3
 80015f8:	0011      	movs	r1, r2
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	041b      	lsls	r3, r3, #16
 80015fe:	0c1a      	lsrs	r2, r3, #16
 8001600:	4b03      	ldr	r3, [pc, #12]	@ (8001610 <LL_SYSCFG_ConfigPinMux+0x2c>)
 8001602:	430a      	orrs	r2, r1
 8001604:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001606:	46c0      	nop			@ (mov r8, r8)
 8001608:	46bd      	mov	sp, r7
 800160a:	b002      	add	sp, #8
 800160c:	bd80      	pop	{r7, pc}
 800160e:	46c0      	nop			@ (mov r8, r8)
 8001610:	40010000 	.word	0x40010000

08001614 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800161a:	1dfb      	adds	r3, r7, #7
 800161c:	2200      	movs	r2, #0
 800161e:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001620:	2003      	movs	r0, #3
 8001622:	f000 f80f 	bl	8001644 <HAL_InitTick>
 8001626:	1e03      	subs	r3, r0, #0
 8001628:	d003      	beq.n	8001632 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 800162a:	1dfb      	adds	r3, r7, #7
 800162c:	2201      	movs	r2, #1
 800162e:	701a      	strb	r2, [r3, #0]
 8001630:	e001      	b.n	8001636 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001632:	f7ff fe51 	bl	80012d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001636:	1dfb      	adds	r3, r7, #7
 8001638:	781b      	ldrb	r3, [r3, #0]
}
 800163a:	0018      	movs	r0, r3
 800163c:	46bd      	mov	sp, r7
 800163e:	b002      	add	sp, #8
 8001640:	bd80      	pop	{r7, pc}
	...

08001644 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001644:	b590      	push	{r4, r7, lr}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800164c:	230f      	movs	r3, #15
 800164e:	18fb      	adds	r3, r7, r3
 8001650:	2200      	movs	r2, #0
 8001652:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8001654:	4b1d      	ldr	r3, [pc, #116]	@ (80016cc <HAL_InitTick+0x88>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d02b      	beq.n	80016b4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 800165c:	4b1c      	ldr	r3, [pc, #112]	@ (80016d0 <HAL_InitTick+0x8c>)
 800165e:	681c      	ldr	r4, [r3, #0]
 8001660:	4b1a      	ldr	r3, [pc, #104]	@ (80016cc <HAL_InitTick+0x88>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	0019      	movs	r1, r3
 8001666:	23fa      	movs	r3, #250	@ 0xfa
 8001668:	0098      	lsls	r0, r3, #2
 800166a:	f7fe fd4d 	bl	8000108 <__udivsi3>
 800166e:	0003      	movs	r3, r0
 8001670:	0019      	movs	r1, r3
 8001672:	0020      	movs	r0, r4
 8001674:	f7fe fd48 	bl	8000108 <__udivsi3>
 8001678:	0003      	movs	r3, r0
 800167a:	0018      	movs	r0, r3
 800167c:	f000 f949 	bl	8001912 <HAL_SYSTICK_Config>
 8001680:	1e03      	subs	r3, r0, #0
 8001682:	d112      	bne.n	80016aa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2b03      	cmp	r3, #3
 8001688:	d80a      	bhi.n	80016a0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800168a:	6879      	ldr	r1, [r7, #4]
 800168c:	2301      	movs	r3, #1
 800168e:	425b      	negs	r3, r3
 8001690:	2200      	movs	r2, #0
 8001692:	0018      	movs	r0, r3
 8001694:	f000 f918 	bl	80018c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001698:	4b0e      	ldr	r3, [pc, #56]	@ (80016d4 <HAL_InitTick+0x90>)
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	e00d      	b.n	80016bc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80016a0:	230f      	movs	r3, #15
 80016a2:	18fb      	adds	r3, r7, r3
 80016a4:	2201      	movs	r2, #1
 80016a6:	701a      	strb	r2, [r3, #0]
 80016a8:	e008      	b.n	80016bc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016aa:	230f      	movs	r3, #15
 80016ac:	18fb      	adds	r3, r7, r3
 80016ae:	2201      	movs	r2, #1
 80016b0:	701a      	strb	r2, [r3, #0]
 80016b2:	e003      	b.n	80016bc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016b4:	230f      	movs	r3, #15
 80016b6:	18fb      	adds	r3, r7, r3
 80016b8:	2201      	movs	r2, #1
 80016ba:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80016bc:	230f      	movs	r3, #15
 80016be:	18fb      	adds	r3, r7, r3
 80016c0:	781b      	ldrb	r3, [r3, #0]
}
 80016c2:	0018      	movs	r0, r3
 80016c4:	46bd      	mov	sp, r7
 80016c6:	b005      	add	sp, #20
 80016c8:	bd90      	pop	{r4, r7, pc}
 80016ca:	46c0      	nop			@ (mov r8, r8)
 80016cc:	2000000c 	.word	0x2000000c
 80016d0:	20000004 	.word	0x20000004
 80016d4:	20000008 	.word	0x20000008

080016d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016dc:	4b05      	ldr	r3, [pc, #20]	@ (80016f4 <HAL_IncTick+0x1c>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	001a      	movs	r2, r3
 80016e2:	4b05      	ldr	r3, [pc, #20]	@ (80016f8 <HAL_IncTick+0x20>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	18d2      	adds	r2, r2, r3
 80016e8:	4b03      	ldr	r3, [pc, #12]	@ (80016f8 <HAL_IncTick+0x20>)
 80016ea:	601a      	str	r2, [r3, #0]
}
 80016ec:	46c0      	nop			@ (mov r8, r8)
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	46c0      	nop			@ (mov r8, r8)
 80016f4:	2000000c 	.word	0x2000000c
 80016f8:	200001dc 	.word	0x200001dc

080016fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001700:	4b02      	ldr	r3, [pc, #8]	@ (800170c <HAL_GetTick+0x10>)
 8001702:	681b      	ldr	r3, [r3, #0]
}
 8001704:	0018      	movs	r0, r3
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	46c0      	nop			@ (mov r8, r8)
 800170c:	200001dc 	.word	0x200001dc

08001710 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001718:	f7ff fff0 	bl	80016fc <HAL_GetTick>
 800171c:	0003      	movs	r3, r0
 800171e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	3301      	adds	r3, #1
 8001728:	d005      	beq.n	8001736 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800172a:	4b0a      	ldr	r3, [pc, #40]	@ (8001754 <HAL_Delay+0x44>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	001a      	movs	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	189b      	adds	r3, r3, r2
 8001734:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001736:	46c0      	nop			@ (mov r8, r8)
 8001738:	f7ff ffe0 	bl	80016fc <HAL_GetTick>
 800173c:	0002      	movs	r2, r0
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	429a      	cmp	r2, r3
 8001746:	d8f7      	bhi.n	8001738 <HAL_Delay+0x28>
  {
  }
}
 8001748:	46c0      	nop			@ (mov r8, r8)
 800174a:	46c0      	nop			@ (mov r8, r8)
 800174c:	46bd      	mov	sp, r7
 800174e:	b004      	add	sp, #16
 8001750:	bd80      	pop	{r7, pc}
 8001752:	46c0      	nop			@ (mov r8, r8)
 8001754:	2000000c 	.word	0x2000000c

08001758 <HAL_SYSCFG_SetPinBinding>:
  *         for each die package
  *         This parameter can be a value of @ref HAL_BIND_CFG
  * @retval None
  */
void HAL_SYSCFG_SetPinBinding(uint32_t pin_binding)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_HAL_SYSCFG_PINBINDING(pin_binding));
  LL_SYSCFG_ConfigPinMux(pin_binding);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	0018      	movs	r0, r3
 8001764:	f7ff ff3e 	bl	80015e4 <LL_SYSCFG_ConfigPinMux>
}
 8001768:	46c0      	nop			@ (mov r8, r8)
 800176a:	46bd      	mov	sp, r7
 800176c:	b002      	add	sp, #8
 800176e:	bd80      	pop	{r7, pc}

08001770 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	0002      	movs	r2, r0
 8001778:	1dfb      	adds	r3, r7, #7
 800177a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800177c:	1dfb      	adds	r3, r7, #7
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b7f      	cmp	r3, #127	@ 0x7f
 8001782:	d809      	bhi.n	8001798 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001784:	1dfb      	adds	r3, r7, #7
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	001a      	movs	r2, r3
 800178a:	231f      	movs	r3, #31
 800178c:	401a      	ands	r2, r3
 800178e:	4b04      	ldr	r3, [pc, #16]	@ (80017a0 <__NVIC_EnableIRQ+0x30>)
 8001790:	2101      	movs	r1, #1
 8001792:	4091      	lsls	r1, r2
 8001794:	000a      	movs	r2, r1
 8001796:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001798:	46c0      	nop			@ (mov r8, r8)
 800179a:	46bd      	mov	sp, r7
 800179c:	b002      	add	sp, #8
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	e000e100 	.word	0xe000e100

080017a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017a4:	b590      	push	{r4, r7, lr}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	0002      	movs	r2, r0
 80017ac:	6039      	str	r1, [r7, #0]
 80017ae:	1dfb      	adds	r3, r7, #7
 80017b0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80017b2:	1dfb      	adds	r3, r7, #7
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80017b8:	d828      	bhi.n	800180c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017ba:	4a2f      	ldr	r2, [pc, #188]	@ (8001878 <__NVIC_SetPriority+0xd4>)
 80017bc:	1dfb      	adds	r3, r7, #7
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	b25b      	sxtb	r3, r3
 80017c2:	089b      	lsrs	r3, r3, #2
 80017c4:	33c0      	adds	r3, #192	@ 0xc0
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	589b      	ldr	r3, [r3, r2]
 80017ca:	1dfa      	adds	r2, r7, #7
 80017cc:	7812      	ldrb	r2, [r2, #0]
 80017ce:	0011      	movs	r1, r2
 80017d0:	2203      	movs	r2, #3
 80017d2:	400a      	ands	r2, r1
 80017d4:	00d2      	lsls	r2, r2, #3
 80017d6:	21ff      	movs	r1, #255	@ 0xff
 80017d8:	4091      	lsls	r1, r2
 80017da:	000a      	movs	r2, r1
 80017dc:	43d2      	mvns	r2, r2
 80017de:	401a      	ands	r2, r3
 80017e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	019b      	lsls	r3, r3, #6
 80017e6:	22ff      	movs	r2, #255	@ 0xff
 80017e8:	401a      	ands	r2, r3
 80017ea:	1dfb      	adds	r3, r7, #7
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	0018      	movs	r0, r3
 80017f0:	2303      	movs	r3, #3
 80017f2:	4003      	ands	r3, r0
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017f8:	481f      	ldr	r0, [pc, #124]	@ (8001878 <__NVIC_SetPriority+0xd4>)
 80017fa:	1dfb      	adds	r3, r7, #7
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	b25b      	sxtb	r3, r3
 8001800:	089b      	lsrs	r3, r3, #2
 8001802:	430a      	orrs	r2, r1
 8001804:	33c0      	adds	r3, #192	@ 0xc0
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800180a:	e031      	b.n	8001870 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800180c:	4a1b      	ldr	r2, [pc, #108]	@ (800187c <__NVIC_SetPriority+0xd8>)
 800180e:	1dfb      	adds	r3, r7, #7
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	0019      	movs	r1, r3
 8001814:	230f      	movs	r3, #15
 8001816:	400b      	ands	r3, r1
 8001818:	3b08      	subs	r3, #8
 800181a:	089b      	lsrs	r3, r3, #2
 800181c:	3306      	adds	r3, #6
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	18d3      	adds	r3, r2, r3
 8001822:	3304      	adds	r3, #4
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	1dfa      	adds	r2, r7, #7
 8001828:	7812      	ldrb	r2, [r2, #0]
 800182a:	0011      	movs	r1, r2
 800182c:	2203      	movs	r2, #3
 800182e:	400a      	ands	r2, r1
 8001830:	00d2      	lsls	r2, r2, #3
 8001832:	21ff      	movs	r1, #255	@ 0xff
 8001834:	4091      	lsls	r1, r2
 8001836:	000a      	movs	r2, r1
 8001838:	43d2      	mvns	r2, r2
 800183a:	401a      	ands	r2, r3
 800183c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	019b      	lsls	r3, r3, #6
 8001842:	22ff      	movs	r2, #255	@ 0xff
 8001844:	401a      	ands	r2, r3
 8001846:	1dfb      	adds	r3, r7, #7
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	0018      	movs	r0, r3
 800184c:	2303      	movs	r3, #3
 800184e:	4003      	ands	r3, r0
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001854:	4809      	ldr	r0, [pc, #36]	@ (800187c <__NVIC_SetPriority+0xd8>)
 8001856:	1dfb      	adds	r3, r7, #7
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	001c      	movs	r4, r3
 800185c:	230f      	movs	r3, #15
 800185e:	4023      	ands	r3, r4
 8001860:	3b08      	subs	r3, #8
 8001862:	089b      	lsrs	r3, r3, #2
 8001864:	430a      	orrs	r2, r1
 8001866:	3306      	adds	r3, #6
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	18c3      	adds	r3, r0, r3
 800186c:	3304      	adds	r3, #4
 800186e:	601a      	str	r2, [r3, #0]
}
 8001870:	46c0      	nop			@ (mov r8, r8)
 8001872:	46bd      	mov	sp, r7
 8001874:	b003      	add	sp, #12
 8001876:	bd90      	pop	{r4, r7, pc}
 8001878:	e000e100 	.word	0xe000e100
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	1e5a      	subs	r2, r3, #1
 800188c:	2380      	movs	r3, #128	@ 0x80
 800188e:	045b      	lsls	r3, r3, #17
 8001890:	429a      	cmp	r2, r3
 8001892:	d301      	bcc.n	8001898 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001894:	2301      	movs	r3, #1
 8001896:	e010      	b.n	80018ba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001898:	4b0a      	ldr	r3, [pc, #40]	@ (80018c4 <SysTick_Config+0x44>)
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	3a01      	subs	r2, #1
 800189e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018a0:	2301      	movs	r3, #1
 80018a2:	425b      	negs	r3, r3
 80018a4:	2103      	movs	r1, #3
 80018a6:	0018      	movs	r0, r3
 80018a8:	f7ff ff7c 	bl	80017a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018ac:	4b05      	ldr	r3, [pc, #20]	@ (80018c4 <SysTick_Config+0x44>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018b2:	4b04      	ldr	r3, [pc, #16]	@ (80018c4 <SysTick_Config+0x44>)
 80018b4:	2207      	movs	r2, #7
 80018b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	0018      	movs	r0, r3
 80018bc:	46bd      	mov	sp, r7
 80018be:	b002      	add	sp, #8
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	46c0      	nop			@ (mov r8, r8)
 80018c4:	e000e010 	.word	0xe000e010

080018c8 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60b9      	str	r1, [r7, #8]
 80018d0:	607a      	str	r2, [r7, #4]
 80018d2:	210f      	movs	r1, #15
 80018d4:	187b      	adds	r3, r7, r1
 80018d6:	1c02      	adds	r2, r0, #0
 80018d8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80018da:	68ba      	ldr	r2, [r7, #8]
 80018dc:	187b      	adds	r3, r7, r1
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	b25b      	sxtb	r3, r3
 80018e2:	0011      	movs	r1, r2
 80018e4:	0018      	movs	r0, r3
 80018e6:	f7ff ff5d 	bl	80017a4 <__NVIC_SetPriority>
}
 80018ea:	46c0      	nop			@ (mov r8, r8)
 80018ec:	46bd      	mov	sp, r7
 80018ee:	b004      	add	sp, #16
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b082      	sub	sp, #8
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	0002      	movs	r2, r0
 80018fa:	1dfb      	adds	r3, r7, #7
 80018fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018fe:	1dfb      	adds	r3, r7, #7
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	b25b      	sxtb	r3, r3
 8001904:	0018      	movs	r0, r3
 8001906:	f7ff ff33 	bl	8001770 <__NVIC_EnableIRQ>
}
 800190a:	46c0      	nop			@ (mov r8, r8)
 800190c:	46bd      	mov	sp, r7
 800190e:	b002      	add	sp, #8
 8001910:	bd80      	pop	{r7, pc}

08001912 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b082      	sub	sp, #8
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	0018      	movs	r0, r3
 800191e:	f7ff ffaf 	bl	8001880 <SysTick_Config>
 8001922:	0003      	movs	r3, r0
}
 8001924:	0018      	movs	r0, r3
 8001926:	46bd      	mov	sp, r7
 8001928:	b002      	add	sp, #8
 800192a:	bd80      	pop	{r7, pc}

0800192c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d101      	bne.n	800193e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e050      	b.n	80019e0 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2225      	movs	r2, #37	@ 0x25
 8001942:	5c9b      	ldrb	r3, [r3, r2]
 8001944:	b2db      	uxtb	r3, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d008      	beq.n	800195c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2204      	movs	r2, #4
 800194e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2224      	movs	r2, #36	@ 0x24
 8001954:	2100      	movs	r1, #0
 8001956:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e041      	b.n	80019e0 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	210e      	movs	r1, #14
 8001968:	438a      	bics	r2, r1
 800196a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001976:	491c      	ldr	r1, [pc, #112]	@ (80019e8 <HAL_DMA_Abort+0xbc>)
 8001978:	400a      	ands	r2, r1
 800197a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2101      	movs	r1, #1
 8001988:	438a      	bics	r2, r1
 800198a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 800198c:	4b17      	ldr	r3, [pc, #92]	@ (80019ec <HAL_DMA_Abort+0xc0>)
 800198e:	6859      	ldr	r1, [r3, #4]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001994:	221c      	movs	r2, #28
 8001996:	4013      	ands	r3, r2
 8001998:	2201      	movs	r2, #1
 800199a:	409a      	lsls	r2, r3
 800199c:	4b13      	ldr	r3, [pc, #76]	@ (80019ec <HAL_DMA_Abort+0xc0>)
 800199e:	430a      	orrs	r2, r1
 80019a0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80019aa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d00c      	beq.n	80019ce <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019be:	490a      	ldr	r1, [pc, #40]	@ (80019e8 <HAL_DMA_Abort+0xbc>)
 80019c0:	400a      	ands	r2, r1
 80019c2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80019cc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2225      	movs	r2, #37	@ 0x25
 80019d2:	2101      	movs	r1, #1
 80019d4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2224      	movs	r2, #36	@ 0x24
 80019da:	2100      	movs	r1, #0
 80019dc:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80019de:	2300      	movs	r3, #0
}
 80019e0:	0018      	movs	r0, r3
 80019e2:	46bd      	mov	sp, r7
 80019e4:	b002      	add	sp, #8
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	fffffeff 	.word	0xfffffeff
 80019ec:	40020000 	.word	0x40020000

080019f0 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019f8:	230f      	movs	r3, #15
 80019fa:	18fb      	adds	r3, r7, r3
 80019fc:	2200      	movs	r2, #0
 80019fe:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2224      	movs	r2, #36	@ 0x24
 8001a04:	2100      	movs	r1, #0
 8001a06:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2224      	movs	r2, #36	@ 0x24
 8001a0c:	5c9b      	ldrb	r3, [r3, r2]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d101      	bne.n	8001a16 <HAL_DMA_Abort_IT+0x26>
 8001a12:	2302      	movs	r3, #2
 8001a14:	e05e      	b.n	8001ad4 <HAL_DMA_Abort_IT+0xe4>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2224      	movs	r2, #36	@ 0x24
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2225      	movs	r2, #37	@ 0x25
 8001a22:	5c9b      	ldrb	r3, [r3, r2]
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d007      	beq.n	8001a3a <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2204      	movs	r2, #4
 8001a2e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001a30:	230f      	movs	r3, #15
 8001a32:	18fb      	adds	r3, r7, r3
 8001a34:	2201      	movs	r2, #1
 8001a36:	701a      	strb	r2, [r3, #0]
 8001a38:	e049      	b.n	8001ace <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	210e      	movs	r1, #14
 8001a46:	438a      	bics	r2, r1
 8001a48:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2101      	movs	r1, #1
 8001a56:	438a      	bics	r2, r1
 8001a58:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a64:	491d      	ldr	r1, [pc, #116]	@ (8001adc <HAL_DMA_Abort_IT+0xec>)
 8001a66:	400a      	ands	r2, r1
 8001a68:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8001a6a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ae0 <HAL_DMA_Abort_IT+0xf0>)
 8001a6c:	6859      	ldr	r1, [r3, #4]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a72:	221c      	movs	r2, #28
 8001a74:	4013      	ands	r3, r2
 8001a76:	2201      	movs	r2, #1
 8001a78:	409a      	lsls	r2, r3
 8001a7a:	4b19      	ldr	r3, [pc, #100]	@ (8001ae0 <HAL_DMA_Abort_IT+0xf0>)
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001a88:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d00c      	beq.n	8001aac <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a9c:	490f      	ldr	r1, [pc, #60]	@ (8001adc <HAL_DMA_Abort_IT+0xec>)
 8001a9e:	400a      	ands	r2, r1
 8001aa0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001aaa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2225      	movs	r2, #37	@ 0x25
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2224      	movs	r2, #36	@ 0x24
 8001ab8:	2100      	movs	r1, #0
 8001aba:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d004      	beq.n	8001ace <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	0010      	movs	r0, r2
 8001acc:	4798      	blx	r3
    }
  }
  return status;
 8001ace:	230f      	movs	r3, #15
 8001ad0:	18fb      	adds	r3, r7, r3
 8001ad2:	781b      	ldrb	r3, [r3, #0]
}
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	b004      	add	sp, #16
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	fffffeff 	.word	0xfffffeff
 8001ae0:	40020000 	.word	0x40020000

08001ae4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001aee:	2300      	movs	r3, #0
 8001af0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001af2:	e14d      	b.n	8001d90 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2101      	movs	r1, #1
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	4091      	lsls	r1, r2
 8001afe:	000a      	movs	r2, r1
 8001b00:	4013      	ands	r3, r2
 8001b02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d100      	bne.n	8001b0c <HAL_GPIO_Init+0x28>
 8001b0a:	e13e      	b.n	8001d8a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d003      	beq.n	8001b1c <HAL_GPIO_Init+0x38>
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	2b12      	cmp	r3, #18
 8001b1a:	d125      	bne.n	8001b68 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	08da      	lsrs	r2, r3, #3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3208      	adds	r2, #8
 8001b24:	0092      	lsls	r2, r2, #2
 8001b26:	58d3      	ldr	r3, [r2, r3]
 8001b28:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	2207      	movs	r2, #7
 8001b2e:	4013      	ands	r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	220f      	movs	r2, #15
 8001b34:	409a      	lsls	r2, r3
 8001b36:	0013      	movs	r3, r2
 8001b38:	43da      	mvns	r2, r3
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	220f      	movs	r2, #15
 8001b46:	401a      	ands	r2, r3
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	2107      	movs	r1, #7
 8001b4c:	400b      	ands	r3, r1
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	409a      	lsls	r2, r3
 8001b52:	0013      	movs	r3, r2
 8001b54:	697a      	ldr	r2, [r7, #20]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	08da      	lsrs	r2, r3, #3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	3208      	adds	r2, #8
 8001b62:	0092      	lsls	r2, r2, #2
 8001b64:	6979      	ldr	r1, [r7, #20]
 8001b66:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	2203      	movs	r2, #3
 8001b74:	409a      	lsls	r2, r3
 8001b76:	0013      	movs	r3, r2
 8001b78:	43da      	mvns	r2, r3
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	2203      	movs	r2, #3
 8001b86:	401a      	ands	r2, r3
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	409a      	lsls	r2, r3
 8001b8e:	0013      	movs	r3, r2
 8001b90:	697a      	ldr	r2, [r7, #20]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d00b      	beq.n	8001bbc <HAL_GPIO_Init+0xd8>
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d007      	beq.n	8001bbc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bb0:	2b11      	cmp	r3, #17
 8001bb2:	d003      	beq.n	8001bbc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	2b12      	cmp	r3, #18
 8001bba:	d130      	bne.n	8001c1e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	2203      	movs	r2, #3
 8001bc8:	409a      	lsls	r2, r3
 8001bca:	0013      	movs	r3, r2
 8001bcc:	43da      	mvns	r2, r3
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	68da      	ldr	r2, [r3, #12]
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	409a      	lsls	r2, r3
 8001bde:	0013      	movs	r3, r2
 8001be0:	697a      	ldr	r2, [r7, #20]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	697a      	ldr	r2, [r7, #20]
 8001bea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	409a      	lsls	r2, r3
 8001bf8:	0013      	movs	r3, r2
 8001bfa:	43da      	mvns	r2, r3
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	091b      	lsrs	r3, r3, #4
 8001c08:	2201      	movs	r2, #1
 8001c0a:	401a      	ands	r2, r3
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	409a      	lsls	r2, r3
 8001c10:	0013      	movs	r3, r2
 8001c12:	697a      	ldr	r2, [r7, #20]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b03      	cmp	r3, #3
 8001c24:	d017      	beq.n	8001c56 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	2203      	movs	r2, #3
 8001c32:	409a      	lsls	r2, r3
 8001c34:	0013      	movs	r3, r2
 8001c36:	43da      	mvns	r2, r3
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	689a      	ldr	r2, [r3, #8]
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	409a      	lsls	r2, r3
 8001c48:	0013      	movs	r3, r2
 8001c4a:	697a      	ldr	r2, [r7, #20]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685a      	ldr	r2, [r3, #4]
 8001c5a:	2380      	movs	r3, #128	@ 0x80
 8001c5c:	055b      	lsls	r3, r3, #21
 8001c5e:	4013      	ands	r3, r2
 8001c60:	d100      	bne.n	8001c64 <HAL_GPIO_Init+0x180>
 8001c62:	e092      	b.n	8001d8a <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001c64:	4a50      	ldr	r2, [pc, #320]	@ (8001da8 <HAL_GPIO_Init+0x2c4>)
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	089b      	lsrs	r3, r3, #2
 8001c6a:	3318      	adds	r3, #24
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	589b      	ldr	r3, [r3, r2]
 8001c70:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	2203      	movs	r2, #3
 8001c76:	4013      	ands	r3, r2
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	220f      	movs	r2, #15
 8001c7c:	409a      	lsls	r2, r3
 8001c7e:	0013      	movs	r3, r2
 8001c80:	43da      	mvns	r2, r3
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	4013      	ands	r3, r2
 8001c86:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	23a0      	movs	r3, #160	@ 0xa0
 8001c8c:	05db      	lsls	r3, r3, #23
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d013      	beq.n	8001cba <HAL_GPIO_Init+0x1d6>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a45      	ldr	r2, [pc, #276]	@ (8001dac <HAL_GPIO_Init+0x2c8>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d00d      	beq.n	8001cb6 <HAL_GPIO_Init+0x1d2>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a44      	ldr	r2, [pc, #272]	@ (8001db0 <HAL_GPIO_Init+0x2cc>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d007      	beq.n	8001cb2 <HAL_GPIO_Init+0x1ce>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a43      	ldr	r2, [pc, #268]	@ (8001db4 <HAL_GPIO_Init+0x2d0>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d101      	bne.n	8001cae <HAL_GPIO_Init+0x1ca>
 8001caa:	2305      	movs	r3, #5
 8001cac:	e006      	b.n	8001cbc <HAL_GPIO_Init+0x1d8>
 8001cae:	2306      	movs	r3, #6
 8001cb0:	e004      	b.n	8001cbc <HAL_GPIO_Init+0x1d8>
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	e002      	b.n	8001cbc <HAL_GPIO_Init+0x1d8>
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e000      	b.n	8001cbc <HAL_GPIO_Init+0x1d8>
 8001cba:	2300      	movs	r3, #0
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	2103      	movs	r1, #3
 8001cc0:	400a      	ands	r2, r1
 8001cc2:	00d2      	lsls	r2, r2, #3
 8001cc4:	4093      	lsls	r3, r2
 8001cc6:	697a      	ldr	r2, [r7, #20]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001ccc:	4936      	ldr	r1, [pc, #216]	@ (8001da8 <HAL_GPIO_Init+0x2c4>)
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	089b      	lsrs	r3, r3, #2
 8001cd2:	3318      	adds	r3, #24
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001cda:	4a33      	ldr	r2, [pc, #204]	@ (8001da8 <HAL_GPIO_Init+0x2c4>)
 8001cdc:	2380      	movs	r3, #128	@ 0x80
 8001cde:	58d3      	ldr	r3, [r2, r3]
 8001ce0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	43da      	mvns	r2, r3
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	2380      	movs	r3, #128	@ 0x80
 8001cf2:	025b      	lsls	r3, r3, #9
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	d003      	beq.n	8001d00 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8001cf8:	697a      	ldr	r2, [r7, #20]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001d00:	4929      	ldr	r1, [pc, #164]	@ (8001da8 <HAL_GPIO_Init+0x2c4>)
 8001d02:	2280      	movs	r2, #128	@ 0x80
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001d08:	4a27      	ldr	r2, [pc, #156]	@ (8001da8 <HAL_GPIO_Init+0x2c4>)
 8001d0a:	2384      	movs	r3, #132	@ 0x84
 8001d0c:	58d3      	ldr	r3, [r2, r3]
 8001d0e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	43da      	mvns	r2, r3
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	4013      	ands	r3, r2
 8001d18:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	2380      	movs	r3, #128	@ 0x80
 8001d20:	029b      	lsls	r3, r3, #10
 8001d22:	4013      	ands	r3, r2
 8001d24:	d003      	beq.n	8001d2e <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8001d26:	697a      	ldr	r2, [r7, #20]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001d2e:	491e      	ldr	r1, [pc, #120]	@ (8001da8 <HAL_GPIO_Init+0x2c4>)
 8001d30:	2284      	movs	r2, #132	@ 0x84
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001d36:	4b1c      	ldr	r3, [pc, #112]	@ (8001da8 <HAL_GPIO_Init+0x2c4>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	43da      	mvns	r2, r3
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	4013      	ands	r3, r2
 8001d44:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685a      	ldr	r2, [r3, #4]
 8001d4a:	2380      	movs	r3, #128	@ 0x80
 8001d4c:	035b      	lsls	r3, r3, #13
 8001d4e:	4013      	ands	r3, r2
 8001d50:	d003      	beq.n	8001d5a <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8001d52:	697a      	ldr	r2, [r7, #20]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001d5a:	4b13      	ldr	r3, [pc, #76]	@ (8001da8 <HAL_GPIO_Init+0x2c4>)
 8001d5c:	697a      	ldr	r2, [r7, #20]
 8001d5e:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001d60:	4b11      	ldr	r3, [pc, #68]	@ (8001da8 <HAL_GPIO_Init+0x2c4>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	43da      	mvns	r2, r3
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	2380      	movs	r3, #128	@ 0x80
 8001d76:	039b      	lsls	r3, r3, #14
 8001d78:	4013      	ands	r3, r2
 8001d7a:	d003      	beq.n	8001d84 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8001d7c:	697a      	ldr	r2, [r7, #20]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001d84:	4b08      	ldr	r3, [pc, #32]	@ (8001da8 <HAL_GPIO_Init+0x2c4>)
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	40da      	lsrs	r2, r3
 8001d98:	1e13      	subs	r3, r2, #0
 8001d9a:	d000      	beq.n	8001d9e <HAL_GPIO_Init+0x2ba>
 8001d9c:	e6aa      	b.n	8001af4 <HAL_GPIO_Init+0x10>
  }
}
 8001d9e:	46c0      	nop			@ (mov r8, r8)
 8001da0:	46c0      	nop			@ (mov r8, r8)
 8001da2:	46bd      	mov	sp, r7
 8001da4:	b006      	add	sp, #24
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40021800 	.word	0x40021800
 8001dac:	50000400 	.word	0x50000400
 8001db0:	50000800 	.word	0x50000800
 8001db4:	50001400 	.word	0x50001400

08001db8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e1d0      	b.n	800216c <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	d100      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x1e>
 8001dd4:	e069      	b.n	8001eaa <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dd6:	4bc8      	ldr	r3, [pc, #800]	@ (80020f8 <HAL_RCC_OscConfig+0x340>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	2238      	movs	r2, #56	@ 0x38
 8001ddc:	4013      	ands	r3, r2
 8001dde:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	2b08      	cmp	r3, #8
 8001de4:	d105      	bne.n	8001df2 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d15d      	bne.n	8001eaa <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e1bc      	b.n	800216c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685a      	ldr	r2, [r3, #4]
 8001df6:	2380      	movs	r3, #128	@ 0x80
 8001df8:	025b      	lsls	r3, r3, #9
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d107      	bne.n	8001e0e <HAL_RCC_OscConfig+0x56>
 8001dfe:	4bbe      	ldr	r3, [pc, #760]	@ (80020f8 <HAL_RCC_OscConfig+0x340>)
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	4bbd      	ldr	r3, [pc, #756]	@ (80020f8 <HAL_RCC_OscConfig+0x340>)
 8001e04:	2180      	movs	r1, #128	@ 0x80
 8001e06:	0249      	lsls	r1, r1, #9
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	e020      	b.n	8001e50 <HAL_RCC_OscConfig+0x98>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	23a0      	movs	r3, #160	@ 0xa0
 8001e14:	02db      	lsls	r3, r3, #11
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d10e      	bne.n	8001e38 <HAL_RCC_OscConfig+0x80>
 8001e1a:	4bb7      	ldr	r3, [pc, #732]	@ (80020f8 <HAL_RCC_OscConfig+0x340>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	4bb6      	ldr	r3, [pc, #728]	@ (80020f8 <HAL_RCC_OscConfig+0x340>)
 8001e20:	2180      	movs	r1, #128	@ 0x80
 8001e22:	02c9      	lsls	r1, r1, #11
 8001e24:	430a      	orrs	r2, r1
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	4bb3      	ldr	r3, [pc, #716]	@ (80020f8 <HAL_RCC_OscConfig+0x340>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	4bb2      	ldr	r3, [pc, #712]	@ (80020f8 <HAL_RCC_OscConfig+0x340>)
 8001e2e:	2180      	movs	r1, #128	@ 0x80
 8001e30:	0249      	lsls	r1, r1, #9
 8001e32:	430a      	orrs	r2, r1
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	e00b      	b.n	8001e50 <HAL_RCC_OscConfig+0x98>
 8001e38:	4baf      	ldr	r3, [pc, #700]	@ (80020f8 <HAL_RCC_OscConfig+0x340>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	4bae      	ldr	r3, [pc, #696]	@ (80020f8 <HAL_RCC_OscConfig+0x340>)
 8001e3e:	49af      	ldr	r1, [pc, #700]	@ (80020fc <HAL_RCC_OscConfig+0x344>)
 8001e40:	400a      	ands	r2, r1
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	4bac      	ldr	r3, [pc, #688]	@ (80020f8 <HAL_RCC_OscConfig+0x340>)
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	4bab      	ldr	r3, [pc, #684]	@ (80020f8 <HAL_RCC_OscConfig+0x340>)
 8001e4a:	49ad      	ldr	r1, [pc, #692]	@ (8002100 <HAL_RCC_OscConfig+0x348>)
 8001e4c:	400a      	ands	r2, r1
 8001e4e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d014      	beq.n	8001e82 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e58:	f7ff fc50 	bl	80016fc <HAL_GetTick>
 8001e5c:	0003      	movs	r3, r0
 8001e5e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e60:	e008      	b.n	8001e74 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001e62:	f7ff fc4b 	bl	80016fc <HAL_GetTick>
 8001e66:	0002      	movs	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b64      	cmp	r3, #100	@ 0x64
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e17b      	b.n	800216c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e74:	4ba0      	ldr	r3, [pc, #640]	@ (80020f8 <HAL_RCC_OscConfig+0x340>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	2380      	movs	r3, #128	@ 0x80
 8001e7a:	029b      	lsls	r3, r3, #10
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	d0f0      	beq.n	8001e62 <HAL_RCC_OscConfig+0xaa>
 8001e80:	e013      	b.n	8001eaa <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e82:	f7ff fc3b 	bl	80016fc <HAL_GetTick>
 8001e86:	0003      	movs	r3, r0
 8001e88:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001e8c:	f7ff fc36 	bl	80016fc <HAL_GetTick>
 8001e90:	0002      	movs	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b64      	cmp	r3, #100	@ 0x64
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e166      	b.n	800216c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e9e:	4b96      	ldr	r3, [pc, #600]	@ (80020f8 <HAL_RCC_OscConfig+0x340>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	2380      	movs	r3, #128	@ 0x80
 8001ea4:	029b      	lsls	r3, r3, #10
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	d1f0      	bne.n	8001e8c <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2202      	movs	r2, #2
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	d100      	bne.n	8001eb6 <HAL_RCC_OscConfig+0xfe>
 8001eb4:	e086      	b.n	8001fc4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eb6:	4b90      	ldr	r3, [pc, #576]	@ (80020f8 <HAL_RCC_OscConfig+0x340>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	2238      	movs	r2, #56	@ 0x38
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d12f      	bne.n	8001f26 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e14c      	b.n	800216c <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed2:	4b89      	ldr	r3, [pc, #548]	@ (80020f8 <HAL_RCC_OscConfig+0x340>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	4a8b      	ldr	r2, [pc, #556]	@ (8002104 <HAL_RCC_OscConfig+0x34c>)
 8001ed8:	4013      	ands	r3, r2
 8001eda:	0019      	movs	r1, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	695b      	ldr	r3, [r3, #20]
 8001ee0:	021a      	lsls	r2, r3, #8
 8001ee2:	4b85      	ldr	r3, [pc, #532]	@ (80020f8 <HAL_RCC_OscConfig+0x340>)
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d112      	bne.n	8001f14 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001eee:	4b82      	ldr	r3, [pc, #520]	@ (80020f8 <HAL_RCC_OscConfig+0x340>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a85      	ldr	r2, [pc, #532]	@ (8002108 <HAL_RCC_OscConfig+0x350>)
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	0019      	movs	r1, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	691a      	ldr	r2, [r3, #16]
 8001efc:	4b7e      	ldr	r3, [pc, #504]	@ (80020f8 <HAL_RCC_OscConfig+0x340>)
 8001efe:	430a      	orrs	r2, r1
 8001f00:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001f02:	4b7d      	ldr	r3, [pc, #500]	@ (80020f8 <HAL_RCC_OscConfig+0x340>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	0adb      	lsrs	r3, r3, #11
 8001f08:	2207      	movs	r2, #7
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	4a7f      	ldr	r2, [pc, #508]	@ (800210c <HAL_RCC_OscConfig+0x354>)
 8001f0e:	40da      	lsrs	r2, r3
 8001f10:	4b7f      	ldr	r3, [pc, #508]	@ (8002110 <HAL_RCC_OscConfig+0x358>)
 8001f12:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001f14:	4b7f      	ldr	r3, [pc, #508]	@ (8002114 <HAL_RCC_OscConfig+0x35c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	0018      	movs	r0, r3
 8001f1a:	f7ff fb93 	bl	8001644 <HAL_InitTick>
 8001f1e:	1e03      	subs	r3, r0, #0
 8001f20:	d050      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e122      	b.n	800216c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d030      	beq.n	8001f90 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001f2e:	4b72      	ldr	r3, [pc, #456]	@ (80020f8 <HAL_RCC_OscConfig+0x340>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a75      	ldr	r2, [pc, #468]	@ (8002108 <HAL_RCC_OscConfig+0x350>)
 8001f34:	4013      	ands	r3, r2
 8001f36:	0019      	movs	r1, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	691a      	ldr	r2, [r3, #16]
 8001f3c:	4b6e      	ldr	r3, [pc, #440]	@ (80020f8 <HAL_RCC_OscConfig+0x340>)
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8001f42:	4b6d      	ldr	r3, [pc, #436]	@ (80020f8 <HAL_RCC_OscConfig+0x340>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	4b6c      	ldr	r3, [pc, #432]	@ (80020f8 <HAL_RCC_OscConfig+0x340>)
 8001f48:	2180      	movs	r1, #128	@ 0x80
 8001f4a:	0049      	lsls	r1, r1, #1
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f50:	f7ff fbd4 	bl	80016fc <HAL_GetTick>
 8001f54:	0003      	movs	r3, r0
 8001f56:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001f5a:	f7ff fbcf 	bl	80016fc <HAL_GetTick>
 8001f5e:	0002      	movs	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e0ff      	b.n	800216c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f6c:	4b62      	ldr	r3, [pc, #392]	@ (80020f8 <HAL_RCC_OscConfig+0x340>)
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	2380      	movs	r3, #128	@ 0x80
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	4013      	ands	r3, r2
 8001f76:	d0f0      	beq.n	8001f5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f78:	4b5f      	ldr	r3, [pc, #380]	@ (80020f8 <HAL_RCC_OscConfig+0x340>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	4a61      	ldr	r2, [pc, #388]	@ (8002104 <HAL_RCC_OscConfig+0x34c>)
 8001f7e:	4013      	ands	r3, r2
 8001f80:	0019      	movs	r1, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	021a      	lsls	r2, r3, #8
 8001f88:	4b5b      	ldr	r3, [pc, #364]	@ (80020f8 <HAL_RCC_OscConfig+0x340>)
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	e019      	b.n	8001fc4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8001f90:	4b59      	ldr	r3, [pc, #356]	@ (80020f8 <HAL_RCC_OscConfig+0x340>)
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	4b58      	ldr	r3, [pc, #352]	@ (80020f8 <HAL_RCC_OscConfig+0x340>)
 8001f96:	4960      	ldr	r1, [pc, #384]	@ (8002118 <HAL_RCC_OscConfig+0x360>)
 8001f98:	400a      	ands	r2, r1
 8001f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9c:	f7ff fbae 	bl	80016fc <HAL_GetTick>
 8001fa0:	0003      	movs	r3, r0
 8001fa2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001fa6:	f7ff fba9 	bl	80016fc <HAL_GetTick>
 8001faa:	0002      	movs	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e0d9      	b.n	800216c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fb8:	4b4f      	ldr	r3, [pc, #316]	@ (80020f8 <HAL_RCC_OscConfig+0x340>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	2380      	movs	r3, #128	@ 0x80
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	d1f0      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2208      	movs	r2, #8
 8001fca:	4013      	ands	r3, r2
 8001fcc:	d042      	beq.n	8002054 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001fce:	4b4a      	ldr	r3, [pc, #296]	@ (80020f8 <HAL_RCC_OscConfig+0x340>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	2238      	movs	r2, #56	@ 0x38
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	2b18      	cmp	r3, #24
 8001fd8:	d105      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d138      	bne.n	8002054 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e0c2      	b.n	800216c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d019      	beq.n	8002022 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001fee:	4b42      	ldr	r3, [pc, #264]	@ (80020f8 <HAL_RCC_OscConfig+0x340>)
 8001ff0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001ff2:	4b41      	ldr	r3, [pc, #260]	@ (80020f8 <HAL_RCC_OscConfig+0x340>)
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffa:	f7ff fb7f 	bl	80016fc <HAL_GetTick>
 8001ffe:	0003      	movs	r3, r0
 8002000:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002004:	f7ff fb7a 	bl	80016fc <HAL_GetTick>
 8002008:	0002      	movs	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e0aa      	b.n	800216c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002016:	4b38      	ldr	r3, [pc, #224]	@ (80020f8 <HAL_RCC_OscConfig+0x340>)
 8002018:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800201a:	2202      	movs	r2, #2
 800201c:	4013      	ands	r3, r2
 800201e:	d0f1      	beq.n	8002004 <HAL_RCC_OscConfig+0x24c>
 8002020:	e018      	b.n	8002054 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002022:	4b35      	ldr	r3, [pc, #212]	@ (80020f8 <HAL_RCC_OscConfig+0x340>)
 8002024:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002026:	4b34      	ldr	r3, [pc, #208]	@ (80020f8 <HAL_RCC_OscConfig+0x340>)
 8002028:	2101      	movs	r1, #1
 800202a:	438a      	bics	r2, r1
 800202c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202e:	f7ff fb65 	bl	80016fc <HAL_GetTick>
 8002032:	0003      	movs	r3, r0
 8002034:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002038:	f7ff fb60 	bl	80016fc <HAL_GetTick>
 800203c:	0002      	movs	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e090      	b.n	800216c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800204a:	4b2b      	ldr	r3, [pc, #172]	@ (80020f8 <HAL_RCC_OscConfig+0x340>)
 800204c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800204e:	2202      	movs	r2, #2
 8002050:	4013      	ands	r3, r2
 8002052:	d1f1      	bne.n	8002038 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2204      	movs	r2, #4
 800205a:	4013      	ands	r3, r2
 800205c:	d100      	bne.n	8002060 <HAL_RCC_OscConfig+0x2a8>
 800205e:	e084      	b.n	800216a <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002060:	230f      	movs	r3, #15
 8002062:	18fb      	adds	r3, r7, r3
 8002064:	2200      	movs	r2, #0
 8002066:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002068:	4b23      	ldr	r3, [pc, #140]	@ (80020f8 <HAL_RCC_OscConfig+0x340>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	2238      	movs	r2, #56	@ 0x38
 800206e:	4013      	ands	r3, r2
 8002070:	2b20      	cmp	r3, #32
 8002072:	d106      	bne.n	8002082 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d000      	beq.n	800207e <HAL_RCC_OscConfig+0x2c6>
 800207c:	e075      	b.n	800216a <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e074      	b.n	800216c <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d106      	bne.n	8002098 <HAL_RCC_OscConfig+0x2e0>
 800208a:	4b1b      	ldr	r3, [pc, #108]	@ (80020f8 <HAL_RCC_OscConfig+0x340>)
 800208c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800208e:	4b1a      	ldr	r3, [pc, #104]	@ (80020f8 <HAL_RCC_OscConfig+0x340>)
 8002090:	2101      	movs	r1, #1
 8002092:	430a      	orrs	r2, r1
 8002094:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002096:	e01c      	b.n	80020d2 <HAL_RCC_OscConfig+0x31a>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	2b05      	cmp	r3, #5
 800209e:	d10c      	bne.n	80020ba <HAL_RCC_OscConfig+0x302>
 80020a0:	4b15      	ldr	r3, [pc, #84]	@ (80020f8 <HAL_RCC_OscConfig+0x340>)
 80020a2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80020a4:	4b14      	ldr	r3, [pc, #80]	@ (80020f8 <HAL_RCC_OscConfig+0x340>)
 80020a6:	2104      	movs	r1, #4
 80020a8:	430a      	orrs	r2, r1
 80020aa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80020ac:	4b12      	ldr	r3, [pc, #72]	@ (80020f8 <HAL_RCC_OscConfig+0x340>)
 80020ae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80020b0:	4b11      	ldr	r3, [pc, #68]	@ (80020f8 <HAL_RCC_OscConfig+0x340>)
 80020b2:	2101      	movs	r1, #1
 80020b4:	430a      	orrs	r2, r1
 80020b6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80020b8:	e00b      	b.n	80020d2 <HAL_RCC_OscConfig+0x31a>
 80020ba:	4b0f      	ldr	r3, [pc, #60]	@ (80020f8 <HAL_RCC_OscConfig+0x340>)
 80020bc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80020be:	4b0e      	ldr	r3, [pc, #56]	@ (80020f8 <HAL_RCC_OscConfig+0x340>)
 80020c0:	2101      	movs	r1, #1
 80020c2:	438a      	bics	r2, r1
 80020c4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80020c6:	4b0c      	ldr	r3, [pc, #48]	@ (80020f8 <HAL_RCC_OscConfig+0x340>)
 80020c8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80020ca:	4b0b      	ldr	r3, [pc, #44]	@ (80020f8 <HAL_RCC_OscConfig+0x340>)
 80020cc:	2104      	movs	r1, #4
 80020ce:	438a      	bics	r2, r1
 80020d0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d028      	beq.n	800212c <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020da:	f7ff fb0f 	bl	80016fc <HAL_GetTick>
 80020de:	0003      	movs	r3, r0
 80020e0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80020e2:	e01d      	b.n	8002120 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020e4:	f7ff fb0a 	bl	80016fc <HAL_GetTick>
 80020e8:	0002      	movs	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	4a0b      	ldr	r2, [pc, #44]	@ (800211c <HAL_RCC_OscConfig+0x364>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d915      	bls.n	8002120 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e039      	b.n	800216c <HAL_RCC_OscConfig+0x3b4>
 80020f8:	40021000 	.word	0x40021000
 80020fc:	fffeffff 	.word	0xfffeffff
 8002100:	fffbffff 	.word	0xfffbffff
 8002104:	ffff80ff 	.word	0xffff80ff
 8002108:	ffffc7ff 	.word	0xffffc7ff
 800210c:	02dc6c00 	.word	0x02dc6c00
 8002110:	20000004 	.word	0x20000004
 8002114:	20000008 	.word	0x20000008
 8002118:	fffffeff 	.word	0xfffffeff
 800211c:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002120:	4b14      	ldr	r3, [pc, #80]	@ (8002174 <HAL_RCC_OscConfig+0x3bc>)
 8002122:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002124:	2202      	movs	r2, #2
 8002126:	4013      	ands	r3, r2
 8002128:	d0dc      	beq.n	80020e4 <HAL_RCC_OscConfig+0x32c>
 800212a:	e013      	b.n	8002154 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212c:	f7ff fae6 	bl	80016fc <HAL_GetTick>
 8002130:	0003      	movs	r3, r0
 8002132:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002134:	e009      	b.n	800214a <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002136:	f7ff fae1 	bl	80016fc <HAL_GetTick>
 800213a:	0002      	movs	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	4a0d      	ldr	r2, [pc, #52]	@ (8002178 <HAL_RCC_OscConfig+0x3c0>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e010      	b.n	800216c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800214a:	4b0a      	ldr	r3, [pc, #40]	@ (8002174 <HAL_RCC_OscConfig+0x3bc>)
 800214c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800214e:	2202      	movs	r2, #2
 8002150:	4013      	ands	r3, r2
 8002152:	d1f0      	bne.n	8002136 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002154:	230f      	movs	r3, #15
 8002156:	18fb      	adds	r3, r7, r3
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d105      	bne.n	800216a <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800215e:	4b05      	ldr	r3, [pc, #20]	@ (8002174 <HAL_RCC_OscConfig+0x3bc>)
 8002160:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002162:	4b04      	ldr	r3, [pc, #16]	@ (8002174 <HAL_RCC_OscConfig+0x3bc>)
 8002164:	4905      	ldr	r1, [pc, #20]	@ (800217c <HAL_RCC_OscConfig+0x3c4>)
 8002166:	400a      	ands	r2, r1
 8002168:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	0018      	movs	r0, r3
 800216e:	46bd      	mov	sp, r7
 8002170:	b006      	add	sp, #24
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40021000 	.word	0x40021000
 8002178:	00001388 	.word	0x00001388
 800217c:	efffffff 	.word	0xefffffff

08002180 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d101      	bne.n	8002194 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e0df      	b.n	8002354 <HAL_RCC_ClockConfig+0x1d4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002194:	4b71      	ldr	r3, [pc, #452]	@ (800235c <HAL_RCC_ClockConfig+0x1dc>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2207      	movs	r2, #7
 800219a:	4013      	ands	r3, r2
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d91e      	bls.n	80021e0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021a2:	4b6e      	ldr	r3, [pc, #440]	@ (800235c <HAL_RCC_ClockConfig+0x1dc>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2207      	movs	r2, #7
 80021a8:	4393      	bics	r3, r2
 80021aa:	0019      	movs	r1, r3
 80021ac:	4b6b      	ldr	r3, [pc, #428]	@ (800235c <HAL_RCC_ClockConfig+0x1dc>)
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	430a      	orrs	r2, r1
 80021b2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80021b4:	f7ff faa2 	bl	80016fc <HAL_GetTick>
 80021b8:	0003      	movs	r3, r0
 80021ba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80021bc:	e009      	b.n	80021d2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80021be:	f7ff fa9d 	bl	80016fc <HAL_GetTick>
 80021c2:	0002      	movs	r2, r0
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	4a65      	ldr	r2, [pc, #404]	@ (8002360 <HAL_RCC_ClockConfig+0x1e0>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e0c0      	b.n	8002354 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80021d2:	4b62      	ldr	r3, [pc, #392]	@ (800235c <HAL_RCC_ClockConfig+0x1dc>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2207      	movs	r2, #7
 80021d8:	4013      	ands	r3, r2
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d1ee      	bne.n	80021be <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2202      	movs	r2, #2
 80021e6:	4013      	ands	r3, r2
 80021e8:	d017      	beq.n	800221a <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2204      	movs	r2, #4
 80021f0:	4013      	ands	r3, r2
 80021f2:	d008      	beq.n	8002206 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80021f4:	4b5b      	ldr	r3, [pc, #364]	@ (8002364 <HAL_RCC_ClockConfig+0x1e4>)
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	4a5b      	ldr	r2, [pc, #364]	@ (8002368 <HAL_RCC_ClockConfig+0x1e8>)
 80021fa:	401a      	ands	r2, r3
 80021fc:	4b59      	ldr	r3, [pc, #356]	@ (8002364 <HAL_RCC_ClockConfig+0x1e4>)
 80021fe:	21b0      	movs	r1, #176	@ 0xb0
 8002200:	0109      	lsls	r1, r1, #4
 8002202:	430a      	orrs	r2, r1
 8002204:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002206:	4b57      	ldr	r3, [pc, #348]	@ (8002364 <HAL_RCC_ClockConfig+0x1e4>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	4a58      	ldr	r2, [pc, #352]	@ (800236c <HAL_RCC_ClockConfig+0x1ec>)
 800220c:	4013      	ands	r3, r2
 800220e:	0019      	movs	r1, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68da      	ldr	r2, [r3, #12]
 8002214:	4b53      	ldr	r3, [pc, #332]	@ (8002364 <HAL_RCC_ClockConfig+0x1e4>)
 8002216:	430a      	orrs	r2, r1
 8002218:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2201      	movs	r2, #1
 8002220:	4013      	ands	r3, r2
 8002222:	d04b      	beq.n	80022bc <HAL_RCC_ClockConfig+0x13c>
#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d107      	bne.n	800223c <HAL_RCC_ClockConfig+0xbc>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800222c:	4b4d      	ldr	r3, [pc, #308]	@ (8002364 <HAL_RCC_ClockConfig+0x1e4>)
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	2380      	movs	r3, #128	@ 0x80
 8002232:	029b      	lsls	r3, r3, #10
 8002234:	4013      	ands	r3, r2
 8002236:	d11f      	bne.n	8002278 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e08b      	b.n	8002354 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d107      	bne.n	8002254 <HAL_RCC_ClockConfig+0xd4>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002244:	4b47      	ldr	r3, [pc, #284]	@ (8002364 <HAL_RCC_ClockConfig+0x1e4>)
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	2380      	movs	r3, #128	@ 0x80
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	4013      	ands	r3, r2
 800224e:	d113      	bne.n	8002278 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e07f      	b.n	8002354 <HAL_RCC_ClockConfig+0x1d4>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	2b03      	cmp	r3, #3
 800225a:	d106      	bne.n	800226a <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800225c:	4b41      	ldr	r3, [pc, #260]	@ (8002364 <HAL_RCC_ClockConfig+0x1e4>)
 800225e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002260:	2202      	movs	r2, #2
 8002262:	4013      	ands	r3, r2
 8002264:	d108      	bne.n	8002278 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e074      	b.n	8002354 <HAL_RCC_ClockConfig+0x1d4>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800226a:	4b3e      	ldr	r3, [pc, #248]	@ (8002364 <HAL_RCC_ClockConfig+0x1e4>)
 800226c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800226e:	2202      	movs	r2, #2
 8002270:	4013      	ands	r3, r2
 8002272:	d101      	bne.n	8002278 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e06d      	b.n	8002354 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002278:	4b3a      	ldr	r3, [pc, #232]	@ (8002364 <HAL_RCC_ClockConfig+0x1e4>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	2207      	movs	r2, #7
 800227e:	4393      	bics	r3, r2
 8002280:	0019      	movs	r1, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685a      	ldr	r2, [r3, #4]
 8002286:	4b37      	ldr	r3, [pc, #220]	@ (8002364 <HAL_RCC_ClockConfig+0x1e4>)
 8002288:	430a      	orrs	r2, r1
 800228a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800228c:	f7ff fa36 	bl	80016fc <HAL_GetTick>
 8002290:	0003      	movs	r3, r0
 8002292:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002294:	e009      	b.n	80022aa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002296:	f7ff fa31 	bl	80016fc <HAL_GetTick>
 800229a:	0002      	movs	r2, r0
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	4a2f      	ldr	r2, [pc, #188]	@ (8002360 <HAL_RCC_ClockConfig+0x1e0>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e054      	b.n	8002354 <HAL_RCC_ClockConfig+0x1d4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022aa:	4b2e      	ldr	r3, [pc, #184]	@ (8002364 <HAL_RCC_ClockConfig+0x1e4>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	2238      	movs	r2, #56	@ 0x38
 80022b0:	401a      	ands	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d1ec      	bne.n	8002296 <HAL_RCC_ClockConfig+0x116>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022bc:	4b27      	ldr	r3, [pc, #156]	@ (800235c <HAL_RCC_ClockConfig+0x1dc>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2207      	movs	r2, #7
 80022c2:	4013      	ands	r3, r2
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d21e      	bcs.n	8002308 <HAL_RCC_ClockConfig+0x188>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ca:	4b24      	ldr	r3, [pc, #144]	@ (800235c <HAL_RCC_ClockConfig+0x1dc>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2207      	movs	r2, #7
 80022d0:	4393      	bics	r3, r2
 80022d2:	0019      	movs	r1, r3
 80022d4:	4b21      	ldr	r3, [pc, #132]	@ (800235c <HAL_RCC_ClockConfig+0x1dc>)
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	430a      	orrs	r2, r1
 80022da:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80022dc:	f7ff fa0e 	bl	80016fc <HAL_GetTick>
 80022e0:	0003      	movs	r3, r0
 80022e2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80022e4:	e009      	b.n	80022fa <HAL_RCC_ClockConfig+0x17a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80022e6:	f7ff fa09 	bl	80016fc <HAL_GetTick>
 80022ea:	0002      	movs	r2, r0
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	4a1b      	ldr	r2, [pc, #108]	@ (8002360 <HAL_RCC_ClockConfig+0x1e0>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_ClockConfig+0x17a>
      {
        return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e02c      	b.n	8002354 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80022fa:	4b18      	ldr	r3, [pc, #96]	@ (800235c <HAL_RCC_ClockConfig+0x1dc>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2207      	movs	r2, #7
 8002300:	4013      	ands	r3, r2
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	429a      	cmp	r2, r3
 8002306:	d1ee      	bne.n	80022e6 <HAL_RCC_ClockConfig+0x166>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2204      	movs	r2, #4
 800230e:	4013      	ands	r3, r2
 8002310:	d009      	beq.n	8002326 <HAL_RCC_ClockConfig+0x1a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002312:	4b14      	ldr	r3, [pc, #80]	@ (8002364 <HAL_RCC_ClockConfig+0x1e4>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	4a16      	ldr	r2, [pc, #88]	@ (8002370 <HAL_RCC_ClockConfig+0x1f0>)
 8002318:	4013      	ands	r3, r2
 800231a:	0019      	movs	r1, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	691a      	ldr	r2, [r3, #16]
 8002320:	4b10      	ldr	r3, [pc, #64]	@ (8002364 <HAL_RCC_ClockConfig+0x1e4>)
 8002322:	430a      	orrs	r2, r1
 8002324:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002326:	f000 f82b 	bl	8002380 <HAL_RCC_GetSysClockFreq>
 800232a:	0001      	movs	r1, r0
 800232c:	4b0d      	ldr	r3, [pc, #52]	@ (8002364 <HAL_RCC_ClockConfig+0x1e4>)
 800232e:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002330:	0a1b      	lsrs	r3, r3, #8
 8002332:	220f      	movs	r2, #15
 8002334:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002336:	4b0f      	ldr	r3, [pc, #60]	@ (8002374 <HAL_RCC_ClockConfig+0x1f4>)
 8002338:	0092      	lsls	r2, r2, #2
 800233a:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800233c:	221f      	movs	r2, #31
 800233e:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002340:	000a      	movs	r2, r1
 8002342:	40da      	lsrs	r2, r3
 8002344:	4b0c      	ldr	r3, [pc, #48]	@ (8002378 <HAL_RCC_ClockConfig+0x1f8>)
 8002346:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002348:	4b0c      	ldr	r3, [pc, #48]	@ (800237c <HAL_RCC_ClockConfig+0x1fc>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	0018      	movs	r0, r3
 800234e:	f7ff f979 	bl	8001644 <HAL_InitTick>
 8002352:	0003      	movs	r3, r0
}
 8002354:	0018      	movs	r0, r3
 8002356:	46bd      	mov	sp, r7
 8002358:	b004      	add	sp, #16
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40022000 	.word	0x40022000
 8002360:	00001388 	.word	0x00001388
 8002364:	40021000 	.word	0x40021000
 8002368:	ffff84ff 	.word	0xffff84ff
 800236c:	fffff0ff 	.word	0xfffff0ff
 8002370:	ffff8fff 	.word	0xffff8fff
 8002374:	08005d2c 	.word	0x08005d2c
 8002378:	20000004 	.word	0x20000004
 800237c:	20000008 	.word	0x20000008

08002380 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002386:	4b1c      	ldr	r3, [pc, #112]	@ (80023f8 <HAL_RCC_GetSysClockFreq+0x78>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	2238      	movs	r2, #56	@ 0x38
 800238c:	4013      	ands	r3, r2
 800238e:	d10f      	bne.n	80023b0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002390:	4b19      	ldr	r3, [pc, #100]	@ (80023f8 <HAL_RCC_GetSysClockFreq+0x78>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	0adb      	lsrs	r3, r3, #11
 8002396:	2207      	movs	r2, #7
 8002398:	4013      	ands	r3, r2
 800239a:	2201      	movs	r2, #1
 800239c:	409a      	lsls	r2, r3
 800239e:	0013      	movs	r3, r2
 80023a0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80023a2:	6839      	ldr	r1, [r7, #0]
 80023a4:	4815      	ldr	r0, [pc, #84]	@ (80023fc <HAL_RCC_GetSysClockFreq+0x7c>)
 80023a6:	f7fd feaf 	bl	8000108 <__udivsi3>
 80023aa:	0003      	movs	r3, r0
 80023ac:	607b      	str	r3, [r7, #4]
 80023ae:	e01e      	b.n	80023ee <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80023b0:	4b11      	ldr	r3, [pc, #68]	@ (80023f8 <HAL_RCC_GetSysClockFreq+0x78>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	2238      	movs	r2, #56	@ 0x38
 80023b6:	4013      	ands	r3, r2
 80023b8:	2b08      	cmp	r3, #8
 80023ba:	d102      	bne.n	80023c2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023bc:	4b10      	ldr	r3, [pc, #64]	@ (8002400 <HAL_RCC_GetSysClockFreq+0x80>)
 80023be:	607b      	str	r3, [r7, #4]
 80023c0:	e015      	b.n	80023ee <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80023c2:	4b0d      	ldr	r3, [pc, #52]	@ (80023f8 <HAL_RCC_GetSysClockFreq+0x78>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	2238      	movs	r2, #56	@ 0x38
 80023c8:	4013      	ands	r3, r2
 80023ca:	2b20      	cmp	r3, #32
 80023cc:	d103      	bne.n	80023d6 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80023ce:	2380      	movs	r3, #128	@ 0x80
 80023d0:	021b      	lsls	r3, r3, #8
 80023d2:	607b      	str	r3, [r7, #4]
 80023d4:	e00b      	b.n	80023ee <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80023d6:	4b08      	ldr	r3, [pc, #32]	@ (80023f8 <HAL_RCC_GetSysClockFreq+0x78>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	2238      	movs	r2, #56	@ 0x38
 80023dc:	4013      	ands	r3, r2
 80023de:	2b18      	cmp	r3, #24
 80023e0:	d103      	bne.n	80023ea <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80023e2:	23fa      	movs	r3, #250	@ 0xfa
 80023e4:	01db      	lsls	r3, r3, #7
 80023e6:	607b      	str	r3, [r7, #4]
 80023e8:	e001      	b.n	80023ee <HAL_RCC_GetSysClockFreq+0x6e>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 80023ea:	2300      	movs	r3, #0
 80023ec:	607b      	str	r3, [r7, #4]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 80023ee:	687b      	ldr	r3, [r7, #4]
}
 80023f0:	0018      	movs	r0, r3
 80023f2:	46bd      	mov	sp, r7
 80023f4:	b002      	add	sp, #8
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40021000 	.word	0x40021000
 80023fc:	02dc6c00 	.word	0x02dc6c00
 8002400:	007a1200 	.word	0x007a1200

08002404 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002408:	f7ff ffba 	bl	8002380 <HAL_RCC_GetSysClockFreq>
 800240c:	0001      	movs	r1, r0
 800240e:	4b09      	ldr	r3, [pc, #36]	@ (8002434 <HAL_RCC_GetHCLKFreq+0x30>)
 8002410:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002412:	0a1b      	lsrs	r3, r3, #8
 8002414:	220f      	movs	r2, #15
 8002416:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002418:	4b07      	ldr	r3, [pc, #28]	@ (8002438 <HAL_RCC_GetHCLKFreq+0x34>)
 800241a:	0092      	lsls	r2, r2, #2
 800241c:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800241e:	221f      	movs	r2, #31
 8002420:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002422:	000a      	movs	r2, r1
 8002424:	40da      	lsrs	r2, r3
 8002426:	4b05      	ldr	r3, [pc, #20]	@ (800243c <HAL_RCC_GetHCLKFreq+0x38>)
 8002428:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 800242a:	4b04      	ldr	r3, [pc, #16]	@ (800243c <HAL_RCC_GetHCLKFreq+0x38>)
 800242c:	681b      	ldr	r3, [r3, #0]
}
 800242e:	0018      	movs	r0, r3
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40021000 	.word	0x40021000
 8002438:	08005d2c 	.word	0x08005d2c
 800243c:	20000004 	.word	0x20000004

08002440 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8002444:	f7ff ffde 	bl	8002404 <HAL_RCC_GetHCLKFreq>
 8002448:	0001      	movs	r1, r0
 800244a:	4b07      	ldr	r3, [pc, #28]	@ (8002468 <HAL_RCC_GetPCLK1Freq+0x28>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	0b1b      	lsrs	r3, r3, #12
 8002450:	2207      	movs	r2, #7
 8002452:	401a      	ands	r2, r3
 8002454:	4b05      	ldr	r3, [pc, #20]	@ (800246c <HAL_RCC_GetPCLK1Freq+0x2c>)
 8002456:	0092      	lsls	r2, r2, #2
 8002458:	58d3      	ldr	r3, [r2, r3]
 800245a:	221f      	movs	r2, #31
 800245c:	4013      	ands	r3, r2
 800245e:	40d9      	lsrs	r1, r3
 8002460:	000b      	movs	r3, r1
}
 8002462:	0018      	movs	r0, r3
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40021000 	.word	0x40021000
 800246c:	08005d6c 	.word	0x08005d6c

08002470 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002478:	2313      	movs	r3, #19
 800247a:	18fb      	adds	r3, r7, r3
 800247c:	2200      	movs	r2, #0
 800247e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002480:	2312      	movs	r3, #18
 8002482:	18fb      	adds	r3, r7, r3
 8002484:	2200      	movs	r2, #0
 8002486:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2240      	movs	r2, #64	@ 0x40
 800248e:	4013      	ands	r3, r2
 8002490:	d100      	bne.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8002492:	e079      	b.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002494:	2011      	movs	r0, #17
 8002496:	183b      	adds	r3, r7, r0
 8002498:	2200      	movs	r2, #0
 800249a:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800249c:	4b63      	ldr	r3, [pc, #396]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800249e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80024a0:	2380      	movs	r3, #128	@ 0x80
 80024a2:	055b      	lsls	r3, r3, #21
 80024a4:	4013      	ands	r3, r2
 80024a6:	d110      	bne.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024a8:	4b60      	ldr	r3, [pc, #384]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80024aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80024ac:	4b5f      	ldr	r3, [pc, #380]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80024ae:	2180      	movs	r1, #128	@ 0x80
 80024b0:	0549      	lsls	r1, r1, #21
 80024b2:	430a      	orrs	r2, r1
 80024b4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80024b6:	4b5d      	ldr	r3, [pc, #372]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80024b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80024ba:	2380      	movs	r3, #128	@ 0x80
 80024bc:	055b      	lsls	r3, r3, #21
 80024be:	4013      	ands	r3, r2
 80024c0:	60bb      	str	r3, [r7, #8]
 80024c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024c4:	183b      	adds	r3, r7, r0
 80024c6:	2201      	movs	r2, #1
 80024c8:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 80024ca:	4b58      	ldr	r3, [pc, #352]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80024cc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80024ce:	23c0      	movs	r3, #192	@ 0xc0
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	4013      	ands	r3, r2
 80024d4:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d019      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d014      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 80024e6:	4b51      	ldr	r3, [pc, #324]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80024e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ea:	4a51      	ldr	r2, [pc, #324]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80024ec:	4013      	ands	r3, r2
 80024ee:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024f0:	4b4e      	ldr	r3, [pc, #312]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80024f2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80024f4:	4b4d      	ldr	r3, [pc, #308]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80024f6:	2180      	movs	r1, #128	@ 0x80
 80024f8:	0249      	lsls	r1, r1, #9
 80024fa:	430a      	orrs	r2, r1
 80024fc:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024fe:	4b4b      	ldr	r3, [pc, #300]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002500:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002502:	4b4a      	ldr	r3, [pc, #296]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002504:	494b      	ldr	r1, [pc, #300]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002506:	400a      	ands	r2, r1
 8002508:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 800250a:	4b48      	ldr	r3, [pc, #288]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800250c:	697a      	ldr	r2, [r7, #20]
 800250e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	2201      	movs	r2, #1
 8002514:	4013      	ands	r3, r2
 8002516:	d016      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002518:	f7ff f8f0 	bl	80016fc <HAL_GetTick>
 800251c:	0003      	movs	r3, r0
 800251e:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002520:	e00c      	b.n	800253c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002522:	f7ff f8eb 	bl	80016fc <HAL_GetTick>
 8002526:	0002      	movs	r2, r0
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	4a42      	ldr	r2, [pc, #264]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d904      	bls.n	800253c <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8002532:	2313      	movs	r3, #19
 8002534:	18fb      	adds	r3, r7, r3
 8002536:	2203      	movs	r2, #3
 8002538:	701a      	strb	r2, [r3, #0]
          break;
 800253a:	e004      	b.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800253c:	4b3b      	ldr	r3, [pc, #236]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800253e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002540:	2202      	movs	r2, #2
 8002542:	4013      	ands	r3, r2
 8002544:	d0ed      	beq.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8002546:	2313      	movs	r3, #19
 8002548:	18fb      	adds	r3, r7, r3
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10a      	bne.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002550:	4b36      	ldr	r3, [pc, #216]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002552:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002554:	4a36      	ldr	r2, [pc, #216]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002556:	4013      	ands	r3, r2
 8002558:	0019      	movs	r1, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	699a      	ldr	r2, [r3, #24]
 800255e:	4b33      	ldr	r3, [pc, #204]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002560:	430a      	orrs	r2, r1
 8002562:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002564:	e005      	b.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002566:	2312      	movs	r3, #18
 8002568:	18fb      	adds	r3, r7, r3
 800256a:	2213      	movs	r2, #19
 800256c:	18ba      	adds	r2, r7, r2
 800256e:	7812      	ldrb	r2, [r2, #0]
 8002570:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002572:	2311      	movs	r3, #17
 8002574:	18fb      	adds	r3, r7, r3
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d105      	bne.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800257c:	4b2b      	ldr	r3, [pc, #172]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800257e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002580:	4b2a      	ldr	r3, [pc, #168]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002582:	492e      	ldr	r1, [pc, #184]	@ (800263c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002584:	400a      	ands	r2, r1
 8002586:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2201      	movs	r2, #1
 800258e:	4013      	ands	r3, r2
 8002590:	d009      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002592:	4b26      	ldr	r3, [pc, #152]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002596:	2203      	movs	r2, #3
 8002598:	4393      	bics	r3, r2
 800259a:	0019      	movs	r1, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689a      	ldr	r2, [r3, #8]
 80025a0:	4b22      	ldr	r3, [pc, #136]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80025a2:	430a      	orrs	r2, r1
 80025a4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2202      	movs	r2, #2
 80025ac:	4013      	ands	r3, r2
 80025ae:	d009      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025b0:	4b1e      	ldr	r3, [pc, #120]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80025b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025b4:	4a22      	ldr	r2, [pc, #136]	@ (8002640 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025b6:	4013      	ands	r3, r2
 80025b8:	0019      	movs	r1, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68da      	ldr	r2, [r3, #12]
 80025be:	4b1b      	ldr	r3, [pc, #108]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80025c0:	430a      	orrs	r2, r1
 80025c2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2220      	movs	r2, #32
 80025ca:	4013      	ands	r3, r2
 80025cc:	d008      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025ce:	4b17      	ldr	r3, [pc, #92]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80025d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	0899      	lsrs	r1, r3, #2
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	695a      	ldr	r2, [r3, #20]
 80025da:	4b14      	ldr	r3, [pc, #80]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80025dc:	430a      	orrs	r2, r1
 80025de:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_FDCAN1_CONFIG(PeriphClkInit->Fdcan1ClockSelection);

  }
#endif /* FDCAN1 */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2204      	movs	r2, #4
 80025e6:	4013      	ands	r3, r2
 80025e8:	d009      	beq.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80025ea:	4b10      	ldr	r3, [pc, #64]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80025ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ee:	4a15      	ldr	r2, [pc, #84]	@ (8002644 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80025f0:	4013      	ands	r3, r2
 80025f2:	0019      	movs	r1, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	691a      	ldr	r2, [r3, #16]
 80025f8:	4b0c      	ldr	r3, [pc, #48]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80025fa:	430a      	orrs	r2, r1
 80025fc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2280      	movs	r2, #128	@ 0x80
 8002604:	4013      	ands	r3, r2
 8002606:	d009      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8002608:	4b08      	ldr	r3, [pc, #32]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	22e0      	movs	r2, #224	@ 0xe0
 800260e:	4393      	bics	r3, r2
 8002610:	0019      	movs	r1, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	4b05      	ldr	r3, [pc, #20]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002618:	430a      	orrs	r2, r1
 800261a:	601a      	str	r2, [r3, #0]
  }
  return status;
 800261c:	2312      	movs	r3, #18
 800261e:	18fb      	adds	r3, r7, r3
 8002620:	781b      	ldrb	r3, [r3, #0]
}
 8002622:	0018      	movs	r0, r3
 8002624:	46bd      	mov	sp, r7
 8002626:	b006      	add	sp, #24
 8002628:	bd80      	pop	{r7, pc}
 800262a:	46c0      	nop			@ (mov r8, r8)
 800262c:	40021000 	.word	0x40021000
 8002630:	fffffcff 	.word	0xfffffcff
 8002634:	fffeffff 	.word	0xfffeffff
 8002638:	00001388 	.word	0x00001388
 800263c:	efffffff 	.word	0xefffffff
 8002640:	ffffcfff 	.word	0xffffcfff
 8002644:	ffff3fff 	.word	0xffff3fff

08002648 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e04a      	b.n	80026f0 <HAL_TIM_OC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	223d      	movs	r2, #61	@ 0x3d
 800265e:	5c9b      	ldrb	r3, [r3, r2]
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d107      	bne.n	8002676 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	223c      	movs	r2, #60	@ 0x3c
 800266a:	2100      	movs	r1, #0
 800266c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	0018      	movs	r0, r3
 8002672:	f7fe fe55 	bl	8001320 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	223d      	movs	r2, #61	@ 0x3d
 800267a:	2102      	movs	r1, #2
 800267c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	3304      	adds	r3, #4
 8002686:	0019      	movs	r1, r3
 8002688:	0010      	movs	r0, r2
 800268a:	f000 fb07 	bl	8002c9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2248      	movs	r2, #72	@ 0x48
 8002692:	2101      	movs	r1, #1
 8002694:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	223e      	movs	r2, #62	@ 0x3e
 800269a:	2101      	movs	r1, #1
 800269c:	5499      	strb	r1, [r3, r2]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	223f      	movs	r2, #63	@ 0x3f
 80026a2:	2101      	movs	r1, #1
 80026a4:	5499      	strb	r1, [r3, r2]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2240      	movs	r2, #64	@ 0x40
 80026aa:	2101      	movs	r1, #1
 80026ac:	5499      	strb	r1, [r3, r2]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2241      	movs	r2, #65	@ 0x41
 80026b2:	2101      	movs	r1, #1
 80026b4:	5499      	strb	r1, [r3, r2]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2242      	movs	r2, #66	@ 0x42
 80026ba:	2101      	movs	r1, #1
 80026bc:	5499      	strb	r1, [r3, r2]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2243      	movs	r2, #67	@ 0x43
 80026c2:	2101      	movs	r1, #1
 80026c4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2244      	movs	r2, #68	@ 0x44
 80026ca:	2101      	movs	r1, #1
 80026cc:	5499      	strb	r1, [r3, r2]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2245      	movs	r2, #69	@ 0x45
 80026d2:	2101      	movs	r1, #1
 80026d4:	5499      	strb	r1, [r3, r2]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2246      	movs	r2, #70	@ 0x46
 80026da:	2101      	movs	r1, #1
 80026dc:	5499      	strb	r1, [r3, r2]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2247      	movs	r2, #71	@ 0x47
 80026e2:	2101      	movs	r1, #1
 80026e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	223d      	movs	r2, #61	@ 0x3d
 80026ea:	2101      	movs	r1, #1
 80026ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	0018      	movs	r0, r3
 80026f2:	46bd      	mov	sp, r7
 80026f4:	b002      	add	sp, #8
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002702:	230f      	movs	r3, #15
 8002704:	18fb      	adds	r3, r7, r3
 8002706:	2200      	movs	r2, #0
 8002708:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d108      	bne.n	8002722 <HAL_TIM_OC_Start_IT+0x2a>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	223e      	movs	r2, #62	@ 0x3e
 8002714:	5c9b      	ldrb	r3, [r3, r2]
 8002716:	b2db      	uxtb	r3, r3
 8002718:	3b01      	subs	r3, #1
 800271a:	1e5a      	subs	r2, r3, #1
 800271c:	4193      	sbcs	r3, r2
 800271e:	b2db      	uxtb	r3, r3
 8002720:	e037      	b.n	8002792 <HAL_TIM_OC_Start_IT+0x9a>
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	2b04      	cmp	r3, #4
 8002726:	d108      	bne.n	800273a <HAL_TIM_OC_Start_IT+0x42>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	223f      	movs	r2, #63	@ 0x3f
 800272c:	5c9b      	ldrb	r3, [r3, r2]
 800272e:	b2db      	uxtb	r3, r3
 8002730:	3b01      	subs	r3, #1
 8002732:	1e5a      	subs	r2, r3, #1
 8002734:	4193      	sbcs	r3, r2
 8002736:	b2db      	uxtb	r3, r3
 8002738:	e02b      	b.n	8002792 <HAL_TIM_OC_Start_IT+0x9a>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	2b08      	cmp	r3, #8
 800273e:	d108      	bne.n	8002752 <HAL_TIM_OC_Start_IT+0x5a>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2240      	movs	r2, #64	@ 0x40
 8002744:	5c9b      	ldrb	r3, [r3, r2]
 8002746:	b2db      	uxtb	r3, r3
 8002748:	3b01      	subs	r3, #1
 800274a:	1e5a      	subs	r2, r3, #1
 800274c:	4193      	sbcs	r3, r2
 800274e:	b2db      	uxtb	r3, r3
 8002750:	e01f      	b.n	8002792 <HAL_TIM_OC_Start_IT+0x9a>
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	2b0c      	cmp	r3, #12
 8002756:	d108      	bne.n	800276a <HAL_TIM_OC_Start_IT+0x72>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2241      	movs	r2, #65	@ 0x41
 800275c:	5c9b      	ldrb	r3, [r3, r2]
 800275e:	b2db      	uxtb	r3, r3
 8002760:	3b01      	subs	r3, #1
 8002762:	1e5a      	subs	r2, r3, #1
 8002764:	4193      	sbcs	r3, r2
 8002766:	b2db      	uxtb	r3, r3
 8002768:	e013      	b.n	8002792 <HAL_TIM_OC_Start_IT+0x9a>
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	2b10      	cmp	r3, #16
 800276e:	d108      	bne.n	8002782 <HAL_TIM_OC_Start_IT+0x8a>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2242      	movs	r2, #66	@ 0x42
 8002774:	5c9b      	ldrb	r3, [r3, r2]
 8002776:	b2db      	uxtb	r3, r3
 8002778:	3b01      	subs	r3, #1
 800277a:	1e5a      	subs	r2, r3, #1
 800277c:	4193      	sbcs	r3, r2
 800277e:	b2db      	uxtb	r3, r3
 8002780:	e007      	b.n	8002792 <HAL_TIM_OC_Start_IT+0x9a>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2243      	movs	r2, #67	@ 0x43
 8002786:	5c9b      	ldrb	r3, [r3, r2]
 8002788:	b2db      	uxtb	r3, r3
 800278a:	3b01      	subs	r3, #1
 800278c:	1e5a      	subs	r2, r3, #1
 800278e:	4193      	sbcs	r3, r2
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <HAL_TIM_OC_Start_IT+0xa2>
  {
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e0be      	b.n	8002918 <HAL_TIM_OC_Start_IT+0x220>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d104      	bne.n	80027aa <HAL_TIM_OC_Start_IT+0xb2>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	223e      	movs	r2, #62	@ 0x3e
 80027a4:	2102      	movs	r1, #2
 80027a6:	5499      	strb	r1, [r3, r2]
 80027a8:	e023      	b.n	80027f2 <HAL_TIM_OC_Start_IT+0xfa>
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	2b04      	cmp	r3, #4
 80027ae:	d104      	bne.n	80027ba <HAL_TIM_OC_Start_IT+0xc2>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	223f      	movs	r2, #63	@ 0x3f
 80027b4:	2102      	movs	r1, #2
 80027b6:	5499      	strb	r1, [r3, r2]
 80027b8:	e01b      	b.n	80027f2 <HAL_TIM_OC_Start_IT+0xfa>
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	2b08      	cmp	r3, #8
 80027be:	d104      	bne.n	80027ca <HAL_TIM_OC_Start_IT+0xd2>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2240      	movs	r2, #64	@ 0x40
 80027c4:	2102      	movs	r1, #2
 80027c6:	5499      	strb	r1, [r3, r2]
 80027c8:	e013      	b.n	80027f2 <HAL_TIM_OC_Start_IT+0xfa>
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	2b0c      	cmp	r3, #12
 80027ce:	d104      	bne.n	80027da <HAL_TIM_OC_Start_IT+0xe2>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2241      	movs	r2, #65	@ 0x41
 80027d4:	2102      	movs	r1, #2
 80027d6:	5499      	strb	r1, [r3, r2]
 80027d8:	e00b      	b.n	80027f2 <HAL_TIM_OC_Start_IT+0xfa>
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	2b10      	cmp	r3, #16
 80027de:	d104      	bne.n	80027ea <HAL_TIM_OC_Start_IT+0xf2>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2242      	movs	r2, #66	@ 0x42
 80027e4:	2102      	movs	r1, #2
 80027e6:	5499      	strb	r1, [r3, r2]
 80027e8:	e003      	b.n	80027f2 <HAL_TIM_OC_Start_IT+0xfa>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2243      	movs	r2, #67	@ 0x43
 80027ee:	2102      	movs	r1, #2
 80027f0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	2b0c      	cmp	r3, #12
 80027f6:	d02a      	beq.n	800284e <HAL_TIM_OC_Start_IT+0x156>
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	2b0c      	cmp	r3, #12
 80027fc:	d830      	bhi.n	8002860 <HAL_TIM_OC_Start_IT+0x168>
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	2b08      	cmp	r3, #8
 8002802:	d01b      	beq.n	800283c <HAL_TIM_OC_Start_IT+0x144>
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	2b08      	cmp	r3, #8
 8002808:	d82a      	bhi.n	8002860 <HAL_TIM_OC_Start_IT+0x168>
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d003      	beq.n	8002818 <HAL_TIM_OC_Start_IT+0x120>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	2b04      	cmp	r3, #4
 8002814:	d009      	beq.n	800282a <HAL_TIM_OC_Start_IT+0x132>
 8002816:	e023      	b.n	8002860 <HAL_TIM_OC_Start_IT+0x168>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68da      	ldr	r2, [r3, #12]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2102      	movs	r1, #2
 8002824:	430a      	orrs	r2, r1
 8002826:	60da      	str	r2, [r3, #12]
      break;
 8002828:	e01f      	b.n	800286a <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68da      	ldr	r2, [r3, #12]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2104      	movs	r1, #4
 8002836:	430a      	orrs	r2, r1
 8002838:	60da      	str	r2, [r3, #12]
      break;
 800283a:	e016      	b.n	800286a <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68da      	ldr	r2, [r3, #12]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2108      	movs	r1, #8
 8002848:	430a      	orrs	r2, r1
 800284a:	60da      	str	r2, [r3, #12]
      break;
 800284c:	e00d      	b.n	800286a <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68da      	ldr	r2, [r3, #12]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2110      	movs	r1, #16
 800285a:	430a      	orrs	r2, r1
 800285c:	60da      	str	r2, [r3, #12]
      break;
 800285e:	e004      	b.n	800286a <HAL_TIM_OC_Start_IT+0x172>
    }

    default:
      status = HAL_ERROR;
 8002860:	230f      	movs	r3, #15
 8002862:	18fb      	adds	r3, r7, r3
 8002864:	2201      	movs	r2, #1
 8002866:	701a      	strb	r2, [r3, #0]
      break;
 8002868:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 800286a:	230f      	movs	r3, #15
 800286c:	18fb      	adds	r3, r7, r3
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d14e      	bne.n	8002912 <HAL_TIM_OC_Start_IT+0x21a>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6839      	ldr	r1, [r7, #0]
 800287a:	2201      	movs	r2, #1
 800287c:	0018      	movs	r0, r3
 800287e:	f000 fd23 	bl	80032c8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a26      	ldr	r2, [pc, #152]	@ (8002920 <HAL_TIM_OC_Start_IT+0x228>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d009      	beq.n	80028a0 <HAL_TIM_OC_Start_IT+0x1a8>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a24      	ldr	r2, [pc, #144]	@ (8002924 <HAL_TIM_OC_Start_IT+0x22c>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d004      	beq.n	80028a0 <HAL_TIM_OC_Start_IT+0x1a8>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a23      	ldr	r2, [pc, #140]	@ (8002928 <HAL_TIM_OC_Start_IT+0x230>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d101      	bne.n	80028a4 <HAL_TIM_OC_Start_IT+0x1ac>
 80028a0:	2301      	movs	r3, #1
 80028a2:	e000      	b.n	80028a6 <HAL_TIM_OC_Start_IT+0x1ae>
 80028a4:	2300      	movs	r3, #0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d008      	beq.n	80028bc <HAL_TIM_OC_Start_IT+0x1c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2180      	movs	r1, #128	@ 0x80
 80028b6:	0209      	lsls	r1, r1, #8
 80028b8:	430a      	orrs	r2, r1
 80028ba:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a17      	ldr	r2, [pc, #92]	@ (8002920 <HAL_TIM_OC_Start_IT+0x228>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d004      	beq.n	80028d0 <HAL_TIM_OC_Start_IT+0x1d8>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a18      	ldr	r2, [pc, #96]	@ (800292c <HAL_TIM_OC_Start_IT+0x234>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d116      	bne.n	80028fe <HAL_TIM_OC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	4a16      	ldr	r2, [pc, #88]	@ (8002930 <HAL_TIM_OC_Start_IT+0x238>)
 80028d8:	4013      	ands	r3, r2
 80028da:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	2b06      	cmp	r3, #6
 80028e0:	d016      	beq.n	8002910 <HAL_TIM_OC_Start_IT+0x218>
 80028e2:	68ba      	ldr	r2, [r7, #8]
 80028e4:	2380      	movs	r3, #128	@ 0x80
 80028e6:	025b      	lsls	r3, r3, #9
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d011      	beq.n	8002910 <HAL_TIM_OC_Start_IT+0x218>
      {
        __HAL_TIM_ENABLE(htim);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2101      	movs	r1, #1
 80028f8:	430a      	orrs	r2, r1
 80028fa:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028fc:	e008      	b.n	8002910 <HAL_TIM_OC_Start_IT+0x218>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2101      	movs	r1, #1
 800290a:	430a      	orrs	r2, r1
 800290c:	601a      	str	r2, [r3, #0]
 800290e:	e000      	b.n	8002912 <HAL_TIM_OC_Start_IT+0x21a>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002910:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8002912:	230f      	movs	r3, #15
 8002914:	18fb      	adds	r3, r7, r3
 8002916:	781b      	ldrb	r3, [r3, #0]
}
 8002918:	0018      	movs	r0, r3
 800291a:	46bd      	mov	sp, r7
 800291c:	b004      	add	sp, #16
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40012c00 	.word	0x40012c00
 8002924:	40014400 	.word	0x40014400
 8002928:	40014800 	.word	0x40014800
 800292c:	40000400 	.word	0x40000400
 8002930:	00010007 	.word	0x00010007

08002934 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	2202      	movs	r2, #2
 8002950:	4013      	ands	r3, r2
 8002952:	d021      	beq.n	8002998 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2202      	movs	r2, #2
 8002958:	4013      	ands	r3, r2
 800295a:	d01d      	beq.n	8002998 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2203      	movs	r2, #3
 8002962:	4252      	negs	r2, r2
 8002964:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2201      	movs	r2, #1
 800296a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	2203      	movs	r2, #3
 8002974:	4013      	ands	r3, r2
 8002976:	d004      	beq.n	8002982 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	0018      	movs	r0, r3
 800297c:	f7fe fc20 	bl	80011c0 <HAL_TIM_IC_CaptureCallback>
 8002980:	e007      	b.n	8002992 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	0018      	movs	r0, r3
 8002986:	f000 f971 	bl	8002c6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	0018      	movs	r0, r3
 800298e:	f000 f975 	bl	8002c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	2204      	movs	r2, #4
 800299c:	4013      	ands	r3, r2
 800299e:	d022      	beq.n	80029e6 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2204      	movs	r2, #4
 80029a4:	4013      	ands	r3, r2
 80029a6:	d01e      	beq.n	80029e6 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2205      	movs	r2, #5
 80029ae:	4252      	negs	r2, r2
 80029b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2202      	movs	r2, #2
 80029b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	699a      	ldr	r2, [r3, #24]
 80029be:	23c0      	movs	r3, #192	@ 0xc0
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	4013      	ands	r3, r2
 80029c4:	d004      	beq.n	80029d0 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	0018      	movs	r0, r3
 80029ca:	f7fe fbf9 	bl	80011c0 <HAL_TIM_IC_CaptureCallback>
 80029ce:	e007      	b.n	80029e0 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	0018      	movs	r0, r3
 80029d4:	f000 f94a 	bl	8002c6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	0018      	movs	r0, r3
 80029dc:	f000 f94e 	bl	8002c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	2208      	movs	r2, #8
 80029ea:	4013      	ands	r3, r2
 80029ec:	d021      	beq.n	8002a32 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2208      	movs	r2, #8
 80029f2:	4013      	ands	r3, r2
 80029f4:	d01d      	beq.n	8002a32 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2209      	movs	r2, #9
 80029fc:	4252      	negs	r2, r2
 80029fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2204      	movs	r2, #4
 8002a04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	69db      	ldr	r3, [r3, #28]
 8002a0c:	2203      	movs	r2, #3
 8002a0e:	4013      	ands	r3, r2
 8002a10:	d004      	beq.n	8002a1c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	0018      	movs	r0, r3
 8002a16:	f7fe fbd3 	bl	80011c0 <HAL_TIM_IC_CaptureCallback>
 8002a1a:	e007      	b.n	8002a2c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	0018      	movs	r0, r3
 8002a20:	f000 f924 	bl	8002c6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	0018      	movs	r0, r3
 8002a28:	f000 f928 	bl	8002c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	2210      	movs	r2, #16
 8002a36:	4013      	ands	r3, r2
 8002a38:	d022      	beq.n	8002a80 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2210      	movs	r2, #16
 8002a3e:	4013      	ands	r3, r2
 8002a40:	d01e      	beq.n	8002a80 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2211      	movs	r2, #17
 8002a48:	4252      	negs	r2, r2
 8002a4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2208      	movs	r2, #8
 8002a50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	69da      	ldr	r2, [r3, #28]
 8002a58:	23c0      	movs	r3, #192	@ 0xc0
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	d004      	beq.n	8002a6a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	0018      	movs	r0, r3
 8002a64:	f7fe fbac 	bl	80011c0 <HAL_TIM_IC_CaptureCallback>
 8002a68:	e007      	b.n	8002a7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	f000 f8fd 	bl	8002c6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	0018      	movs	r0, r3
 8002a76:	f000 f901 	bl	8002c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	2201      	movs	r2, #1
 8002a84:	4013      	ands	r3, r2
 8002a86:	d00c      	beq.n	8002aa2 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	d008      	beq.n	8002aa2 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2202      	movs	r2, #2
 8002a96:	4252      	negs	r2, r2
 8002a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	f7fe fbfd 	bl	800129c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	2280      	movs	r2, #128	@ 0x80
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	d104      	bne.n	8002ab4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	2380      	movs	r3, #128	@ 0x80
 8002aae:	019b      	lsls	r3, r3, #6
 8002ab0:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002ab2:	d00b      	beq.n	8002acc <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2280      	movs	r2, #128	@ 0x80
 8002ab8:	4013      	ands	r3, r2
 8002aba:	d007      	beq.n	8002acc <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a1e      	ldr	r2, [pc, #120]	@ (8002b3c <HAL_TIM_IRQHandler+0x208>)
 8002ac2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	f000 fc8c 	bl	80033e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002acc:	68ba      	ldr	r2, [r7, #8]
 8002ace:	2380      	movs	r3, #128	@ 0x80
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	d00b      	beq.n	8002aee <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2280      	movs	r2, #128	@ 0x80
 8002ada:	4013      	ands	r3, r2
 8002adc:	d007      	beq.n	8002aee <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a17      	ldr	r2, [pc, #92]	@ (8002b40 <HAL_TIM_IRQHandler+0x20c>)
 8002ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	0018      	movs	r0, r3
 8002aea:	f000 fc83 	bl	80033f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	2240      	movs	r2, #64	@ 0x40
 8002af2:	4013      	ands	r3, r2
 8002af4:	d00c      	beq.n	8002b10 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2240      	movs	r2, #64	@ 0x40
 8002afa:	4013      	ands	r3, r2
 8002afc:	d008      	beq.n	8002b10 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2241      	movs	r2, #65	@ 0x41
 8002b04:	4252      	negs	r2, r2
 8002b06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	f000 f8be 	bl	8002c8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	2220      	movs	r2, #32
 8002b14:	4013      	ands	r3, r2
 8002b16:	d00c      	beq.n	8002b32 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2220      	movs	r2, #32
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	d008      	beq.n	8002b32 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2221      	movs	r2, #33	@ 0x21
 8002b26:	4252      	negs	r2, r2
 8002b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f000 fc51 	bl	80033d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b32:	46c0      	nop			@ (mov r8, r8)
 8002b34:	46bd      	mov	sp, r7
 8002b36:	b004      	add	sp, #16
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	46c0      	nop			@ (mov r8, r8)
 8002b3c:	ffffdf7f 	.word	0xffffdf7f
 8002b40:	fffffeff 	.word	0xfffffeff

08002b44 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b50:	2317      	movs	r3, #23
 8002b52:	18fb      	adds	r3, r7, r3
 8002b54:	2200      	movs	r2, #0
 8002b56:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	223c      	movs	r2, #60	@ 0x3c
 8002b5c:	5c9b      	ldrb	r3, [r3, r2]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d101      	bne.n	8002b66 <HAL_TIM_OC_ConfigChannel+0x22>
 8002b62:	2302      	movs	r3, #2
 8002b64:	e048      	b.n	8002bf8 <HAL_TIM_OC_ConfigChannel+0xb4>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	223c      	movs	r2, #60	@ 0x3c
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2b14      	cmp	r3, #20
 8002b72:	d835      	bhi.n	8002be0 <HAL_TIM_OC_ConfigChannel+0x9c>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	009a      	lsls	r2, r3, #2
 8002b78:	4b21      	ldr	r3, [pc, #132]	@ (8002c00 <HAL_TIM_OC_ConfigChannel+0xbc>)
 8002b7a:	18d3      	adds	r3, r2, r3
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68ba      	ldr	r2, [r7, #8]
 8002b86:	0011      	movs	r1, r2
 8002b88:	0018      	movs	r0, r3
 8002b8a:	f000 f901 	bl	8002d90 <TIM_OC1_SetConfig>
      break;
 8002b8e:	e02c      	b.n	8002bea <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68ba      	ldr	r2, [r7, #8]
 8002b96:	0011      	movs	r1, r2
 8002b98:	0018      	movs	r0, r3
 8002b9a:	f000 f979 	bl	8002e90 <TIM_OC2_SetConfig>
      break;
 8002b9e:	e024      	b.n	8002bea <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68ba      	ldr	r2, [r7, #8]
 8002ba6:	0011      	movs	r1, r2
 8002ba8:	0018      	movs	r0, r3
 8002baa:	f000 f9ef 	bl	8002f8c <TIM_OC3_SetConfig>
      break;
 8002bae:	e01c      	b.n	8002bea <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68ba      	ldr	r2, [r7, #8]
 8002bb6:	0011      	movs	r1, r2
 8002bb8:	0018      	movs	r0, r3
 8002bba:	f000 fa69 	bl	8003090 <TIM_OC4_SetConfig>
      break;
 8002bbe:	e014      	b.n	8002bea <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68ba      	ldr	r2, [r7, #8]
 8002bc6:	0011      	movs	r1, r2
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f000 fac5 	bl	8003158 <TIM_OC5_SetConfig>
      break;
 8002bce:	e00c      	b.n	8002bea <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68ba      	ldr	r2, [r7, #8]
 8002bd6:	0011      	movs	r1, r2
 8002bd8:	0018      	movs	r0, r3
 8002bda:	f000 fb17 	bl	800320c <TIM_OC6_SetConfig>
      break;
 8002bde:	e004      	b.n	8002bea <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8002be0:	2317      	movs	r3, #23
 8002be2:	18fb      	adds	r3, r7, r3
 8002be4:	2201      	movs	r2, #1
 8002be6:	701a      	strb	r2, [r3, #0]
      break;
 8002be8:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	223c      	movs	r2, #60	@ 0x3c
 8002bee:	2100      	movs	r1, #0
 8002bf0:	5499      	strb	r1, [r3, r2]

  return status;
 8002bf2:	2317      	movs	r3, #23
 8002bf4:	18fb      	adds	r3, r7, r3
 8002bf6:	781b      	ldrb	r3, [r3, #0]
}
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	b006      	add	sp, #24
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	08005d8c 	.word	0x08005d8c

08002c04 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	2b0c      	cmp	r3, #12
 8002c16:	d01e      	beq.n	8002c56 <HAL_TIM_ReadCapturedValue+0x52>
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	2b0c      	cmp	r3, #12
 8002c1c:	d820      	bhi.n	8002c60 <HAL_TIM_ReadCapturedValue+0x5c>
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	2b08      	cmp	r3, #8
 8002c22:	d013      	beq.n	8002c4c <HAL_TIM_ReadCapturedValue+0x48>
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	2b08      	cmp	r3, #8
 8002c28:	d81a      	bhi.n	8002c60 <HAL_TIM_ReadCapturedValue+0x5c>
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d003      	beq.n	8002c38 <HAL_TIM_ReadCapturedValue+0x34>
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	2b04      	cmp	r3, #4
 8002c34:	d005      	beq.n	8002c42 <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 8002c36:	e013      	b.n	8002c60 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c3e:	60fb      	str	r3, [r7, #12]
      break;
 8002c40:	e00f      	b.n	8002c62 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c48:	60fb      	str	r3, [r7, #12]
      break;
 8002c4a:	e00a      	b.n	8002c62 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c52:	60fb      	str	r3, [r7, #12]
      break;
 8002c54:	e005      	b.n	8002c62 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5c:	60fb      	str	r3, [r7, #12]
      break;
 8002c5e:	e000      	b.n	8002c62 <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 8002c60:	46c0      	nop			@ (mov r8, r8)
  }

  return tmpreg;
 8002c62:	68fb      	ldr	r3, [r7, #12]
}
 8002c64:	0018      	movs	r0, r3
 8002c66:	46bd      	mov	sp, r7
 8002c68:	b004      	add	sp, #16
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c74:	46c0      	nop			@ (mov r8, r8)
 8002c76:	46bd      	mov	sp, r7
 8002c78:	b002      	add	sp, #8
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c84:	46c0      	nop			@ (mov r8, r8)
 8002c86:	46bd      	mov	sp, r7
 8002c88:	b002      	add	sp, #8
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c94:	46c0      	nop			@ (mov r8, r8)
 8002c96:	46bd      	mov	sp, r7
 8002c98:	b002      	add	sp, #8
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a32      	ldr	r2, [pc, #200]	@ (8002d78 <TIM_Base_SetConfig+0xdc>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d003      	beq.n	8002cbc <TIM_Base_SetConfig+0x20>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a31      	ldr	r2, [pc, #196]	@ (8002d7c <TIM_Base_SetConfig+0xe0>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d108      	bne.n	8002cce <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2270      	movs	r2, #112	@ 0x70
 8002cc0:	4393      	bics	r3, r2
 8002cc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	68fa      	ldr	r2, [r7, #12]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a29      	ldr	r2, [pc, #164]	@ (8002d78 <TIM_Base_SetConfig+0xdc>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d00f      	beq.n	8002cf6 <TIM_Base_SetConfig+0x5a>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a28      	ldr	r2, [pc, #160]	@ (8002d7c <TIM_Base_SetConfig+0xe0>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d00b      	beq.n	8002cf6 <TIM_Base_SetConfig+0x5a>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a27      	ldr	r2, [pc, #156]	@ (8002d80 <TIM_Base_SetConfig+0xe4>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d007      	beq.n	8002cf6 <TIM_Base_SetConfig+0x5a>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a26      	ldr	r2, [pc, #152]	@ (8002d84 <TIM_Base_SetConfig+0xe8>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d003      	beq.n	8002cf6 <TIM_Base_SetConfig+0x5a>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a25      	ldr	r2, [pc, #148]	@ (8002d88 <TIM_Base_SetConfig+0xec>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d108      	bne.n	8002d08 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	4a24      	ldr	r2, [pc, #144]	@ (8002d8c <TIM_Base_SetConfig+0xf0>)
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2280      	movs	r2, #128	@ 0x80
 8002d0c:	4393      	bics	r3, r2
 8002d0e:	001a      	movs	r2, r3
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	689a      	ldr	r2, [r3, #8]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a11      	ldr	r2, [pc, #68]	@ (8002d78 <TIM_Base_SetConfig+0xdc>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d007      	beq.n	8002d46 <TIM_Base_SetConfig+0xaa>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a12      	ldr	r2, [pc, #72]	@ (8002d84 <TIM_Base_SetConfig+0xe8>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d003      	beq.n	8002d46 <TIM_Base_SetConfig+0xaa>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a11      	ldr	r2, [pc, #68]	@ (8002d88 <TIM_Base_SetConfig+0xec>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d103      	bne.n	8002d4e <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	691a      	ldr	r2, [r3, #16]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d106      	bne.n	8002d6e <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	2201      	movs	r2, #1
 8002d66:	4393      	bics	r3, r2
 8002d68:	001a      	movs	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	611a      	str	r2, [r3, #16]
  }
}
 8002d6e:	46c0      	nop			@ (mov r8, r8)
 8002d70:	46bd      	mov	sp, r7
 8002d72:	b004      	add	sp, #16
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	46c0      	nop			@ (mov r8, r8)
 8002d78:	40012c00 	.word	0x40012c00
 8002d7c:	40000400 	.word	0x40000400
 8002d80:	40002000 	.word	0x40002000
 8002d84:	40014400 	.word	0x40014400
 8002d88:	40014800 	.word	0x40014800
 8002d8c:	fffffcff 	.word	0xfffffcff

08002d90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	2201      	movs	r2, #1
 8002da6:	4393      	bics	r3, r2
 8002da8:	001a      	movs	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	4a2e      	ldr	r2, [pc, #184]	@ (8002e78 <TIM_OC1_SetConfig+0xe8>)
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2203      	movs	r2, #3
 8002dc6:	4393      	bics	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	4393      	bics	r3, r2
 8002dda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a24      	ldr	r2, [pc, #144]	@ (8002e7c <TIM_OC1_SetConfig+0xec>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d007      	beq.n	8002dfe <TIM_OC1_SetConfig+0x6e>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a23      	ldr	r2, [pc, #140]	@ (8002e80 <TIM_OC1_SetConfig+0xf0>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d003      	beq.n	8002dfe <TIM_OC1_SetConfig+0x6e>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a22      	ldr	r2, [pc, #136]	@ (8002e84 <TIM_OC1_SetConfig+0xf4>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d10c      	bne.n	8002e18 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	2208      	movs	r2, #8
 8002e02:	4393      	bics	r3, r2
 8002e04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	2204      	movs	r2, #4
 8002e14:	4393      	bics	r3, r2
 8002e16:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a18      	ldr	r2, [pc, #96]	@ (8002e7c <TIM_OC1_SetConfig+0xec>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d007      	beq.n	8002e30 <TIM_OC1_SetConfig+0xa0>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a17      	ldr	r2, [pc, #92]	@ (8002e80 <TIM_OC1_SetConfig+0xf0>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d003      	beq.n	8002e30 <TIM_OC1_SetConfig+0xa0>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a16      	ldr	r2, [pc, #88]	@ (8002e84 <TIM_OC1_SetConfig+0xf4>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d111      	bne.n	8002e54 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	4a15      	ldr	r2, [pc, #84]	@ (8002e88 <TIM_OC1_SetConfig+0xf8>)
 8002e34:	4013      	ands	r3, r2
 8002e36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	4a14      	ldr	r2, [pc, #80]	@ (8002e8c <TIM_OC1_SetConfig+0xfc>)
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685a      	ldr	r2, [r3, #4]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	621a      	str	r2, [r3, #32]
}
 8002e6e:	46c0      	nop			@ (mov r8, r8)
 8002e70:	46bd      	mov	sp, r7
 8002e72:	b006      	add	sp, #24
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	46c0      	nop			@ (mov r8, r8)
 8002e78:	fffeff8f 	.word	0xfffeff8f
 8002e7c:	40012c00 	.word	0x40012c00
 8002e80:	40014400 	.word	0x40014400
 8002e84:	40014800 	.word	0x40014800
 8002e88:	fffffeff 	.word	0xfffffeff
 8002e8c:	fffffdff 	.word	0xfffffdff

08002e90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	2210      	movs	r2, #16
 8002ea6:	4393      	bics	r3, r2
 8002ea8:	001a      	movs	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	4a2c      	ldr	r2, [pc, #176]	@ (8002f70 <TIM_OC2_SetConfig+0xe0>)
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	4a2b      	ldr	r2, [pc, #172]	@ (8002f74 <TIM_OC2_SetConfig+0xe4>)
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	021b      	lsls	r3, r3, #8
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	2220      	movs	r2, #32
 8002eda:	4393      	bics	r3, r2
 8002edc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	011b      	lsls	r3, r3, #4
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a22      	ldr	r2, [pc, #136]	@ (8002f78 <TIM_OC2_SetConfig+0xe8>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d10d      	bne.n	8002f0e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	2280      	movs	r2, #128	@ 0x80
 8002ef6:	4393      	bics	r3, r2
 8002ef8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	011b      	lsls	r3, r3, #4
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	2240      	movs	r2, #64	@ 0x40
 8002f0a:	4393      	bics	r3, r2
 8002f0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a19      	ldr	r2, [pc, #100]	@ (8002f78 <TIM_OC2_SetConfig+0xe8>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d007      	beq.n	8002f26 <TIM_OC2_SetConfig+0x96>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a18      	ldr	r2, [pc, #96]	@ (8002f7c <TIM_OC2_SetConfig+0xec>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d003      	beq.n	8002f26 <TIM_OC2_SetConfig+0x96>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a17      	ldr	r2, [pc, #92]	@ (8002f80 <TIM_OC2_SetConfig+0xf0>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d113      	bne.n	8002f4e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	4a16      	ldr	r2, [pc, #88]	@ (8002f84 <TIM_OC2_SetConfig+0xf4>)
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	4a15      	ldr	r2, [pc, #84]	@ (8002f88 <TIM_OC2_SetConfig+0xf8>)
 8002f32:	4013      	ands	r3, r2
 8002f34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	697a      	ldr	r2, [r7, #20]
 8002f66:	621a      	str	r2, [r3, #32]
}
 8002f68:	46c0      	nop			@ (mov r8, r8)
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	b006      	add	sp, #24
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	feff8fff 	.word	0xfeff8fff
 8002f74:	fffffcff 	.word	0xfffffcff
 8002f78:	40012c00 	.word	0x40012c00
 8002f7c:	40014400 	.word	0x40014400
 8002f80:	40014800 	.word	0x40014800
 8002f84:	fffffbff 	.word	0xfffffbff
 8002f88:	fffff7ff 	.word	0xfffff7ff

08002f8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	4a31      	ldr	r2, [pc, #196]	@ (8003068 <TIM_OC3_SetConfig+0xdc>)
 8002fa2:	401a      	ands	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	4a2d      	ldr	r2, [pc, #180]	@ (800306c <TIM_OC3_SetConfig+0xe0>)
 8002fb8:	4013      	ands	r3, r2
 8002fba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2203      	movs	r2, #3
 8002fc0:	4393      	bics	r3, r2
 8002fc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	4a27      	ldr	r2, [pc, #156]	@ (8003070 <TIM_OC3_SetConfig+0xe4>)
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	021b      	lsls	r3, r3, #8
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a23      	ldr	r2, [pc, #140]	@ (8003074 <TIM_OC3_SetConfig+0xe8>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d10d      	bne.n	8003006 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	4a22      	ldr	r2, [pc, #136]	@ (8003078 <TIM_OC3_SetConfig+0xec>)
 8002fee:	4013      	ands	r3, r2
 8002ff0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	021b      	lsls	r3, r3, #8
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	4a1e      	ldr	r2, [pc, #120]	@ (800307c <TIM_OC3_SetConfig+0xf0>)
 8003002:	4013      	ands	r3, r2
 8003004:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a1a      	ldr	r2, [pc, #104]	@ (8003074 <TIM_OC3_SetConfig+0xe8>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d007      	beq.n	800301e <TIM_OC3_SetConfig+0x92>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a1b      	ldr	r2, [pc, #108]	@ (8003080 <TIM_OC3_SetConfig+0xf4>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d003      	beq.n	800301e <TIM_OC3_SetConfig+0x92>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a1a      	ldr	r2, [pc, #104]	@ (8003084 <TIM_OC3_SetConfig+0xf8>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d113      	bne.n	8003046 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	4a19      	ldr	r2, [pc, #100]	@ (8003088 <TIM_OC3_SetConfig+0xfc>)
 8003022:	4013      	ands	r3, r2
 8003024:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	4a18      	ldr	r2, [pc, #96]	@ (800308c <TIM_OC3_SetConfig+0x100>)
 800302a:	4013      	ands	r3, r2
 800302c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	011b      	lsls	r3, r3, #4
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	4313      	orrs	r3, r2
 8003038:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	699b      	ldr	r3, [r3, #24]
 800303e:	011b      	lsls	r3, r3, #4
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	4313      	orrs	r3, r2
 8003044:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685a      	ldr	r2, [r3, #4]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	697a      	ldr	r2, [r7, #20]
 800305e:	621a      	str	r2, [r3, #32]
}
 8003060:	46c0      	nop			@ (mov r8, r8)
 8003062:	46bd      	mov	sp, r7
 8003064:	b006      	add	sp, #24
 8003066:	bd80      	pop	{r7, pc}
 8003068:	fffffeff 	.word	0xfffffeff
 800306c:	fffeff8f 	.word	0xfffeff8f
 8003070:	fffffdff 	.word	0xfffffdff
 8003074:	40012c00 	.word	0x40012c00
 8003078:	fffff7ff 	.word	0xfffff7ff
 800307c:	fffffbff 	.word	0xfffffbff
 8003080:	40014400 	.word	0x40014400
 8003084:	40014800 	.word	0x40014800
 8003088:	ffffefff 	.word	0xffffefff
 800308c:	ffffdfff 	.word	0xffffdfff

08003090 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a1b      	ldr	r3, [r3, #32]
 80030a4:	4a24      	ldr	r2, [pc, #144]	@ (8003138 <TIM_OC4_SetConfig+0xa8>)
 80030a6:	401a      	ands	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	4a20      	ldr	r2, [pc, #128]	@ (800313c <TIM_OC4_SetConfig+0xac>)
 80030bc:	4013      	ands	r3, r2
 80030be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	4a1f      	ldr	r2, [pc, #124]	@ (8003140 <TIM_OC4_SetConfig+0xb0>)
 80030c4:	4013      	ands	r3, r2
 80030c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	021b      	lsls	r3, r3, #8
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	4a1b      	ldr	r2, [pc, #108]	@ (8003144 <TIM_OC4_SetConfig+0xb4>)
 80030d8:	4013      	ands	r3, r2
 80030da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	031b      	lsls	r3, r3, #12
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a17      	ldr	r2, [pc, #92]	@ (8003148 <TIM_OC4_SetConfig+0xb8>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d007      	beq.n	8003100 <TIM_OC4_SetConfig+0x70>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a16      	ldr	r2, [pc, #88]	@ (800314c <TIM_OC4_SetConfig+0xbc>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d003      	beq.n	8003100 <TIM_OC4_SetConfig+0x70>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a15      	ldr	r2, [pc, #84]	@ (8003150 <TIM_OC4_SetConfig+0xc0>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d109      	bne.n	8003114 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	4a14      	ldr	r2, [pc, #80]	@ (8003154 <TIM_OC4_SetConfig+0xc4>)
 8003104:	4013      	ands	r3, r2
 8003106:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	695b      	ldr	r3, [r3, #20]
 800310c:	019b      	lsls	r3, r3, #6
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	4313      	orrs	r3, r2
 8003112:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685a      	ldr	r2, [r3, #4]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	621a      	str	r2, [r3, #32]
}
 800312e:	46c0      	nop			@ (mov r8, r8)
 8003130:	46bd      	mov	sp, r7
 8003132:	b006      	add	sp, #24
 8003134:	bd80      	pop	{r7, pc}
 8003136:	46c0      	nop			@ (mov r8, r8)
 8003138:	ffffefff 	.word	0xffffefff
 800313c:	feff8fff 	.word	0xfeff8fff
 8003140:	fffffcff 	.word	0xfffffcff
 8003144:	ffffdfff 	.word	0xffffdfff
 8003148:	40012c00 	.word	0x40012c00
 800314c:	40014400 	.word	0x40014400
 8003150:	40014800 	.word	0x40014800
 8003154:	ffffbfff 	.word	0xffffbfff

08003158 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a1b      	ldr	r3, [r3, #32]
 8003166:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	4a21      	ldr	r2, [pc, #132]	@ (80031f4 <TIM_OC5_SetConfig+0x9c>)
 800316e:	401a      	ands	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800317e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	4a1d      	ldr	r2, [pc, #116]	@ (80031f8 <TIM_OC5_SetConfig+0xa0>)
 8003184:	4013      	ands	r3, r2
 8003186:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	4313      	orrs	r3, r2
 8003190:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	4a19      	ldr	r2, [pc, #100]	@ (80031fc <TIM_OC5_SetConfig+0xa4>)
 8003196:	4013      	ands	r3, r2
 8003198:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	041b      	lsls	r3, r3, #16
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a15      	ldr	r2, [pc, #84]	@ (8003200 <TIM_OC5_SetConfig+0xa8>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d007      	beq.n	80031be <TIM_OC5_SetConfig+0x66>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a14      	ldr	r2, [pc, #80]	@ (8003204 <TIM_OC5_SetConfig+0xac>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d003      	beq.n	80031be <TIM_OC5_SetConfig+0x66>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a13      	ldr	r2, [pc, #76]	@ (8003208 <TIM_OC5_SetConfig+0xb0>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d109      	bne.n	80031d2 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	4a0c      	ldr	r2, [pc, #48]	@ (80031f4 <TIM_OC5_SetConfig+0x9c>)
 80031c2:	4013      	ands	r3, r2
 80031c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	021b      	lsls	r3, r3, #8
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	621a      	str	r2, [r3, #32]
}
 80031ec:	46c0      	nop			@ (mov r8, r8)
 80031ee:	46bd      	mov	sp, r7
 80031f0:	b006      	add	sp, #24
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	fffeffff 	.word	0xfffeffff
 80031f8:	fffeff8f 	.word	0xfffeff8f
 80031fc:	fffdffff 	.word	0xfffdffff
 8003200:	40012c00 	.word	0x40012c00
 8003204:	40014400 	.word	0x40014400
 8003208:	40014800 	.word	0x40014800

0800320c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a1b      	ldr	r3, [r3, #32]
 8003220:	4a22      	ldr	r2, [pc, #136]	@ (80032ac <TIM_OC6_SetConfig+0xa0>)
 8003222:	401a      	ands	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	4a1e      	ldr	r2, [pc, #120]	@ (80032b0 <TIM_OC6_SetConfig+0xa4>)
 8003238:	4013      	ands	r3, r2
 800323a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	021b      	lsls	r3, r3, #8
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	4313      	orrs	r3, r2
 8003246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	4a1a      	ldr	r2, [pc, #104]	@ (80032b4 <TIM_OC6_SetConfig+0xa8>)
 800324c:	4013      	ands	r3, r2
 800324e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	051b      	lsls	r3, r3, #20
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	4313      	orrs	r3, r2
 800325a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a16      	ldr	r2, [pc, #88]	@ (80032b8 <TIM_OC6_SetConfig+0xac>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d007      	beq.n	8003274 <TIM_OC6_SetConfig+0x68>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a15      	ldr	r2, [pc, #84]	@ (80032bc <TIM_OC6_SetConfig+0xb0>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d003      	beq.n	8003274 <TIM_OC6_SetConfig+0x68>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a14      	ldr	r2, [pc, #80]	@ (80032c0 <TIM_OC6_SetConfig+0xb4>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d109      	bne.n	8003288 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	4a13      	ldr	r2, [pc, #76]	@ (80032c4 <TIM_OC6_SetConfig+0xb8>)
 8003278:	4013      	ands	r3, r2
 800327a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	029b      	lsls	r3, r3, #10
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	4313      	orrs	r3, r2
 8003286:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	621a      	str	r2, [r3, #32]
}
 80032a2:	46c0      	nop			@ (mov r8, r8)
 80032a4:	46bd      	mov	sp, r7
 80032a6:	b006      	add	sp, #24
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	46c0      	nop			@ (mov r8, r8)
 80032ac:	ffefffff 	.word	0xffefffff
 80032b0:	feff8fff 	.word	0xfeff8fff
 80032b4:	ffdfffff 	.word	0xffdfffff
 80032b8:	40012c00 	.word	0x40012c00
 80032bc:	40014400 	.word	0x40014400
 80032c0:	40014800 	.word	0x40014800
 80032c4:	fffbffff 	.word	0xfffbffff

080032c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	221f      	movs	r2, #31
 80032d8:	4013      	ands	r3, r2
 80032da:	2201      	movs	r2, #1
 80032dc:	409a      	lsls	r2, r3
 80032de:	0013      	movs	r3, r2
 80032e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6a1b      	ldr	r3, [r3, #32]
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	43d2      	mvns	r2, r2
 80032ea:	401a      	ands	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6a1a      	ldr	r2, [r3, #32]
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	211f      	movs	r1, #31
 80032f8:	400b      	ands	r3, r1
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	4099      	lsls	r1, r3
 80032fe:	000b      	movs	r3, r1
 8003300:	431a      	orrs	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	621a      	str	r2, [r3, #32]
}
 8003306:	46c0      	nop			@ (mov r8, r8)
 8003308:	46bd      	mov	sp, r7
 800330a:	b006      	add	sp, #24
 800330c:	bd80      	pop	{r7, pc}
	...

08003310 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	223c      	movs	r2, #60	@ 0x3c
 800331e:	5c9b      	ldrb	r3, [r3, r2]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d101      	bne.n	8003328 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003324:	2302      	movs	r3, #2
 8003326:	e04a      	b.n	80033be <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	223c      	movs	r2, #60	@ 0x3c
 800332c:	2101      	movs	r1, #1
 800332e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	223d      	movs	r2, #61	@ 0x3d
 8003334:	2102      	movs	r1, #2
 8003336:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a1e      	ldr	r2, [pc, #120]	@ (80033c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d108      	bne.n	8003364 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	4a1d      	ldr	r2, [pc, #116]	@ (80033cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8003356:	4013      	ands	r3, r2
 8003358:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	4313      	orrs	r3, r2
 8003362:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2270      	movs	r2, #112	@ 0x70
 8003368:	4393      	bics	r3, r2
 800336a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	4313      	orrs	r3, r2
 8003374:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a11      	ldr	r2, [pc, #68]	@ (80033c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d004      	beq.n	8003392 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a10      	ldr	r2, [pc, #64]	@ (80033d0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d10c      	bne.n	80033ac <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	2280      	movs	r2, #128	@ 0x80
 8003396:	4393      	bics	r3, r2
 8003398:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	68ba      	ldr	r2, [r7, #8]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68ba      	ldr	r2, [r7, #8]
 80033aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	223d      	movs	r2, #61	@ 0x3d
 80033b0:	2101      	movs	r1, #1
 80033b2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	223c      	movs	r2, #60	@ 0x3c
 80033b8:	2100      	movs	r1, #0
 80033ba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	0018      	movs	r0, r3
 80033c0:	46bd      	mov	sp, r7
 80033c2:	b004      	add	sp, #16
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	46c0      	nop			@ (mov r8, r8)
 80033c8:	40012c00 	.word	0x40012c00
 80033cc:	ff0fffff 	.word	0xff0fffff
 80033d0:	40000400 	.word	0x40000400

080033d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033dc:	46c0      	nop			@ (mov r8, r8)
 80033de:	46bd      	mov	sp, r7
 80033e0:	b002      	add	sp, #8
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033ec:	46c0      	nop			@ (mov r8, r8)
 80033ee:	46bd      	mov	sp, r7
 80033f0:	b002      	add	sp, #8
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80033fc:	46c0      	nop			@ (mov r8, r8)
 80033fe:	46bd      	mov	sp, r7
 8003400:	b002      	add	sp, #8
 8003402:	bd80      	pop	{r7, pc}

08003404 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e046      	b.n	80034a4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2288      	movs	r2, #136	@ 0x88
 800341a:	589b      	ldr	r3, [r3, r2]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d107      	bne.n	8003430 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2284      	movs	r2, #132	@ 0x84
 8003424:	2100      	movs	r1, #0
 8003426:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	0018      	movs	r0, r3
 800342c:	f7fd ff9e 	bl	800136c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2288      	movs	r2, #136	@ 0x88
 8003434:	2124      	movs	r1, #36	@ 0x24
 8003436:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2101      	movs	r1, #1
 8003444:	438a      	bics	r2, r1
 8003446:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800344c:	2b00      	cmp	r3, #0
 800344e:	d003      	beq.n	8003458 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	0018      	movs	r0, r3
 8003454:	f000 fdfc 	bl	8004050 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	0018      	movs	r0, r3
 800345c:	f000 fc7a 	bl	8003d54 <UART_SetConfig>
 8003460:	0003      	movs	r3, r0
 8003462:	2b01      	cmp	r3, #1
 8003464:	d101      	bne.n	800346a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e01c      	b.n	80034a4 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	490d      	ldr	r1, [pc, #52]	@ (80034ac <HAL_UART_Init+0xa8>)
 8003476:	400a      	ands	r2, r1
 8003478:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	689a      	ldr	r2, [r3, #8]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	212a      	movs	r1, #42	@ 0x2a
 8003486:	438a      	bics	r2, r1
 8003488:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2101      	movs	r1, #1
 8003496:	430a      	orrs	r2, r1
 8003498:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	0018      	movs	r0, r3
 800349e:	f000 fe8b 	bl	80041b8 <UART_CheckIdleState>
 80034a2:	0003      	movs	r3, r0
}
 80034a4:	0018      	movs	r0, r3
 80034a6:	46bd      	mov	sp, r7
 80034a8:	b002      	add	sp, #8
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	ffffb7ff 	.word	0xffffb7ff

080034b0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b08c      	sub	sp, #48	@ 0x30
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	1dbb      	adds	r3, r7, #6
 80034bc:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2288      	movs	r2, #136	@ 0x88
 80034c2:	589b      	ldr	r3, [r3, r2]
 80034c4:	2b20      	cmp	r3, #32
 80034c6:	d000      	beq.n	80034ca <HAL_UART_Transmit_IT+0x1a>
 80034c8:	e08d      	b.n	80035e6 <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d003      	beq.n	80034d8 <HAL_UART_Transmit_IT+0x28>
 80034d0:	1dbb      	adds	r3, r7, #6
 80034d2:	881b      	ldrh	r3, [r3, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d101      	bne.n	80034dc <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e085      	b.n	80035e8 <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	689a      	ldr	r2, [r3, #8]
 80034e0:	2380      	movs	r3, #128	@ 0x80
 80034e2:	015b      	lsls	r3, r3, #5
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d109      	bne.n	80034fc <HAL_UART_Transmit_IT+0x4c>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d105      	bne.n	80034fc <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	2201      	movs	r2, #1
 80034f4:	4013      	ands	r3, r2
 80034f6:	d001      	beq.n	80034fc <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e075      	b.n	80035e8 <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	68ba      	ldr	r2, [r7, #8]
 8003500:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	1dba      	adds	r2, r7, #6
 8003506:	2154      	movs	r1, #84	@ 0x54
 8003508:	8812      	ldrh	r2, [r2, #0]
 800350a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	1dba      	adds	r2, r7, #6
 8003510:	2156      	movs	r1, #86	@ 0x56
 8003512:	8812      	ldrh	r2, [r2, #0]
 8003514:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2290      	movs	r2, #144	@ 0x90
 8003520:	2100      	movs	r1, #0
 8003522:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2288      	movs	r2, #136	@ 0x88
 8003528:	2121      	movs	r1, #33	@ 0x21
 800352a:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003530:	2380      	movs	r3, #128	@ 0x80
 8003532:	059b      	lsls	r3, r3, #22
 8003534:	429a      	cmp	r2, r3
 8003536:	d12a      	bne.n	800358e <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	2380      	movs	r3, #128	@ 0x80
 800353e:	015b      	lsls	r3, r3, #5
 8003540:	429a      	cmp	r2, r3
 8003542:	d107      	bne.n	8003554 <HAL_UART_Transmit_IT+0xa4>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d103      	bne.n	8003554 <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	4a28      	ldr	r2, [pc, #160]	@ (80035f0 <HAL_UART_Transmit_IT+0x140>)
 8003550:	679a      	str	r2, [r3, #120]	@ 0x78
 8003552:	e002      	b.n	800355a <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	4a27      	ldr	r2, [pc, #156]	@ (80035f4 <HAL_UART_Transmit_IT+0x144>)
 8003558:	679a      	str	r2, [r3, #120]	@ 0x78
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800355a:	f3ef 8310 	mrs	r3, PRIMASK
 800355e:	61fb      	str	r3, [r7, #28]
  return(result);
 8003560:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003562:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003564:	2301      	movs	r3, #1
 8003566:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003568:	6a3b      	ldr	r3, [r7, #32]
 800356a:	f383 8810 	msr	PRIMASK, r3
}
 800356e:	46c0      	nop			@ (mov r8, r8)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689a      	ldr	r2, [r3, #8]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2180      	movs	r1, #128	@ 0x80
 800357c:	0409      	lsls	r1, r1, #16
 800357e:	430a      	orrs	r2, r1
 8003580:	609a      	str	r2, [r3, #8]
 8003582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003584:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003588:	f383 8810 	msr	PRIMASK, r3
}
 800358c:	e029      	b.n	80035e2 <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	689a      	ldr	r2, [r3, #8]
 8003592:	2380      	movs	r3, #128	@ 0x80
 8003594:	015b      	lsls	r3, r3, #5
 8003596:	429a      	cmp	r2, r3
 8003598:	d107      	bne.n	80035aa <HAL_UART_Transmit_IT+0xfa>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d103      	bne.n	80035aa <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	4a14      	ldr	r2, [pc, #80]	@ (80035f8 <HAL_UART_Transmit_IT+0x148>)
 80035a6:	679a      	str	r2, [r3, #120]	@ 0x78
 80035a8:	e002      	b.n	80035b0 <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	4a13      	ldr	r2, [pc, #76]	@ (80035fc <HAL_UART_Transmit_IT+0x14c>)
 80035ae:	679a      	str	r2, [r3, #120]	@ 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80035b0:	f3ef 8310 	mrs	r3, PRIMASK
 80035b4:	613b      	str	r3, [r7, #16]
  return(result);
 80035b6:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80035b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035ba:	2301      	movs	r3, #1
 80035bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f383 8810 	msr	PRIMASK, r3
}
 80035c4:	46c0      	nop			@ (mov r8, r8)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2180      	movs	r1, #128	@ 0x80
 80035d2:	430a      	orrs	r2, r1
 80035d4:	601a      	str	r2, [r3, #0]
 80035d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035d8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	f383 8810 	msr	PRIMASK, r3
}
 80035e0:	46c0      	nop			@ (mov r8, r8)
    }

    return HAL_OK;
 80035e2:	2300      	movs	r3, #0
 80035e4:	e000      	b.n	80035e8 <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 80035e6:	2302      	movs	r3, #2
  }
}
 80035e8:	0018      	movs	r0, r3
 80035ea:	46bd      	mov	sp, r7
 80035ec:	b00c      	add	sp, #48	@ 0x30
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	08004985 	.word	0x08004985
 80035f4:	08004899 	.word	0x08004899
 80035f8:	080047db 	.word	0x080047db
 80035fc:	08004727 	.word	0x08004727

08003600 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b088      	sub	sp, #32
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	1dbb      	adds	r3, r7, #6
 800360c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	228c      	movs	r2, #140	@ 0x8c
 8003612:	589b      	ldr	r3, [r3, r2]
 8003614:	2b20      	cmp	r3, #32
 8003616:	d145      	bne.n	80036a4 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <HAL_UART_Receive_IT+0x26>
 800361e:	1dbb      	adds	r3, r7, #6
 8003620:	881b      	ldrh	r3, [r3, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e03d      	b.n	80036a6 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	689a      	ldr	r2, [r3, #8]
 800362e:	2380      	movs	r3, #128	@ 0x80
 8003630:	015b      	lsls	r3, r3, #5
 8003632:	429a      	cmp	r2, r3
 8003634:	d109      	bne.n	800364a <HAL_UART_Receive_IT+0x4a>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d105      	bne.n	800364a <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	2201      	movs	r2, #1
 8003642:	4013      	ands	r3, r2
 8003644:	d001      	beq.n	800364a <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e02d      	b.n	80036a6 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685a      	ldr	r2, [r3, #4]
 8003656:	2380      	movs	r3, #128	@ 0x80
 8003658:	041b      	lsls	r3, r3, #16
 800365a:	4013      	ands	r3, r2
 800365c:	d019      	beq.n	8003692 <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800365e:	f3ef 8310 	mrs	r3, PRIMASK
 8003662:	613b      	str	r3, [r7, #16]
  return(result);
 8003664:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003666:	61fb      	str	r3, [r7, #28]
 8003668:	2301      	movs	r3, #1
 800366a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f383 8810 	msr	PRIMASK, r3
}
 8003672:	46c0      	nop			@ (mov r8, r8)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2180      	movs	r1, #128	@ 0x80
 8003680:	04c9      	lsls	r1, r1, #19
 8003682:	430a      	orrs	r2, r1
 8003684:	601a      	str	r2, [r3, #0]
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	f383 8810 	msr	PRIMASK, r3
}
 8003690:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003692:	1dbb      	adds	r3, r7, #6
 8003694:	881a      	ldrh	r2, [r3, #0]
 8003696:	68b9      	ldr	r1, [r7, #8]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	0018      	movs	r0, r3
 800369c:	f000 fea6 	bl	80043ec <UART_Start_Receive_IT>
 80036a0:	0003      	movs	r3, r0
 80036a2:	e000      	b.n	80036a6 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80036a4:	2302      	movs	r3, #2
  }
}
 80036a6:	0018      	movs	r0, r3
 80036a8:	46bd      	mov	sp, r7
 80036aa:	b008      	add	sp, #32
 80036ac:	bd80      	pop	{r7, pc}
	...

080036b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036b0:	b5b0      	push	{r4, r5, r7, lr}
 80036b2:	b0aa      	sub	sp, #168	@ 0xa8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	22a4      	movs	r2, #164	@ 0xa4
 80036c0:	18b9      	adds	r1, r7, r2
 80036c2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	20a0      	movs	r0, #160	@ 0xa0
 80036cc:	1839      	adds	r1, r7, r0
 80036ce:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	249c      	movs	r4, #156	@ 0x9c
 80036d8:	1939      	adds	r1, r7, r4
 80036da:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80036dc:	0011      	movs	r1, r2
 80036de:	18bb      	adds	r3, r7, r2
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4aa2      	ldr	r2, [pc, #648]	@ (800396c <HAL_UART_IRQHandler+0x2bc>)
 80036e4:	4013      	ands	r3, r2
 80036e6:	2298      	movs	r2, #152	@ 0x98
 80036e8:	18bd      	adds	r5, r7, r2
 80036ea:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80036ec:	18bb      	adds	r3, r7, r2
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d11a      	bne.n	800372a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80036f4:	187b      	adds	r3, r7, r1
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2220      	movs	r2, #32
 80036fa:	4013      	ands	r3, r2
 80036fc:	d015      	beq.n	800372a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80036fe:	183b      	adds	r3, r7, r0
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2220      	movs	r2, #32
 8003704:	4013      	ands	r3, r2
 8003706:	d105      	bne.n	8003714 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003708:	193b      	adds	r3, r7, r4
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	2380      	movs	r3, #128	@ 0x80
 800370e:	055b      	lsls	r3, r3, #21
 8003710:	4013      	ands	r3, r2
 8003712:	d00a      	beq.n	800372a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003718:	2b00      	cmp	r3, #0
 800371a:	d100      	bne.n	800371e <HAL_UART_IRQHandler+0x6e>
 800371c:	e2fb      	b.n	8003d16 <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	0010      	movs	r0, r2
 8003726:	4798      	blx	r3
      }
      return;
 8003728:	e2f5      	b.n	8003d16 <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800372a:	2398      	movs	r3, #152	@ 0x98
 800372c:	18fb      	adds	r3, r7, r3
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d100      	bne.n	8003736 <HAL_UART_IRQHandler+0x86>
 8003734:	e122      	b.n	800397c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003736:	239c      	movs	r3, #156	@ 0x9c
 8003738:	18fb      	adds	r3, r7, r3
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a8c      	ldr	r2, [pc, #560]	@ (8003970 <HAL_UART_IRQHandler+0x2c0>)
 800373e:	4013      	ands	r3, r2
 8003740:	d106      	bne.n	8003750 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003742:	23a0      	movs	r3, #160	@ 0xa0
 8003744:	18fb      	adds	r3, r7, r3
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a8a      	ldr	r2, [pc, #552]	@ (8003974 <HAL_UART_IRQHandler+0x2c4>)
 800374a:	4013      	ands	r3, r2
 800374c:	d100      	bne.n	8003750 <HAL_UART_IRQHandler+0xa0>
 800374e:	e115      	b.n	800397c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003750:	23a4      	movs	r3, #164	@ 0xa4
 8003752:	18fb      	adds	r3, r7, r3
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2201      	movs	r2, #1
 8003758:	4013      	ands	r3, r2
 800375a:	d012      	beq.n	8003782 <HAL_UART_IRQHandler+0xd2>
 800375c:	23a0      	movs	r3, #160	@ 0xa0
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	2380      	movs	r3, #128	@ 0x80
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	4013      	ands	r3, r2
 8003768:	d00b      	beq.n	8003782 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2201      	movs	r2, #1
 8003770:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2290      	movs	r2, #144	@ 0x90
 8003776:	589b      	ldr	r3, [r3, r2]
 8003778:	2201      	movs	r2, #1
 800377a:	431a      	orrs	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2190      	movs	r1, #144	@ 0x90
 8003780:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003782:	23a4      	movs	r3, #164	@ 0xa4
 8003784:	18fb      	adds	r3, r7, r3
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2202      	movs	r2, #2
 800378a:	4013      	ands	r3, r2
 800378c:	d011      	beq.n	80037b2 <HAL_UART_IRQHandler+0x102>
 800378e:	239c      	movs	r3, #156	@ 0x9c
 8003790:	18fb      	adds	r3, r7, r3
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2201      	movs	r2, #1
 8003796:	4013      	ands	r3, r2
 8003798:	d00b      	beq.n	80037b2 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2202      	movs	r2, #2
 80037a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2290      	movs	r2, #144	@ 0x90
 80037a6:	589b      	ldr	r3, [r3, r2]
 80037a8:	2204      	movs	r2, #4
 80037aa:	431a      	orrs	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2190      	movs	r1, #144	@ 0x90
 80037b0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037b2:	23a4      	movs	r3, #164	@ 0xa4
 80037b4:	18fb      	adds	r3, r7, r3
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2204      	movs	r2, #4
 80037ba:	4013      	ands	r3, r2
 80037bc:	d011      	beq.n	80037e2 <HAL_UART_IRQHandler+0x132>
 80037be:	239c      	movs	r3, #156	@ 0x9c
 80037c0:	18fb      	adds	r3, r7, r3
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2201      	movs	r2, #1
 80037c6:	4013      	ands	r3, r2
 80037c8:	d00b      	beq.n	80037e2 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2204      	movs	r2, #4
 80037d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2290      	movs	r2, #144	@ 0x90
 80037d6:	589b      	ldr	r3, [r3, r2]
 80037d8:	2202      	movs	r2, #2
 80037da:	431a      	orrs	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2190      	movs	r1, #144	@ 0x90
 80037e0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80037e2:	23a4      	movs	r3, #164	@ 0xa4
 80037e4:	18fb      	adds	r3, r7, r3
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2208      	movs	r2, #8
 80037ea:	4013      	ands	r3, r2
 80037ec:	d017      	beq.n	800381e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80037ee:	23a0      	movs	r3, #160	@ 0xa0
 80037f0:	18fb      	adds	r3, r7, r3
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2220      	movs	r2, #32
 80037f6:	4013      	ands	r3, r2
 80037f8:	d105      	bne.n	8003806 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80037fa:	239c      	movs	r3, #156	@ 0x9c
 80037fc:	18fb      	adds	r3, r7, r3
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a5b      	ldr	r2, [pc, #364]	@ (8003970 <HAL_UART_IRQHandler+0x2c0>)
 8003802:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003804:	d00b      	beq.n	800381e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2208      	movs	r2, #8
 800380c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2290      	movs	r2, #144	@ 0x90
 8003812:	589b      	ldr	r3, [r3, r2]
 8003814:	2208      	movs	r2, #8
 8003816:	431a      	orrs	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2190      	movs	r1, #144	@ 0x90
 800381c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800381e:	23a4      	movs	r3, #164	@ 0xa4
 8003820:	18fb      	adds	r3, r7, r3
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	2380      	movs	r3, #128	@ 0x80
 8003826:	011b      	lsls	r3, r3, #4
 8003828:	4013      	ands	r3, r2
 800382a:	d013      	beq.n	8003854 <HAL_UART_IRQHandler+0x1a4>
 800382c:	23a0      	movs	r3, #160	@ 0xa0
 800382e:	18fb      	adds	r3, r7, r3
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	2380      	movs	r3, #128	@ 0x80
 8003834:	04db      	lsls	r3, r3, #19
 8003836:	4013      	ands	r3, r2
 8003838:	d00c      	beq.n	8003854 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2280      	movs	r2, #128	@ 0x80
 8003840:	0112      	lsls	r2, r2, #4
 8003842:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2290      	movs	r2, #144	@ 0x90
 8003848:	589b      	ldr	r3, [r3, r2]
 800384a:	2220      	movs	r2, #32
 800384c:	431a      	orrs	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2190      	movs	r1, #144	@ 0x90
 8003852:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2290      	movs	r2, #144	@ 0x90
 8003858:	589b      	ldr	r3, [r3, r2]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d100      	bne.n	8003860 <HAL_UART_IRQHandler+0x1b0>
 800385e:	e25c      	b.n	8003d1a <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003860:	23a4      	movs	r3, #164	@ 0xa4
 8003862:	18fb      	adds	r3, r7, r3
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2220      	movs	r2, #32
 8003868:	4013      	ands	r3, r2
 800386a:	d015      	beq.n	8003898 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800386c:	23a0      	movs	r3, #160	@ 0xa0
 800386e:	18fb      	adds	r3, r7, r3
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2220      	movs	r2, #32
 8003874:	4013      	ands	r3, r2
 8003876:	d106      	bne.n	8003886 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003878:	239c      	movs	r3, #156	@ 0x9c
 800387a:	18fb      	adds	r3, r7, r3
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	2380      	movs	r3, #128	@ 0x80
 8003880:	055b      	lsls	r3, r3, #21
 8003882:	4013      	ands	r3, r2
 8003884:	d008      	beq.n	8003898 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800388a:	2b00      	cmp	r3, #0
 800388c:	d004      	beq.n	8003898 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	0010      	movs	r0, r2
 8003896:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2290      	movs	r2, #144	@ 0x90
 800389c:	589b      	ldr	r3, [r3, r2]
 800389e:	2194      	movs	r1, #148	@ 0x94
 80038a0:	187a      	adds	r2, r7, r1
 80038a2:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	2240      	movs	r2, #64	@ 0x40
 80038ac:	4013      	ands	r3, r2
 80038ae:	2b40      	cmp	r3, #64	@ 0x40
 80038b0:	d004      	beq.n	80038bc <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80038b2:	187b      	adds	r3, r7, r1
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2228      	movs	r2, #40	@ 0x28
 80038b8:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80038ba:	d04c      	beq.n	8003956 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	0018      	movs	r0, r3
 80038c0:	f000 feb8 	bl	8004634 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	2240      	movs	r2, #64	@ 0x40
 80038cc:	4013      	ands	r3, r2
 80038ce:	2b40      	cmp	r3, #64	@ 0x40
 80038d0:	d13c      	bne.n	800394c <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80038d2:	f3ef 8310 	mrs	r3, PRIMASK
 80038d6:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80038d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038da:	2090      	movs	r0, #144	@ 0x90
 80038dc:	183a      	adds	r2, r7, r0
 80038de:	6013      	str	r3, [r2, #0]
 80038e0:	2301      	movs	r3, #1
 80038e2:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80038e6:	f383 8810 	msr	PRIMASK, r3
}
 80038ea:	46c0      	nop			@ (mov r8, r8)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	689a      	ldr	r2, [r3, #8]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2140      	movs	r1, #64	@ 0x40
 80038f8:	438a      	bics	r2, r1
 80038fa:	609a      	str	r2, [r3, #8]
 80038fc:	183b      	adds	r3, r7, r0
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003902:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003904:	f383 8810 	msr	PRIMASK, r3
}
 8003908:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2280      	movs	r2, #128	@ 0x80
 800390e:	589b      	ldr	r3, [r3, r2]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d016      	beq.n	8003942 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2280      	movs	r2, #128	@ 0x80
 8003918:	589b      	ldr	r3, [r3, r2]
 800391a:	4a17      	ldr	r2, [pc, #92]	@ (8003978 <HAL_UART_IRQHandler+0x2c8>)
 800391c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2280      	movs	r2, #128	@ 0x80
 8003922:	589b      	ldr	r3, [r3, r2]
 8003924:	0018      	movs	r0, r3
 8003926:	f7fe f863 	bl	80019f0 <HAL_DMA_Abort_IT>
 800392a:	1e03      	subs	r3, r0, #0
 800392c:	d01c      	beq.n	8003968 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2280      	movs	r2, #128	@ 0x80
 8003932:	589b      	ldr	r3, [r3, r2]
 8003934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	2180      	movs	r1, #128	@ 0x80
 800393a:	5852      	ldr	r2, [r2, r1]
 800393c:	0010      	movs	r0, r2
 800393e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003940:	e012      	b.n	8003968 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	0018      	movs	r0, r3
 8003946:	f7fd fabd 	bl	8000ec4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800394a:	e00d      	b.n	8003968 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	0018      	movs	r0, r3
 8003950:	f7fd fab8 	bl	8000ec4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003954:	e008      	b.n	8003968 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	0018      	movs	r0, r3
 800395a:	f7fd fab3 	bl	8000ec4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2290      	movs	r2, #144	@ 0x90
 8003962:	2100      	movs	r1, #0
 8003964:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003966:	e1d8      	b.n	8003d1a <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003968:	46c0      	nop			@ (mov r8, r8)
    return;
 800396a:	e1d6      	b.n	8003d1a <HAL_UART_IRQHandler+0x66a>
 800396c:	0000080f 	.word	0x0000080f
 8003970:	10000001 	.word	0x10000001
 8003974:	04000120 	.word	0x04000120
 8003978:	08004701 	.word	0x08004701

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003980:	2b01      	cmp	r3, #1
 8003982:	d000      	beq.n	8003986 <HAL_UART_IRQHandler+0x2d6>
 8003984:	e15d      	b.n	8003c42 <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003986:	23a4      	movs	r3, #164	@ 0xa4
 8003988:	18fb      	adds	r3, r7, r3
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2210      	movs	r2, #16
 800398e:	4013      	ands	r3, r2
 8003990:	d100      	bne.n	8003994 <HAL_UART_IRQHandler+0x2e4>
 8003992:	e156      	b.n	8003c42 <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003994:	23a0      	movs	r3, #160	@ 0xa0
 8003996:	18fb      	adds	r3, r7, r3
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2210      	movs	r2, #16
 800399c:	4013      	ands	r3, r2
 800399e:	d100      	bne.n	80039a2 <HAL_UART_IRQHandler+0x2f2>
 80039a0:	e14f      	b.n	8003c42 <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2210      	movs	r2, #16
 80039a8:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	2240      	movs	r2, #64	@ 0x40
 80039b2:	4013      	ands	r3, r2
 80039b4:	2b40      	cmp	r3, #64	@ 0x40
 80039b6:	d000      	beq.n	80039ba <HAL_UART_IRQHandler+0x30a>
 80039b8:	e0c3      	b.n	8003b42 <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2280      	movs	r2, #128	@ 0x80
 80039be:	589b      	ldr	r3, [r3, r2]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685a      	ldr	r2, [r3, #4]
 80039c4:	217e      	movs	r1, #126	@ 0x7e
 80039c6:	187b      	adds	r3, r7, r1
 80039c8:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80039ca:	187b      	adds	r3, r7, r1
 80039cc:	881b      	ldrh	r3, [r3, #0]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d100      	bne.n	80039d4 <HAL_UART_IRQHandler+0x324>
 80039d2:	e097      	b.n	8003b04 <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	225c      	movs	r2, #92	@ 0x5c
 80039d8:	5a9b      	ldrh	r3, [r3, r2]
 80039da:	187a      	adds	r2, r7, r1
 80039dc:	8812      	ldrh	r2, [r2, #0]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d300      	bcc.n	80039e4 <HAL_UART_IRQHandler+0x334>
 80039e2:	e08f      	b.n	8003b04 <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	187a      	adds	r2, r7, r1
 80039e8:	215e      	movs	r1, #94	@ 0x5e
 80039ea:	8812      	ldrh	r2, [r2, #0]
 80039ec:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2280      	movs	r2, #128	@ 0x80
 80039f2:	589b      	ldr	r3, [r3, r2]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2220      	movs	r2, #32
 80039fa:	4013      	ands	r3, r2
 80039fc:	d170      	bne.n	8003ae0 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80039fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003a02:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a06:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a08:	2301      	movs	r3, #1
 8003a0a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a0e:	f383 8810 	msr	PRIMASK, r3
}
 8003a12:	46c0      	nop			@ (mov r8, r8)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	49c4      	ldr	r1, [pc, #784]	@ (8003d30 <HAL_UART_IRQHandler+0x680>)
 8003a20:	400a      	ands	r2, r1
 8003a22:	601a      	str	r2, [r3, #0]
 8003a24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a26:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a2a:	f383 8810 	msr	PRIMASK, r3
}
 8003a2e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003a30:	f3ef 8310 	mrs	r3, PRIMASK
 8003a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8003a36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a38:	677b      	str	r3, [r7, #116]	@ 0x74
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a40:	f383 8810 	msr	PRIMASK, r3
}
 8003a44:	46c0      	nop			@ (mov r8, r8)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2101      	movs	r1, #1
 8003a52:	438a      	bics	r2, r1
 8003a54:	609a      	str	r2, [r3, #8]
 8003a56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a58:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a5c:	f383 8810 	msr	PRIMASK, r3
}
 8003a60:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003a62:	f3ef 8310 	mrs	r3, PRIMASK
 8003a66:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8003a68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a6a:	673b      	str	r3, [r7, #112]	@ 0x70
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a72:	f383 8810 	msr	PRIMASK, r3
}
 8003a76:	46c0      	nop			@ (mov r8, r8)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	689a      	ldr	r2, [r3, #8]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2140      	movs	r1, #64	@ 0x40
 8003a84:	438a      	bics	r2, r1
 8003a86:	609a      	str	r2, [r3, #8]
 8003a88:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a8a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a8e:	f383 8810 	msr	PRIMASK, r3
}
 8003a92:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	228c      	movs	r2, #140	@ 0x8c
 8003a98:	2120      	movs	r1, #32
 8003a9a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003aa2:	f3ef 8310 	mrs	r3, PRIMASK
 8003aa6:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8003aa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aaa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003aac:	2301      	movs	r3, #1
 8003aae:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ab0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ab2:	f383 8810 	msr	PRIMASK, r3
}
 8003ab6:	46c0      	nop			@ (mov r8, r8)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2110      	movs	r1, #16
 8003ac4:	438a      	bics	r2, r1
 8003ac6:	601a      	str	r2, [r3, #0]
 8003ac8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003aca:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003acc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ace:	f383 8810 	msr	PRIMASK, r3
}
 8003ad2:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2280      	movs	r2, #128	@ 0x80
 8003ad8:	589b      	ldr	r3, [r3, r2]
 8003ada:	0018      	movs	r0, r3
 8003adc:	f7fd ff26 	bl	800192c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	225c      	movs	r2, #92	@ 0x5c
 8003aea:	5a9a      	ldrh	r2, [r3, r2]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	215e      	movs	r1, #94	@ 0x5e
 8003af0:	5a5b      	ldrh	r3, [r3, r1]
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	0011      	movs	r1, r2
 8003afc:	0018      	movs	r0, r3
 8003afe:	f000 f91d 	bl	8003d3c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003b02:	e10c      	b.n	8003d1e <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	225c      	movs	r2, #92	@ 0x5c
 8003b08:	5a9b      	ldrh	r3, [r3, r2]
 8003b0a:	227e      	movs	r2, #126	@ 0x7e
 8003b0c:	18ba      	adds	r2, r7, r2
 8003b0e:	8812      	ldrh	r2, [r2, #0]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d000      	beq.n	8003b16 <HAL_UART_IRQHandler+0x466>
 8003b14:	e103      	b.n	8003d1e <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2280      	movs	r2, #128	@ 0x80
 8003b1a:	589b      	ldr	r3, [r3, r2]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2220      	movs	r2, #32
 8003b22:	4013      	ands	r3, r2
 8003b24:	2b20      	cmp	r3, #32
 8003b26:	d000      	beq.n	8003b2a <HAL_UART_IRQHandler+0x47a>
 8003b28:	e0f9      	b.n	8003d1e <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2202      	movs	r2, #2
 8003b2e:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	225c      	movs	r2, #92	@ 0x5c
 8003b34:	5a9a      	ldrh	r2, [r3, r2]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	0011      	movs	r1, r2
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	f000 f8fe 	bl	8003d3c <HAL_UARTEx_RxEventCallback>
      return;
 8003b40:	e0ed      	b.n	8003d1e <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	225c      	movs	r2, #92	@ 0x5c
 8003b46:	5a99      	ldrh	r1, [r3, r2]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	225e      	movs	r2, #94	@ 0x5e
 8003b4c:	5a9b      	ldrh	r3, [r3, r2]
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	208e      	movs	r0, #142	@ 0x8e
 8003b52:	183b      	adds	r3, r7, r0
 8003b54:	1a8a      	subs	r2, r1, r2
 8003b56:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	225e      	movs	r2, #94	@ 0x5e
 8003b5c:	5a9b      	ldrh	r3, [r3, r2]
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d100      	bne.n	8003b66 <HAL_UART_IRQHandler+0x4b6>
 8003b64:	e0dd      	b.n	8003d22 <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 8003b66:	183b      	adds	r3, r7, r0
 8003b68:	881b      	ldrh	r3, [r3, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d100      	bne.n	8003b70 <HAL_UART_IRQHandler+0x4c0>
 8003b6e:	e0d8      	b.n	8003d22 <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003b70:	f3ef 8310 	mrs	r3, PRIMASK
 8003b74:	60fb      	str	r3, [r7, #12]
  return(result);
 8003b76:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003b78:	2488      	movs	r4, #136	@ 0x88
 8003b7a:	193a      	adds	r2, r7, r4
 8003b7c:	6013      	str	r3, [r2, #0]
 8003b7e:	2301      	movs	r3, #1
 8003b80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	f383 8810 	msr	PRIMASK, r3
}
 8003b88:	46c0      	nop			@ (mov r8, r8)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4967      	ldr	r1, [pc, #412]	@ (8003d34 <HAL_UART_IRQHandler+0x684>)
 8003b96:	400a      	ands	r2, r1
 8003b98:	601a      	str	r2, [r3, #0]
 8003b9a:	193b      	adds	r3, r7, r4
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	f383 8810 	msr	PRIMASK, r3
}
 8003ba6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003ba8:	f3ef 8310 	mrs	r3, PRIMASK
 8003bac:	61bb      	str	r3, [r7, #24]
  return(result);
 8003bae:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003bb0:	2484      	movs	r4, #132	@ 0x84
 8003bb2:	193a      	adds	r2, r7, r4
 8003bb4:	6013      	str	r3, [r2, #0]
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	f383 8810 	msr	PRIMASK, r3
}
 8003bc0:	46c0      	nop			@ (mov r8, r8)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	689a      	ldr	r2, [r3, #8]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	495a      	ldr	r1, [pc, #360]	@ (8003d38 <HAL_UART_IRQHandler+0x688>)
 8003bce:	400a      	ands	r2, r1
 8003bd0:	609a      	str	r2, [r3, #8]
 8003bd2:	193b      	adds	r3, r7, r4
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bd8:	6a3b      	ldr	r3, [r7, #32]
 8003bda:	f383 8810 	msr	PRIMASK, r3
}
 8003bde:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	228c      	movs	r2, #140	@ 0x8c
 8003be4:	2120      	movs	r1, #32
 8003be6:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003bf4:	f3ef 8310 	mrs	r3, PRIMASK
 8003bf8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bfc:	2480      	movs	r4, #128	@ 0x80
 8003bfe:	193a      	adds	r2, r7, r4
 8003c00:	6013      	str	r3, [r2, #0]
 8003c02:	2301      	movs	r3, #1
 8003c04:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c08:	f383 8810 	msr	PRIMASK, r3
}
 8003c0c:	46c0      	nop			@ (mov r8, r8)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2110      	movs	r1, #16
 8003c1a:	438a      	bics	r2, r1
 8003c1c:	601a      	str	r2, [r3, #0]
 8003c1e:	193b      	adds	r3, r7, r4
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c26:	f383 8810 	msr	PRIMASK, r3
}
 8003c2a:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2202      	movs	r2, #2
 8003c30:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c32:	183b      	adds	r3, r7, r0
 8003c34:	881a      	ldrh	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	0011      	movs	r1, r2
 8003c3a:	0018      	movs	r0, r3
 8003c3c:	f000 f87e 	bl	8003d3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003c40:	e06f      	b.n	8003d22 <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003c42:	23a4      	movs	r3, #164	@ 0xa4
 8003c44:	18fb      	adds	r3, r7, r3
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	2380      	movs	r3, #128	@ 0x80
 8003c4a:	035b      	lsls	r3, r3, #13
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	d010      	beq.n	8003c72 <HAL_UART_IRQHandler+0x5c2>
 8003c50:	239c      	movs	r3, #156	@ 0x9c
 8003c52:	18fb      	adds	r3, r7, r3
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	2380      	movs	r3, #128	@ 0x80
 8003c58:	03db      	lsls	r3, r3, #15
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	d009      	beq.n	8003c72 <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2280      	movs	r2, #128	@ 0x80
 8003c64:	0352      	lsls	r2, r2, #13
 8003c66:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	0018      	movs	r0, r3
 8003c6c:	f001 fc28 	bl	80054c0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003c70:	e05a      	b.n	8003d28 <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003c72:	23a4      	movs	r3, #164	@ 0xa4
 8003c74:	18fb      	adds	r3, r7, r3
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2280      	movs	r2, #128	@ 0x80
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	d016      	beq.n	8003cac <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003c7e:	23a0      	movs	r3, #160	@ 0xa0
 8003c80:	18fb      	adds	r3, r7, r3
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2280      	movs	r2, #128	@ 0x80
 8003c86:	4013      	ands	r3, r2
 8003c88:	d106      	bne.n	8003c98 <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003c8a:	239c      	movs	r3, #156	@ 0x9c
 8003c8c:	18fb      	adds	r3, r7, r3
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	2380      	movs	r3, #128	@ 0x80
 8003c92:	041b      	lsls	r3, r3, #16
 8003c94:	4013      	ands	r3, r2
 8003c96:	d009      	beq.n	8003cac <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d042      	beq.n	8003d26 <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	0010      	movs	r0, r2
 8003ca8:	4798      	blx	r3
    }
    return;
 8003caa:	e03c      	b.n	8003d26 <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003cac:	23a4      	movs	r3, #164	@ 0xa4
 8003cae:	18fb      	adds	r3, r7, r3
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2240      	movs	r2, #64	@ 0x40
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	d00a      	beq.n	8003cce <HAL_UART_IRQHandler+0x61e>
 8003cb8:	23a0      	movs	r3, #160	@ 0xa0
 8003cba:	18fb      	adds	r3, r7, r3
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2240      	movs	r2, #64	@ 0x40
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	d004      	beq.n	8003cce <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	f000 fed6 	bl	8004a78 <UART_EndTransmit_IT>
    return;
 8003ccc:	e02c      	b.n	8003d28 <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003cce:	23a4      	movs	r3, #164	@ 0xa4
 8003cd0:	18fb      	adds	r3, r7, r3
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	2380      	movs	r3, #128	@ 0x80
 8003cd6:	041b      	lsls	r3, r3, #16
 8003cd8:	4013      	ands	r3, r2
 8003cda:	d00b      	beq.n	8003cf4 <HAL_UART_IRQHandler+0x644>
 8003cdc:	23a0      	movs	r3, #160	@ 0xa0
 8003cde:	18fb      	adds	r3, r7, r3
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	2380      	movs	r3, #128	@ 0x80
 8003ce4:	05db      	lsls	r3, r3, #23
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	d004      	beq.n	8003cf4 <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	0018      	movs	r0, r3
 8003cee:	f001 fbf7 	bl	80054e0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003cf2:	e019      	b.n	8003d28 <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003cf4:	23a4      	movs	r3, #164	@ 0xa4
 8003cf6:	18fb      	adds	r3, r7, r3
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	2380      	movs	r3, #128	@ 0x80
 8003cfc:	045b      	lsls	r3, r3, #17
 8003cfe:	4013      	ands	r3, r2
 8003d00:	d012      	beq.n	8003d28 <HAL_UART_IRQHandler+0x678>
 8003d02:	23a0      	movs	r3, #160	@ 0xa0
 8003d04:	18fb      	adds	r3, r7, r3
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	da0d      	bge.n	8003d28 <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	0018      	movs	r0, r3
 8003d10:	f001 fbde 	bl	80054d0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d14:	e008      	b.n	8003d28 <HAL_UART_IRQHandler+0x678>
      return;
 8003d16:	46c0      	nop			@ (mov r8, r8)
 8003d18:	e006      	b.n	8003d28 <HAL_UART_IRQHandler+0x678>
    return;
 8003d1a:	46c0      	nop			@ (mov r8, r8)
 8003d1c:	e004      	b.n	8003d28 <HAL_UART_IRQHandler+0x678>
      return;
 8003d1e:	46c0      	nop			@ (mov r8, r8)
 8003d20:	e002      	b.n	8003d28 <HAL_UART_IRQHandler+0x678>
      return;
 8003d22:	46c0      	nop			@ (mov r8, r8)
 8003d24:	e000      	b.n	8003d28 <HAL_UART_IRQHandler+0x678>
    return;
 8003d26:	46c0      	nop			@ (mov r8, r8)
  }
}
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	b02a      	add	sp, #168	@ 0xa8
 8003d2c:	bdb0      	pop	{r4, r5, r7, pc}
 8003d2e:	46c0      	nop			@ (mov r8, r8)
 8003d30:	fffffeff 	.word	0xfffffeff
 8003d34:	fffffedf 	.word	0xfffffedf
 8003d38:	effffffe 	.word	0xeffffffe

08003d3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	000a      	movs	r2, r1
 8003d46:	1cbb      	adds	r3, r7, #2
 8003d48:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d4a:	46c0      	nop			@ (mov r8, r8)
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	b002      	add	sp, #8
 8003d50:	bd80      	pop	{r7, pc}
	...

08003d54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b088      	sub	sp, #32
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d5c:	231e      	movs	r3, #30
 8003d5e:	18fb      	adds	r3, r7, r3
 8003d60:	2200      	movs	r2, #0
 8003d62:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689a      	ldr	r2, [r3, #8]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	431a      	orrs	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	431a      	orrs	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	69db      	ldr	r3, [r3, #28]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4aab      	ldr	r2, [pc, #684]	@ (8004030 <UART_SetConfig+0x2dc>)
 8003d84:	4013      	ands	r3, r2
 8003d86:	0019      	movs	r1, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	4aa6      	ldr	r2, [pc, #664]	@ (8004034 <UART_SetConfig+0x2e0>)
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	0019      	movs	r1, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	68da      	ldr	r2, [r3, #12]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	430a      	orrs	r2, r1
 8003da8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a1b      	ldr	r3, [r3, #32]
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	4a9d      	ldr	r2, [pc, #628]	@ (8004038 <UART_SetConfig+0x2e4>)
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	0019      	movs	r1, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd6:	220f      	movs	r2, #15
 8003dd8:	4393      	bics	r3, r2
 8003dda:	0019      	movs	r1, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	430a      	orrs	r2, r1
 8003de6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a93      	ldr	r2, [pc, #588]	@ (800403c <UART_SetConfig+0x2e8>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d127      	bne.n	8003e42 <UART_SetConfig+0xee>
 8003df2:	4b93      	ldr	r3, [pc, #588]	@ (8004040 <UART_SetConfig+0x2ec>)
 8003df4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003df6:	2203      	movs	r2, #3
 8003df8:	4013      	ands	r3, r2
 8003dfa:	2b03      	cmp	r3, #3
 8003dfc:	d017      	beq.n	8003e2e <UART_SetConfig+0xda>
 8003dfe:	d81b      	bhi.n	8003e38 <UART_SetConfig+0xe4>
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d00a      	beq.n	8003e1a <UART_SetConfig+0xc6>
 8003e04:	d818      	bhi.n	8003e38 <UART_SetConfig+0xe4>
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d002      	beq.n	8003e10 <UART_SetConfig+0xbc>
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d00a      	beq.n	8003e24 <UART_SetConfig+0xd0>
 8003e0e:	e013      	b.n	8003e38 <UART_SetConfig+0xe4>
 8003e10:	231f      	movs	r3, #31
 8003e12:	18fb      	adds	r3, r7, r3
 8003e14:	2200      	movs	r2, #0
 8003e16:	701a      	strb	r2, [r3, #0]
 8003e18:	e021      	b.n	8003e5e <UART_SetConfig+0x10a>
 8003e1a:	231f      	movs	r3, #31
 8003e1c:	18fb      	adds	r3, r7, r3
 8003e1e:	2202      	movs	r2, #2
 8003e20:	701a      	strb	r2, [r3, #0]
 8003e22:	e01c      	b.n	8003e5e <UART_SetConfig+0x10a>
 8003e24:	231f      	movs	r3, #31
 8003e26:	18fb      	adds	r3, r7, r3
 8003e28:	2204      	movs	r2, #4
 8003e2a:	701a      	strb	r2, [r3, #0]
 8003e2c:	e017      	b.n	8003e5e <UART_SetConfig+0x10a>
 8003e2e:	231f      	movs	r3, #31
 8003e30:	18fb      	adds	r3, r7, r3
 8003e32:	2208      	movs	r2, #8
 8003e34:	701a      	strb	r2, [r3, #0]
 8003e36:	e012      	b.n	8003e5e <UART_SetConfig+0x10a>
 8003e38:	231f      	movs	r3, #31
 8003e3a:	18fb      	adds	r3, r7, r3
 8003e3c:	2210      	movs	r2, #16
 8003e3e:	701a      	strb	r2, [r3, #0]
 8003e40:	e00d      	b.n	8003e5e <UART_SetConfig+0x10a>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a7f      	ldr	r2, [pc, #508]	@ (8004044 <UART_SetConfig+0x2f0>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d104      	bne.n	8003e56 <UART_SetConfig+0x102>
 8003e4c:	231f      	movs	r3, #31
 8003e4e:	18fb      	adds	r3, r7, r3
 8003e50:	2200      	movs	r2, #0
 8003e52:	701a      	strb	r2, [r3, #0]
 8003e54:	e003      	b.n	8003e5e <UART_SetConfig+0x10a>
 8003e56:	231f      	movs	r3, #31
 8003e58:	18fb      	adds	r3, r7, r3
 8003e5a:	2210      	movs	r2, #16
 8003e5c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	69da      	ldr	r2, [r3, #28]
 8003e62:	2380      	movs	r3, #128	@ 0x80
 8003e64:	021b      	lsls	r3, r3, #8
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d000      	beq.n	8003e6c <UART_SetConfig+0x118>
 8003e6a:	e06f      	b.n	8003f4c <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8003e6c:	231f      	movs	r3, #31
 8003e6e:	18fb      	adds	r3, r7, r3
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	2b08      	cmp	r3, #8
 8003e74:	d01f      	beq.n	8003eb6 <UART_SetConfig+0x162>
 8003e76:	dc22      	bgt.n	8003ebe <UART_SetConfig+0x16a>
 8003e78:	2b04      	cmp	r3, #4
 8003e7a:	d017      	beq.n	8003eac <UART_SetConfig+0x158>
 8003e7c:	dc1f      	bgt.n	8003ebe <UART_SetConfig+0x16a>
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d002      	beq.n	8003e88 <UART_SetConfig+0x134>
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d005      	beq.n	8003e92 <UART_SetConfig+0x13e>
 8003e86:	e01a      	b.n	8003ebe <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e88:	f7fe fada 	bl	8002440 <HAL_RCC_GetPCLK1Freq>
 8003e8c:	0003      	movs	r3, r0
 8003e8e:	61bb      	str	r3, [r7, #24]
        break;
 8003e90:	e01c      	b.n	8003ecc <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8003e92:	4b6b      	ldr	r3, [pc, #428]	@ (8004040 <UART_SetConfig+0x2ec>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	095b      	lsrs	r3, r3, #5
 8003e98:	2207      	movs	r2, #7
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	0019      	movs	r1, r3
 8003ea0:	4869      	ldr	r0, [pc, #420]	@ (8004048 <UART_SetConfig+0x2f4>)
 8003ea2:	f7fc f931 	bl	8000108 <__udivsi3>
 8003ea6:	0003      	movs	r3, r0
 8003ea8:	61bb      	str	r3, [r7, #24]
        break;
 8003eaa:	e00f      	b.n	8003ecc <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eac:	f7fe fa68 	bl	8002380 <HAL_RCC_GetSysClockFreq>
 8003eb0:	0003      	movs	r3, r0
 8003eb2:	61bb      	str	r3, [r7, #24]
        break;
 8003eb4:	e00a      	b.n	8003ecc <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eb6:	2380      	movs	r3, #128	@ 0x80
 8003eb8:	021b      	lsls	r3, r3, #8
 8003eba:	61bb      	str	r3, [r7, #24]
        break;
 8003ebc:	e006      	b.n	8003ecc <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ec2:	231e      	movs	r3, #30
 8003ec4:	18fb      	adds	r3, r7, r3
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	701a      	strb	r2, [r3, #0]
        break;
 8003eca:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d100      	bne.n	8003ed4 <UART_SetConfig+0x180>
 8003ed2:	e097      	b.n	8004004 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ed8:	4b5c      	ldr	r3, [pc, #368]	@ (800404c <UART_SetConfig+0x2f8>)
 8003eda:	0052      	lsls	r2, r2, #1
 8003edc:	5ad3      	ldrh	r3, [r2, r3]
 8003ede:	0019      	movs	r1, r3
 8003ee0:	69b8      	ldr	r0, [r7, #24]
 8003ee2:	f7fc f911 	bl	8000108 <__udivsi3>
 8003ee6:	0003      	movs	r3, r0
 8003ee8:	005a      	lsls	r2, r3, #1
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	085b      	lsrs	r3, r3, #1
 8003ef0:	18d2      	adds	r2, r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	0019      	movs	r1, r3
 8003ef8:	0010      	movs	r0, r2
 8003efa:	f7fc f905 	bl	8000108 <__udivsi3>
 8003efe:	0003      	movs	r3, r0
 8003f00:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	2b0f      	cmp	r3, #15
 8003f06:	d91c      	bls.n	8003f42 <UART_SetConfig+0x1ee>
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	2380      	movs	r3, #128	@ 0x80
 8003f0c:	025b      	lsls	r3, r3, #9
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d217      	bcs.n	8003f42 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	200e      	movs	r0, #14
 8003f18:	183b      	adds	r3, r7, r0
 8003f1a:	210f      	movs	r1, #15
 8003f1c:	438a      	bics	r2, r1
 8003f1e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	085b      	lsrs	r3, r3, #1
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	2207      	movs	r2, #7
 8003f28:	4013      	ands	r3, r2
 8003f2a:	b299      	uxth	r1, r3
 8003f2c:	183b      	adds	r3, r7, r0
 8003f2e:	183a      	adds	r2, r7, r0
 8003f30:	8812      	ldrh	r2, [r2, #0]
 8003f32:	430a      	orrs	r2, r1
 8003f34:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	183a      	adds	r2, r7, r0
 8003f3c:	8812      	ldrh	r2, [r2, #0]
 8003f3e:	60da      	str	r2, [r3, #12]
 8003f40:	e060      	b.n	8004004 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8003f42:	231e      	movs	r3, #30
 8003f44:	18fb      	adds	r3, r7, r3
 8003f46:	2201      	movs	r2, #1
 8003f48:	701a      	strb	r2, [r3, #0]
 8003f4a:	e05b      	b.n	8004004 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f4c:	231f      	movs	r3, #31
 8003f4e:	18fb      	adds	r3, r7, r3
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	2b08      	cmp	r3, #8
 8003f54:	d01f      	beq.n	8003f96 <UART_SetConfig+0x242>
 8003f56:	dc22      	bgt.n	8003f9e <UART_SetConfig+0x24a>
 8003f58:	2b04      	cmp	r3, #4
 8003f5a:	d017      	beq.n	8003f8c <UART_SetConfig+0x238>
 8003f5c:	dc1f      	bgt.n	8003f9e <UART_SetConfig+0x24a>
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d002      	beq.n	8003f68 <UART_SetConfig+0x214>
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d005      	beq.n	8003f72 <UART_SetConfig+0x21e>
 8003f66:	e01a      	b.n	8003f9e <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f68:	f7fe fa6a 	bl	8002440 <HAL_RCC_GetPCLK1Freq>
 8003f6c:	0003      	movs	r3, r0
 8003f6e:	61bb      	str	r3, [r7, #24]
        break;
 8003f70:	e01c      	b.n	8003fac <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8003f72:	4b33      	ldr	r3, [pc, #204]	@ (8004040 <UART_SetConfig+0x2ec>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	095b      	lsrs	r3, r3, #5
 8003f78:	2207      	movs	r2, #7
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	0019      	movs	r1, r3
 8003f80:	4831      	ldr	r0, [pc, #196]	@ (8004048 <UART_SetConfig+0x2f4>)
 8003f82:	f7fc f8c1 	bl	8000108 <__udivsi3>
 8003f86:	0003      	movs	r3, r0
 8003f88:	61bb      	str	r3, [r7, #24]
        break;
 8003f8a:	e00f      	b.n	8003fac <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f8c:	f7fe f9f8 	bl	8002380 <HAL_RCC_GetSysClockFreq>
 8003f90:	0003      	movs	r3, r0
 8003f92:	61bb      	str	r3, [r7, #24]
        break;
 8003f94:	e00a      	b.n	8003fac <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f96:	2380      	movs	r3, #128	@ 0x80
 8003f98:	021b      	lsls	r3, r3, #8
 8003f9a:	61bb      	str	r3, [r7, #24]
        break;
 8003f9c:	e006      	b.n	8003fac <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003fa2:	231e      	movs	r3, #30
 8003fa4:	18fb      	adds	r3, r7, r3
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	701a      	strb	r2, [r3, #0]
        break;
 8003faa:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d028      	beq.n	8004004 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003fb6:	4b25      	ldr	r3, [pc, #148]	@ (800404c <UART_SetConfig+0x2f8>)
 8003fb8:	0052      	lsls	r2, r2, #1
 8003fba:	5ad3      	ldrh	r3, [r2, r3]
 8003fbc:	0019      	movs	r1, r3
 8003fbe:	69b8      	ldr	r0, [r7, #24]
 8003fc0:	f7fc f8a2 	bl	8000108 <__udivsi3>
 8003fc4:	0003      	movs	r3, r0
 8003fc6:	001a      	movs	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	085b      	lsrs	r3, r3, #1
 8003fce:	18d2      	adds	r2, r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	0019      	movs	r1, r3
 8003fd6:	0010      	movs	r0, r2
 8003fd8:	f7fc f896 	bl	8000108 <__udivsi3>
 8003fdc:	0003      	movs	r3, r0
 8003fde:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	2b0f      	cmp	r3, #15
 8003fe4:	d90a      	bls.n	8003ffc <UART_SetConfig+0x2a8>
 8003fe6:	693a      	ldr	r2, [r7, #16]
 8003fe8:	2380      	movs	r3, #128	@ 0x80
 8003fea:	025b      	lsls	r3, r3, #9
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d205      	bcs.n	8003ffc <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	60da      	str	r2, [r3, #12]
 8003ffa:	e003      	b.n	8004004 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8003ffc:	231e      	movs	r3, #30
 8003ffe:	18fb      	adds	r3, r7, r3
 8004000:	2201      	movs	r2, #1
 8004002:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	226a      	movs	r2, #106	@ 0x6a
 8004008:	2101      	movs	r1, #1
 800400a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2268      	movs	r2, #104	@ 0x68
 8004010:	2101      	movs	r1, #1
 8004012:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004020:	231e      	movs	r3, #30
 8004022:	18fb      	adds	r3, r7, r3
 8004024:	781b      	ldrb	r3, [r3, #0]
}
 8004026:	0018      	movs	r0, r3
 8004028:	46bd      	mov	sp, r7
 800402a:	b008      	add	sp, #32
 800402c:	bd80      	pop	{r7, pc}
 800402e:	46c0      	nop			@ (mov r8, r8)
 8004030:	cfff69f3 	.word	0xcfff69f3
 8004034:	ffffcfff 	.word	0xffffcfff
 8004038:	11fff4ff 	.word	0x11fff4ff
 800403c:	40013800 	.word	0x40013800
 8004040:	40021000 	.word	0x40021000
 8004044:	40004400 	.word	0x40004400
 8004048:	02dc6c00 	.word	0x02dc6c00
 800404c:	08005de0 	.word	0x08005de0

08004050 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800405c:	2208      	movs	r2, #8
 800405e:	4013      	ands	r3, r2
 8004060:	d00b      	beq.n	800407a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	4a4a      	ldr	r2, [pc, #296]	@ (8004194 <UART_AdvFeatureConfig+0x144>)
 800406a:	4013      	ands	r3, r2
 800406c:	0019      	movs	r1, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	430a      	orrs	r2, r1
 8004078:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800407e:	2201      	movs	r2, #1
 8004080:	4013      	ands	r3, r2
 8004082:	d00b      	beq.n	800409c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	4a43      	ldr	r2, [pc, #268]	@ (8004198 <UART_AdvFeatureConfig+0x148>)
 800408c:	4013      	ands	r3, r2
 800408e:	0019      	movs	r1, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	430a      	orrs	r2, r1
 800409a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a0:	2202      	movs	r2, #2
 80040a2:	4013      	ands	r3, r2
 80040a4:	d00b      	beq.n	80040be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	4a3b      	ldr	r2, [pc, #236]	@ (800419c <UART_AdvFeatureConfig+0x14c>)
 80040ae:	4013      	ands	r3, r2
 80040b0:	0019      	movs	r1, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c2:	2204      	movs	r2, #4
 80040c4:	4013      	ands	r3, r2
 80040c6:	d00b      	beq.n	80040e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	4a34      	ldr	r2, [pc, #208]	@ (80041a0 <UART_AdvFeatureConfig+0x150>)
 80040d0:	4013      	ands	r3, r2
 80040d2:	0019      	movs	r1, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e4:	2210      	movs	r2, #16
 80040e6:	4013      	ands	r3, r2
 80040e8:	d00b      	beq.n	8004102 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	4a2c      	ldr	r2, [pc, #176]	@ (80041a4 <UART_AdvFeatureConfig+0x154>)
 80040f2:	4013      	ands	r3, r2
 80040f4:	0019      	movs	r1, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	430a      	orrs	r2, r1
 8004100:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004106:	2220      	movs	r2, #32
 8004108:	4013      	ands	r3, r2
 800410a:	d00b      	beq.n	8004124 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	4a25      	ldr	r2, [pc, #148]	@ (80041a8 <UART_AdvFeatureConfig+0x158>)
 8004114:	4013      	ands	r3, r2
 8004116:	0019      	movs	r1, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	430a      	orrs	r2, r1
 8004122:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004128:	2240      	movs	r2, #64	@ 0x40
 800412a:	4013      	ands	r3, r2
 800412c:	d01d      	beq.n	800416a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	4a1d      	ldr	r2, [pc, #116]	@ (80041ac <UART_AdvFeatureConfig+0x15c>)
 8004136:	4013      	ands	r3, r2
 8004138:	0019      	movs	r1, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	430a      	orrs	r2, r1
 8004144:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800414a:	2380      	movs	r3, #128	@ 0x80
 800414c:	035b      	lsls	r3, r3, #13
 800414e:	429a      	cmp	r2, r3
 8004150:	d10b      	bne.n	800416a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	4a15      	ldr	r2, [pc, #84]	@ (80041b0 <UART_AdvFeatureConfig+0x160>)
 800415a:	4013      	ands	r3, r2
 800415c:	0019      	movs	r1, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	430a      	orrs	r2, r1
 8004168:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800416e:	2280      	movs	r2, #128	@ 0x80
 8004170:	4013      	ands	r3, r2
 8004172:	d00b      	beq.n	800418c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	4a0e      	ldr	r2, [pc, #56]	@ (80041b4 <UART_AdvFeatureConfig+0x164>)
 800417c:	4013      	ands	r3, r2
 800417e:	0019      	movs	r1, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	430a      	orrs	r2, r1
 800418a:	605a      	str	r2, [r3, #4]
  }
}
 800418c:	46c0      	nop			@ (mov r8, r8)
 800418e:	46bd      	mov	sp, r7
 8004190:	b002      	add	sp, #8
 8004192:	bd80      	pop	{r7, pc}
 8004194:	ffff7fff 	.word	0xffff7fff
 8004198:	fffdffff 	.word	0xfffdffff
 800419c:	fffeffff 	.word	0xfffeffff
 80041a0:	fffbffff 	.word	0xfffbffff
 80041a4:	ffffefff 	.word	0xffffefff
 80041a8:	ffffdfff 	.word	0xffffdfff
 80041ac:	ffefffff 	.word	0xffefffff
 80041b0:	ff9fffff 	.word	0xff9fffff
 80041b4:	fff7ffff 	.word	0xfff7ffff

080041b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b092      	sub	sp, #72	@ 0x48
 80041bc:	af02      	add	r7, sp, #8
 80041be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2290      	movs	r2, #144	@ 0x90
 80041c4:	2100      	movs	r1, #0
 80041c6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041c8:	f7fd fa98 	bl	80016fc <HAL_GetTick>
 80041cc:	0003      	movs	r3, r0
 80041ce:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2208      	movs	r2, #8
 80041d8:	4013      	ands	r3, r2
 80041da:	2b08      	cmp	r3, #8
 80041dc:	d12d      	bne.n	800423a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041e0:	2280      	movs	r2, #128	@ 0x80
 80041e2:	0391      	lsls	r1, r2, #14
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	4a47      	ldr	r2, [pc, #284]	@ (8004304 <UART_CheckIdleState+0x14c>)
 80041e8:	9200      	str	r2, [sp, #0]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f000 f88e 	bl	800430c <UART_WaitOnFlagUntilTimeout>
 80041f0:	1e03      	subs	r3, r0, #0
 80041f2:	d022      	beq.n	800423a <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80041f4:	f3ef 8310 	mrs	r3, PRIMASK
 80041f8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80041fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80041fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80041fe:	2301      	movs	r3, #1
 8004200:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004204:	f383 8810 	msr	PRIMASK, r3
}
 8004208:	46c0      	nop			@ (mov r8, r8)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2180      	movs	r1, #128	@ 0x80
 8004216:	438a      	bics	r2, r1
 8004218:	601a      	str	r2, [r3, #0]
 800421a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800421c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800421e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004220:	f383 8810 	msr	PRIMASK, r3
}
 8004224:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2288      	movs	r2, #136	@ 0x88
 800422a:	2120      	movs	r1, #32
 800422c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2284      	movs	r2, #132	@ 0x84
 8004232:	2100      	movs	r1, #0
 8004234:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e060      	b.n	80042fc <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2204      	movs	r2, #4
 8004242:	4013      	ands	r3, r2
 8004244:	2b04      	cmp	r3, #4
 8004246:	d146      	bne.n	80042d6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004248:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800424a:	2280      	movs	r2, #128	@ 0x80
 800424c:	03d1      	lsls	r1, r2, #15
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	4a2c      	ldr	r2, [pc, #176]	@ (8004304 <UART_CheckIdleState+0x14c>)
 8004252:	9200      	str	r2, [sp, #0]
 8004254:	2200      	movs	r2, #0
 8004256:	f000 f859 	bl	800430c <UART_WaitOnFlagUntilTimeout>
 800425a:	1e03      	subs	r3, r0, #0
 800425c:	d03b      	beq.n	80042d6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800425e:	f3ef 8310 	mrs	r3, PRIMASK
 8004262:	60fb      	str	r3, [r7, #12]
  return(result);
 8004264:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004266:	637b      	str	r3, [r7, #52]	@ 0x34
 8004268:	2301      	movs	r3, #1
 800426a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	f383 8810 	msr	PRIMASK, r3
}
 8004272:	46c0      	nop			@ (mov r8, r8)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4922      	ldr	r1, [pc, #136]	@ (8004308 <UART_CheckIdleState+0x150>)
 8004280:	400a      	ands	r2, r1
 8004282:	601a      	str	r2, [r3, #0]
 8004284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004286:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	f383 8810 	msr	PRIMASK, r3
}
 800428e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004290:	f3ef 8310 	mrs	r3, PRIMASK
 8004294:	61bb      	str	r3, [r7, #24]
  return(result);
 8004296:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004298:	633b      	str	r3, [r7, #48]	@ 0x30
 800429a:	2301      	movs	r3, #1
 800429c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	f383 8810 	msr	PRIMASK, r3
}
 80042a4:	46c0      	nop			@ (mov r8, r8)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	689a      	ldr	r2, [r3, #8]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2101      	movs	r1, #1
 80042b2:	438a      	bics	r2, r1
 80042b4:	609a      	str	r2, [r3, #8]
 80042b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042b8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ba:	6a3b      	ldr	r3, [r7, #32]
 80042bc:	f383 8810 	msr	PRIMASK, r3
}
 80042c0:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	228c      	movs	r2, #140	@ 0x8c
 80042c6:	2120      	movs	r1, #32
 80042c8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2284      	movs	r2, #132	@ 0x84
 80042ce:	2100      	movs	r1, #0
 80042d0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e012      	b.n	80042fc <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2288      	movs	r2, #136	@ 0x88
 80042da:	2120      	movs	r1, #32
 80042dc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	228c      	movs	r2, #140	@ 0x8c
 80042e2:	2120      	movs	r1, #32
 80042e4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2284      	movs	r2, #132	@ 0x84
 80042f6:	2100      	movs	r1, #0
 80042f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	0018      	movs	r0, r3
 80042fe:	46bd      	mov	sp, r7
 8004300:	b010      	add	sp, #64	@ 0x40
 8004302:	bd80      	pop	{r7, pc}
 8004304:	01ffffff 	.word	0x01ffffff
 8004308:	fffffedf 	.word	0xfffffedf

0800430c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	603b      	str	r3, [r7, #0]
 8004318:	1dfb      	adds	r3, r7, #7
 800431a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800431c:	e051      	b.n	80043c2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	3301      	adds	r3, #1
 8004322:	d04e      	beq.n	80043c2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004324:	f7fd f9ea 	bl	80016fc <HAL_GetTick>
 8004328:	0002      	movs	r2, r0
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	69ba      	ldr	r2, [r7, #24]
 8004330:	429a      	cmp	r2, r3
 8004332:	d302      	bcc.n	800433a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e051      	b.n	80043e2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2204      	movs	r2, #4
 8004346:	4013      	ands	r3, r2
 8004348:	d03b      	beq.n	80043c2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	2b80      	cmp	r3, #128	@ 0x80
 800434e:	d038      	beq.n	80043c2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	2b40      	cmp	r3, #64	@ 0x40
 8004354:	d035      	beq.n	80043c2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	69db      	ldr	r3, [r3, #28]
 800435c:	2208      	movs	r2, #8
 800435e:	4013      	ands	r3, r2
 8004360:	2b08      	cmp	r3, #8
 8004362:	d111      	bne.n	8004388 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2208      	movs	r2, #8
 800436a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	0018      	movs	r0, r3
 8004370:	f000 f960 	bl	8004634 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2290      	movs	r2, #144	@ 0x90
 8004378:	2108      	movs	r1, #8
 800437a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2284      	movs	r2, #132	@ 0x84
 8004380:	2100      	movs	r1, #0
 8004382:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e02c      	b.n	80043e2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	69da      	ldr	r2, [r3, #28]
 800438e:	2380      	movs	r3, #128	@ 0x80
 8004390:	011b      	lsls	r3, r3, #4
 8004392:	401a      	ands	r2, r3
 8004394:	2380      	movs	r3, #128	@ 0x80
 8004396:	011b      	lsls	r3, r3, #4
 8004398:	429a      	cmp	r2, r3
 800439a:	d112      	bne.n	80043c2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2280      	movs	r2, #128	@ 0x80
 80043a2:	0112      	lsls	r2, r2, #4
 80043a4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	0018      	movs	r0, r3
 80043aa:	f000 f943 	bl	8004634 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2290      	movs	r2, #144	@ 0x90
 80043b2:	2120      	movs	r1, #32
 80043b4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2284      	movs	r2, #132	@ 0x84
 80043ba:	2100      	movs	r1, #0
 80043bc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e00f      	b.n	80043e2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	69db      	ldr	r3, [r3, #28]
 80043c8:	68ba      	ldr	r2, [r7, #8]
 80043ca:	4013      	ands	r3, r2
 80043cc:	68ba      	ldr	r2, [r7, #8]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	425a      	negs	r2, r3
 80043d2:	4153      	adcs	r3, r2
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	001a      	movs	r2, r3
 80043d8:	1dfb      	adds	r3, r7, #7
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d09e      	beq.n	800431e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	0018      	movs	r0, r3
 80043e4:	46bd      	mov	sp, r7
 80043e6:	b004      	add	sp, #16
 80043e8:	bd80      	pop	{r7, pc}
	...

080043ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b098      	sub	sp, #96	@ 0x60
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	1dbb      	adds	r3, r7, #6
 80043f8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	1dba      	adds	r2, r7, #6
 8004404:	215c      	movs	r1, #92	@ 0x5c
 8004406:	8812      	ldrh	r2, [r2, #0]
 8004408:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	1dba      	adds	r2, r7, #6
 800440e:	215e      	movs	r1, #94	@ 0x5e
 8004410:	8812      	ldrh	r2, [r2, #0]
 8004412:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	689a      	ldr	r2, [r3, #8]
 800441e:	2380      	movs	r3, #128	@ 0x80
 8004420:	015b      	lsls	r3, r3, #5
 8004422:	429a      	cmp	r2, r3
 8004424:	d10d      	bne.n	8004442 <UART_Start_Receive_IT+0x56>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d104      	bne.n	8004438 <UART_Start_Receive_IT+0x4c>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2260      	movs	r2, #96	@ 0x60
 8004432:	497b      	ldr	r1, [pc, #492]	@ (8004620 <UART_Start_Receive_IT+0x234>)
 8004434:	5299      	strh	r1, [r3, r2]
 8004436:	e02e      	b.n	8004496 <UART_Start_Receive_IT+0xaa>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2260      	movs	r2, #96	@ 0x60
 800443c:	21ff      	movs	r1, #255	@ 0xff
 800443e:	5299      	strh	r1, [r3, r2]
 8004440:	e029      	b.n	8004496 <UART_Start_Receive_IT+0xaa>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d10d      	bne.n	8004466 <UART_Start_Receive_IT+0x7a>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d104      	bne.n	800445c <UART_Start_Receive_IT+0x70>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2260      	movs	r2, #96	@ 0x60
 8004456:	21ff      	movs	r1, #255	@ 0xff
 8004458:	5299      	strh	r1, [r3, r2]
 800445a:	e01c      	b.n	8004496 <UART_Start_Receive_IT+0xaa>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2260      	movs	r2, #96	@ 0x60
 8004460:	217f      	movs	r1, #127	@ 0x7f
 8004462:	5299      	strh	r1, [r3, r2]
 8004464:	e017      	b.n	8004496 <UART_Start_Receive_IT+0xaa>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	689a      	ldr	r2, [r3, #8]
 800446a:	2380      	movs	r3, #128	@ 0x80
 800446c:	055b      	lsls	r3, r3, #21
 800446e:	429a      	cmp	r2, r3
 8004470:	d10d      	bne.n	800448e <UART_Start_Receive_IT+0xa2>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d104      	bne.n	8004484 <UART_Start_Receive_IT+0x98>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2260      	movs	r2, #96	@ 0x60
 800447e:	217f      	movs	r1, #127	@ 0x7f
 8004480:	5299      	strh	r1, [r3, r2]
 8004482:	e008      	b.n	8004496 <UART_Start_Receive_IT+0xaa>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2260      	movs	r2, #96	@ 0x60
 8004488:	213f      	movs	r1, #63	@ 0x3f
 800448a:	5299      	strh	r1, [r3, r2]
 800448c:	e003      	b.n	8004496 <UART_Start_Receive_IT+0xaa>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2260      	movs	r2, #96	@ 0x60
 8004492:	2100      	movs	r1, #0
 8004494:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2290      	movs	r2, #144	@ 0x90
 800449a:	2100      	movs	r1, #0
 800449c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	228c      	movs	r2, #140	@ 0x8c
 80044a2:	2122      	movs	r1, #34	@ 0x22
 80044a4:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80044a6:	f3ef 8310 	mrs	r3, PRIMASK
 80044aa:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 80044ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044b0:	2301      	movs	r3, #1
 80044b2:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044b6:	f383 8810 	msr	PRIMASK, r3
}
 80044ba:	46c0      	nop			@ (mov r8, r8)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	689a      	ldr	r2, [r3, #8]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2101      	movs	r1, #1
 80044c8:	430a      	orrs	r2, r1
 80044ca:	609a      	str	r2, [r3, #8]
 80044cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044d2:	f383 8810 	msr	PRIMASK, r3
}
 80044d6:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80044dc:	2380      	movs	r3, #128	@ 0x80
 80044de:	059b      	lsls	r3, r3, #22
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d150      	bne.n	8004586 <UART_Start_Receive_IT+0x19a>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2268      	movs	r2, #104	@ 0x68
 80044e8:	5a9b      	ldrh	r3, [r3, r2]
 80044ea:	1dba      	adds	r2, r7, #6
 80044ec:	8812      	ldrh	r2, [r2, #0]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d349      	bcc.n	8004586 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	689a      	ldr	r2, [r3, #8]
 80044f6:	2380      	movs	r3, #128	@ 0x80
 80044f8:	015b      	lsls	r3, r3, #5
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d107      	bne.n	800450e <UART_Start_Receive_IT+0x122>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d103      	bne.n	800450e <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	4a46      	ldr	r2, [pc, #280]	@ (8004624 <UART_Start_Receive_IT+0x238>)
 800450a:	675a      	str	r2, [r3, #116]	@ 0x74
 800450c:	e002      	b.n	8004514 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	4a45      	ldr	r2, [pc, #276]	@ (8004628 <UART_Start_Receive_IT+0x23c>)
 8004512:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d019      	beq.n	8004550 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800451c:	f3ef 8310 	mrs	r3, PRIMASK
 8004520:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 8004522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004524:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004526:	2301      	movs	r3, #1
 8004528:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800452a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800452c:	f383 8810 	msr	PRIMASK, r3
}
 8004530:	46c0      	nop			@ (mov r8, r8)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2180      	movs	r1, #128	@ 0x80
 800453e:	0049      	lsls	r1, r1, #1
 8004540:	430a      	orrs	r2, r1
 8004542:	601a      	str	r2, [r3, #0]
 8004544:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004546:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004548:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800454a:	f383 8810 	msr	PRIMASK, r3
}
 800454e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004550:	f3ef 8310 	mrs	r3, PRIMASK
 8004554:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8004556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004558:	657b      	str	r3, [r7, #84]	@ 0x54
 800455a:	2301      	movs	r3, #1
 800455c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800455e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004560:	f383 8810 	msr	PRIMASK, r3
}
 8004564:	46c0      	nop			@ (mov r8, r8)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	689a      	ldr	r2, [r3, #8]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2180      	movs	r1, #128	@ 0x80
 8004572:	0549      	lsls	r1, r1, #21
 8004574:	430a      	orrs	r2, r1
 8004576:	609a      	str	r2, [r3, #8]
 8004578:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800457a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800457c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800457e:	f383 8810 	msr	PRIMASK, r3
}
 8004582:	46c0      	nop			@ (mov r8, r8)
 8004584:	e047      	b.n	8004616 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	689a      	ldr	r2, [r3, #8]
 800458a:	2380      	movs	r3, #128	@ 0x80
 800458c:	015b      	lsls	r3, r3, #5
 800458e:	429a      	cmp	r2, r3
 8004590:	d107      	bne.n	80045a2 <UART_Start_Receive_IT+0x1b6>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d103      	bne.n	80045a2 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	4a23      	ldr	r2, [pc, #140]	@ (800462c <UART_Start_Receive_IT+0x240>)
 800459e:	675a      	str	r2, [r3, #116]	@ 0x74
 80045a0:	e002      	b.n	80045a8 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	4a22      	ldr	r2, [pc, #136]	@ (8004630 <UART_Start_Receive_IT+0x244>)
 80045a6:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d019      	beq.n	80045e4 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80045b0:	f3ef 8310 	mrs	r3, PRIMASK
 80045b4:	61fb      	str	r3, [r7, #28]
  return(result);
 80045b6:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80045b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045ba:	2301      	movs	r3, #1
 80045bc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045be:	6a3b      	ldr	r3, [r7, #32]
 80045c0:	f383 8810 	msr	PRIMASK, r3
}
 80045c4:	46c0      	nop			@ (mov r8, r8)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2190      	movs	r1, #144	@ 0x90
 80045d2:	0049      	lsls	r1, r1, #1
 80045d4:	430a      	orrs	r2, r1
 80045d6:	601a      	str	r2, [r3, #0]
 80045d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045da:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045de:	f383 8810 	msr	PRIMASK, r3
}
 80045e2:	e018      	b.n	8004616 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80045e4:	f3ef 8310 	mrs	r3, PRIMASK
 80045e8:	613b      	str	r3, [r7, #16]
  return(result);
 80045ea:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80045ec:	653b      	str	r3, [r7, #80]	@ 0x50
 80045ee:	2301      	movs	r3, #1
 80045f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	f383 8810 	msr	PRIMASK, r3
}
 80045f8:	46c0      	nop			@ (mov r8, r8)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2120      	movs	r1, #32
 8004606:	430a      	orrs	r2, r1
 8004608:	601a      	str	r2, [r3, #0]
 800460a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800460c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	f383 8810 	msr	PRIMASK, r3
}
 8004614:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	0018      	movs	r0, r3
 800461a:	46bd      	mov	sp, r7
 800461c:	b018      	add	sp, #96	@ 0x60
 800461e:	bd80      	pop	{r7, pc}
 8004620:	000001ff 	.word	0x000001ff
 8004624:	08005175 	.word	0x08005175
 8004628:	08004e41 	.word	0x08004e41
 800462c:	08004c89 	.word	0x08004c89
 8004630:	08004ad1 	.word	0x08004ad1

08004634 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b08e      	sub	sp, #56	@ 0x38
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800463c:	f3ef 8310 	mrs	r3, PRIMASK
 8004640:	617b      	str	r3, [r7, #20]
  return(result);
 8004642:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004644:	637b      	str	r3, [r7, #52]	@ 0x34
 8004646:	2301      	movs	r3, #1
 8004648:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	f383 8810 	msr	PRIMASK, r3
}
 8004650:	46c0      	nop			@ (mov r8, r8)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4926      	ldr	r1, [pc, #152]	@ (80046f8 <UART_EndRxTransfer+0xc4>)
 800465e:	400a      	ands	r2, r1
 8004660:	601a      	str	r2, [r3, #0]
 8004662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004664:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	f383 8810 	msr	PRIMASK, r3
}
 800466c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800466e:	f3ef 8310 	mrs	r3, PRIMASK
 8004672:	623b      	str	r3, [r7, #32]
  return(result);
 8004674:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004676:	633b      	str	r3, [r7, #48]	@ 0x30
 8004678:	2301      	movs	r3, #1
 800467a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800467c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800467e:	f383 8810 	msr	PRIMASK, r3
}
 8004682:	46c0      	nop			@ (mov r8, r8)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689a      	ldr	r2, [r3, #8]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	491b      	ldr	r1, [pc, #108]	@ (80046fc <UART_EndRxTransfer+0xc8>)
 8004690:	400a      	ands	r2, r1
 8004692:	609a      	str	r2, [r3, #8]
 8004694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004696:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800469a:	f383 8810 	msr	PRIMASK, r3
}
 800469e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d118      	bne.n	80046da <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80046a8:	f3ef 8310 	mrs	r3, PRIMASK
 80046ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80046ae:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046b2:	2301      	movs	r3, #1
 80046b4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f383 8810 	msr	PRIMASK, r3
}
 80046bc:	46c0      	nop			@ (mov r8, r8)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2110      	movs	r1, #16
 80046ca:	438a      	bics	r2, r1
 80046cc:	601a      	str	r2, [r3, #0]
 80046ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	f383 8810 	msr	PRIMASK, r3
}
 80046d8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	228c      	movs	r2, #140	@ 0x8c
 80046de:	2120      	movs	r1, #32
 80046e0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80046ee:	46c0      	nop			@ (mov r8, r8)
 80046f0:	46bd      	mov	sp, r7
 80046f2:	b00e      	add	sp, #56	@ 0x38
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	46c0      	nop			@ (mov r8, r8)
 80046f8:	fffffedf 	.word	0xfffffedf
 80046fc:	effffffe 	.word	0xeffffffe

08004700 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800470c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	225e      	movs	r2, #94	@ 0x5e
 8004712:	2100      	movs	r1, #0
 8004714:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	0018      	movs	r0, r3
 800471a:	f7fc fbd3 	bl	8000ec4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800471e:	46c0      	nop			@ (mov r8, r8)
 8004720:	46bd      	mov	sp, r7
 8004722:	b004      	add	sp, #16
 8004724:	bd80      	pop	{r7, pc}

08004726 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004726:	b580      	push	{r7, lr}
 8004728:	b08a      	sub	sp, #40	@ 0x28
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2288      	movs	r2, #136	@ 0x88
 8004732:	589b      	ldr	r3, [r3, r2]
 8004734:	2b21      	cmp	r3, #33	@ 0x21
 8004736:	d14c      	bne.n	80047d2 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2256      	movs	r2, #86	@ 0x56
 800473c:	5a9b      	ldrh	r3, [r3, r2]
 800473e:	b29b      	uxth	r3, r3
 8004740:	2b00      	cmp	r3, #0
 8004742:	d132      	bne.n	80047aa <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004744:	f3ef 8310 	mrs	r3, PRIMASK
 8004748:	60bb      	str	r3, [r7, #8]
  return(result);
 800474a:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800474c:	627b      	str	r3, [r7, #36]	@ 0x24
 800474e:	2301      	movs	r3, #1
 8004750:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f383 8810 	msr	PRIMASK, r3
}
 8004758:	46c0      	nop			@ (mov r8, r8)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2180      	movs	r1, #128	@ 0x80
 8004766:	438a      	bics	r2, r1
 8004768:	601a      	str	r2, [r3, #0]
 800476a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	f383 8810 	msr	PRIMASK, r3
}
 8004774:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004776:	f3ef 8310 	mrs	r3, PRIMASK
 800477a:	617b      	str	r3, [r7, #20]
  return(result);
 800477c:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800477e:	623b      	str	r3, [r7, #32]
 8004780:	2301      	movs	r3, #1
 8004782:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	f383 8810 	msr	PRIMASK, r3
}
 800478a:	46c0      	nop			@ (mov r8, r8)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2140      	movs	r1, #64	@ 0x40
 8004798:	430a      	orrs	r2, r1
 800479a:	601a      	str	r2, [r3, #0]
 800479c:	6a3b      	ldr	r3, [r7, #32]
 800479e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	f383 8810 	msr	PRIMASK, r3
}
 80047a6:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80047a8:	e013      	b.n	80047d2 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047ae:	781a      	ldrb	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047ba:	1c5a      	adds	r2, r3, #1
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2256      	movs	r2, #86	@ 0x56
 80047c4:	5a9b      	ldrh	r3, [r3, r2]
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	3b01      	subs	r3, #1
 80047ca:	b299      	uxth	r1, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2256      	movs	r2, #86	@ 0x56
 80047d0:	5299      	strh	r1, [r3, r2]
}
 80047d2:	46c0      	nop			@ (mov r8, r8)
 80047d4:	46bd      	mov	sp, r7
 80047d6:	b00a      	add	sp, #40	@ 0x28
 80047d8:	bd80      	pop	{r7, pc}

080047da <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80047da:	b580      	push	{r7, lr}
 80047dc:	b08c      	sub	sp, #48	@ 0x30
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2288      	movs	r2, #136	@ 0x88
 80047e6:	589b      	ldr	r3, [r3, r2]
 80047e8:	2b21      	cmp	r3, #33	@ 0x21
 80047ea:	d151      	bne.n	8004890 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2256      	movs	r2, #86	@ 0x56
 80047f0:	5a9b      	ldrh	r3, [r3, r2]
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d132      	bne.n	800485e <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80047f8:	f3ef 8310 	mrs	r3, PRIMASK
 80047fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80047fe:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004800:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004802:	2301      	movs	r3, #1
 8004804:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	f383 8810 	msr	PRIMASK, r3
}
 800480c:	46c0      	nop			@ (mov r8, r8)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2180      	movs	r1, #128	@ 0x80
 800481a:	438a      	bics	r2, r1
 800481c:	601a      	str	r2, [r3, #0]
 800481e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004820:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	f383 8810 	msr	PRIMASK, r3
}
 8004828:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800482a:	f3ef 8310 	mrs	r3, PRIMASK
 800482e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004830:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004832:	627b      	str	r3, [r7, #36]	@ 0x24
 8004834:	2301      	movs	r3, #1
 8004836:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	f383 8810 	msr	PRIMASK, r3
}
 800483e:	46c0      	nop			@ (mov r8, r8)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2140      	movs	r1, #64	@ 0x40
 800484c:	430a      	orrs	r2, r1
 800484e:	601a      	str	r2, [r3, #0]
 8004850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004852:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004854:	6a3b      	ldr	r3, [r7, #32]
 8004856:	f383 8810 	msr	PRIMASK, r3
}
 800485a:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800485c:	e018      	b.n	8004890 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004862:	62fb      	str	r3, [r7, #44]	@ 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004866:	881b      	ldrh	r3, [r3, #0]
 8004868:	001a      	movs	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	05d2      	lsls	r2, r2, #23
 8004870:	0dd2      	lsrs	r2, r2, #23
 8004872:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004878:	1c9a      	adds	r2, r3, #2
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2256      	movs	r2, #86	@ 0x56
 8004882:	5a9b      	ldrh	r3, [r3, r2]
 8004884:	b29b      	uxth	r3, r3
 8004886:	3b01      	subs	r3, #1
 8004888:	b299      	uxth	r1, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2256      	movs	r2, #86	@ 0x56
 800488e:	5299      	strh	r1, [r3, r2]
}
 8004890:	46c0      	nop			@ (mov r8, r8)
 8004892:	46bd      	mov	sp, r7
 8004894:	b00c      	add	sp, #48	@ 0x30
 8004896:	bd80      	pop	{r7, pc}

08004898 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b08c      	sub	sp, #48	@ 0x30
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2288      	movs	r2, #136	@ 0x88
 80048a4:	589b      	ldr	r3, [r3, r2]
 80048a6:	2b21      	cmp	r3, #33	@ 0x21
 80048a8:	d165      	bne.n	8004976 <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80048aa:	232e      	movs	r3, #46	@ 0x2e
 80048ac:	18fb      	adds	r3, r7, r3
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	216a      	movs	r1, #106	@ 0x6a
 80048b2:	5a52      	ldrh	r2, [r2, r1]
 80048b4:	801a      	strh	r2, [r3, #0]
 80048b6:	e059      	b.n	800496c <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2256      	movs	r2, #86	@ 0x56
 80048bc:	5a9b      	ldrh	r3, [r3, r2]
 80048be:	b29b      	uxth	r3, r3
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d133      	bne.n	800492c <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80048c4:	f3ef 8310 	mrs	r3, PRIMASK
 80048c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80048ca:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80048cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048ce:	2301      	movs	r3, #1
 80048d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	f383 8810 	msr	PRIMASK, r3
}
 80048d8:	46c0      	nop			@ (mov r8, r8)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	689a      	ldr	r2, [r3, #8]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4926      	ldr	r1, [pc, #152]	@ (8004980 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 80048e6:	400a      	ands	r2, r1
 80048e8:	609a      	str	r2, [r3, #8]
 80048ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	f383 8810 	msr	PRIMASK, r3
}
 80048f4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80048f6:	f3ef 8310 	mrs	r3, PRIMASK
 80048fa:	61bb      	str	r3, [r7, #24]
  return(result);
 80048fc:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80048fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004900:	2301      	movs	r3, #1
 8004902:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	f383 8810 	msr	PRIMASK, r3
}
 800490a:	46c0      	nop			@ (mov r8, r8)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2140      	movs	r1, #64	@ 0x40
 8004918:	430a      	orrs	r2, r1
 800491a:	601a      	str	r2, [r3, #0]
 800491c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800491e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004920:	6a3b      	ldr	r3, [r7, #32]
 8004922:	f383 8810 	msr	PRIMASK, r3
}
 8004926:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 8004928:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800492a:	e024      	b.n	8004976 <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	69db      	ldr	r3, [r3, #28]
 8004932:	2280      	movs	r2, #128	@ 0x80
 8004934:	4013      	ands	r3, r2
 8004936:	d013      	beq.n	8004960 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800493c:	781a      	ldrb	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004948:	1c5a      	adds	r2, r3, #1
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2256      	movs	r2, #86	@ 0x56
 8004952:	5a9b      	ldrh	r3, [r3, r2]
 8004954:	b29b      	uxth	r3, r3
 8004956:	3b01      	subs	r3, #1
 8004958:	b299      	uxth	r1, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2256      	movs	r2, #86	@ 0x56
 800495e:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004960:	212e      	movs	r1, #46	@ 0x2e
 8004962:	187b      	adds	r3, r7, r1
 8004964:	881a      	ldrh	r2, [r3, #0]
 8004966:	187b      	adds	r3, r7, r1
 8004968:	3a01      	subs	r2, #1
 800496a:	801a      	strh	r2, [r3, #0]
 800496c:	232e      	movs	r3, #46	@ 0x2e
 800496e:	18fb      	adds	r3, r7, r3
 8004970:	881b      	ldrh	r3, [r3, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1a0      	bne.n	80048b8 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 8004976:	46c0      	nop			@ (mov r8, r8)
 8004978:	46bd      	mov	sp, r7
 800497a:	b00c      	add	sp, #48	@ 0x30
 800497c:	bd80      	pop	{r7, pc}
 800497e:	46c0      	nop			@ (mov r8, r8)
 8004980:	ff7fffff 	.word	0xff7fffff

08004984 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b08c      	sub	sp, #48	@ 0x30
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2288      	movs	r2, #136	@ 0x88
 8004990:	589b      	ldr	r3, [r3, r2]
 8004992:	2b21      	cmp	r3, #33	@ 0x21
 8004994:	d16a      	bne.n	8004a6c <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004996:	232e      	movs	r3, #46	@ 0x2e
 8004998:	18fb      	adds	r3, r7, r3
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	216a      	movs	r1, #106	@ 0x6a
 800499e:	5a52      	ldrh	r2, [r2, r1]
 80049a0:	801a      	strh	r2, [r3, #0]
 80049a2:	e05e      	b.n	8004a62 <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2256      	movs	r2, #86	@ 0x56
 80049a8:	5a9b      	ldrh	r3, [r3, r2]
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d133      	bne.n	8004a18 <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80049b0:	f3ef 8310 	mrs	r3, PRIMASK
 80049b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80049b6:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80049b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80049ba:	2301      	movs	r3, #1
 80049bc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f383 8810 	msr	PRIMASK, r3
}
 80049c4:	46c0      	nop			@ (mov r8, r8)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	689a      	ldr	r2, [r3, #8]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4928      	ldr	r1, [pc, #160]	@ (8004a74 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 80049d2:	400a      	ands	r2, r1
 80049d4:	609a      	str	r2, [r3, #8]
 80049d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	f383 8810 	msr	PRIMASK, r3
}
 80049e0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80049e2:	f3ef 8310 	mrs	r3, PRIMASK
 80049e6:	617b      	str	r3, [r7, #20]
  return(result);
 80049e8:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80049ea:	623b      	str	r3, [r7, #32]
 80049ec:	2301      	movs	r3, #1
 80049ee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	f383 8810 	msr	PRIMASK, r3
}
 80049f6:	46c0      	nop			@ (mov r8, r8)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2140      	movs	r1, #64	@ 0x40
 8004a04:	430a      	orrs	r2, r1
 8004a06:	601a      	str	r2, [r3, #0]
 8004a08:	6a3b      	ldr	r3, [r7, #32]
 8004a0a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	f383 8810 	msr	PRIMASK, r3
}
 8004a12:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 8004a14:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8004a16:	e029      	b.n	8004a6c <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	69db      	ldr	r3, [r3, #28]
 8004a1e:	2280      	movs	r2, #128	@ 0x80
 8004a20:	4013      	ands	r3, r2
 8004a22:	d018      	beq.n	8004a56 <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a28:	62bb      	str	r3, [r7, #40]	@ 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a2c:	881b      	ldrh	r3, [r3, #0]
 8004a2e:	001a      	movs	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	05d2      	lsls	r2, r2, #23
 8004a36:	0dd2      	lsrs	r2, r2, #23
 8004a38:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a3e:	1c9a      	adds	r2, r3, #2
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2256      	movs	r2, #86	@ 0x56
 8004a48:	5a9b      	ldrh	r3, [r3, r2]
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	b299      	uxth	r1, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2256      	movs	r2, #86	@ 0x56
 8004a54:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004a56:	212e      	movs	r1, #46	@ 0x2e
 8004a58:	187b      	adds	r3, r7, r1
 8004a5a:	881a      	ldrh	r2, [r3, #0]
 8004a5c:	187b      	adds	r3, r7, r1
 8004a5e:	3a01      	subs	r2, #1
 8004a60:	801a      	strh	r2, [r3, #0]
 8004a62:	232e      	movs	r3, #46	@ 0x2e
 8004a64:	18fb      	adds	r3, r7, r3
 8004a66:	881b      	ldrh	r3, [r3, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d19b      	bne.n	80049a4 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 8004a6c:	46c0      	nop			@ (mov r8, r8)
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	b00c      	add	sp, #48	@ 0x30
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	ff7fffff 	.word	0xff7fffff

08004a78 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b086      	sub	sp, #24
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004a80:	f3ef 8310 	mrs	r3, PRIMASK
 8004a84:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a86:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a88:	617b      	str	r3, [r7, #20]
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f383 8810 	msr	PRIMASK, r3
}
 8004a94:	46c0      	nop			@ (mov r8, r8)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2140      	movs	r1, #64	@ 0x40
 8004aa2:	438a      	bics	r2, r1
 8004aa4:	601a      	str	r2, [r3, #0]
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	f383 8810 	msr	PRIMASK, r3
}
 8004ab0:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2288      	movs	r2, #136	@ 0x88
 8004ab6:	2120      	movs	r1, #32
 8004ab8:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	0018      	movs	r0, r3
 8004ac4:	f7fc fa20 	bl	8000f08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ac8:	46c0      	nop			@ (mov r8, r8)
 8004aca:	46bd      	mov	sp, r7
 8004acc:	b006      	add	sp, #24
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b094      	sub	sp, #80	@ 0x50
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004ad8:	204e      	movs	r0, #78	@ 0x4e
 8004ada:	183b      	adds	r3, r7, r0
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	2160      	movs	r1, #96	@ 0x60
 8004ae0:	5a52      	ldrh	r2, [r2, r1]
 8004ae2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	228c      	movs	r2, #140	@ 0x8c
 8004ae8:	589b      	ldr	r3, [r3, r2]
 8004aea:	2b22      	cmp	r3, #34	@ 0x22
 8004aec:	d000      	beq.n	8004af0 <UART_RxISR_8BIT+0x20>
 8004aee:	e0ba      	b.n	8004c66 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004af6:	214c      	movs	r1, #76	@ 0x4c
 8004af8:	187b      	adds	r3, r7, r1
 8004afa:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004afc:	187b      	adds	r3, r7, r1
 8004afe:	881b      	ldrh	r3, [r3, #0]
 8004b00:	b2da      	uxtb	r2, r3
 8004b02:	183b      	adds	r3, r7, r0
 8004b04:	881b      	ldrh	r3, [r3, #0]
 8004b06:	b2d9      	uxtb	r1, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b0c:	400a      	ands	r2, r1
 8004b0e:	b2d2      	uxtb	r2, r2
 8004b10:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b16:	1c5a      	adds	r2, r3, #1
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	225e      	movs	r2, #94	@ 0x5e
 8004b20:	5a9b      	ldrh	r3, [r3, r2]
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	3b01      	subs	r3, #1
 8004b26:	b299      	uxth	r1, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	225e      	movs	r2, #94	@ 0x5e
 8004b2c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	225e      	movs	r2, #94	@ 0x5e
 8004b32:	5a9b      	ldrh	r3, [r3, r2]
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d000      	beq.n	8004b3c <UART_RxISR_8BIT+0x6c>
 8004b3a:	e09c      	b.n	8004c76 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004b3c:	f3ef 8310 	mrs	r3, PRIMASK
 8004b40:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004b44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b46:	2301      	movs	r3, #1
 8004b48:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b4c:	f383 8810 	msr	PRIMASK, r3
}
 8004b50:	46c0      	nop			@ (mov r8, r8)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4948      	ldr	r1, [pc, #288]	@ (8004c80 <UART_RxISR_8BIT+0x1b0>)
 8004b5e:	400a      	ands	r2, r1
 8004b60:	601a      	str	r2, [r3, #0]
 8004b62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b68:	f383 8810 	msr	PRIMASK, r3
}
 8004b6c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004b6e:	f3ef 8310 	mrs	r3, PRIMASK
 8004b72:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b76:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b78:	2301      	movs	r3, #1
 8004b7a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b7e:	f383 8810 	msr	PRIMASK, r3
}
 8004b82:	46c0      	nop			@ (mov r8, r8)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	689a      	ldr	r2, [r3, #8]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2101      	movs	r1, #1
 8004b90:	438a      	bics	r2, r1
 8004b92:	609a      	str	r2, [r3, #8]
 8004b94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b96:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b9a:	f383 8810 	msr	PRIMASK, r3
}
 8004b9e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	228c      	movs	r2, #140	@ 0x8c
 8004ba4:	2120      	movs	r1, #32
 8004ba6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	685a      	ldr	r2, [r3, #4]
 8004bba:	2380      	movs	r3, #128	@ 0x80
 8004bbc:	041b      	lsls	r3, r3, #16
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	d018      	beq.n	8004bf4 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004bc2:	f3ef 8310 	mrs	r3, PRIMASK
 8004bc6:	61bb      	str	r3, [r7, #24]
  return(result);
 8004bc8:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004bca:	643b      	str	r3, [r7, #64]	@ 0x40
 8004bcc:	2301      	movs	r3, #1
 8004bce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	f383 8810 	msr	PRIMASK, r3
}
 8004bd6:	46c0      	nop			@ (mov r8, r8)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4928      	ldr	r1, [pc, #160]	@ (8004c84 <UART_RxISR_8BIT+0x1b4>)
 8004be4:	400a      	ands	r2, r1
 8004be6:	601a      	str	r2, [r3, #0]
 8004be8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bec:	6a3b      	ldr	r3, [r7, #32]
 8004bee:	f383 8810 	msr	PRIMASK, r3
}
 8004bf2:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d12f      	bne.n	8004c5c <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004c02:	f3ef 8310 	mrs	r3, PRIMASK
 8004c06:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c08:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	f383 8810 	msr	PRIMASK, r3
}
 8004c16:	46c0      	nop			@ (mov r8, r8)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2110      	movs	r1, #16
 8004c24:	438a      	bics	r2, r1
 8004c26:	601a      	str	r2, [r3, #0]
 8004c28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c2a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	f383 8810 	msr	PRIMASK, r3
}
 8004c32:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	69db      	ldr	r3, [r3, #28]
 8004c3a:	2210      	movs	r2, #16
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	2b10      	cmp	r3, #16
 8004c40:	d103      	bne.n	8004c4a <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2210      	movs	r2, #16
 8004c48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	225c      	movs	r2, #92	@ 0x5c
 8004c4e:	5a9a      	ldrh	r2, [r3, r2]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	0011      	movs	r1, r2
 8004c54:	0018      	movs	r0, r3
 8004c56:	f7ff f871 	bl	8003d3c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004c5a:	e00c      	b.n	8004c76 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	0018      	movs	r0, r3
 8004c60:	f7fc f9cc 	bl	8000ffc <HAL_UART_RxCpltCallback>
}
 8004c64:	e007      	b.n	8004c76 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	699a      	ldr	r2, [r3, #24]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2108      	movs	r1, #8
 8004c72:	430a      	orrs	r2, r1
 8004c74:	619a      	str	r2, [r3, #24]
}
 8004c76:	46c0      	nop			@ (mov r8, r8)
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	b014      	add	sp, #80	@ 0x50
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	46c0      	nop			@ (mov r8, r8)
 8004c80:	fffffedf 	.word	0xfffffedf
 8004c84:	fbffffff 	.word	0xfbffffff

08004c88 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b094      	sub	sp, #80	@ 0x50
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004c90:	204e      	movs	r0, #78	@ 0x4e
 8004c92:	183b      	adds	r3, r7, r0
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	2160      	movs	r1, #96	@ 0x60
 8004c98:	5a52      	ldrh	r2, [r2, r1]
 8004c9a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	228c      	movs	r2, #140	@ 0x8c
 8004ca0:	589b      	ldr	r3, [r3, r2]
 8004ca2:	2b22      	cmp	r3, #34	@ 0x22
 8004ca4:	d000      	beq.n	8004ca8 <UART_RxISR_16BIT+0x20>
 8004ca6:	e0ba      	b.n	8004e1e <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004cae:	214c      	movs	r1, #76	@ 0x4c
 8004cb0:	187b      	adds	r3, r7, r1
 8004cb2:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cb8:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8004cba:	187b      	adds	r3, r7, r1
 8004cbc:	183a      	adds	r2, r7, r0
 8004cbe:	881b      	ldrh	r3, [r3, #0]
 8004cc0:	8812      	ldrh	r2, [r2, #0]
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004cc8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cce:	1c9a      	adds	r2, r3, #2
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	225e      	movs	r2, #94	@ 0x5e
 8004cd8:	5a9b      	ldrh	r3, [r3, r2]
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	b299      	uxth	r1, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	225e      	movs	r2, #94	@ 0x5e
 8004ce4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	225e      	movs	r2, #94	@ 0x5e
 8004cea:	5a9b      	ldrh	r3, [r3, r2]
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d000      	beq.n	8004cf4 <UART_RxISR_16BIT+0x6c>
 8004cf2:	e09c      	b.n	8004e2e <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004cf4:	f3ef 8310 	mrs	r3, PRIMASK
 8004cf8:	623b      	str	r3, [r7, #32]
  return(result);
 8004cfa:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004cfc:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cfe:	2301      	movs	r3, #1
 8004d00:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d04:	f383 8810 	msr	PRIMASK, r3
}
 8004d08:	46c0      	nop			@ (mov r8, r8)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4948      	ldr	r1, [pc, #288]	@ (8004e38 <UART_RxISR_16BIT+0x1b0>)
 8004d16:	400a      	ands	r2, r1
 8004d18:	601a      	str	r2, [r3, #0]
 8004d1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d20:	f383 8810 	msr	PRIMASK, r3
}
 8004d24:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004d26:	f3ef 8310 	mrs	r3, PRIMASK
 8004d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8004d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d2e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d30:	2301      	movs	r3, #1
 8004d32:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d36:	f383 8810 	msr	PRIMASK, r3
}
 8004d3a:	46c0      	nop			@ (mov r8, r8)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689a      	ldr	r2, [r3, #8]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2101      	movs	r1, #1
 8004d48:	438a      	bics	r2, r1
 8004d4a:	609a      	str	r2, [r3, #8]
 8004d4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d4e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d52:	f383 8810 	msr	PRIMASK, r3
}
 8004d56:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	228c      	movs	r2, #140	@ 0x8c
 8004d5c:	2120      	movs	r1, #32
 8004d5e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	685a      	ldr	r2, [r3, #4]
 8004d72:	2380      	movs	r3, #128	@ 0x80
 8004d74:	041b      	lsls	r3, r3, #16
 8004d76:	4013      	ands	r3, r2
 8004d78:	d018      	beq.n	8004dac <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004d7a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d7e:	617b      	str	r3, [r7, #20]
  return(result);
 8004d80:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d84:	2301      	movs	r3, #1
 8004d86:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	f383 8810 	msr	PRIMASK, r3
}
 8004d8e:	46c0      	nop			@ (mov r8, r8)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4928      	ldr	r1, [pc, #160]	@ (8004e3c <UART_RxISR_16BIT+0x1b4>)
 8004d9c:	400a      	ands	r2, r1
 8004d9e:	601a      	str	r2, [r3, #0]
 8004da0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004da2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	f383 8810 	msr	PRIMASK, r3
}
 8004daa:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d12f      	bne.n	8004e14 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004dba:	f3ef 8310 	mrs	r3, PRIMASK
 8004dbe:	60bb      	str	r3, [r7, #8]
  return(result);
 8004dc0:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dc2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f383 8810 	msr	PRIMASK, r3
}
 8004dce:	46c0      	nop			@ (mov r8, r8)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2110      	movs	r1, #16
 8004ddc:	438a      	bics	r2, r1
 8004dde:	601a      	str	r2, [r3, #0]
 8004de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004de2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	f383 8810 	msr	PRIMASK, r3
}
 8004dea:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	69db      	ldr	r3, [r3, #28]
 8004df2:	2210      	movs	r2, #16
 8004df4:	4013      	ands	r3, r2
 8004df6:	2b10      	cmp	r3, #16
 8004df8:	d103      	bne.n	8004e02 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2210      	movs	r2, #16
 8004e00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	225c      	movs	r2, #92	@ 0x5c
 8004e06:	5a9a      	ldrh	r2, [r3, r2]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	0011      	movs	r1, r2
 8004e0c:	0018      	movs	r0, r3
 8004e0e:	f7fe ff95 	bl	8003d3c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004e12:	e00c      	b.n	8004e2e <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	0018      	movs	r0, r3
 8004e18:	f7fc f8f0 	bl	8000ffc <HAL_UART_RxCpltCallback>
}
 8004e1c:	e007      	b.n	8004e2e <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	699a      	ldr	r2, [r3, #24]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2108      	movs	r1, #8
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	619a      	str	r2, [r3, #24]
}
 8004e2e:	46c0      	nop			@ (mov r8, r8)
 8004e30:	46bd      	mov	sp, r7
 8004e32:	b014      	add	sp, #80	@ 0x50
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	46c0      	nop			@ (mov r8, r8)
 8004e38:	fffffedf 	.word	0xfffffedf
 8004e3c:	fbffffff 	.word	0xfbffffff

08004e40 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b0a0      	sub	sp, #128	@ 0x80
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004e48:	237a      	movs	r3, #122	@ 0x7a
 8004e4a:	18fb      	adds	r3, r7, r3
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	2160      	movs	r1, #96	@ 0x60
 8004e50:	5a52      	ldrh	r2, [r2, r1]
 8004e52:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	69db      	ldr	r3, [r3, #28]
 8004e5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	228c      	movs	r2, #140	@ 0x8c
 8004e70:	589b      	ldr	r3, [r3, r2]
 8004e72:	2b22      	cmp	r3, #34	@ 0x22
 8004e74:	d000      	beq.n	8004e78 <UART_RxISR_8BIT_FIFOEN+0x38>
 8004e76:	e166      	b.n	8005146 <UART_RxISR_8BIT_FIFOEN+0x306>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004e78:	236e      	movs	r3, #110	@ 0x6e
 8004e7a:	18fb      	adds	r3, r7, r3
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	2168      	movs	r1, #104	@ 0x68
 8004e80:	5a52      	ldrh	r2, [r2, r1]
 8004e82:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004e84:	e10d      	b.n	80050a2 <UART_RxISR_8BIT_FIFOEN+0x262>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e8c:	216c      	movs	r1, #108	@ 0x6c
 8004e8e:	187b      	adds	r3, r7, r1
 8004e90:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004e92:	187b      	adds	r3, r7, r1
 8004e94:	881b      	ldrh	r3, [r3, #0]
 8004e96:	b2da      	uxtb	r2, r3
 8004e98:	237a      	movs	r3, #122	@ 0x7a
 8004e9a:	18fb      	adds	r3, r7, r3
 8004e9c:	881b      	ldrh	r3, [r3, #0]
 8004e9e:	b2d9      	uxtb	r1, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ea4:	400a      	ands	r2, r1
 8004ea6:	b2d2      	uxtb	r2, r2
 8004ea8:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eae:	1c5a      	adds	r2, r3, #1
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	225e      	movs	r2, #94	@ 0x5e
 8004eb8:	5a9b      	ldrh	r3, [r3, r2]
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	b299      	uxth	r1, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	225e      	movs	r2, #94	@ 0x5e
 8004ec4:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	69db      	ldr	r3, [r3, #28]
 8004ecc:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004ece:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ed0:	2207      	movs	r2, #7
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	d049      	beq.n	8004f6a <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004ed6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ed8:	2201      	movs	r2, #1
 8004eda:	4013      	ands	r3, r2
 8004edc:	d010      	beq.n	8004f00 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8004ede:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004ee0:	2380      	movs	r3, #128	@ 0x80
 8004ee2:	005b      	lsls	r3, r3, #1
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	d00b      	beq.n	8004f00 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2201      	movs	r2, #1
 8004eee:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2290      	movs	r2, #144	@ 0x90
 8004ef4:	589b      	ldr	r3, [r3, r2]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	431a      	orrs	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2190      	movs	r1, #144	@ 0x90
 8004efe:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f00:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004f02:	2202      	movs	r2, #2
 8004f04:	4013      	ands	r3, r2
 8004f06:	d00f      	beq.n	8004f28 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8004f08:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	d00b      	beq.n	8004f28 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2202      	movs	r2, #2
 8004f16:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2290      	movs	r2, #144	@ 0x90
 8004f1c:	589b      	ldr	r3, [r3, r2]
 8004f1e:	2204      	movs	r2, #4
 8004f20:	431a      	orrs	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2190      	movs	r1, #144	@ 0x90
 8004f26:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f28:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004f2a:	2204      	movs	r2, #4
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	d00f      	beq.n	8004f50 <UART_RxISR_8BIT_FIFOEN+0x110>
 8004f30:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f32:	2201      	movs	r2, #1
 8004f34:	4013      	ands	r3, r2
 8004f36:	d00b      	beq.n	8004f50 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2204      	movs	r2, #4
 8004f3e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2290      	movs	r2, #144	@ 0x90
 8004f44:	589b      	ldr	r3, [r3, r2]
 8004f46:	2202      	movs	r2, #2
 8004f48:	431a      	orrs	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2190      	movs	r1, #144	@ 0x90
 8004f4e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2290      	movs	r2, #144	@ 0x90
 8004f54:	589b      	ldr	r3, [r3, r2]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d007      	beq.n	8004f6a <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	0018      	movs	r0, r3
 8004f5e:	f7fb ffb1 	bl	8000ec4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2290      	movs	r2, #144	@ 0x90
 8004f66:	2100      	movs	r1, #0
 8004f68:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	225e      	movs	r2, #94	@ 0x5e
 8004f6e:	5a9b      	ldrh	r3, [r3, r2]
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d000      	beq.n	8004f78 <UART_RxISR_8BIT_FIFOEN+0x138>
 8004f76:	e094      	b.n	80050a2 <UART_RxISR_8BIT_FIFOEN+0x262>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004f78:	f3ef 8310 	mrs	r3, PRIMASK
 8004f7c:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 8004f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f82:	2301      	movs	r3, #1
 8004f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f88:	f383 8810 	msr	PRIMASK, r3
}
 8004f8c:	46c0      	nop			@ (mov r8, r8)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4971      	ldr	r1, [pc, #452]	@ (8005160 <UART_RxISR_8BIT_FIFOEN+0x320>)
 8004f9a:	400a      	ands	r2, r1
 8004f9c:	601a      	str	r2, [r3, #0]
 8004f9e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004fa0:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fa2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fa4:	f383 8810 	msr	PRIMASK, r3
}
 8004fa8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004faa:	f3ef 8310 	mrs	r3, PRIMASK
 8004fae:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8004fb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004fb2:	667b      	str	r3, [r7, #100]	@ 0x64
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fba:	f383 8810 	msr	PRIMASK, r3
}
 8004fbe:	46c0      	nop			@ (mov r8, r8)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	689a      	ldr	r2, [r3, #8]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4966      	ldr	r1, [pc, #408]	@ (8005164 <UART_RxISR_8BIT_FIFOEN+0x324>)
 8004fcc:	400a      	ands	r2, r1
 8004fce:	609a      	str	r2, [r3, #8]
 8004fd0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004fd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fd6:	f383 8810 	msr	PRIMASK, r3
}
 8004fda:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	228c      	movs	r2, #140	@ 0x8c
 8004fe0:	2120      	movs	r1, #32
 8004fe2:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	685a      	ldr	r2, [r3, #4]
 8004ff6:	2380      	movs	r3, #128	@ 0x80
 8004ff8:	041b      	lsls	r3, r3, #16
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	d018      	beq.n	8005030 <UART_RxISR_8BIT_FIFOEN+0x1f0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004ffe:	f3ef 8310 	mrs	r3, PRIMASK
 8005002:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8005004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005006:	663b      	str	r3, [r7, #96]	@ 0x60
 8005008:	2301      	movs	r3, #1
 800500a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800500c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800500e:	f383 8810 	msr	PRIMASK, r3
}
 8005012:	46c0      	nop			@ (mov r8, r8)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4952      	ldr	r1, [pc, #328]	@ (8005168 <UART_RxISR_8BIT_FIFOEN+0x328>)
 8005020:	400a      	ands	r2, r1
 8005022:	601a      	str	r2, [r3, #0]
 8005024:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005026:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005028:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800502a:	f383 8810 	msr	PRIMASK, r3
}
 800502e:	46c0      	nop			@ (mov r8, r8)
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005034:	2b01      	cmp	r3, #1
 8005036:	d12f      	bne.n	8005098 <UART_RxISR_8BIT_FIFOEN+0x258>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800503e:	f3ef 8310 	mrs	r3, PRIMASK
 8005042:	623b      	str	r3, [r7, #32]
  return(result);
 8005044:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005046:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005048:	2301      	movs	r3, #1
 800504a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800504c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504e:	f383 8810 	msr	PRIMASK, r3
}
 8005052:	46c0      	nop			@ (mov r8, r8)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2110      	movs	r1, #16
 8005060:	438a      	bics	r2, r1
 8005062:	601a      	str	r2, [r3, #0]
 8005064:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005066:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800506a:	f383 8810 	msr	PRIMASK, r3
}
 800506e:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	69db      	ldr	r3, [r3, #28]
 8005076:	2210      	movs	r2, #16
 8005078:	4013      	ands	r3, r2
 800507a:	2b10      	cmp	r3, #16
 800507c:	d103      	bne.n	8005086 <UART_RxISR_8BIT_FIFOEN+0x246>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2210      	movs	r2, #16
 8005084:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	225c      	movs	r2, #92	@ 0x5c
 800508a:	5a9a      	ldrh	r2, [r3, r2]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	0011      	movs	r1, r2
 8005090:	0018      	movs	r0, r3
 8005092:	f7fe fe53 	bl	8003d3c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8005096:	e00e      	b.n	80050b6 <UART_RxISR_8BIT_FIFOEN+0x276>
          HAL_UART_RxCpltCallback(huart);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	0018      	movs	r0, r3
 800509c:	f7fb ffae 	bl	8000ffc <HAL_UART_RxCpltCallback>
        break;
 80050a0:	e009      	b.n	80050b6 <UART_RxISR_8BIT_FIFOEN+0x276>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80050a2:	236e      	movs	r3, #110	@ 0x6e
 80050a4:	18fb      	adds	r3, r7, r3
 80050a6:	881b      	ldrh	r3, [r3, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d004      	beq.n	80050b6 <UART_RxISR_8BIT_FIFOEN+0x276>
 80050ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80050ae:	2220      	movs	r2, #32
 80050b0:	4013      	ands	r3, r2
 80050b2:	d000      	beq.n	80050b6 <UART_RxISR_8BIT_FIFOEN+0x276>
 80050b4:	e6e7      	b.n	8004e86 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80050b6:	205a      	movs	r0, #90	@ 0x5a
 80050b8:	183b      	adds	r3, r7, r0
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	215e      	movs	r1, #94	@ 0x5e
 80050be:	5a52      	ldrh	r2, [r2, r1]
 80050c0:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80050c2:	0001      	movs	r1, r0
 80050c4:	187b      	adds	r3, r7, r1
 80050c6:	881b      	ldrh	r3, [r3, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d044      	beq.n	8005156 <UART_RxISR_8BIT_FIFOEN+0x316>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2268      	movs	r2, #104	@ 0x68
 80050d0:	5a9b      	ldrh	r3, [r3, r2]
 80050d2:	187a      	adds	r2, r7, r1
 80050d4:	8812      	ldrh	r2, [r2, #0]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d23d      	bcs.n	8005156 <UART_RxISR_8BIT_FIFOEN+0x316>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80050da:	f3ef 8310 	mrs	r3, PRIMASK
 80050de:	60bb      	str	r3, [r7, #8]
  return(result);
 80050e0:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80050e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80050e4:	2301      	movs	r3, #1
 80050e6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f383 8810 	msr	PRIMASK, r3
}
 80050ee:	46c0      	nop			@ (mov r8, r8)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	689a      	ldr	r2, [r3, #8]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	491c      	ldr	r1, [pc, #112]	@ (800516c <UART_RxISR_8BIT_FIFOEN+0x32c>)
 80050fc:	400a      	ands	r2, r1
 80050fe:	609a      	str	r2, [r3, #8]
 8005100:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005102:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	f383 8810 	msr	PRIMASK, r3
}
 800510a:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a18      	ldr	r2, [pc, #96]	@ (8005170 <UART_RxISR_8BIT_FIFOEN+0x330>)
 8005110:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005112:	f3ef 8310 	mrs	r3, PRIMASK
 8005116:	617b      	str	r3, [r7, #20]
  return(result);
 8005118:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800511a:	653b      	str	r3, [r7, #80]	@ 0x50
 800511c:	2301      	movs	r3, #1
 800511e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	f383 8810 	msr	PRIMASK, r3
}
 8005126:	46c0      	nop			@ (mov r8, r8)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2120      	movs	r1, #32
 8005134:	430a      	orrs	r2, r1
 8005136:	601a      	str	r2, [r3, #0]
 8005138:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800513a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	f383 8810 	msr	PRIMASK, r3
}
 8005142:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005144:	e007      	b.n	8005156 <UART_RxISR_8BIT_FIFOEN+0x316>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	699a      	ldr	r2, [r3, #24]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2108      	movs	r1, #8
 8005152:	430a      	orrs	r2, r1
 8005154:	619a      	str	r2, [r3, #24]
}
 8005156:	46c0      	nop			@ (mov r8, r8)
 8005158:	46bd      	mov	sp, r7
 800515a:	b020      	add	sp, #128	@ 0x80
 800515c:	bd80      	pop	{r7, pc}
 800515e:	46c0      	nop			@ (mov r8, r8)
 8005160:	fffffeff 	.word	0xfffffeff
 8005164:	effffffe 	.word	0xeffffffe
 8005168:	fbffffff 	.word	0xfbffffff
 800516c:	efffffff 	.word	0xefffffff
 8005170:	08004ad1 	.word	0x08004ad1

08005174 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b0a2      	sub	sp, #136	@ 0x88
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800517c:	2382      	movs	r3, #130	@ 0x82
 800517e:	18fb      	adds	r3, r7, r3
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	2160      	movs	r1, #96	@ 0x60
 8005184:	5a52      	ldrh	r2, [r2, r1]
 8005186:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	69db      	ldr	r3, [r3, #28]
 800518e:	2284      	movs	r2, #132	@ 0x84
 8005190:	18ba      	adds	r2, r7, r2
 8005192:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	228c      	movs	r2, #140	@ 0x8c
 80051a8:	589b      	ldr	r3, [r3, r2]
 80051aa:	2b22      	cmp	r3, #34	@ 0x22
 80051ac:	d000      	beq.n	80051b0 <UART_RxISR_16BIT_FIFOEN+0x3c>
 80051ae:	e170      	b.n	8005492 <UART_RxISR_16BIT_FIFOEN+0x31e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80051b0:	2376      	movs	r3, #118	@ 0x76
 80051b2:	18fb      	adds	r3, r7, r3
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	2168      	movs	r1, #104	@ 0x68
 80051b8:	5a52      	ldrh	r2, [r2, r1]
 80051ba:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80051bc:	e115      	b.n	80053ea <UART_RxISR_16BIT_FIFOEN+0x276>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80051c4:	2174      	movs	r1, #116	@ 0x74
 80051c6:	187b      	adds	r3, r7, r1
 80051c8:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ce:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 80051d0:	187b      	adds	r3, r7, r1
 80051d2:	2282      	movs	r2, #130	@ 0x82
 80051d4:	18ba      	adds	r2, r7, r2
 80051d6:	881b      	ldrh	r3, [r3, #0]
 80051d8:	8812      	ldrh	r2, [r2, #0]
 80051da:	4013      	ands	r3, r2
 80051dc:	b29a      	uxth	r2, r3
 80051de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80051e0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051e6:	1c9a      	adds	r2, r3, #2
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	225e      	movs	r2, #94	@ 0x5e
 80051f0:	5a9b      	ldrh	r3, [r3, r2]
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	3b01      	subs	r3, #1
 80051f6:	b299      	uxth	r1, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	225e      	movs	r2, #94	@ 0x5e
 80051fc:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	69db      	ldr	r3, [r3, #28]
 8005204:	2184      	movs	r1, #132	@ 0x84
 8005206:	187a      	adds	r2, r7, r1
 8005208:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800520a:	187b      	adds	r3, r7, r1
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2207      	movs	r2, #7
 8005210:	4013      	ands	r3, r2
 8005212:	d04e      	beq.n	80052b2 <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005214:	187b      	adds	r3, r7, r1
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2201      	movs	r2, #1
 800521a:	4013      	ands	r3, r2
 800521c:	d010      	beq.n	8005240 <UART_RxISR_16BIT_FIFOEN+0xcc>
 800521e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005220:	2380      	movs	r3, #128	@ 0x80
 8005222:	005b      	lsls	r3, r3, #1
 8005224:	4013      	ands	r3, r2
 8005226:	d00b      	beq.n	8005240 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2201      	movs	r2, #1
 800522e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2290      	movs	r2, #144	@ 0x90
 8005234:	589b      	ldr	r3, [r3, r2]
 8005236:	2201      	movs	r2, #1
 8005238:	431a      	orrs	r2, r3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2190      	movs	r1, #144	@ 0x90
 800523e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005240:	2384      	movs	r3, #132	@ 0x84
 8005242:	18fb      	adds	r3, r7, r3
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2202      	movs	r2, #2
 8005248:	4013      	ands	r3, r2
 800524a:	d00f      	beq.n	800526c <UART_RxISR_16BIT_FIFOEN+0xf8>
 800524c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800524e:	2201      	movs	r2, #1
 8005250:	4013      	ands	r3, r2
 8005252:	d00b      	beq.n	800526c <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2202      	movs	r2, #2
 800525a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2290      	movs	r2, #144	@ 0x90
 8005260:	589b      	ldr	r3, [r3, r2]
 8005262:	2204      	movs	r2, #4
 8005264:	431a      	orrs	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2190      	movs	r1, #144	@ 0x90
 800526a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800526c:	2384      	movs	r3, #132	@ 0x84
 800526e:	18fb      	adds	r3, r7, r3
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2204      	movs	r2, #4
 8005274:	4013      	ands	r3, r2
 8005276:	d00f      	beq.n	8005298 <UART_RxISR_16BIT_FIFOEN+0x124>
 8005278:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800527a:	2201      	movs	r2, #1
 800527c:	4013      	ands	r3, r2
 800527e:	d00b      	beq.n	8005298 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2204      	movs	r2, #4
 8005286:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2290      	movs	r2, #144	@ 0x90
 800528c:	589b      	ldr	r3, [r3, r2]
 800528e:	2202      	movs	r2, #2
 8005290:	431a      	orrs	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2190      	movs	r1, #144	@ 0x90
 8005296:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2290      	movs	r2, #144	@ 0x90
 800529c:	589b      	ldr	r3, [r3, r2]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d007      	beq.n	80052b2 <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	0018      	movs	r0, r3
 80052a6:	f7fb fe0d 	bl	8000ec4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2290      	movs	r2, #144	@ 0x90
 80052ae:	2100      	movs	r1, #0
 80052b0:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	225e      	movs	r2, #94	@ 0x5e
 80052b6:	5a9b      	ldrh	r3, [r3, r2]
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d000      	beq.n	80052c0 <UART_RxISR_16BIT_FIFOEN+0x14c>
 80052be:	e094      	b.n	80053ea <UART_RxISR_16BIT_FIFOEN+0x276>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80052c0:	f3ef 8310 	mrs	r3, PRIMASK
 80052c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80052c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80052ca:	2301      	movs	r3, #1
 80052cc:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052d0:	f383 8810 	msr	PRIMASK, r3
}
 80052d4:	46c0      	nop			@ (mov r8, r8)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4972      	ldr	r1, [pc, #456]	@ (80054ac <UART_RxISR_16BIT_FIFOEN+0x338>)
 80052e2:	400a      	ands	r2, r1
 80052e4:	601a      	str	r2, [r3, #0]
 80052e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052e8:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052ec:	f383 8810 	msr	PRIMASK, r3
}
 80052f0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80052f2:	f3ef 8310 	mrs	r3, PRIMASK
 80052f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80052f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80052fa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052fc:	2301      	movs	r3, #1
 80052fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005300:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005302:	f383 8810 	msr	PRIMASK, r3
}
 8005306:	46c0      	nop			@ (mov r8, r8)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	689a      	ldr	r2, [r3, #8]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4967      	ldr	r1, [pc, #412]	@ (80054b0 <UART_RxISR_16BIT_FIFOEN+0x33c>)
 8005314:	400a      	ands	r2, r1
 8005316:	609a      	str	r2, [r3, #8]
 8005318:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800531a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800531c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800531e:	f383 8810 	msr	PRIMASK, r3
}
 8005322:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	228c      	movs	r2, #140	@ 0x8c
 8005328:	2120      	movs	r1, #32
 800532a:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	685a      	ldr	r2, [r3, #4]
 800533e:	2380      	movs	r3, #128	@ 0x80
 8005340:	041b      	lsls	r3, r3, #16
 8005342:	4013      	ands	r3, r2
 8005344:	d018      	beq.n	8005378 <UART_RxISR_16BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005346:	f3ef 8310 	mrs	r3, PRIMASK
 800534a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800534c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800534e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005350:	2301      	movs	r3, #1
 8005352:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005356:	f383 8810 	msr	PRIMASK, r3
}
 800535a:	46c0      	nop			@ (mov r8, r8)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4953      	ldr	r1, [pc, #332]	@ (80054b4 <UART_RxISR_16BIT_FIFOEN+0x340>)
 8005368:	400a      	ands	r2, r1
 800536a:	601a      	str	r2, [r3, #0]
 800536c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800536e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005372:	f383 8810 	msr	PRIMASK, r3
}
 8005376:	46c0      	nop			@ (mov r8, r8)
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800537c:	2b01      	cmp	r3, #1
 800537e:	d12f      	bne.n	80053e0 <UART_RxISR_16BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005386:	f3ef 8310 	mrs	r3, PRIMASK
 800538a:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800538c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800538e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005390:	2301      	movs	r3, #1
 8005392:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005396:	f383 8810 	msr	PRIMASK, r3
}
 800539a:	46c0      	nop			@ (mov r8, r8)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2110      	movs	r1, #16
 80053a8:	438a      	bics	r2, r1
 80053aa:	601a      	str	r2, [r3, #0]
 80053ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80053ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053b2:	f383 8810 	msr	PRIMASK, r3
}
 80053b6:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	69db      	ldr	r3, [r3, #28]
 80053be:	2210      	movs	r2, #16
 80053c0:	4013      	ands	r3, r2
 80053c2:	2b10      	cmp	r3, #16
 80053c4:	d103      	bne.n	80053ce <UART_RxISR_16BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2210      	movs	r2, #16
 80053cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	225c      	movs	r2, #92	@ 0x5c
 80053d2:	5a9a      	ldrh	r2, [r3, r2]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	0011      	movs	r1, r2
 80053d8:	0018      	movs	r0, r3
 80053da:	f7fe fcaf 	bl	8003d3c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80053de:	e010      	b.n	8005402 <UART_RxISR_16BIT_FIFOEN+0x28e>
          HAL_UART_RxCpltCallback(huart);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	0018      	movs	r0, r3
 80053e4:	f7fb fe0a 	bl	8000ffc <HAL_UART_RxCpltCallback>
        break;
 80053e8:	e00b      	b.n	8005402 <UART_RxISR_16BIT_FIFOEN+0x28e>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80053ea:	2376      	movs	r3, #118	@ 0x76
 80053ec:	18fb      	adds	r3, r7, r3
 80053ee:	881b      	ldrh	r3, [r3, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d006      	beq.n	8005402 <UART_RxISR_16BIT_FIFOEN+0x28e>
 80053f4:	2384      	movs	r3, #132	@ 0x84
 80053f6:	18fb      	adds	r3, r7, r3
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2220      	movs	r2, #32
 80053fc:	4013      	ands	r3, r2
 80053fe:	d000      	beq.n	8005402 <UART_RxISR_16BIT_FIFOEN+0x28e>
 8005400:	e6dd      	b.n	80051be <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005402:	205e      	movs	r0, #94	@ 0x5e
 8005404:	183b      	adds	r3, r7, r0
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	215e      	movs	r1, #94	@ 0x5e
 800540a:	5a52      	ldrh	r2, [r2, r1]
 800540c:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800540e:	0001      	movs	r1, r0
 8005410:	187b      	adds	r3, r7, r1
 8005412:	881b      	ldrh	r3, [r3, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d044      	beq.n	80054a2 <UART_RxISR_16BIT_FIFOEN+0x32e>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2268      	movs	r2, #104	@ 0x68
 800541c:	5a9b      	ldrh	r3, [r3, r2]
 800541e:	187a      	adds	r2, r7, r1
 8005420:	8812      	ldrh	r2, [r2, #0]
 8005422:	429a      	cmp	r2, r3
 8005424:	d23d      	bcs.n	80054a2 <UART_RxISR_16BIT_FIFOEN+0x32e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005426:	f3ef 8310 	mrs	r3, PRIMASK
 800542a:	60fb      	str	r3, [r7, #12]
  return(result);
 800542c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800542e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005430:	2301      	movs	r3, #1
 8005432:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	f383 8810 	msr	PRIMASK, r3
}
 800543a:	46c0      	nop			@ (mov r8, r8)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	689a      	ldr	r2, [r3, #8]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	491c      	ldr	r1, [pc, #112]	@ (80054b8 <UART_RxISR_16BIT_FIFOEN+0x344>)
 8005448:	400a      	ands	r2, r1
 800544a:	609a      	str	r2, [r3, #8]
 800544c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800544e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	f383 8810 	msr	PRIMASK, r3
}
 8005456:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a18      	ldr	r2, [pc, #96]	@ (80054bc <UART_RxISR_16BIT_FIFOEN+0x348>)
 800545c:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800545e:	f3ef 8310 	mrs	r3, PRIMASK
 8005462:	61bb      	str	r3, [r7, #24]
  return(result);
 8005464:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005466:	657b      	str	r3, [r7, #84]	@ 0x54
 8005468:	2301      	movs	r3, #1
 800546a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	f383 8810 	msr	PRIMASK, r3
}
 8005472:	46c0      	nop			@ (mov r8, r8)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2120      	movs	r1, #32
 8005480:	430a      	orrs	r2, r1
 8005482:	601a      	str	r2, [r3, #0]
 8005484:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005486:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005488:	6a3b      	ldr	r3, [r7, #32]
 800548a:	f383 8810 	msr	PRIMASK, r3
}
 800548e:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005490:	e007      	b.n	80054a2 <UART_RxISR_16BIT_FIFOEN+0x32e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	699a      	ldr	r2, [r3, #24]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2108      	movs	r1, #8
 800549e:	430a      	orrs	r2, r1
 80054a0:	619a      	str	r2, [r3, #24]
}
 80054a2:	46c0      	nop			@ (mov r8, r8)
 80054a4:	46bd      	mov	sp, r7
 80054a6:	b022      	add	sp, #136	@ 0x88
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	46c0      	nop			@ (mov r8, r8)
 80054ac:	fffffeff 	.word	0xfffffeff
 80054b0:	effffffe 	.word	0xeffffffe
 80054b4:	fbffffff 	.word	0xfbffffff
 80054b8:	efffffff 	.word	0xefffffff
 80054bc:	08004c89 	.word	0x08004c89

080054c0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80054c8:	46c0      	nop			@ (mov r8, r8)
 80054ca:	46bd      	mov	sp, r7
 80054cc:	b002      	add	sp, #8
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80054d8:	46c0      	nop			@ (mov r8, r8)
 80054da:	46bd      	mov	sp, r7
 80054dc:	b002      	add	sp, #8
 80054de:	bd80      	pop	{r7, pc}

080054e0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80054e8:	46c0      	nop			@ (mov r8, r8)
 80054ea:	46bd      	mov	sp, r7
 80054ec:	b002      	add	sp, #8
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2284      	movs	r2, #132	@ 0x84
 80054fc:	5c9b      	ldrb	r3, [r3, r2]
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d101      	bne.n	8005506 <HAL_UARTEx_DisableFifoMode+0x16>
 8005502:	2302      	movs	r3, #2
 8005504:	e027      	b.n	8005556 <HAL_UARTEx_DisableFifoMode+0x66>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2284      	movs	r2, #132	@ 0x84
 800550a:	2101      	movs	r1, #1
 800550c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2288      	movs	r2, #136	@ 0x88
 8005512:	2124      	movs	r1, #36	@ 0x24
 8005514:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2101      	movs	r1, #1
 800552a:	438a      	bics	r2, r1
 800552c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	4a0b      	ldr	r2, [pc, #44]	@ (8005560 <HAL_UARTEx_DisableFifoMode+0x70>)
 8005532:	4013      	ands	r3, r2
 8005534:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2288      	movs	r2, #136	@ 0x88
 8005548:	2120      	movs	r1, #32
 800554a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2284      	movs	r2, #132	@ 0x84
 8005550:	2100      	movs	r1, #0
 8005552:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005554:	2300      	movs	r3, #0
}
 8005556:	0018      	movs	r0, r3
 8005558:	46bd      	mov	sp, r7
 800555a:	b004      	add	sp, #16
 800555c:	bd80      	pop	{r7, pc}
 800555e:	46c0      	nop			@ (mov r8, r8)
 8005560:	dfffffff 	.word	0xdfffffff

08005564 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2284      	movs	r2, #132	@ 0x84
 8005572:	5c9b      	ldrb	r3, [r3, r2]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d101      	bne.n	800557c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005578:	2302      	movs	r3, #2
 800557a:	e02e      	b.n	80055da <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2284      	movs	r2, #132	@ 0x84
 8005580:	2101      	movs	r1, #1
 8005582:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2288      	movs	r2, #136	@ 0x88
 8005588:	2124      	movs	r1, #36	@ 0x24
 800558a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2101      	movs	r1, #1
 80055a0:	438a      	bics	r2, r1
 80055a2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	00db      	lsls	r3, r3, #3
 80055ac:	08d9      	lsrs	r1, r3, #3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	683a      	ldr	r2, [r7, #0]
 80055b4:	430a      	orrs	r2, r1
 80055b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	0018      	movs	r0, r3
 80055bc:	f000 f854 	bl	8005668 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2288      	movs	r2, #136	@ 0x88
 80055cc:	2120      	movs	r1, #32
 80055ce:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2284      	movs	r2, #132	@ 0x84
 80055d4:	2100      	movs	r1, #0
 80055d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	0018      	movs	r0, r3
 80055dc:	46bd      	mov	sp, r7
 80055de:	b004      	add	sp, #16
 80055e0:	bd80      	pop	{r7, pc}
	...

080055e4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2284      	movs	r2, #132	@ 0x84
 80055f2:	5c9b      	ldrb	r3, [r3, r2]
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d101      	bne.n	80055fc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80055f8:	2302      	movs	r3, #2
 80055fa:	e02f      	b.n	800565c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2284      	movs	r2, #132	@ 0x84
 8005600:	2101      	movs	r1, #1
 8005602:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2288      	movs	r2, #136	@ 0x88
 8005608:	2124      	movs	r1, #36	@ 0x24
 800560a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2101      	movs	r1, #1
 8005620:	438a      	bics	r2, r1
 8005622:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	4a0e      	ldr	r2, [pc, #56]	@ (8005664 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800562c:	4013      	ands	r3, r2
 800562e:	0019      	movs	r1, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	683a      	ldr	r2, [r7, #0]
 8005636:	430a      	orrs	r2, r1
 8005638:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	0018      	movs	r0, r3
 800563e:	f000 f813 	bl	8005668 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2288      	movs	r2, #136	@ 0x88
 800564e:	2120      	movs	r1, #32
 8005650:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2284      	movs	r2, #132	@ 0x84
 8005656:	2100      	movs	r1, #0
 8005658:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800565a:	2300      	movs	r3, #0
}
 800565c:	0018      	movs	r0, r3
 800565e:	46bd      	mov	sp, r7
 8005660:	b004      	add	sp, #16
 8005662:	bd80      	pop	{r7, pc}
 8005664:	f1ffffff 	.word	0xf1ffffff

08005668 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005674:	2b00      	cmp	r3, #0
 8005676:	d108      	bne.n	800568a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	226a      	movs	r2, #106	@ 0x6a
 800567c:	2101      	movs	r1, #1
 800567e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2268      	movs	r2, #104	@ 0x68
 8005684:	2101      	movs	r1, #1
 8005686:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005688:	e043      	b.n	8005712 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800568a:	260f      	movs	r6, #15
 800568c:	19bb      	adds	r3, r7, r6
 800568e:	2208      	movs	r2, #8
 8005690:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005692:	200e      	movs	r0, #14
 8005694:	183b      	adds	r3, r7, r0
 8005696:	2208      	movs	r2, #8
 8005698:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	0e5b      	lsrs	r3, r3, #25
 80056a2:	b2da      	uxtb	r2, r3
 80056a4:	240d      	movs	r4, #13
 80056a6:	193b      	adds	r3, r7, r4
 80056a8:	2107      	movs	r1, #7
 80056aa:	400a      	ands	r2, r1
 80056ac:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	0f5b      	lsrs	r3, r3, #29
 80056b6:	b2da      	uxtb	r2, r3
 80056b8:	250c      	movs	r5, #12
 80056ba:	197b      	adds	r3, r7, r5
 80056bc:	2107      	movs	r1, #7
 80056be:	400a      	ands	r2, r1
 80056c0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80056c2:	183b      	adds	r3, r7, r0
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	197a      	adds	r2, r7, r5
 80056c8:	7812      	ldrb	r2, [r2, #0]
 80056ca:	4914      	ldr	r1, [pc, #80]	@ (800571c <UARTEx_SetNbDataToProcess+0xb4>)
 80056cc:	5c8a      	ldrb	r2, [r1, r2]
 80056ce:	435a      	muls	r2, r3
 80056d0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80056d2:	197b      	adds	r3, r7, r5
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	4a12      	ldr	r2, [pc, #72]	@ (8005720 <UARTEx_SetNbDataToProcess+0xb8>)
 80056d8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80056da:	0019      	movs	r1, r3
 80056dc:	f7fa fd9e 	bl	800021c <__divsi3>
 80056e0:	0003      	movs	r3, r0
 80056e2:	b299      	uxth	r1, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	226a      	movs	r2, #106	@ 0x6a
 80056e8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056ea:	19bb      	adds	r3, r7, r6
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	193a      	adds	r2, r7, r4
 80056f0:	7812      	ldrb	r2, [r2, #0]
 80056f2:	490a      	ldr	r1, [pc, #40]	@ (800571c <UARTEx_SetNbDataToProcess+0xb4>)
 80056f4:	5c8a      	ldrb	r2, [r1, r2]
 80056f6:	435a      	muls	r2, r3
 80056f8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80056fa:	193b      	adds	r3, r7, r4
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	4a08      	ldr	r2, [pc, #32]	@ (8005720 <UARTEx_SetNbDataToProcess+0xb8>)
 8005700:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005702:	0019      	movs	r1, r3
 8005704:	f7fa fd8a 	bl	800021c <__divsi3>
 8005708:	0003      	movs	r3, r0
 800570a:	b299      	uxth	r1, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2268      	movs	r2, #104	@ 0x68
 8005710:	5299      	strh	r1, [r3, r2]
}
 8005712:	46c0      	nop			@ (mov r8, r8)
 8005714:	46bd      	mov	sp, r7
 8005716:	b005      	add	sp, #20
 8005718:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800571a:	46c0      	nop			@ (mov r8, r8)
 800571c:	08005df8 	.word	0x08005df8
 8005720:	08005e00 	.word	0x08005e00

08005724 <calloc>:
 8005724:	b510      	push	{r4, lr}
 8005726:	4b03      	ldr	r3, [pc, #12]	@ (8005734 <calloc+0x10>)
 8005728:	000a      	movs	r2, r1
 800572a:	0001      	movs	r1, r0
 800572c:	6818      	ldr	r0, [r3, #0]
 800572e:	f000 f803 	bl	8005738 <_calloc_r>
 8005732:	bd10      	pop	{r4, pc}
 8005734:	20000010 	.word	0x20000010

08005738 <_calloc_r>:
 8005738:	b570      	push	{r4, r5, r6, lr}
 800573a:	0c0b      	lsrs	r3, r1, #16
 800573c:	0c15      	lsrs	r5, r2, #16
 800573e:	2b00      	cmp	r3, #0
 8005740:	d11e      	bne.n	8005780 <_calloc_r+0x48>
 8005742:	2d00      	cmp	r5, #0
 8005744:	d10c      	bne.n	8005760 <_calloc_r+0x28>
 8005746:	b289      	uxth	r1, r1
 8005748:	b294      	uxth	r4, r2
 800574a:	434c      	muls	r4, r1
 800574c:	0021      	movs	r1, r4
 800574e:	f000 f857 	bl	8005800 <_malloc_r>
 8005752:	1e05      	subs	r5, r0, #0
 8005754:	d01a      	beq.n	800578c <_calloc_r+0x54>
 8005756:	0022      	movs	r2, r4
 8005758:	2100      	movs	r1, #0
 800575a:	f000 f8e1 	bl	8005920 <memset>
 800575e:	e016      	b.n	800578e <_calloc_r+0x56>
 8005760:	1c2b      	adds	r3, r5, #0
 8005762:	1c0c      	adds	r4, r1, #0
 8005764:	b289      	uxth	r1, r1
 8005766:	b292      	uxth	r2, r2
 8005768:	434a      	muls	r2, r1
 800576a:	b29b      	uxth	r3, r3
 800576c:	b2a1      	uxth	r1, r4
 800576e:	4359      	muls	r1, r3
 8005770:	0c14      	lsrs	r4, r2, #16
 8005772:	190c      	adds	r4, r1, r4
 8005774:	0c23      	lsrs	r3, r4, #16
 8005776:	d107      	bne.n	8005788 <_calloc_r+0x50>
 8005778:	0424      	lsls	r4, r4, #16
 800577a:	b292      	uxth	r2, r2
 800577c:	4314      	orrs	r4, r2
 800577e:	e7e5      	b.n	800574c <_calloc_r+0x14>
 8005780:	2d00      	cmp	r5, #0
 8005782:	d101      	bne.n	8005788 <_calloc_r+0x50>
 8005784:	1c14      	adds	r4, r2, #0
 8005786:	e7ed      	b.n	8005764 <_calloc_r+0x2c>
 8005788:	230c      	movs	r3, #12
 800578a:	6003      	str	r3, [r0, #0]
 800578c:	2500      	movs	r5, #0
 800578e:	0028      	movs	r0, r5
 8005790:	bd70      	pop	{r4, r5, r6, pc}
	...

08005794 <malloc>:
 8005794:	b510      	push	{r4, lr}
 8005796:	4b03      	ldr	r3, [pc, #12]	@ (80057a4 <malloc+0x10>)
 8005798:	0001      	movs	r1, r0
 800579a:	6818      	ldr	r0, [r3, #0]
 800579c:	f000 f830 	bl	8005800 <_malloc_r>
 80057a0:	bd10      	pop	{r4, pc}
 80057a2:	46c0      	nop			@ (mov r8, r8)
 80057a4:	20000010 	.word	0x20000010

080057a8 <free>:
 80057a8:	b510      	push	{r4, lr}
 80057aa:	4b03      	ldr	r3, [pc, #12]	@ (80057b8 <free+0x10>)
 80057ac:	0001      	movs	r1, r0
 80057ae:	6818      	ldr	r0, [r3, #0]
 80057b0:	f000 f906 	bl	80059c0 <_free_r>
 80057b4:	bd10      	pop	{r4, pc}
 80057b6:	46c0      	nop			@ (mov r8, r8)
 80057b8:	20000010 	.word	0x20000010

080057bc <sbrk_aligned>:
 80057bc:	b570      	push	{r4, r5, r6, lr}
 80057be:	4e0f      	ldr	r6, [pc, #60]	@ (80057fc <sbrk_aligned+0x40>)
 80057c0:	000d      	movs	r5, r1
 80057c2:	6831      	ldr	r1, [r6, #0]
 80057c4:	0004      	movs	r4, r0
 80057c6:	2900      	cmp	r1, #0
 80057c8:	d102      	bne.n	80057d0 <sbrk_aligned+0x14>
 80057ca:	f000 f8b1 	bl	8005930 <_sbrk_r>
 80057ce:	6030      	str	r0, [r6, #0]
 80057d0:	0029      	movs	r1, r5
 80057d2:	0020      	movs	r0, r4
 80057d4:	f000 f8ac 	bl	8005930 <_sbrk_r>
 80057d8:	1c43      	adds	r3, r0, #1
 80057da:	d103      	bne.n	80057e4 <sbrk_aligned+0x28>
 80057dc:	2501      	movs	r5, #1
 80057de:	426d      	negs	r5, r5
 80057e0:	0028      	movs	r0, r5
 80057e2:	bd70      	pop	{r4, r5, r6, pc}
 80057e4:	2303      	movs	r3, #3
 80057e6:	1cc5      	adds	r5, r0, #3
 80057e8:	439d      	bics	r5, r3
 80057ea:	42a8      	cmp	r0, r5
 80057ec:	d0f8      	beq.n	80057e0 <sbrk_aligned+0x24>
 80057ee:	1a29      	subs	r1, r5, r0
 80057f0:	0020      	movs	r0, r4
 80057f2:	f000 f89d 	bl	8005930 <_sbrk_r>
 80057f6:	3001      	adds	r0, #1
 80057f8:	d1f2      	bne.n	80057e0 <sbrk_aligned+0x24>
 80057fa:	e7ef      	b.n	80057dc <sbrk_aligned+0x20>
 80057fc:	200001e0 	.word	0x200001e0

08005800 <_malloc_r>:
 8005800:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005802:	2203      	movs	r2, #3
 8005804:	1ccb      	adds	r3, r1, #3
 8005806:	4393      	bics	r3, r2
 8005808:	3308      	adds	r3, #8
 800580a:	0005      	movs	r5, r0
 800580c:	001f      	movs	r7, r3
 800580e:	2b0c      	cmp	r3, #12
 8005810:	d234      	bcs.n	800587c <_malloc_r+0x7c>
 8005812:	270c      	movs	r7, #12
 8005814:	42b9      	cmp	r1, r7
 8005816:	d833      	bhi.n	8005880 <_malloc_r+0x80>
 8005818:	0028      	movs	r0, r5
 800581a:	f000 f871 	bl	8005900 <__malloc_lock>
 800581e:	4e37      	ldr	r6, [pc, #220]	@ (80058fc <_malloc_r+0xfc>)
 8005820:	6833      	ldr	r3, [r6, #0]
 8005822:	001c      	movs	r4, r3
 8005824:	2c00      	cmp	r4, #0
 8005826:	d12f      	bne.n	8005888 <_malloc_r+0x88>
 8005828:	0039      	movs	r1, r7
 800582a:	0028      	movs	r0, r5
 800582c:	f7ff ffc6 	bl	80057bc <sbrk_aligned>
 8005830:	0004      	movs	r4, r0
 8005832:	1c43      	adds	r3, r0, #1
 8005834:	d15f      	bne.n	80058f6 <_malloc_r+0xf6>
 8005836:	6834      	ldr	r4, [r6, #0]
 8005838:	9400      	str	r4, [sp, #0]
 800583a:	9b00      	ldr	r3, [sp, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d14a      	bne.n	80058d6 <_malloc_r+0xd6>
 8005840:	2c00      	cmp	r4, #0
 8005842:	d052      	beq.n	80058ea <_malloc_r+0xea>
 8005844:	6823      	ldr	r3, [r4, #0]
 8005846:	0028      	movs	r0, r5
 8005848:	18e3      	adds	r3, r4, r3
 800584a:	9900      	ldr	r1, [sp, #0]
 800584c:	9301      	str	r3, [sp, #4]
 800584e:	f000 f86f 	bl	8005930 <_sbrk_r>
 8005852:	9b01      	ldr	r3, [sp, #4]
 8005854:	4283      	cmp	r3, r0
 8005856:	d148      	bne.n	80058ea <_malloc_r+0xea>
 8005858:	6823      	ldr	r3, [r4, #0]
 800585a:	0028      	movs	r0, r5
 800585c:	1aff      	subs	r7, r7, r3
 800585e:	0039      	movs	r1, r7
 8005860:	f7ff ffac 	bl	80057bc <sbrk_aligned>
 8005864:	3001      	adds	r0, #1
 8005866:	d040      	beq.n	80058ea <_malloc_r+0xea>
 8005868:	6823      	ldr	r3, [r4, #0]
 800586a:	19db      	adds	r3, r3, r7
 800586c:	6023      	str	r3, [r4, #0]
 800586e:	6833      	ldr	r3, [r6, #0]
 8005870:	685a      	ldr	r2, [r3, #4]
 8005872:	2a00      	cmp	r2, #0
 8005874:	d133      	bne.n	80058de <_malloc_r+0xde>
 8005876:	9b00      	ldr	r3, [sp, #0]
 8005878:	6033      	str	r3, [r6, #0]
 800587a:	e019      	b.n	80058b0 <_malloc_r+0xb0>
 800587c:	2b00      	cmp	r3, #0
 800587e:	dac9      	bge.n	8005814 <_malloc_r+0x14>
 8005880:	230c      	movs	r3, #12
 8005882:	602b      	str	r3, [r5, #0]
 8005884:	2000      	movs	r0, #0
 8005886:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005888:	6821      	ldr	r1, [r4, #0]
 800588a:	1bc9      	subs	r1, r1, r7
 800588c:	d420      	bmi.n	80058d0 <_malloc_r+0xd0>
 800588e:	290b      	cmp	r1, #11
 8005890:	d90a      	bls.n	80058a8 <_malloc_r+0xa8>
 8005892:	19e2      	adds	r2, r4, r7
 8005894:	6027      	str	r7, [r4, #0]
 8005896:	42a3      	cmp	r3, r4
 8005898:	d104      	bne.n	80058a4 <_malloc_r+0xa4>
 800589a:	6032      	str	r2, [r6, #0]
 800589c:	6863      	ldr	r3, [r4, #4]
 800589e:	6011      	str	r1, [r2, #0]
 80058a0:	6053      	str	r3, [r2, #4]
 80058a2:	e005      	b.n	80058b0 <_malloc_r+0xb0>
 80058a4:	605a      	str	r2, [r3, #4]
 80058a6:	e7f9      	b.n	800589c <_malloc_r+0x9c>
 80058a8:	6862      	ldr	r2, [r4, #4]
 80058aa:	42a3      	cmp	r3, r4
 80058ac:	d10e      	bne.n	80058cc <_malloc_r+0xcc>
 80058ae:	6032      	str	r2, [r6, #0]
 80058b0:	0028      	movs	r0, r5
 80058b2:	f000 f82d 	bl	8005910 <__malloc_unlock>
 80058b6:	0020      	movs	r0, r4
 80058b8:	2207      	movs	r2, #7
 80058ba:	300b      	adds	r0, #11
 80058bc:	1d23      	adds	r3, r4, #4
 80058be:	4390      	bics	r0, r2
 80058c0:	1ac2      	subs	r2, r0, r3
 80058c2:	4298      	cmp	r0, r3
 80058c4:	d0df      	beq.n	8005886 <_malloc_r+0x86>
 80058c6:	1a1b      	subs	r3, r3, r0
 80058c8:	50a3      	str	r3, [r4, r2]
 80058ca:	e7dc      	b.n	8005886 <_malloc_r+0x86>
 80058cc:	605a      	str	r2, [r3, #4]
 80058ce:	e7ef      	b.n	80058b0 <_malloc_r+0xb0>
 80058d0:	0023      	movs	r3, r4
 80058d2:	6864      	ldr	r4, [r4, #4]
 80058d4:	e7a6      	b.n	8005824 <_malloc_r+0x24>
 80058d6:	9c00      	ldr	r4, [sp, #0]
 80058d8:	6863      	ldr	r3, [r4, #4]
 80058da:	9300      	str	r3, [sp, #0]
 80058dc:	e7ad      	b.n	800583a <_malloc_r+0x3a>
 80058de:	001a      	movs	r2, r3
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	42a3      	cmp	r3, r4
 80058e4:	d1fb      	bne.n	80058de <_malloc_r+0xde>
 80058e6:	2300      	movs	r3, #0
 80058e8:	e7da      	b.n	80058a0 <_malloc_r+0xa0>
 80058ea:	230c      	movs	r3, #12
 80058ec:	0028      	movs	r0, r5
 80058ee:	602b      	str	r3, [r5, #0]
 80058f0:	f000 f80e 	bl	8005910 <__malloc_unlock>
 80058f4:	e7c6      	b.n	8005884 <_malloc_r+0x84>
 80058f6:	6007      	str	r7, [r0, #0]
 80058f8:	e7da      	b.n	80058b0 <_malloc_r+0xb0>
 80058fa:	46c0      	nop			@ (mov r8, r8)
 80058fc:	200001e4 	.word	0x200001e4

08005900 <__malloc_lock>:
 8005900:	b510      	push	{r4, lr}
 8005902:	4802      	ldr	r0, [pc, #8]	@ (800590c <__malloc_lock+0xc>)
 8005904:	f000 f850 	bl	80059a8 <__retarget_lock_acquire_recursive>
 8005908:	bd10      	pop	{r4, pc}
 800590a:	46c0      	nop			@ (mov r8, r8)
 800590c:	20000324 	.word	0x20000324

08005910 <__malloc_unlock>:
 8005910:	b510      	push	{r4, lr}
 8005912:	4802      	ldr	r0, [pc, #8]	@ (800591c <__malloc_unlock+0xc>)
 8005914:	f000 f849 	bl	80059aa <__retarget_lock_release_recursive>
 8005918:	bd10      	pop	{r4, pc}
 800591a:	46c0      	nop			@ (mov r8, r8)
 800591c:	20000324 	.word	0x20000324

08005920 <memset>:
 8005920:	0003      	movs	r3, r0
 8005922:	1882      	adds	r2, r0, r2
 8005924:	4293      	cmp	r3, r2
 8005926:	d100      	bne.n	800592a <memset+0xa>
 8005928:	4770      	bx	lr
 800592a:	7019      	strb	r1, [r3, #0]
 800592c:	3301      	adds	r3, #1
 800592e:	e7f9      	b.n	8005924 <memset+0x4>

08005930 <_sbrk_r>:
 8005930:	2300      	movs	r3, #0
 8005932:	b570      	push	{r4, r5, r6, lr}
 8005934:	4d06      	ldr	r5, [pc, #24]	@ (8005950 <_sbrk_r+0x20>)
 8005936:	0004      	movs	r4, r0
 8005938:	0008      	movs	r0, r1
 800593a:	602b      	str	r3, [r5, #0]
 800593c:	f7fb fde6 	bl	800150c <_sbrk>
 8005940:	1c43      	adds	r3, r0, #1
 8005942:	d103      	bne.n	800594c <_sbrk_r+0x1c>
 8005944:	682b      	ldr	r3, [r5, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d000      	beq.n	800594c <_sbrk_r+0x1c>
 800594a:	6023      	str	r3, [r4, #0]
 800594c:	bd70      	pop	{r4, r5, r6, pc}
 800594e:	46c0      	nop			@ (mov r8, r8)
 8005950:	20000320 	.word	0x20000320

08005954 <__errno>:
 8005954:	4b01      	ldr	r3, [pc, #4]	@ (800595c <__errno+0x8>)
 8005956:	6818      	ldr	r0, [r3, #0]
 8005958:	4770      	bx	lr
 800595a:	46c0      	nop			@ (mov r8, r8)
 800595c:	20000010 	.word	0x20000010

08005960 <__libc_init_array>:
 8005960:	b570      	push	{r4, r5, r6, lr}
 8005962:	2600      	movs	r6, #0
 8005964:	4c0c      	ldr	r4, [pc, #48]	@ (8005998 <__libc_init_array+0x38>)
 8005966:	4d0d      	ldr	r5, [pc, #52]	@ (800599c <__libc_init_array+0x3c>)
 8005968:	1b64      	subs	r4, r4, r5
 800596a:	10a4      	asrs	r4, r4, #2
 800596c:	42a6      	cmp	r6, r4
 800596e:	d109      	bne.n	8005984 <__libc_init_array+0x24>
 8005970:	2600      	movs	r6, #0
 8005972:	f000 f86f 	bl	8005a54 <_init>
 8005976:	4c0a      	ldr	r4, [pc, #40]	@ (80059a0 <__libc_init_array+0x40>)
 8005978:	4d0a      	ldr	r5, [pc, #40]	@ (80059a4 <__libc_init_array+0x44>)
 800597a:	1b64      	subs	r4, r4, r5
 800597c:	10a4      	asrs	r4, r4, #2
 800597e:	42a6      	cmp	r6, r4
 8005980:	d105      	bne.n	800598e <__libc_init_array+0x2e>
 8005982:	bd70      	pop	{r4, r5, r6, pc}
 8005984:	00b3      	lsls	r3, r6, #2
 8005986:	58eb      	ldr	r3, [r5, r3]
 8005988:	4798      	blx	r3
 800598a:	3601      	adds	r6, #1
 800598c:	e7ee      	b.n	800596c <__libc_init_array+0xc>
 800598e:	00b3      	lsls	r3, r6, #2
 8005990:	58eb      	ldr	r3, [r5, r3]
 8005992:	4798      	blx	r3
 8005994:	3601      	adds	r6, #1
 8005996:	e7f2      	b.n	800597e <__libc_init_array+0x1e>
 8005998:	08005e08 	.word	0x08005e08
 800599c:	08005e08 	.word	0x08005e08
 80059a0:	08005e0c 	.word	0x08005e0c
 80059a4:	08005e08 	.word	0x08005e08

080059a8 <__retarget_lock_acquire_recursive>:
 80059a8:	4770      	bx	lr

080059aa <__retarget_lock_release_recursive>:
 80059aa:	4770      	bx	lr

080059ac <memcpy>:
 80059ac:	2300      	movs	r3, #0
 80059ae:	b510      	push	{r4, lr}
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d100      	bne.n	80059b6 <memcpy+0xa>
 80059b4:	bd10      	pop	{r4, pc}
 80059b6:	5ccc      	ldrb	r4, [r1, r3]
 80059b8:	54c4      	strb	r4, [r0, r3]
 80059ba:	3301      	adds	r3, #1
 80059bc:	e7f8      	b.n	80059b0 <memcpy+0x4>
	...

080059c0 <_free_r>:
 80059c0:	b570      	push	{r4, r5, r6, lr}
 80059c2:	0005      	movs	r5, r0
 80059c4:	1e0c      	subs	r4, r1, #0
 80059c6:	d010      	beq.n	80059ea <_free_r+0x2a>
 80059c8:	3c04      	subs	r4, #4
 80059ca:	6823      	ldr	r3, [r4, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	da00      	bge.n	80059d2 <_free_r+0x12>
 80059d0:	18e4      	adds	r4, r4, r3
 80059d2:	0028      	movs	r0, r5
 80059d4:	f7ff ff94 	bl	8005900 <__malloc_lock>
 80059d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005a50 <_free_r+0x90>)
 80059da:	6813      	ldr	r3, [r2, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d105      	bne.n	80059ec <_free_r+0x2c>
 80059e0:	6063      	str	r3, [r4, #4]
 80059e2:	6014      	str	r4, [r2, #0]
 80059e4:	0028      	movs	r0, r5
 80059e6:	f7ff ff93 	bl	8005910 <__malloc_unlock>
 80059ea:	bd70      	pop	{r4, r5, r6, pc}
 80059ec:	42a3      	cmp	r3, r4
 80059ee:	d908      	bls.n	8005a02 <_free_r+0x42>
 80059f0:	6820      	ldr	r0, [r4, #0]
 80059f2:	1821      	adds	r1, r4, r0
 80059f4:	428b      	cmp	r3, r1
 80059f6:	d1f3      	bne.n	80059e0 <_free_r+0x20>
 80059f8:	6819      	ldr	r1, [r3, #0]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	1809      	adds	r1, r1, r0
 80059fe:	6021      	str	r1, [r4, #0]
 8005a00:	e7ee      	b.n	80059e0 <_free_r+0x20>
 8005a02:	001a      	movs	r2, r3
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d001      	beq.n	8005a0e <_free_r+0x4e>
 8005a0a:	42a3      	cmp	r3, r4
 8005a0c:	d9f9      	bls.n	8005a02 <_free_r+0x42>
 8005a0e:	6811      	ldr	r1, [r2, #0]
 8005a10:	1850      	adds	r0, r2, r1
 8005a12:	42a0      	cmp	r0, r4
 8005a14:	d10b      	bne.n	8005a2e <_free_r+0x6e>
 8005a16:	6820      	ldr	r0, [r4, #0]
 8005a18:	1809      	adds	r1, r1, r0
 8005a1a:	1850      	adds	r0, r2, r1
 8005a1c:	6011      	str	r1, [r2, #0]
 8005a1e:	4283      	cmp	r3, r0
 8005a20:	d1e0      	bne.n	80059e4 <_free_r+0x24>
 8005a22:	6818      	ldr	r0, [r3, #0]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	1841      	adds	r1, r0, r1
 8005a28:	6011      	str	r1, [r2, #0]
 8005a2a:	6053      	str	r3, [r2, #4]
 8005a2c:	e7da      	b.n	80059e4 <_free_r+0x24>
 8005a2e:	42a0      	cmp	r0, r4
 8005a30:	d902      	bls.n	8005a38 <_free_r+0x78>
 8005a32:	230c      	movs	r3, #12
 8005a34:	602b      	str	r3, [r5, #0]
 8005a36:	e7d5      	b.n	80059e4 <_free_r+0x24>
 8005a38:	6820      	ldr	r0, [r4, #0]
 8005a3a:	1821      	adds	r1, r4, r0
 8005a3c:	428b      	cmp	r3, r1
 8005a3e:	d103      	bne.n	8005a48 <_free_r+0x88>
 8005a40:	6819      	ldr	r1, [r3, #0]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	1809      	adds	r1, r1, r0
 8005a46:	6021      	str	r1, [r4, #0]
 8005a48:	6063      	str	r3, [r4, #4]
 8005a4a:	6054      	str	r4, [r2, #4]
 8005a4c:	e7ca      	b.n	80059e4 <_free_r+0x24>
 8005a4e:	46c0      	nop			@ (mov r8, r8)
 8005a50:	200001e4 	.word	0x200001e4

08005a54 <_init>:
 8005a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a56:	46c0      	nop			@ (mov r8, r8)
 8005a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a5a:	bc08      	pop	{r3}
 8005a5c:	469e      	mov	lr, r3
 8005a5e:	4770      	bx	lr

08005a60 <_fini>:
 8005a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a62:	46c0      	nop			@ (mov r8, r8)
 8005a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a66:	bc08      	pop	{r3}
 8005a68:	469e      	mov	lr, r3
 8005a6a:	4770      	bx	lr
