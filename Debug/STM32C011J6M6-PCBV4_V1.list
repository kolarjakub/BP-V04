
STM32C011J6M6-PCBV4_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073c8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  08007488  08007488  00008488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007824  08007824  00009060  2**0
                  CONTENTS
  4 .ARM          00000000  08007824  08007824  00009060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007824  08007824  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007824  08007824  00008824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007828  08007828  00008828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800782c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  20000060  0800788c  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  0800788c  00009344  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000110d4  00000000  00000000  00009088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002705  00000000  00000000  0001a15c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e58  00000000  00000000  0001c868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b47  00000000  00000000  0001d6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001479f  00000000  00000000  0001e207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001298c  00000000  00000000  000329a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e879  00000000  00000000  00045332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c3bab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003914  00000000  00000000  000c3bf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000c7504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007470 	.word	0x08007470

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	08007470 	.word	0x08007470

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__aeabi_cfrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	0008      	movs	r0, r1
 80003f8:	4661      	mov	r1, ip
 80003fa:	e7ff      	b.n	80003fc <__aeabi_cfcmpeq>

080003fc <__aeabi_cfcmpeq>:
 80003fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fe:	f000 f9e3 	bl	80007c8 <__lesf2>
 8000402:	2800      	cmp	r0, #0
 8000404:	d401      	bmi.n	800040a <__aeabi_cfcmpeq+0xe>
 8000406:	2100      	movs	r1, #0
 8000408:	42c8      	cmn	r0, r1
 800040a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800040c <__aeabi_fcmpeq>:
 800040c:	b510      	push	{r4, lr}
 800040e:	f000 f963 	bl	80006d8 <__eqsf2>
 8000412:	4240      	negs	r0, r0
 8000414:	3001      	adds	r0, #1
 8000416:	bd10      	pop	{r4, pc}

08000418 <__aeabi_fcmplt>:
 8000418:	b510      	push	{r4, lr}
 800041a:	f000 f9d5 	bl	80007c8 <__lesf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	db01      	blt.n	8000426 <__aeabi_fcmplt+0xe>
 8000422:	2000      	movs	r0, #0
 8000424:	bd10      	pop	{r4, pc}
 8000426:	2001      	movs	r0, #1
 8000428:	bd10      	pop	{r4, pc}
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_fcmple>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 f9cb 	bl	80007c8 <__lesf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	dd01      	ble.n	800043a <__aeabi_fcmple+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			@ (mov r8, r8)

08000440 <__aeabi_fcmpgt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 f971 	bl	8000728 <__gesf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dc01      	bgt.n	800044e <__aeabi_fcmpgt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__aeabi_fcmpge>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 f967 	bl	8000728 <__gesf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	da01      	bge.n	8000462 <__aeabi_fcmpge+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)

08000468 <__aeabi_f2uiz>:
 8000468:	219e      	movs	r1, #158	@ 0x9e
 800046a:	b510      	push	{r4, lr}
 800046c:	05c9      	lsls	r1, r1, #23
 800046e:	1c04      	adds	r4, r0, #0
 8000470:	f7ff fff0 	bl	8000454 <__aeabi_fcmpge>
 8000474:	2800      	cmp	r0, #0
 8000476:	d103      	bne.n	8000480 <__aeabi_f2uiz+0x18>
 8000478:	1c20      	adds	r0, r4, #0
 800047a:	f000 fcd5 	bl	8000e28 <__aeabi_f2iz>
 800047e:	bd10      	pop	{r4, pc}
 8000480:	219e      	movs	r1, #158	@ 0x9e
 8000482:	1c20      	adds	r0, r4, #0
 8000484:	05c9      	lsls	r1, r1, #23
 8000486:	f000 fb2b 	bl	8000ae0 <__aeabi_fsub>
 800048a:	f000 fccd 	bl	8000e28 <__aeabi_f2iz>
 800048e:	2380      	movs	r3, #128	@ 0x80
 8000490:	061b      	lsls	r3, r3, #24
 8000492:	469c      	mov	ip, r3
 8000494:	4460      	add	r0, ip
 8000496:	e7f2      	b.n	800047e <__aeabi_f2uiz+0x16>

08000498 <__aeabi_fdiv>:
 8000498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800049a:	464f      	mov	r7, r9
 800049c:	4646      	mov	r6, r8
 800049e:	46d6      	mov	lr, sl
 80004a0:	0244      	lsls	r4, r0, #9
 80004a2:	b5c0      	push	{r6, r7, lr}
 80004a4:	0047      	lsls	r7, r0, #1
 80004a6:	1c0e      	adds	r6, r1, #0
 80004a8:	0a64      	lsrs	r4, r4, #9
 80004aa:	0e3f      	lsrs	r7, r7, #24
 80004ac:	0fc5      	lsrs	r5, r0, #31
 80004ae:	2f00      	cmp	r7, #0
 80004b0:	d03c      	beq.n	800052c <__aeabi_fdiv+0x94>
 80004b2:	2fff      	cmp	r7, #255	@ 0xff
 80004b4:	d042      	beq.n	800053c <__aeabi_fdiv+0xa4>
 80004b6:	2300      	movs	r3, #0
 80004b8:	2280      	movs	r2, #128	@ 0x80
 80004ba:	4699      	mov	r9, r3
 80004bc:	469a      	mov	sl, r3
 80004be:	00e4      	lsls	r4, r4, #3
 80004c0:	04d2      	lsls	r2, r2, #19
 80004c2:	4314      	orrs	r4, r2
 80004c4:	3f7f      	subs	r7, #127	@ 0x7f
 80004c6:	0273      	lsls	r3, r6, #9
 80004c8:	0a5b      	lsrs	r3, r3, #9
 80004ca:	4698      	mov	r8, r3
 80004cc:	0073      	lsls	r3, r6, #1
 80004ce:	0e1b      	lsrs	r3, r3, #24
 80004d0:	0ff6      	lsrs	r6, r6, #31
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d01b      	beq.n	800050e <__aeabi_fdiv+0x76>
 80004d6:	2bff      	cmp	r3, #255	@ 0xff
 80004d8:	d013      	beq.n	8000502 <__aeabi_fdiv+0x6a>
 80004da:	4642      	mov	r2, r8
 80004dc:	2180      	movs	r1, #128	@ 0x80
 80004de:	00d2      	lsls	r2, r2, #3
 80004e0:	04c9      	lsls	r1, r1, #19
 80004e2:	4311      	orrs	r1, r2
 80004e4:	4688      	mov	r8, r1
 80004e6:	2000      	movs	r0, #0
 80004e8:	3b7f      	subs	r3, #127	@ 0x7f
 80004ea:	0029      	movs	r1, r5
 80004ec:	1aff      	subs	r7, r7, r3
 80004ee:	464b      	mov	r3, r9
 80004f0:	4071      	eors	r1, r6
 80004f2:	b2c9      	uxtb	r1, r1
 80004f4:	2b0f      	cmp	r3, #15
 80004f6:	d900      	bls.n	80004fa <__aeabi_fdiv+0x62>
 80004f8:	e0b5      	b.n	8000666 <__aeabi_fdiv+0x1ce>
 80004fa:	4a74      	ldr	r2, [pc, #464]	@ (80006cc <__aeabi_fdiv+0x234>)
 80004fc:	009b      	lsls	r3, r3, #2
 80004fe:	58d3      	ldr	r3, [r2, r3]
 8000500:	469f      	mov	pc, r3
 8000502:	4643      	mov	r3, r8
 8000504:	2b00      	cmp	r3, #0
 8000506:	d13f      	bne.n	8000588 <__aeabi_fdiv+0xf0>
 8000508:	3fff      	subs	r7, #255	@ 0xff
 800050a:	3302      	adds	r3, #2
 800050c:	e003      	b.n	8000516 <__aeabi_fdiv+0x7e>
 800050e:	4643      	mov	r3, r8
 8000510:	2b00      	cmp	r3, #0
 8000512:	d12d      	bne.n	8000570 <__aeabi_fdiv+0xd8>
 8000514:	2301      	movs	r3, #1
 8000516:	0029      	movs	r1, r5
 8000518:	464a      	mov	r2, r9
 800051a:	4071      	eors	r1, r6
 800051c:	b2c9      	uxtb	r1, r1
 800051e:	431a      	orrs	r2, r3
 8000520:	2a0e      	cmp	r2, #14
 8000522:	d838      	bhi.n	8000596 <__aeabi_fdiv+0xfe>
 8000524:	486a      	ldr	r0, [pc, #424]	@ (80006d0 <__aeabi_fdiv+0x238>)
 8000526:	0092      	lsls	r2, r2, #2
 8000528:	5882      	ldr	r2, [r0, r2]
 800052a:	4697      	mov	pc, r2
 800052c:	2c00      	cmp	r4, #0
 800052e:	d113      	bne.n	8000558 <__aeabi_fdiv+0xc0>
 8000530:	2304      	movs	r3, #4
 8000532:	4699      	mov	r9, r3
 8000534:	3b03      	subs	r3, #3
 8000536:	2700      	movs	r7, #0
 8000538:	469a      	mov	sl, r3
 800053a:	e7c4      	b.n	80004c6 <__aeabi_fdiv+0x2e>
 800053c:	2c00      	cmp	r4, #0
 800053e:	d105      	bne.n	800054c <__aeabi_fdiv+0xb4>
 8000540:	2308      	movs	r3, #8
 8000542:	4699      	mov	r9, r3
 8000544:	3b06      	subs	r3, #6
 8000546:	27ff      	movs	r7, #255	@ 0xff
 8000548:	469a      	mov	sl, r3
 800054a:	e7bc      	b.n	80004c6 <__aeabi_fdiv+0x2e>
 800054c:	230c      	movs	r3, #12
 800054e:	4699      	mov	r9, r3
 8000550:	3b09      	subs	r3, #9
 8000552:	27ff      	movs	r7, #255	@ 0xff
 8000554:	469a      	mov	sl, r3
 8000556:	e7b6      	b.n	80004c6 <__aeabi_fdiv+0x2e>
 8000558:	0020      	movs	r0, r4
 800055a:	f000 fd13 	bl	8000f84 <__clzsi2>
 800055e:	2776      	movs	r7, #118	@ 0x76
 8000560:	1f43      	subs	r3, r0, #5
 8000562:	409c      	lsls	r4, r3
 8000564:	2300      	movs	r3, #0
 8000566:	427f      	negs	r7, r7
 8000568:	4699      	mov	r9, r3
 800056a:	469a      	mov	sl, r3
 800056c:	1a3f      	subs	r7, r7, r0
 800056e:	e7aa      	b.n	80004c6 <__aeabi_fdiv+0x2e>
 8000570:	4640      	mov	r0, r8
 8000572:	f000 fd07 	bl	8000f84 <__clzsi2>
 8000576:	4642      	mov	r2, r8
 8000578:	1f43      	subs	r3, r0, #5
 800057a:	409a      	lsls	r2, r3
 800057c:	2376      	movs	r3, #118	@ 0x76
 800057e:	425b      	negs	r3, r3
 8000580:	1a1b      	subs	r3, r3, r0
 8000582:	4690      	mov	r8, r2
 8000584:	2000      	movs	r0, #0
 8000586:	e7b0      	b.n	80004ea <__aeabi_fdiv+0x52>
 8000588:	2303      	movs	r3, #3
 800058a:	464a      	mov	r2, r9
 800058c:	431a      	orrs	r2, r3
 800058e:	4691      	mov	r9, r2
 8000590:	2003      	movs	r0, #3
 8000592:	33fc      	adds	r3, #252	@ 0xfc
 8000594:	e7a9      	b.n	80004ea <__aeabi_fdiv+0x52>
 8000596:	000d      	movs	r5, r1
 8000598:	20ff      	movs	r0, #255	@ 0xff
 800059a:	2200      	movs	r2, #0
 800059c:	05c0      	lsls	r0, r0, #23
 800059e:	07ed      	lsls	r5, r5, #31
 80005a0:	4310      	orrs	r0, r2
 80005a2:	4328      	orrs	r0, r5
 80005a4:	bce0      	pop	{r5, r6, r7}
 80005a6:	46ba      	mov	sl, r7
 80005a8:	46b1      	mov	r9, r6
 80005aa:	46a8      	mov	r8, r5
 80005ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005ae:	000d      	movs	r5, r1
 80005b0:	2000      	movs	r0, #0
 80005b2:	2200      	movs	r2, #0
 80005b4:	e7f2      	b.n	800059c <__aeabi_fdiv+0x104>
 80005b6:	4653      	mov	r3, sl
 80005b8:	2b02      	cmp	r3, #2
 80005ba:	d0ed      	beq.n	8000598 <__aeabi_fdiv+0x100>
 80005bc:	2b03      	cmp	r3, #3
 80005be:	d033      	beq.n	8000628 <__aeabi_fdiv+0x190>
 80005c0:	46a0      	mov	r8, r4
 80005c2:	2b01      	cmp	r3, #1
 80005c4:	d105      	bne.n	80005d2 <__aeabi_fdiv+0x13a>
 80005c6:	2000      	movs	r0, #0
 80005c8:	2200      	movs	r2, #0
 80005ca:	e7e7      	b.n	800059c <__aeabi_fdiv+0x104>
 80005cc:	0035      	movs	r5, r6
 80005ce:	2803      	cmp	r0, #3
 80005d0:	d07a      	beq.n	80006c8 <__aeabi_fdiv+0x230>
 80005d2:	003b      	movs	r3, r7
 80005d4:	337f      	adds	r3, #127	@ 0x7f
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	dd2d      	ble.n	8000636 <__aeabi_fdiv+0x19e>
 80005da:	4642      	mov	r2, r8
 80005dc:	0752      	lsls	r2, r2, #29
 80005de:	d007      	beq.n	80005f0 <__aeabi_fdiv+0x158>
 80005e0:	220f      	movs	r2, #15
 80005e2:	4641      	mov	r1, r8
 80005e4:	400a      	ands	r2, r1
 80005e6:	2a04      	cmp	r2, #4
 80005e8:	d002      	beq.n	80005f0 <__aeabi_fdiv+0x158>
 80005ea:	2204      	movs	r2, #4
 80005ec:	4694      	mov	ip, r2
 80005ee:	44e0      	add	r8, ip
 80005f0:	4642      	mov	r2, r8
 80005f2:	0112      	lsls	r2, r2, #4
 80005f4:	d505      	bpl.n	8000602 <__aeabi_fdiv+0x16a>
 80005f6:	4642      	mov	r2, r8
 80005f8:	4b36      	ldr	r3, [pc, #216]	@ (80006d4 <__aeabi_fdiv+0x23c>)
 80005fa:	401a      	ands	r2, r3
 80005fc:	003b      	movs	r3, r7
 80005fe:	4690      	mov	r8, r2
 8000600:	3380      	adds	r3, #128	@ 0x80
 8000602:	2bfe      	cmp	r3, #254	@ 0xfe
 8000604:	dcc8      	bgt.n	8000598 <__aeabi_fdiv+0x100>
 8000606:	4642      	mov	r2, r8
 8000608:	0192      	lsls	r2, r2, #6
 800060a:	0a52      	lsrs	r2, r2, #9
 800060c:	b2d8      	uxtb	r0, r3
 800060e:	e7c5      	b.n	800059c <__aeabi_fdiv+0x104>
 8000610:	2280      	movs	r2, #128	@ 0x80
 8000612:	2500      	movs	r5, #0
 8000614:	20ff      	movs	r0, #255	@ 0xff
 8000616:	03d2      	lsls	r2, r2, #15
 8000618:	e7c0      	b.n	800059c <__aeabi_fdiv+0x104>
 800061a:	2280      	movs	r2, #128	@ 0x80
 800061c:	03d2      	lsls	r2, r2, #15
 800061e:	4214      	tst	r4, r2
 8000620:	d002      	beq.n	8000628 <__aeabi_fdiv+0x190>
 8000622:	4643      	mov	r3, r8
 8000624:	4213      	tst	r3, r2
 8000626:	d049      	beq.n	80006bc <__aeabi_fdiv+0x224>
 8000628:	2280      	movs	r2, #128	@ 0x80
 800062a:	03d2      	lsls	r2, r2, #15
 800062c:	4322      	orrs	r2, r4
 800062e:	0252      	lsls	r2, r2, #9
 8000630:	20ff      	movs	r0, #255	@ 0xff
 8000632:	0a52      	lsrs	r2, r2, #9
 8000634:	e7b2      	b.n	800059c <__aeabi_fdiv+0x104>
 8000636:	2201      	movs	r2, #1
 8000638:	1ad3      	subs	r3, r2, r3
 800063a:	2b1b      	cmp	r3, #27
 800063c:	dcc3      	bgt.n	80005c6 <__aeabi_fdiv+0x12e>
 800063e:	4642      	mov	r2, r8
 8000640:	40da      	lsrs	r2, r3
 8000642:	4643      	mov	r3, r8
 8000644:	379e      	adds	r7, #158	@ 0x9e
 8000646:	40bb      	lsls	r3, r7
 8000648:	1e59      	subs	r1, r3, #1
 800064a:	418b      	sbcs	r3, r1
 800064c:	431a      	orrs	r2, r3
 800064e:	0753      	lsls	r3, r2, #29
 8000650:	d004      	beq.n	800065c <__aeabi_fdiv+0x1c4>
 8000652:	230f      	movs	r3, #15
 8000654:	4013      	ands	r3, r2
 8000656:	2b04      	cmp	r3, #4
 8000658:	d000      	beq.n	800065c <__aeabi_fdiv+0x1c4>
 800065a:	3204      	adds	r2, #4
 800065c:	0153      	lsls	r3, r2, #5
 800065e:	d529      	bpl.n	80006b4 <__aeabi_fdiv+0x21c>
 8000660:	2001      	movs	r0, #1
 8000662:	2200      	movs	r2, #0
 8000664:	e79a      	b.n	800059c <__aeabi_fdiv+0x104>
 8000666:	4642      	mov	r2, r8
 8000668:	0163      	lsls	r3, r4, #5
 800066a:	0155      	lsls	r5, r2, #5
 800066c:	42ab      	cmp	r3, r5
 800066e:	d215      	bcs.n	800069c <__aeabi_fdiv+0x204>
 8000670:	201b      	movs	r0, #27
 8000672:	2200      	movs	r2, #0
 8000674:	3f01      	subs	r7, #1
 8000676:	2601      	movs	r6, #1
 8000678:	001c      	movs	r4, r3
 800067a:	0052      	lsls	r2, r2, #1
 800067c:	005b      	lsls	r3, r3, #1
 800067e:	2c00      	cmp	r4, #0
 8000680:	db01      	blt.n	8000686 <__aeabi_fdiv+0x1ee>
 8000682:	429d      	cmp	r5, r3
 8000684:	d801      	bhi.n	800068a <__aeabi_fdiv+0x1f2>
 8000686:	1b5b      	subs	r3, r3, r5
 8000688:	4332      	orrs	r2, r6
 800068a:	3801      	subs	r0, #1
 800068c:	2800      	cmp	r0, #0
 800068e:	d1f3      	bne.n	8000678 <__aeabi_fdiv+0x1e0>
 8000690:	1e58      	subs	r0, r3, #1
 8000692:	4183      	sbcs	r3, r0
 8000694:	4313      	orrs	r3, r2
 8000696:	4698      	mov	r8, r3
 8000698:	000d      	movs	r5, r1
 800069a:	e79a      	b.n	80005d2 <__aeabi_fdiv+0x13a>
 800069c:	201a      	movs	r0, #26
 800069e:	2201      	movs	r2, #1
 80006a0:	1b5b      	subs	r3, r3, r5
 80006a2:	e7e8      	b.n	8000676 <__aeabi_fdiv+0x1de>
 80006a4:	3b02      	subs	r3, #2
 80006a6:	425a      	negs	r2, r3
 80006a8:	4153      	adcs	r3, r2
 80006aa:	425b      	negs	r3, r3
 80006ac:	0035      	movs	r5, r6
 80006ae:	2200      	movs	r2, #0
 80006b0:	b2d8      	uxtb	r0, r3
 80006b2:	e773      	b.n	800059c <__aeabi_fdiv+0x104>
 80006b4:	0192      	lsls	r2, r2, #6
 80006b6:	2000      	movs	r0, #0
 80006b8:	0a52      	lsrs	r2, r2, #9
 80006ba:	e76f      	b.n	800059c <__aeabi_fdiv+0x104>
 80006bc:	431a      	orrs	r2, r3
 80006be:	0252      	lsls	r2, r2, #9
 80006c0:	0035      	movs	r5, r6
 80006c2:	20ff      	movs	r0, #255	@ 0xff
 80006c4:	0a52      	lsrs	r2, r2, #9
 80006c6:	e769      	b.n	800059c <__aeabi_fdiv+0x104>
 80006c8:	4644      	mov	r4, r8
 80006ca:	e7ad      	b.n	8000628 <__aeabi_fdiv+0x190>
 80006cc:	08007488 	.word	0x08007488
 80006d0:	080074c8 	.word	0x080074c8
 80006d4:	f7ffffff 	.word	0xf7ffffff

080006d8 <__eqsf2>:
 80006d8:	b570      	push	{r4, r5, r6, lr}
 80006da:	0042      	lsls	r2, r0, #1
 80006dc:	024e      	lsls	r6, r1, #9
 80006de:	004c      	lsls	r4, r1, #1
 80006e0:	0245      	lsls	r5, r0, #9
 80006e2:	0a6d      	lsrs	r5, r5, #9
 80006e4:	0e12      	lsrs	r2, r2, #24
 80006e6:	0fc3      	lsrs	r3, r0, #31
 80006e8:	0a76      	lsrs	r6, r6, #9
 80006ea:	0e24      	lsrs	r4, r4, #24
 80006ec:	0fc9      	lsrs	r1, r1, #31
 80006ee:	2aff      	cmp	r2, #255	@ 0xff
 80006f0:	d010      	beq.n	8000714 <__eqsf2+0x3c>
 80006f2:	2cff      	cmp	r4, #255	@ 0xff
 80006f4:	d00c      	beq.n	8000710 <__eqsf2+0x38>
 80006f6:	2001      	movs	r0, #1
 80006f8:	42a2      	cmp	r2, r4
 80006fa:	d10a      	bne.n	8000712 <__eqsf2+0x3a>
 80006fc:	42b5      	cmp	r5, r6
 80006fe:	d108      	bne.n	8000712 <__eqsf2+0x3a>
 8000700:	428b      	cmp	r3, r1
 8000702:	d00f      	beq.n	8000724 <__eqsf2+0x4c>
 8000704:	2a00      	cmp	r2, #0
 8000706:	d104      	bne.n	8000712 <__eqsf2+0x3a>
 8000708:	0028      	movs	r0, r5
 800070a:	1e43      	subs	r3, r0, #1
 800070c:	4198      	sbcs	r0, r3
 800070e:	e000      	b.n	8000712 <__eqsf2+0x3a>
 8000710:	2001      	movs	r0, #1
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	2001      	movs	r0, #1
 8000716:	2cff      	cmp	r4, #255	@ 0xff
 8000718:	d1fb      	bne.n	8000712 <__eqsf2+0x3a>
 800071a:	4335      	orrs	r5, r6
 800071c:	d1f9      	bne.n	8000712 <__eqsf2+0x3a>
 800071e:	404b      	eors	r3, r1
 8000720:	0018      	movs	r0, r3
 8000722:	e7f6      	b.n	8000712 <__eqsf2+0x3a>
 8000724:	2000      	movs	r0, #0
 8000726:	e7f4      	b.n	8000712 <__eqsf2+0x3a>

08000728 <__gesf2>:
 8000728:	b530      	push	{r4, r5, lr}
 800072a:	0042      	lsls	r2, r0, #1
 800072c:	0244      	lsls	r4, r0, #9
 800072e:	024d      	lsls	r5, r1, #9
 8000730:	0fc3      	lsrs	r3, r0, #31
 8000732:	0048      	lsls	r0, r1, #1
 8000734:	0a64      	lsrs	r4, r4, #9
 8000736:	0e12      	lsrs	r2, r2, #24
 8000738:	0a6d      	lsrs	r5, r5, #9
 800073a:	0e00      	lsrs	r0, r0, #24
 800073c:	0fc9      	lsrs	r1, r1, #31
 800073e:	2aff      	cmp	r2, #255	@ 0xff
 8000740:	d019      	beq.n	8000776 <__gesf2+0x4e>
 8000742:	28ff      	cmp	r0, #255	@ 0xff
 8000744:	d00b      	beq.n	800075e <__gesf2+0x36>
 8000746:	2a00      	cmp	r2, #0
 8000748:	d11e      	bne.n	8000788 <__gesf2+0x60>
 800074a:	2800      	cmp	r0, #0
 800074c:	d10b      	bne.n	8000766 <__gesf2+0x3e>
 800074e:	2d00      	cmp	r5, #0
 8000750:	d027      	beq.n	80007a2 <__gesf2+0x7a>
 8000752:	2c00      	cmp	r4, #0
 8000754:	d134      	bne.n	80007c0 <__gesf2+0x98>
 8000756:	2900      	cmp	r1, #0
 8000758:	d02f      	beq.n	80007ba <__gesf2+0x92>
 800075a:	0008      	movs	r0, r1
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	2d00      	cmp	r5, #0
 8000760:	d128      	bne.n	80007b4 <__gesf2+0x8c>
 8000762:	2a00      	cmp	r2, #0
 8000764:	d101      	bne.n	800076a <__gesf2+0x42>
 8000766:	2c00      	cmp	r4, #0
 8000768:	d0f5      	beq.n	8000756 <__gesf2+0x2e>
 800076a:	428b      	cmp	r3, r1
 800076c:	d107      	bne.n	800077e <__gesf2+0x56>
 800076e:	2b00      	cmp	r3, #0
 8000770:	d023      	beq.n	80007ba <__gesf2+0x92>
 8000772:	0018      	movs	r0, r3
 8000774:	e7f2      	b.n	800075c <__gesf2+0x34>
 8000776:	2c00      	cmp	r4, #0
 8000778:	d11c      	bne.n	80007b4 <__gesf2+0x8c>
 800077a:	28ff      	cmp	r0, #255	@ 0xff
 800077c:	d014      	beq.n	80007a8 <__gesf2+0x80>
 800077e:	1e58      	subs	r0, r3, #1
 8000780:	2302      	movs	r3, #2
 8000782:	4018      	ands	r0, r3
 8000784:	3801      	subs	r0, #1
 8000786:	e7e9      	b.n	800075c <__gesf2+0x34>
 8000788:	2800      	cmp	r0, #0
 800078a:	d0f8      	beq.n	800077e <__gesf2+0x56>
 800078c:	428b      	cmp	r3, r1
 800078e:	d1f6      	bne.n	800077e <__gesf2+0x56>
 8000790:	4282      	cmp	r2, r0
 8000792:	dcf4      	bgt.n	800077e <__gesf2+0x56>
 8000794:	dbeb      	blt.n	800076e <__gesf2+0x46>
 8000796:	42ac      	cmp	r4, r5
 8000798:	d8f1      	bhi.n	800077e <__gesf2+0x56>
 800079a:	2000      	movs	r0, #0
 800079c:	42ac      	cmp	r4, r5
 800079e:	d2dd      	bcs.n	800075c <__gesf2+0x34>
 80007a0:	e7e5      	b.n	800076e <__gesf2+0x46>
 80007a2:	2c00      	cmp	r4, #0
 80007a4:	d0da      	beq.n	800075c <__gesf2+0x34>
 80007a6:	e7ea      	b.n	800077e <__gesf2+0x56>
 80007a8:	2d00      	cmp	r5, #0
 80007aa:	d103      	bne.n	80007b4 <__gesf2+0x8c>
 80007ac:	428b      	cmp	r3, r1
 80007ae:	d1e6      	bne.n	800077e <__gesf2+0x56>
 80007b0:	2000      	movs	r0, #0
 80007b2:	e7d3      	b.n	800075c <__gesf2+0x34>
 80007b4:	2002      	movs	r0, #2
 80007b6:	4240      	negs	r0, r0
 80007b8:	e7d0      	b.n	800075c <__gesf2+0x34>
 80007ba:	2001      	movs	r0, #1
 80007bc:	4240      	negs	r0, r0
 80007be:	e7cd      	b.n	800075c <__gesf2+0x34>
 80007c0:	428b      	cmp	r3, r1
 80007c2:	d0e8      	beq.n	8000796 <__gesf2+0x6e>
 80007c4:	e7db      	b.n	800077e <__gesf2+0x56>
 80007c6:	46c0      	nop			@ (mov r8, r8)

080007c8 <__lesf2>:
 80007c8:	b530      	push	{r4, r5, lr}
 80007ca:	0042      	lsls	r2, r0, #1
 80007cc:	0244      	lsls	r4, r0, #9
 80007ce:	024d      	lsls	r5, r1, #9
 80007d0:	0fc3      	lsrs	r3, r0, #31
 80007d2:	0048      	lsls	r0, r1, #1
 80007d4:	0a64      	lsrs	r4, r4, #9
 80007d6:	0e12      	lsrs	r2, r2, #24
 80007d8:	0a6d      	lsrs	r5, r5, #9
 80007da:	0e00      	lsrs	r0, r0, #24
 80007dc:	0fc9      	lsrs	r1, r1, #31
 80007de:	2aff      	cmp	r2, #255	@ 0xff
 80007e0:	d01a      	beq.n	8000818 <__lesf2+0x50>
 80007e2:	28ff      	cmp	r0, #255	@ 0xff
 80007e4:	d00e      	beq.n	8000804 <__lesf2+0x3c>
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	d11e      	bne.n	8000828 <__lesf2+0x60>
 80007ea:	2800      	cmp	r0, #0
 80007ec:	d10e      	bne.n	800080c <__lesf2+0x44>
 80007ee:	2d00      	cmp	r5, #0
 80007f0:	d02a      	beq.n	8000848 <__lesf2+0x80>
 80007f2:	2c00      	cmp	r4, #0
 80007f4:	d00c      	beq.n	8000810 <__lesf2+0x48>
 80007f6:	428b      	cmp	r3, r1
 80007f8:	d01d      	beq.n	8000836 <__lesf2+0x6e>
 80007fa:	1e58      	subs	r0, r3, #1
 80007fc:	2302      	movs	r3, #2
 80007fe:	4018      	ands	r0, r3
 8000800:	3801      	subs	r0, #1
 8000802:	e010      	b.n	8000826 <__lesf2+0x5e>
 8000804:	2d00      	cmp	r5, #0
 8000806:	d10d      	bne.n	8000824 <__lesf2+0x5c>
 8000808:	2a00      	cmp	r2, #0
 800080a:	d120      	bne.n	800084e <__lesf2+0x86>
 800080c:	2c00      	cmp	r4, #0
 800080e:	d11e      	bne.n	800084e <__lesf2+0x86>
 8000810:	2900      	cmp	r1, #0
 8000812:	d023      	beq.n	800085c <__lesf2+0x94>
 8000814:	0008      	movs	r0, r1
 8000816:	e006      	b.n	8000826 <__lesf2+0x5e>
 8000818:	2c00      	cmp	r4, #0
 800081a:	d103      	bne.n	8000824 <__lesf2+0x5c>
 800081c:	28ff      	cmp	r0, #255	@ 0xff
 800081e:	d1ec      	bne.n	80007fa <__lesf2+0x32>
 8000820:	2d00      	cmp	r5, #0
 8000822:	d017      	beq.n	8000854 <__lesf2+0x8c>
 8000824:	2002      	movs	r0, #2
 8000826:	bd30      	pop	{r4, r5, pc}
 8000828:	2800      	cmp	r0, #0
 800082a:	d0e6      	beq.n	80007fa <__lesf2+0x32>
 800082c:	428b      	cmp	r3, r1
 800082e:	d1e4      	bne.n	80007fa <__lesf2+0x32>
 8000830:	4282      	cmp	r2, r0
 8000832:	dce2      	bgt.n	80007fa <__lesf2+0x32>
 8000834:	db04      	blt.n	8000840 <__lesf2+0x78>
 8000836:	42ac      	cmp	r4, r5
 8000838:	d8df      	bhi.n	80007fa <__lesf2+0x32>
 800083a:	2000      	movs	r0, #0
 800083c:	42ac      	cmp	r4, r5
 800083e:	d2f2      	bcs.n	8000826 <__lesf2+0x5e>
 8000840:	2b00      	cmp	r3, #0
 8000842:	d00b      	beq.n	800085c <__lesf2+0x94>
 8000844:	0018      	movs	r0, r3
 8000846:	e7ee      	b.n	8000826 <__lesf2+0x5e>
 8000848:	2c00      	cmp	r4, #0
 800084a:	d0ec      	beq.n	8000826 <__lesf2+0x5e>
 800084c:	e7d5      	b.n	80007fa <__lesf2+0x32>
 800084e:	428b      	cmp	r3, r1
 8000850:	d1d3      	bne.n	80007fa <__lesf2+0x32>
 8000852:	e7f5      	b.n	8000840 <__lesf2+0x78>
 8000854:	2000      	movs	r0, #0
 8000856:	428b      	cmp	r3, r1
 8000858:	d0e5      	beq.n	8000826 <__lesf2+0x5e>
 800085a:	e7ce      	b.n	80007fa <__lesf2+0x32>
 800085c:	2001      	movs	r0, #1
 800085e:	4240      	negs	r0, r0
 8000860:	e7e1      	b.n	8000826 <__lesf2+0x5e>
 8000862:	46c0      	nop			@ (mov r8, r8)

08000864 <__aeabi_fmul>:
 8000864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000866:	464f      	mov	r7, r9
 8000868:	4646      	mov	r6, r8
 800086a:	46d6      	mov	lr, sl
 800086c:	0243      	lsls	r3, r0, #9
 800086e:	0a5b      	lsrs	r3, r3, #9
 8000870:	0045      	lsls	r5, r0, #1
 8000872:	b5c0      	push	{r6, r7, lr}
 8000874:	4699      	mov	r9, r3
 8000876:	1c0f      	adds	r7, r1, #0
 8000878:	0e2d      	lsrs	r5, r5, #24
 800087a:	0fc6      	lsrs	r6, r0, #31
 800087c:	2d00      	cmp	r5, #0
 800087e:	d100      	bne.n	8000882 <__aeabi_fmul+0x1e>
 8000880:	e088      	b.n	8000994 <__aeabi_fmul+0x130>
 8000882:	2dff      	cmp	r5, #255	@ 0xff
 8000884:	d100      	bne.n	8000888 <__aeabi_fmul+0x24>
 8000886:	e08d      	b.n	80009a4 <__aeabi_fmul+0x140>
 8000888:	2280      	movs	r2, #128	@ 0x80
 800088a:	00db      	lsls	r3, r3, #3
 800088c:	04d2      	lsls	r2, r2, #19
 800088e:	431a      	orrs	r2, r3
 8000890:	2300      	movs	r3, #0
 8000892:	4691      	mov	r9, r2
 8000894:	4698      	mov	r8, r3
 8000896:	469a      	mov	sl, r3
 8000898:	3d7f      	subs	r5, #127	@ 0x7f
 800089a:	027c      	lsls	r4, r7, #9
 800089c:	007b      	lsls	r3, r7, #1
 800089e:	0a64      	lsrs	r4, r4, #9
 80008a0:	0e1b      	lsrs	r3, r3, #24
 80008a2:	0fff      	lsrs	r7, r7, #31
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d068      	beq.n	800097a <__aeabi_fmul+0x116>
 80008a8:	2bff      	cmp	r3, #255	@ 0xff
 80008aa:	d021      	beq.n	80008f0 <__aeabi_fmul+0x8c>
 80008ac:	2280      	movs	r2, #128	@ 0x80
 80008ae:	00e4      	lsls	r4, r4, #3
 80008b0:	04d2      	lsls	r2, r2, #19
 80008b2:	4314      	orrs	r4, r2
 80008b4:	4642      	mov	r2, r8
 80008b6:	3b7f      	subs	r3, #127	@ 0x7f
 80008b8:	195b      	adds	r3, r3, r5
 80008ba:	2100      	movs	r1, #0
 80008bc:	1c5d      	adds	r5, r3, #1
 80008be:	2a0a      	cmp	r2, #10
 80008c0:	dc2e      	bgt.n	8000920 <__aeabi_fmul+0xbc>
 80008c2:	407e      	eors	r6, r7
 80008c4:	4642      	mov	r2, r8
 80008c6:	2a02      	cmp	r2, #2
 80008c8:	dc23      	bgt.n	8000912 <__aeabi_fmul+0xae>
 80008ca:	3a01      	subs	r2, #1
 80008cc:	2a01      	cmp	r2, #1
 80008ce:	d900      	bls.n	80008d2 <__aeabi_fmul+0x6e>
 80008d0:	e0bd      	b.n	8000a4e <__aeabi_fmul+0x1ea>
 80008d2:	2902      	cmp	r1, #2
 80008d4:	d06e      	beq.n	80009b4 <__aeabi_fmul+0x150>
 80008d6:	2901      	cmp	r1, #1
 80008d8:	d12c      	bne.n	8000934 <__aeabi_fmul+0xd0>
 80008da:	2000      	movs	r0, #0
 80008dc:	2200      	movs	r2, #0
 80008de:	05c0      	lsls	r0, r0, #23
 80008e0:	07f6      	lsls	r6, r6, #31
 80008e2:	4310      	orrs	r0, r2
 80008e4:	4330      	orrs	r0, r6
 80008e6:	bce0      	pop	{r5, r6, r7}
 80008e8:	46ba      	mov	sl, r7
 80008ea:	46b1      	mov	r9, r6
 80008ec:	46a8      	mov	r8, r5
 80008ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008f0:	002b      	movs	r3, r5
 80008f2:	33ff      	adds	r3, #255	@ 0xff
 80008f4:	2c00      	cmp	r4, #0
 80008f6:	d065      	beq.n	80009c4 <__aeabi_fmul+0x160>
 80008f8:	2203      	movs	r2, #3
 80008fa:	4641      	mov	r1, r8
 80008fc:	4311      	orrs	r1, r2
 80008fe:	0032      	movs	r2, r6
 8000900:	3501      	adds	r5, #1
 8000902:	4688      	mov	r8, r1
 8000904:	407a      	eors	r2, r7
 8000906:	35ff      	adds	r5, #255	@ 0xff
 8000908:	290a      	cmp	r1, #10
 800090a:	dd00      	ble.n	800090e <__aeabi_fmul+0xaa>
 800090c:	e0d8      	b.n	8000ac0 <__aeabi_fmul+0x25c>
 800090e:	0016      	movs	r6, r2
 8000910:	2103      	movs	r1, #3
 8000912:	4640      	mov	r0, r8
 8000914:	2201      	movs	r2, #1
 8000916:	4082      	lsls	r2, r0
 8000918:	20a6      	movs	r0, #166	@ 0xa6
 800091a:	00c0      	lsls	r0, r0, #3
 800091c:	4202      	tst	r2, r0
 800091e:	d020      	beq.n	8000962 <__aeabi_fmul+0xfe>
 8000920:	4653      	mov	r3, sl
 8000922:	2b02      	cmp	r3, #2
 8000924:	d046      	beq.n	80009b4 <__aeabi_fmul+0x150>
 8000926:	2b03      	cmp	r3, #3
 8000928:	d100      	bne.n	800092c <__aeabi_fmul+0xc8>
 800092a:	e0bb      	b.n	8000aa4 <__aeabi_fmul+0x240>
 800092c:	4651      	mov	r1, sl
 800092e:	464c      	mov	r4, r9
 8000930:	2901      	cmp	r1, #1
 8000932:	d0d2      	beq.n	80008da <__aeabi_fmul+0x76>
 8000934:	002b      	movs	r3, r5
 8000936:	337f      	adds	r3, #127	@ 0x7f
 8000938:	2b00      	cmp	r3, #0
 800093a:	dd70      	ble.n	8000a1e <__aeabi_fmul+0x1ba>
 800093c:	0762      	lsls	r2, r4, #29
 800093e:	d004      	beq.n	800094a <__aeabi_fmul+0xe6>
 8000940:	220f      	movs	r2, #15
 8000942:	4022      	ands	r2, r4
 8000944:	2a04      	cmp	r2, #4
 8000946:	d000      	beq.n	800094a <__aeabi_fmul+0xe6>
 8000948:	3404      	adds	r4, #4
 800094a:	0122      	lsls	r2, r4, #4
 800094c:	d503      	bpl.n	8000956 <__aeabi_fmul+0xf2>
 800094e:	4b63      	ldr	r3, [pc, #396]	@ (8000adc <__aeabi_fmul+0x278>)
 8000950:	401c      	ands	r4, r3
 8000952:	002b      	movs	r3, r5
 8000954:	3380      	adds	r3, #128	@ 0x80
 8000956:	2bfe      	cmp	r3, #254	@ 0xfe
 8000958:	dc2c      	bgt.n	80009b4 <__aeabi_fmul+0x150>
 800095a:	01a2      	lsls	r2, r4, #6
 800095c:	0a52      	lsrs	r2, r2, #9
 800095e:	b2d8      	uxtb	r0, r3
 8000960:	e7bd      	b.n	80008de <__aeabi_fmul+0x7a>
 8000962:	2090      	movs	r0, #144	@ 0x90
 8000964:	0080      	lsls	r0, r0, #2
 8000966:	4202      	tst	r2, r0
 8000968:	d127      	bne.n	80009ba <__aeabi_fmul+0x156>
 800096a:	38b9      	subs	r0, #185	@ 0xb9
 800096c:	38ff      	subs	r0, #255	@ 0xff
 800096e:	4210      	tst	r0, r2
 8000970:	d06d      	beq.n	8000a4e <__aeabi_fmul+0x1ea>
 8000972:	003e      	movs	r6, r7
 8000974:	46a1      	mov	r9, r4
 8000976:	468a      	mov	sl, r1
 8000978:	e7d2      	b.n	8000920 <__aeabi_fmul+0xbc>
 800097a:	2c00      	cmp	r4, #0
 800097c:	d141      	bne.n	8000a02 <__aeabi_fmul+0x19e>
 800097e:	2301      	movs	r3, #1
 8000980:	4642      	mov	r2, r8
 8000982:	431a      	orrs	r2, r3
 8000984:	4690      	mov	r8, r2
 8000986:	002b      	movs	r3, r5
 8000988:	4642      	mov	r2, r8
 800098a:	2101      	movs	r1, #1
 800098c:	1c5d      	adds	r5, r3, #1
 800098e:	2a0a      	cmp	r2, #10
 8000990:	dd97      	ble.n	80008c2 <__aeabi_fmul+0x5e>
 8000992:	e7c5      	b.n	8000920 <__aeabi_fmul+0xbc>
 8000994:	2b00      	cmp	r3, #0
 8000996:	d126      	bne.n	80009e6 <__aeabi_fmul+0x182>
 8000998:	2304      	movs	r3, #4
 800099a:	4698      	mov	r8, r3
 800099c:	3b03      	subs	r3, #3
 800099e:	2500      	movs	r5, #0
 80009a0:	469a      	mov	sl, r3
 80009a2:	e77a      	b.n	800089a <__aeabi_fmul+0x36>
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d118      	bne.n	80009da <__aeabi_fmul+0x176>
 80009a8:	2308      	movs	r3, #8
 80009aa:	4698      	mov	r8, r3
 80009ac:	3b06      	subs	r3, #6
 80009ae:	25ff      	movs	r5, #255	@ 0xff
 80009b0:	469a      	mov	sl, r3
 80009b2:	e772      	b.n	800089a <__aeabi_fmul+0x36>
 80009b4:	20ff      	movs	r0, #255	@ 0xff
 80009b6:	2200      	movs	r2, #0
 80009b8:	e791      	b.n	80008de <__aeabi_fmul+0x7a>
 80009ba:	2280      	movs	r2, #128	@ 0x80
 80009bc:	2600      	movs	r6, #0
 80009be:	20ff      	movs	r0, #255	@ 0xff
 80009c0:	03d2      	lsls	r2, r2, #15
 80009c2:	e78c      	b.n	80008de <__aeabi_fmul+0x7a>
 80009c4:	4641      	mov	r1, r8
 80009c6:	2202      	movs	r2, #2
 80009c8:	3501      	adds	r5, #1
 80009ca:	4311      	orrs	r1, r2
 80009cc:	4688      	mov	r8, r1
 80009ce:	35ff      	adds	r5, #255	@ 0xff
 80009d0:	290a      	cmp	r1, #10
 80009d2:	dca5      	bgt.n	8000920 <__aeabi_fmul+0xbc>
 80009d4:	2102      	movs	r1, #2
 80009d6:	407e      	eors	r6, r7
 80009d8:	e774      	b.n	80008c4 <__aeabi_fmul+0x60>
 80009da:	230c      	movs	r3, #12
 80009dc:	4698      	mov	r8, r3
 80009de:	3b09      	subs	r3, #9
 80009e0:	25ff      	movs	r5, #255	@ 0xff
 80009e2:	469a      	mov	sl, r3
 80009e4:	e759      	b.n	800089a <__aeabi_fmul+0x36>
 80009e6:	0018      	movs	r0, r3
 80009e8:	f000 facc 	bl	8000f84 <__clzsi2>
 80009ec:	464a      	mov	r2, r9
 80009ee:	1f43      	subs	r3, r0, #5
 80009f0:	2576      	movs	r5, #118	@ 0x76
 80009f2:	409a      	lsls	r2, r3
 80009f4:	2300      	movs	r3, #0
 80009f6:	426d      	negs	r5, r5
 80009f8:	4691      	mov	r9, r2
 80009fa:	4698      	mov	r8, r3
 80009fc:	469a      	mov	sl, r3
 80009fe:	1a2d      	subs	r5, r5, r0
 8000a00:	e74b      	b.n	800089a <__aeabi_fmul+0x36>
 8000a02:	0020      	movs	r0, r4
 8000a04:	f000 fabe 	bl	8000f84 <__clzsi2>
 8000a08:	4642      	mov	r2, r8
 8000a0a:	1f43      	subs	r3, r0, #5
 8000a0c:	409c      	lsls	r4, r3
 8000a0e:	1a2b      	subs	r3, r5, r0
 8000a10:	3b76      	subs	r3, #118	@ 0x76
 8000a12:	2100      	movs	r1, #0
 8000a14:	1c5d      	adds	r5, r3, #1
 8000a16:	2a0a      	cmp	r2, #10
 8000a18:	dc00      	bgt.n	8000a1c <__aeabi_fmul+0x1b8>
 8000a1a:	e752      	b.n	80008c2 <__aeabi_fmul+0x5e>
 8000a1c:	e780      	b.n	8000920 <__aeabi_fmul+0xbc>
 8000a1e:	2201      	movs	r2, #1
 8000a20:	1ad3      	subs	r3, r2, r3
 8000a22:	2b1b      	cmp	r3, #27
 8000a24:	dd00      	ble.n	8000a28 <__aeabi_fmul+0x1c4>
 8000a26:	e758      	b.n	80008da <__aeabi_fmul+0x76>
 8000a28:	359e      	adds	r5, #158	@ 0x9e
 8000a2a:	0022      	movs	r2, r4
 8000a2c:	40ac      	lsls	r4, r5
 8000a2e:	40da      	lsrs	r2, r3
 8000a30:	1e63      	subs	r3, r4, #1
 8000a32:	419c      	sbcs	r4, r3
 8000a34:	4322      	orrs	r2, r4
 8000a36:	0753      	lsls	r3, r2, #29
 8000a38:	d004      	beq.n	8000a44 <__aeabi_fmul+0x1e0>
 8000a3a:	230f      	movs	r3, #15
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	2b04      	cmp	r3, #4
 8000a40:	d000      	beq.n	8000a44 <__aeabi_fmul+0x1e0>
 8000a42:	3204      	adds	r2, #4
 8000a44:	0153      	lsls	r3, r2, #5
 8000a46:	d537      	bpl.n	8000ab8 <__aeabi_fmul+0x254>
 8000a48:	2001      	movs	r0, #1
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	e747      	b.n	80008de <__aeabi_fmul+0x7a>
 8000a4e:	0c21      	lsrs	r1, r4, #16
 8000a50:	464a      	mov	r2, r9
 8000a52:	0424      	lsls	r4, r4, #16
 8000a54:	0c24      	lsrs	r4, r4, #16
 8000a56:	0027      	movs	r7, r4
 8000a58:	0c10      	lsrs	r0, r2, #16
 8000a5a:	0412      	lsls	r2, r2, #16
 8000a5c:	0c12      	lsrs	r2, r2, #16
 8000a5e:	4344      	muls	r4, r0
 8000a60:	4357      	muls	r7, r2
 8000a62:	4348      	muls	r0, r1
 8000a64:	4351      	muls	r1, r2
 8000a66:	0c3a      	lsrs	r2, r7, #16
 8000a68:	1909      	adds	r1, r1, r4
 8000a6a:	1852      	adds	r2, r2, r1
 8000a6c:	4294      	cmp	r4, r2
 8000a6e:	d903      	bls.n	8000a78 <__aeabi_fmul+0x214>
 8000a70:	2180      	movs	r1, #128	@ 0x80
 8000a72:	0249      	lsls	r1, r1, #9
 8000a74:	468c      	mov	ip, r1
 8000a76:	4460      	add	r0, ip
 8000a78:	043f      	lsls	r7, r7, #16
 8000a7a:	0411      	lsls	r1, r2, #16
 8000a7c:	0c3f      	lsrs	r7, r7, #16
 8000a7e:	19c9      	adds	r1, r1, r7
 8000a80:	018c      	lsls	r4, r1, #6
 8000a82:	1e67      	subs	r7, r4, #1
 8000a84:	41bc      	sbcs	r4, r7
 8000a86:	0c12      	lsrs	r2, r2, #16
 8000a88:	0e89      	lsrs	r1, r1, #26
 8000a8a:	1812      	adds	r2, r2, r0
 8000a8c:	430c      	orrs	r4, r1
 8000a8e:	0192      	lsls	r2, r2, #6
 8000a90:	4314      	orrs	r4, r2
 8000a92:	0112      	lsls	r2, r2, #4
 8000a94:	d50e      	bpl.n	8000ab4 <__aeabi_fmul+0x250>
 8000a96:	2301      	movs	r3, #1
 8000a98:	0862      	lsrs	r2, r4, #1
 8000a9a:	401c      	ands	r4, r3
 8000a9c:	4314      	orrs	r4, r2
 8000a9e:	e749      	b.n	8000934 <__aeabi_fmul+0xd0>
 8000aa0:	003e      	movs	r6, r7
 8000aa2:	46a1      	mov	r9, r4
 8000aa4:	2280      	movs	r2, #128	@ 0x80
 8000aa6:	464b      	mov	r3, r9
 8000aa8:	03d2      	lsls	r2, r2, #15
 8000aaa:	431a      	orrs	r2, r3
 8000aac:	0252      	lsls	r2, r2, #9
 8000aae:	20ff      	movs	r0, #255	@ 0xff
 8000ab0:	0a52      	lsrs	r2, r2, #9
 8000ab2:	e714      	b.n	80008de <__aeabi_fmul+0x7a>
 8000ab4:	001d      	movs	r5, r3
 8000ab6:	e73d      	b.n	8000934 <__aeabi_fmul+0xd0>
 8000ab8:	0192      	lsls	r2, r2, #6
 8000aba:	2000      	movs	r0, #0
 8000abc:	0a52      	lsrs	r2, r2, #9
 8000abe:	e70e      	b.n	80008de <__aeabi_fmul+0x7a>
 8000ac0:	290f      	cmp	r1, #15
 8000ac2:	d1ed      	bne.n	8000aa0 <__aeabi_fmul+0x23c>
 8000ac4:	2280      	movs	r2, #128	@ 0x80
 8000ac6:	464b      	mov	r3, r9
 8000ac8:	03d2      	lsls	r2, r2, #15
 8000aca:	4213      	tst	r3, r2
 8000acc:	d0ea      	beq.n	8000aa4 <__aeabi_fmul+0x240>
 8000ace:	4214      	tst	r4, r2
 8000ad0:	d1e8      	bne.n	8000aa4 <__aeabi_fmul+0x240>
 8000ad2:	003e      	movs	r6, r7
 8000ad4:	20ff      	movs	r0, #255	@ 0xff
 8000ad6:	4322      	orrs	r2, r4
 8000ad8:	e701      	b.n	80008de <__aeabi_fmul+0x7a>
 8000ada:	46c0      	nop			@ (mov r8, r8)
 8000adc:	f7ffffff 	.word	0xf7ffffff

08000ae0 <__aeabi_fsub>:
 8000ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ae2:	4647      	mov	r7, r8
 8000ae4:	46ce      	mov	lr, r9
 8000ae6:	024e      	lsls	r6, r1, #9
 8000ae8:	0243      	lsls	r3, r0, #9
 8000aea:	0045      	lsls	r5, r0, #1
 8000aec:	0a72      	lsrs	r2, r6, #9
 8000aee:	0fc4      	lsrs	r4, r0, #31
 8000af0:	0048      	lsls	r0, r1, #1
 8000af2:	b580      	push	{r7, lr}
 8000af4:	4694      	mov	ip, r2
 8000af6:	0a5f      	lsrs	r7, r3, #9
 8000af8:	0e2d      	lsrs	r5, r5, #24
 8000afa:	099b      	lsrs	r3, r3, #6
 8000afc:	0e00      	lsrs	r0, r0, #24
 8000afe:	0fc9      	lsrs	r1, r1, #31
 8000b00:	09b6      	lsrs	r6, r6, #6
 8000b02:	28ff      	cmp	r0, #255	@ 0xff
 8000b04:	d024      	beq.n	8000b50 <__aeabi_fsub+0x70>
 8000b06:	2201      	movs	r2, #1
 8000b08:	4051      	eors	r1, r2
 8000b0a:	1a2a      	subs	r2, r5, r0
 8000b0c:	428c      	cmp	r4, r1
 8000b0e:	d00f      	beq.n	8000b30 <__aeabi_fsub+0x50>
 8000b10:	2a00      	cmp	r2, #0
 8000b12:	dc00      	bgt.n	8000b16 <__aeabi_fsub+0x36>
 8000b14:	e16a      	b.n	8000dec <__aeabi_fsub+0x30c>
 8000b16:	2800      	cmp	r0, #0
 8000b18:	d135      	bne.n	8000b86 <__aeabi_fsub+0xa6>
 8000b1a:	2e00      	cmp	r6, #0
 8000b1c:	d100      	bne.n	8000b20 <__aeabi_fsub+0x40>
 8000b1e:	e0a2      	b.n	8000c66 <__aeabi_fsub+0x186>
 8000b20:	1e51      	subs	r1, r2, #1
 8000b22:	2a01      	cmp	r2, #1
 8000b24:	d100      	bne.n	8000b28 <__aeabi_fsub+0x48>
 8000b26:	e124      	b.n	8000d72 <__aeabi_fsub+0x292>
 8000b28:	2aff      	cmp	r2, #255	@ 0xff
 8000b2a:	d021      	beq.n	8000b70 <__aeabi_fsub+0x90>
 8000b2c:	000a      	movs	r2, r1
 8000b2e:	e02f      	b.n	8000b90 <__aeabi_fsub+0xb0>
 8000b30:	2a00      	cmp	r2, #0
 8000b32:	dc00      	bgt.n	8000b36 <__aeabi_fsub+0x56>
 8000b34:	e167      	b.n	8000e06 <__aeabi_fsub+0x326>
 8000b36:	2800      	cmp	r0, #0
 8000b38:	d05e      	beq.n	8000bf8 <__aeabi_fsub+0x118>
 8000b3a:	2dff      	cmp	r5, #255	@ 0xff
 8000b3c:	d018      	beq.n	8000b70 <__aeabi_fsub+0x90>
 8000b3e:	2180      	movs	r1, #128	@ 0x80
 8000b40:	04c9      	lsls	r1, r1, #19
 8000b42:	430e      	orrs	r6, r1
 8000b44:	2a1b      	cmp	r2, #27
 8000b46:	dc00      	bgt.n	8000b4a <__aeabi_fsub+0x6a>
 8000b48:	e076      	b.n	8000c38 <__aeabi_fsub+0x158>
 8000b4a:	002a      	movs	r2, r5
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	e032      	b.n	8000bb6 <__aeabi_fsub+0xd6>
 8000b50:	002a      	movs	r2, r5
 8000b52:	3aff      	subs	r2, #255	@ 0xff
 8000b54:	4691      	mov	r9, r2
 8000b56:	2e00      	cmp	r6, #0
 8000b58:	d042      	beq.n	8000be0 <__aeabi_fsub+0x100>
 8000b5a:	428c      	cmp	r4, r1
 8000b5c:	d055      	beq.n	8000c0a <__aeabi_fsub+0x12a>
 8000b5e:	464a      	mov	r2, r9
 8000b60:	2a00      	cmp	r2, #0
 8000b62:	d100      	bne.n	8000b66 <__aeabi_fsub+0x86>
 8000b64:	e09c      	b.n	8000ca0 <__aeabi_fsub+0x1c0>
 8000b66:	2d00      	cmp	r5, #0
 8000b68:	d100      	bne.n	8000b6c <__aeabi_fsub+0x8c>
 8000b6a:	e077      	b.n	8000c5c <__aeabi_fsub+0x17c>
 8000b6c:	000c      	movs	r4, r1
 8000b6e:	0033      	movs	r3, r6
 8000b70:	08db      	lsrs	r3, r3, #3
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d100      	bne.n	8000b78 <__aeabi_fsub+0x98>
 8000b76:	e06e      	b.n	8000c56 <__aeabi_fsub+0x176>
 8000b78:	2280      	movs	r2, #128	@ 0x80
 8000b7a:	03d2      	lsls	r2, r2, #15
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	025b      	lsls	r3, r3, #9
 8000b80:	20ff      	movs	r0, #255	@ 0xff
 8000b82:	0a5b      	lsrs	r3, r3, #9
 8000b84:	e024      	b.n	8000bd0 <__aeabi_fsub+0xf0>
 8000b86:	2dff      	cmp	r5, #255	@ 0xff
 8000b88:	d0f2      	beq.n	8000b70 <__aeabi_fsub+0x90>
 8000b8a:	2180      	movs	r1, #128	@ 0x80
 8000b8c:	04c9      	lsls	r1, r1, #19
 8000b8e:	430e      	orrs	r6, r1
 8000b90:	2101      	movs	r1, #1
 8000b92:	2a1b      	cmp	r2, #27
 8000b94:	dc08      	bgt.n	8000ba8 <__aeabi_fsub+0xc8>
 8000b96:	0031      	movs	r1, r6
 8000b98:	2020      	movs	r0, #32
 8000b9a:	40d1      	lsrs	r1, r2
 8000b9c:	1a82      	subs	r2, r0, r2
 8000b9e:	4096      	lsls	r6, r2
 8000ba0:	0032      	movs	r2, r6
 8000ba2:	1e50      	subs	r0, r2, #1
 8000ba4:	4182      	sbcs	r2, r0
 8000ba6:	4311      	orrs	r1, r2
 8000ba8:	1a5b      	subs	r3, r3, r1
 8000baa:	015a      	lsls	r2, r3, #5
 8000bac:	d460      	bmi.n	8000c70 <__aeabi_fsub+0x190>
 8000bae:	2107      	movs	r1, #7
 8000bb0:	002a      	movs	r2, r5
 8000bb2:	4019      	ands	r1, r3
 8000bb4:	d057      	beq.n	8000c66 <__aeabi_fsub+0x186>
 8000bb6:	210f      	movs	r1, #15
 8000bb8:	4019      	ands	r1, r3
 8000bba:	2904      	cmp	r1, #4
 8000bbc:	d000      	beq.n	8000bc0 <__aeabi_fsub+0xe0>
 8000bbe:	3304      	adds	r3, #4
 8000bc0:	0159      	lsls	r1, r3, #5
 8000bc2:	d550      	bpl.n	8000c66 <__aeabi_fsub+0x186>
 8000bc4:	1c50      	adds	r0, r2, #1
 8000bc6:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc8:	d045      	beq.n	8000c56 <__aeabi_fsub+0x176>
 8000bca:	019b      	lsls	r3, r3, #6
 8000bcc:	b2c0      	uxtb	r0, r0
 8000bce:	0a5b      	lsrs	r3, r3, #9
 8000bd0:	05c0      	lsls	r0, r0, #23
 8000bd2:	4318      	orrs	r0, r3
 8000bd4:	07e4      	lsls	r4, r4, #31
 8000bd6:	4320      	orrs	r0, r4
 8000bd8:	bcc0      	pop	{r6, r7}
 8000bda:	46b9      	mov	r9, r7
 8000bdc:	46b0      	mov	r8, r6
 8000bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000be0:	2201      	movs	r2, #1
 8000be2:	4051      	eors	r1, r2
 8000be4:	428c      	cmp	r4, r1
 8000be6:	d1ba      	bne.n	8000b5e <__aeabi_fsub+0x7e>
 8000be8:	464a      	mov	r2, r9
 8000bea:	2a00      	cmp	r2, #0
 8000bec:	d010      	beq.n	8000c10 <__aeabi_fsub+0x130>
 8000bee:	2d00      	cmp	r5, #0
 8000bf0:	d100      	bne.n	8000bf4 <__aeabi_fsub+0x114>
 8000bf2:	e098      	b.n	8000d26 <__aeabi_fsub+0x246>
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	e7bb      	b.n	8000b70 <__aeabi_fsub+0x90>
 8000bf8:	2e00      	cmp	r6, #0
 8000bfa:	d034      	beq.n	8000c66 <__aeabi_fsub+0x186>
 8000bfc:	1e51      	subs	r1, r2, #1
 8000bfe:	2a01      	cmp	r2, #1
 8000c00:	d06e      	beq.n	8000ce0 <__aeabi_fsub+0x200>
 8000c02:	2aff      	cmp	r2, #255	@ 0xff
 8000c04:	d0b4      	beq.n	8000b70 <__aeabi_fsub+0x90>
 8000c06:	000a      	movs	r2, r1
 8000c08:	e79c      	b.n	8000b44 <__aeabi_fsub+0x64>
 8000c0a:	2a00      	cmp	r2, #0
 8000c0c:	d000      	beq.n	8000c10 <__aeabi_fsub+0x130>
 8000c0e:	e088      	b.n	8000d22 <__aeabi_fsub+0x242>
 8000c10:	20fe      	movs	r0, #254	@ 0xfe
 8000c12:	1c6a      	adds	r2, r5, #1
 8000c14:	4210      	tst	r0, r2
 8000c16:	d000      	beq.n	8000c1a <__aeabi_fsub+0x13a>
 8000c18:	e092      	b.n	8000d40 <__aeabi_fsub+0x260>
 8000c1a:	2d00      	cmp	r5, #0
 8000c1c:	d000      	beq.n	8000c20 <__aeabi_fsub+0x140>
 8000c1e:	e0a4      	b.n	8000d6a <__aeabi_fsub+0x28a>
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d100      	bne.n	8000c26 <__aeabi_fsub+0x146>
 8000c24:	e0cb      	b.n	8000dbe <__aeabi_fsub+0x2de>
 8000c26:	2e00      	cmp	r6, #0
 8000c28:	d000      	beq.n	8000c2c <__aeabi_fsub+0x14c>
 8000c2a:	e0ca      	b.n	8000dc2 <__aeabi_fsub+0x2e2>
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	08db      	lsrs	r3, r3, #3
 8000c30:	025b      	lsls	r3, r3, #9
 8000c32:	0a5b      	lsrs	r3, r3, #9
 8000c34:	b2d0      	uxtb	r0, r2
 8000c36:	e7cb      	b.n	8000bd0 <__aeabi_fsub+0xf0>
 8000c38:	0031      	movs	r1, r6
 8000c3a:	2020      	movs	r0, #32
 8000c3c:	40d1      	lsrs	r1, r2
 8000c3e:	1a82      	subs	r2, r0, r2
 8000c40:	4096      	lsls	r6, r2
 8000c42:	0032      	movs	r2, r6
 8000c44:	1e50      	subs	r0, r2, #1
 8000c46:	4182      	sbcs	r2, r0
 8000c48:	430a      	orrs	r2, r1
 8000c4a:	189b      	adds	r3, r3, r2
 8000c4c:	015a      	lsls	r2, r3, #5
 8000c4e:	d5ae      	bpl.n	8000bae <__aeabi_fsub+0xce>
 8000c50:	1c6a      	adds	r2, r5, #1
 8000c52:	2dfe      	cmp	r5, #254	@ 0xfe
 8000c54:	d14a      	bne.n	8000cec <__aeabi_fsub+0x20c>
 8000c56:	20ff      	movs	r0, #255	@ 0xff
 8000c58:	2300      	movs	r3, #0
 8000c5a:	e7b9      	b.n	8000bd0 <__aeabi_fsub+0xf0>
 8000c5c:	22ff      	movs	r2, #255	@ 0xff
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d14b      	bne.n	8000cfa <__aeabi_fsub+0x21a>
 8000c62:	000c      	movs	r4, r1
 8000c64:	0033      	movs	r3, r6
 8000c66:	08db      	lsrs	r3, r3, #3
 8000c68:	2aff      	cmp	r2, #255	@ 0xff
 8000c6a:	d100      	bne.n	8000c6e <__aeabi_fsub+0x18e>
 8000c6c:	e781      	b.n	8000b72 <__aeabi_fsub+0x92>
 8000c6e:	e7df      	b.n	8000c30 <__aeabi_fsub+0x150>
 8000c70:	019f      	lsls	r7, r3, #6
 8000c72:	09bf      	lsrs	r7, r7, #6
 8000c74:	0038      	movs	r0, r7
 8000c76:	f000 f985 	bl	8000f84 <__clzsi2>
 8000c7a:	3805      	subs	r0, #5
 8000c7c:	4087      	lsls	r7, r0
 8000c7e:	4285      	cmp	r5, r0
 8000c80:	dc21      	bgt.n	8000cc6 <__aeabi_fsub+0x1e6>
 8000c82:	003b      	movs	r3, r7
 8000c84:	2120      	movs	r1, #32
 8000c86:	1b42      	subs	r2, r0, r5
 8000c88:	3201      	adds	r2, #1
 8000c8a:	40d3      	lsrs	r3, r2
 8000c8c:	1a8a      	subs	r2, r1, r2
 8000c8e:	4097      	lsls	r7, r2
 8000c90:	1e7a      	subs	r2, r7, #1
 8000c92:	4197      	sbcs	r7, r2
 8000c94:	2200      	movs	r2, #0
 8000c96:	433b      	orrs	r3, r7
 8000c98:	0759      	lsls	r1, r3, #29
 8000c9a:	d000      	beq.n	8000c9e <__aeabi_fsub+0x1be>
 8000c9c:	e78b      	b.n	8000bb6 <__aeabi_fsub+0xd6>
 8000c9e:	e78f      	b.n	8000bc0 <__aeabi_fsub+0xe0>
 8000ca0:	20fe      	movs	r0, #254	@ 0xfe
 8000ca2:	1c6a      	adds	r2, r5, #1
 8000ca4:	4210      	tst	r0, r2
 8000ca6:	d112      	bne.n	8000cce <__aeabi_fsub+0x1ee>
 8000ca8:	2d00      	cmp	r5, #0
 8000caa:	d152      	bne.n	8000d52 <__aeabi_fsub+0x272>
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d07c      	beq.n	8000daa <__aeabi_fsub+0x2ca>
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0bb      	beq.n	8000c2c <__aeabi_fsub+0x14c>
 8000cb4:	1b9a      	subs	r2, r3, r6
 8000cb6:	0150      	lsls	r0, r2, #5
 8000cb8:	d400      	bmi.n	8000cbc <__aeabi_fsub+0x1dc>
 8000cba:	e08b      	b.n	8000dd4 <__aeabi_fsub+0x2f4>
 8000cbc:	2401      	movs	r4, #1
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	1af3      	subs	r3, r6, r3
 8000cc2:	400c      	ands	r4, r1
 8000cc4:	e7e8      	b.n	8000c98 <__aeabi_fsub+0x1b8>
 8000cc6:	4b56      	ldr	r3, [pc, #344]	@ (8000e20 <__aeabi_fsub+0x340>)
 8000cc8:	1a2a      	subs	r2, r5, r0
 8000cca:	403b      	ands	r3, r7
 8000ccc:	e7e4      	b.n	8000c98 <__aeabi_fsub+0x1b8>
 8000cce:	1b9f      	subs	r7, r3, r6
 8000cd0:	017a      	lsls	r2, r7, #5
 8000cd2:	d446      	bmi.n	8000d62 <__aeabi_fsub+0x282>
 8000cd4:	2f00      	cmp	r7, #0
 8000cd6:	d1cd      	bne.n	8000c74 <__aeabi_fsub+0x194>
 8000cd8:	2400      	movs	r4, #0
 8000cda:	2000      	movs	r0, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	e777      	b.n	8000bd0 <__aeabi_fsub+0xf0>
 8000ce0:	199b      	adds	r3, r3, r6
 8000ce2:	2501      	movs	r5, #1
 8000ce4:	3201      	adds	r2, #1
 8000ce6:	0159      	lsls	r1, r3, #5
 8000ce8:	d400      	bmi.n	8000cec <__aeabi_fsub+0x20c>
 8000cea:	e760      	b.n	8000bae <__aeabi_fsub+0xce>
 8000cec:	2101      	movs	r1, #1
 8000cee:	484d      	ldr	r0, [pc, #308]	@ (8000e24 <__aeabi_fsub+0x344>)
 8000cf0:	4019      	ands	r1, r3
 8000cf2:	085b      	lsrs	r3, r3, #1
 8000cf4:	4003      	ands	r3, r0
 8000cf6:	430b      	orrs	r3, r1
 8000cf8:	e7ce      	b.n	8000c98 <__aeabi_fsub+0x1b8>
 8000cfa:	1e57      	subs	r7, r2, #1
 8000cfc:	2a01      	cmp	r2, #1
 8000cfe:	d05a      	beq.n	8000db6 <__aeabi_fsub+0x2d6>
 8000d00:	000c      	movs	r4, r1
 8000d02:	2aff      	cmp	r2, #255	@ 0xff
 8000d04:	d033      	beq.n	8000d6e <__aeabi_fsub+0x28e>
 8000d06:	2201      	movs	r2, #1
 8000d08:	2f1b      	cmp	r7, #27
 8000d0a:	dc07      	bgt.n	8000d1c <__aeabi_fsub+0x23c>
 8000d0c:	2120      	movs	r1, #32
 8000d0e:	1bc9      	subs	r1, r1, r7
 8000d10:	001a      	movs	r2, r3
 8000d12:	408b      	lsls	r3, r1
 8000d14:	40fa      	lsrs	r2, r7
 8000d16:	1e59      	subs	r1, r3, #1
 8000d18:	418b      	sbcs	r3, r1
 8000d1a:	431a      	orrs	r2, r3
 8000d1c:	0005      	movs	r5, r0
 8000d1e:	1ab3      	subs	r3, r6, r2
 8000d20:	e743      	b.n	8000baa <__aeabi_fsub+0xca>
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d123      	bne.n	8000d6e <__aeabi_fsub+0x28e>
 8000d26:	22ff      	movs	r2, #255	@ 0xff
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d09b      	beq.n	8000c64 <__aeabi_fsub+0x184>
 8000d2c:	1e51      	subs	r1, r2, #1
 8000d2e:	2a01      	cmp	r2, #1
 8000d30:	d0d6      	beq.n	8000ce0 <__aeabi_fsub+0x200>
 8000d32:	2aff      	cmp	r2, #255	@ 0xff
 8000d34:	d01b      	beq.n	8000d6e <__aeabi_fsub+0x28e>
 8000d36:	291b      	cmp	r1, #27
 8000d38:	dd2c      	ble.n	8000d94 <__aeabi_fsub+0x2b4>
 8000d3a:	0002      	movs	r2, r0
 8000d3c:	1c73      	adds	r3, r6, #1
 8000d3e:	e73a      	b.n	8000bb6 <__aeabi_fsub+0xd6>
 8000d40:	2aff      	cmp	r2, #255	@ 0xff
 8000d42:	d088      	beq.n	8000c56 <__aeabi_fsub+0x176>
 8000d44:	199b      	adds	r3, r3, r6
 8000d46:	085b      	lsrs	r3, r3, #1
 8000d48:	0759      	lsls	r1, r3, #29
 8000d4a:	d000      	beq.n	8000d4e <__aeabi_fsub+0x26e>
 8000d4c:	e733      	b.n	8000bb6 <__aeabi_fsub+0xd6>
 8000d4e:	08db      	lsrs	r3, r3, #3
 8000d50:	e76e      	b.n	8000c30 <__aeabi_fsub+0x150>
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d110      	bne.n	8000d78 <__aeabi_fsub+0x298>
 8000d56:	2e00      	cmp	r6, #0
 8000d58:	d043      	beq.n	8000de2 <__aeabi_fsub+0x302>
 8000d5a:	2401      	movs	r4, #1
 8000d5c:	0033      	movs	r3, r6
 8000d5e:	400c      	ands	r4, r1
 8000d60:	e706      	b.n	8000b70 <__aeabi_fsub+0x90>
 8000d62:	2401      	movs	r4, #1
 8000d64:	1af7      	subs	r7, r6, r3
 8000d66:	400c      	ands	r4, r1
 8000d68:	e784      	b.n	8000c74 <__aeabi_fsub+0x194>
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d104      	bne.n	8000d78 <__aeabi_fsub+0x298>
 8000d6e:	0033      	movs	r3, r6
 8000d70:	e6fe      	b.n	8000b70 <__aeabi_fsub+0x90>
 8000d72:	2501      	movs	r5, #1
 8000d74:	1b9b      	subs	r3, r3, r6
 8000d76:	e718      	b.n	8000baa <__aeabi_fsub+0xca>
 8000d78:	2e00      	cmp	r6, #0
 8000d7a:	d100      	bne.n	8000d7e <__aeabi_fsub+0x29e>
 8000d7c:	e6f8      	b.n	8000b70 <__aeabi_fsub+0x90>
 8000d7e:	2280      	movs	r2, #128	@ 0x80
 8000d80:	03d2      	lsls	r2, r2, #15
 8000d82:	4297      	cmp	r7, r2
 8000d84:	d304      	bcc.n	8000d90 <__aeabi_fsub+0x2b0>
 8000d86:	4594      	cmp	ip, r2
 8000d88:	d202      	bcs.n	8000d90 <__aeabi_fsub+0x2b0>
 8000d8a:	2401      	movs	r4, #1
 8000d8c:	0033      	movs	r3, r6
 8000d8e:	400c      	ands	r4, r1
 8000d90:	08db      	lsrs	r3, r3, #3
 8000d92:	e6f1      	b.n	8000b78 <__aeabi_fsub+0x98>
 8000d94:	001a      	movs	r2, r3
 8000d96:	2520      	movs	r5, #32
 8000d98:	40ca      	lsrs	r2, r1
 8000d9a:	1a69      	subs	r1, r5, r1
 8000d9c:	408b      	lsls	r3, r1
 8000d9e:	1e59      	subs	r1, r3, #1
 8000da0:	418b      	sbcs	r3, r1
 8000da2:	4313      	orrs	r3, r2
 8000da4:	0005      	movs	r5, r0
 8000da6:	199b      	adds	r3, r3, r6
 8000da8:	e750      	b.n	8000c4c <__aeabi_fsub+0x16c>
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d094      	beq.n	8000cd8 <__aeabi_fsub+0x1f8>
 8000dae:	2401      	movs	r4, #1
 8000db0:	0033      	movs	r3, r6
 8000db2:	400c      	ands	r4, r1
 8000db4:	e73a      	b.n	8000c2c <__aeabi_fsub+0x14c>
 8000db6:	000c      	movs	r4, r1
 8000db8:	2501      	movs	r5, #1
 8000dba:	1af3      	subs	r3, r6, r3
 8000dbc:	e6f5      	b.n	8000baa <__aeabi_fsub+0xca>
 8000dbe:	0033      	movs	r3, r6
 8000dc0:	e734      	b.n	8000c2c <__aeabi_fsub+0x14c>
 8000dc2:	199b      	adds	r3, r3, r6
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	0159      	lsls	r1, r3, #5
 8000dc8:	d5c1      	bpl.n	8000d4e <__aeabi_fsub+0x26e>
 8000dca:	4a15      	ldr	r2, [pc, #84]	@ (8000e20 <__aeabi_fsub+0x340>)
 8000dcc:	4013      	ands	r3, r2
 8000dce:	08db      	lsrs	r3, r3, #3
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	e72d      	b.n	8000c30 <__aeabi_fsub+0x150>
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	d100      	bne.n	8000dda <__aeabi_fsub+0x2fa>
 8000dd8:	e77e      	b.n	8000cd8 <__aeabi_fsub+0x1f8>
 8000dda:	0013      	movs	r3, r2
 8000ddc:	2200      	movs	r2, #0
 8000dde:	08db      	lsrs	r3, r3, #3
 8000de0:	e726      	b.n	8000c30 <__aeabi_fsub+0x150>
 8000de2:	2380      	movs	r3, #128	@ 0x80
 8000de4:	2400      	movs	r4, #0
 8000de6:	20ff      	movs	r0, #255	@ 0xff
 8000de8:	03db      	lsls	r3, r3, #15
 8000dea:	e6f1      	b.n	8000bd0 <__aeabi_fsub+0xf0>
 8000dec:	2a00      	cmp	r2, #0
 8000dee:	d100      	bne.n	8000df2 <__aeabi_fsub+0x312>
 8000df0:	e756      	b.n	8000ca0 <__aeabi_fsub+0x1c0>
 8000df2:	1b47      	subs	r7, r0, r5
 8000df4:	003a      	movs	r2, r7
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d100      	bne.n	8000dfc <__aeabi_fsub+0x31c>
 8000dfa:	e730      	b.n	8000c5e <__aeabi_fsub+0x17e>
 8000dfc:	2280      	movs	r2, #128	@ 0x80
 8000dfe:	04d2      	lsls	r2, r2, #19
 8000e00:	000c      	movs	r4, r1
 8000e02:	4313      	orrs	r3, r2
 8000e04:	e77f      	b.n	8000d06 <__aeabi_fsub+0x226>
 8000e06:	2a00      	cmp	r2, #0
 8000e08:	d100      	bne.n	8000e0c <__aeabi_fsub+0x32c>
 8000e0a:	e701      	b.n	8000c10 <__aeabi_fsub+0x130>
 8000e0c:	1b41      	subs	r1, r0, r5
 8000e0e:	2d00      	cmp	r5, #0
 8000e10:	d101      	bne.n	8000e16 <__aeabi_fsub+0x336>
 8000e12:	000a      	movs	r2, r1
 8000e14:	e788      	b.n	8000d28 <__aeabi_fsub+0x248>
 8000e16:	2280      	movs	r2, #128	@ 0x80
 8000e18:	04d2      	lsls	r2, r2, #19
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	e78b      	b.n	8000d36 <__aeabi_fsub+0x256>
 8000e1e:	46c0      	nop			@ (mov r8, r8)
 8000e20:	fbffffff 	.word	0xfbffffff
 8000e24:	7dffffff 	.word	0x7dffffff

08000e28 <__aeabi_f2iz>:
 8000e28:	0241      	lsls	r1, r0, #9
 8000e2a:	0042      	lsls	r2, r0, #1
 8000e2c:	0fc3      	lsrs	r3, r0, #31
 8000e2e:	0a49      	lsrs	r1, r1, #9
 8000e30:	2000      	movs	r0, #0
 8000e32:	0e12      	lsrs	r2, r2, #24
 8000e34:	2a7e      	cmp	r2, #126	@ 0x7e
 8000e36:	dd03      	ble.n	8000e40 <__aeabi_f2iz+0x18>
 8000e38:	2a9d      	cmp	r2, #157	@ 0x9d
 8000e3a:	dd02      	ble.n	8000e42 <__aeabi_f2iz+0x1a>
 8000e3c:	4a09      	ldr	r2, [pc, #36]	@ (8000e64 <__aeabi_f2iz+0x3c>)
 8000e3e:	1898      	adds	r0, r3, r2
 8000e40:	4770      	bx	lr
 8000e42:	2080      	movs	r0, #128	@ 0x80
 8000e44:	0400      	lsls	r0, r0, #16
 8000e46:	4301      	orrs	r1, r0
 8000e48:	2a95      	cmp	r2, #149	@ 0x95
 8000e4a:	dc07      	bgt.n	8000e5c <__aeabi_f2iz+0x34>
 8000e4c:	2096      	movs	r0, #150	@ 0x96
 8000e4e:	1a82      	subs	r2, r0, r2
 8000e50:	40d1      	lsrs	r1, r2
 8000e52:	4248      	negs	r0, r1
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d1f3      	bne.n	8000e40 <__aeabi_f2iz+0x18>
 8000e58:	0008      	movs	r0, r1
 8000e5a:	e7f1      	b.n	8000e40 <__aeabi_f2iz+0x18>
 8000e5c:	3a96      	subs	r2, #150	@ 0x96
 8000e5e:	4091      	lsls	r1, r2
 8000e60:	e7f7      	b.n	8000e52 <__aeabi_f2iz+0x2a>
 8000e62:	46c0      	nop			@ (mov r8, r8)
 8000e64:	7fffffff 	.word	0x7fffffff

08000e68 <__aeabi_i2f>:
 8000e68:	b570      	push	{r4, r5, r6, lr}
 8000e6a:	2800      	cmp	r0, #0
 8000e6c:	d013      	beq.n	8000e96 <__aeabi_i2f+0x2e>
 8000e6e:	17c3      	asrs	r3, r0, #31
 8000e70:	18c5      	adds	r5, r0, r3
 8000e72:	405d      	eors	r5, r3
 8000e74:	0fc4      	lsrs	r4, r0, #31
 8000e76:	0028      	movs	r0, r5
 8000e78:	f000 f884 	bl	8000f84 <__clzsi2>
 8000e7c:	239e      	movs	r3, #158	@ 0x9e
 8000e7e:	0001      	movs	r1, r0
 8000e80:	1a1b      	subs	r3, r3, r0
 8000e82:	2b96      	cmp	r3, #150	@ 0x96
 8000e84:	dc0f      	bgt.n	8000ea6 <__aeabi_i2f+0x3e>
 8000e86:	2808      	cmp	r0, #8
 8000e88:	d034      	beq.n	8000ef4 <__aeabi_i2f+0x8c>
 8000e8a:	3908      	subs	r1, #8
 8000e8c:	408d      	lsls	r5, r1
 8000e8e:	026d      	lsls	r5, r5, #9
 8000e90:	0a6d      	lsrs	r5, r5, #9
 8000e92:	b2d8      	uxtb	r0, r3
 8000e94:	e002      	b.n	8000e9c <__aeabi_i2f+0x34>
 8000e96:	2400      	movs	r4, #0
 8000e98:	2000      	movs	r0, #0
 8000e9a:	2500      	movs	r5, #0
 8000e9c:	05c0      	lsls	r0, r0, #23
 8000e9e:	4328      	orrs	r0, r5
 8000ea0:	07e4      	lsls	r4, r4, #31
 8000ea2:	4320      	orrs	r0, r4
 8000ea4:	bd70      	pop	{r4, r5, r6, pc}
 8000ea6:	2b99      	cmp	r3, #153	@ 0x99
 8000ea8:	dc16      	bgt.n	8000ed8 <__aeabi_i2f+0x70>
 8000eaa:	1f42      	subs	r2, r0, #5
 8000eac:	2805      	cmp	r0, #5
 8000eae:	d000      	beq.n	8000eb2 <__aeabi_i2f+0x4a>
 8000eb0:	4095      	lsls	r5, r2
 8000eb2:	002a      	movs	r2, r5
 8000eb4:	4811      	ldr	r0, [pc, #68]	@ (8000efc <__aeabi_i2f+0x94>)
 8000eb6:	4002      	ands	r2, r0
 8000eb8:	076e      	lsls	r6, r5, #29
 8000eba:	d009      	beq.n	8000ed0 <__aeabi_i2f+0x68>
 8000ebc:	260f      	movs	r6, #15
 8000ebe:	4035      	ands	r5, r6
 8000ec0:	2d04      	cmp	r5, #4
 8000ec2:	d005      	beq.n	8000ed0 <__aeabi_i2f+0x68>
 8000ec4:	3204      	adds	r2, #4
 8000ec6:	0155      	lsls	r5, r2, #5
 8000ec8:	d502      	bpl.n	8000ed0 <__aeabi_i2f+0x68>
 8000eca:	239f      	movs	r3, #159	@ 0x9f
 8000ecc:	4002      	ands	r2, r0
 8000ece:	1a5b      	subs	r3, r3, r1
 8000ed0:	0192      	lsls	r2, r2, #6
 8000ed2:	0a55      	lsrs	r5, r2, #9
 8000ed4:	b2d8      	uxtb	r0, r3
 8000ed6:	e7e1      	b.n	8000e9c <__aeabi_i2f+0x34>
 8000ed8:	2205      	movs	r2, #5
 8000eda:	1a12      	subs	r2, r2, r0
 8000edc:	0028      	movs	r0, r5
 8000ede:	40d0      	lsrs	r0, r2
 8000ee0:	0002      	movs	r2, r0
 8000ee2:	0008      	movs	r0, r1
 8000ee4:	301b      	adds	r0, #27
 8000ee6:	4085      	lsls	r5, r0
 8000ee8:	0028      	movs	r0, r5
 8000eea:	1e45      	subs	r5, r0, #1
 8000eec:	41a8      	sbcs	r0, r5
 8000eee:	4302      	orrs	r2, r0
 8000ef0:	0015      	movs	r5, r2
 8000ef2:	e7de      	b.n	8000eb2 <__aeabi_i2f+0x4a>
 8000ef4:	026d      	lsls	r5, r5, #9
 8000ef6:	2096      	movs	r0, #150	@ 0x96
 8000ef8:	0a6d      	lsrs	r5, r5, #9
 8000efa:	e7cf      	b.n	8000e9c <__aeabi_i2f+0x34>
 8000efc:	fbffffff 	.word	0xfbffffff

08000f00 <__aeabi_ui2f>:
 8000f00:	b570      	push	{r4, r5, r6, lr}
 8000f02:	1e04      	subs	r4, r0, #0
 8000f04:	d00e      	beq.n	8000f24 <__aeabi_ui2f+0x24>
 8000f06:	f000 f83d 	bl	8000f84 <__clzsi2>
 8000f0a:	239e      	movs	r3, #158	@ 0x9e
 8000f0c:	0001      	movs	r1, r0
 8000f0e:	1a1b      	subs	r3, r3, r0
 8000f10:	2b96      	cmp	r3, #150	@ 0x96
 8000f12:	dc0c      	bgt.n	8000f2e <__aeabi_ui2f+0x2e>
 8000f14:	2808      	cmp	r0, #8
 8000f16:	d02f      	beq.n	8000f78 <__aeabi_ui2f+0x78>
 8000f18:	3908      	subs	r1, #8
 8000f1a:	408c      	lsls	r4, r1
 8000f1c:	0264      	lsls	r4, r4, #9
 8000f1e:	0a64      	lsrs	r4, r4, #9
 8000f20:	b2d8      	uxtb	r0, r3
 8000f22:	e001      	b.n	8000f28 <__aeabi_ui2f+0x28>
 8000f24:	2000      	movs	r0, #0
 8000f26:	2400      	movs	r4, #0
 8000f28:	05c0      	lsls	r0, r0, #23
 8000f2a:	4320      	orrs	r0, r4
 8000f2c:	bd70      	pop	{r4, r5, r6, pc}
 8000f2e:	2b99      	cmp	r3, #153	@ 0x99
 8000f30:	dc16      	bgt.n	8000f60 <__aeabi_ui2f+0x60>
 8000f32:	1f42      	subs	r2, r0, #5
 8000f34:	2805      	cmp	r0, #5
 8000f36:	d000      	beq.n	8000f3a <__aeabi_ui2f+0x3a>
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	0022      	movs	r2, r4
 8000f3c:	4810      	ldr	r0, [pc, #64]	@ (8000f80 <__aeabi_ui2f+0x80>)
 8000f3e:	4002      	ands	r2, r0
 8000f40:	0765      	lsls	r5, r4, #29
 8000f42:	d009      	beq.n	8000f58 <__aeabi_ui2f+0x58>
 8000f44:	250f      	movs	r5, #15
 8000f46:	402c      	ands	r4, r5
 8000f48:	2c04      	cmp	r4, #4
 8000f4a:	d005      	beq.n	8000f58 <__aeabi_ui2f+0x58>
 8000f4c:	3204      	adds	r2, #4
 8000f4e:	0154      	lsls	r4, r2, #5
 8000f50:	d502      	bpl.n	8000f58 <__aeabi_ui2f+0x58>
 8000f52:	239f      	movs	r3, #159	@ 0x9f
 8000f54:	4002      	ands	r2, r0
 8000f56:	1a5b      	subs	r3, r3, r1
 8000f58:	0192      	lsls	r2, r2, #6
 8000f5a:	0a54      	lsrs	r4, r2, #9
 8000f5c:	b2d8      	uxtb	r0, r3
 8000f5e:	e7e3      	b.n	8000f28 <__aeabi_ui2f+0x28>
 8000f60:	0002      	movs	r2, r0
 8000f62:	0020      	movs	r0, r4
 8000f64:	321b      	adds	r2, #27
 8000f66:	4090      	lsls	r0, r2
 8000f68:	0002      	movs	r2, r0
 8000f6a:	1e50      	subs	r0, r2, #1
 8000f6c:	4182      	sbcs	r2, r0
 8000f6e:	2005      	movs	r0, #5
 8000f70:	1a40      	subs	r0, r0, r1
 8000f72:	40c4      	lsrs	r4, r0
 8000f74:	4314      	orrs	r4, r2
 8000f76:	e7e0      	b.n	8000f3a <__aeabi_ui2f+0x3a>
 8000f78:	0264      	lsls	r4, r4, #9
 8000f7a:	2096      	movs	r0, #150	@ 0x96
 8000f7c:	0a64      	lsrs	r4, r4, #9
 8000f7e:	e7d3      	b.n	8000f28 <__aeabi_ui2f+0x28>
 8000f80:	fbffffff 	.word	0xfbffffff

08000f84 <__clzsi2>:
 8000f84:	211c      	movs	r1, #28
 8000f86:	2301      	movs	r3, #1
 8000f88:	041b      	lsls	r3, r3, #16
 8000f8a:	4298      	cmp	r0, r3
 8000f8c:	d301      	bcc.n	8000f92 <__clzsi2+0xe>
 8000f8e:	0c00      	lsrs	r0, r0, #16
 8000f90:	3910      	subs	r1, #16
 8000f92:	0a1b      	lsrs	r3, r3, #8
 8000f94:	4298      	cmp	r0, r3
 8000f96:	d301      	bcc.n	8000f9c <__clzsi2+0x18>
 8000f98:	0a00      	lsrs	r0, r0, #8
 8000f9a:	3908      	subs	r1, #8
 8000f9c:	091b      	lsrs	r3, r3, #4
 8000f9e:	4298      	cmp	r0, r3
 8000fa0:	d301      	bcc.n	8000fa6 <__clzsi2+0x22>
 8000fa2:	0900      	lsrs	r0, r0, #4
 8000fa4:	3904      	subs	r1, #4
 8000fa6:	a202      	add	r2, pc, #8	@ (adr r2, 8000fb0 <__clzsi2+0x2c>)
 8000fa8:	5c10      	ldrb	r0, [r2, r0]
 8000faa:	1840      	adds	r0, r0, r1
 8000fac:	4770      	bx	lr
 8000fae:	46c0      	nop			@ (mov r8, r8)
 8000fb0:	02020304 	.word	0x02020304
 8000fb4:	01010101 	.word	0x01010101
	...

08000fc0 <main>:

uint32_t last_time=0;
uint32_t elapsed=0;

int main(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af02      	add	r7, sp, #8
  HAL_Init();
 8000fc6:	f001 fa39 	bl	800243c <HAL_Init>
  SystemClock_Config();
 8000fca:	f000 f871 	bl	80010b0 <SystemClock_Config>
  MX_GPIO_Init();
 8000fce:	f000 f8bb 	bl	8001148 <MX_GPIO_Init>

  if (RPM_Init()){Error_Handler();}
 8000fd2:	f000 fd73 	bl	8001abc <RPM_Init>
 8000fd6:	1e03      	subs	r3, r0, #0
 8000fd8:	d001      	beq.n	8000fde <main+0x1e>
 8000fda:	f000 f8d7 	bl	800118c <Error_Handler>
  if (MBUS_Init()){Error_Handler();}
 8000fde:	f000 fa73 	bl	80014c8 <MBUS_Init>
 8000fe2:	1e03      	subs	r3, r0, #0
 8000fe4:	d001      	beq.n	8000fea <main+0x2a>
 8000fe6:	f000 f8d1 	bl	800118c <Error_Handler>

  struct FrameBuffer *ReceivedFrameBuffer=calloc(1,sizeof(struct FrameBuffer));
 8000fea:	2128      	movs	r1, #40	@ 0x28
 8000fec:	2001      	movs	r0, #1
 8000fee:	f006 f8a7 	bl	8007140 <calloc>
 8000ff2:	0003      	movs	r3, r0
 8000ff4:	607b      	str	r3, [r7, #4]
  if(ReceivedFrameBuffer==NULL){Error_Handler();}
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d101      	bne.n	8001000 <main+0x40>
 8000ffc:	f000 f8c6 	bl	800118c <Error_Handler>

  uint8_t *RPMMessage=calloc(RPM_MESSAGE_SIZE,sizeof(uint8_t));
 8001000:	2101      	movs	r1, #1
 8001002:	2005      	movs	r0, #5
 8001004:	f006 f89c 	bl	8007140 <calloc>
 8001008:	0003      	movs	r3, r0
 800100a:	603b      	str	r3, [r7, #0]
  if(RPMMessage==NULL){Error_Handler();}
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d101      	bne.n	8001016 <main+0x56>
 8001012:	f000 f8bb 	bl	800118c <Error_Handler>

  last_time=HAL_GetTick();
 8001016:	f001 fa85 	bl	8002524 <HAL_GetTick>
 800101a:	0002      	movs	r2, r0
 800101c:	4b1f      	ldr	r3, [pc, #124]	@ (800109c <main+0xdc>)
 800101e:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  if(!RPM_GetData(RPMMessage))
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	0018      	movs	r0, r3
 8001024:	f000 fe34 	bl	8001c90 <RPM_GetData>
 8001028:	1e03      	subs	r3, r0, #0
 800102a:	d117      	bne.n	800105c <main+0x9c>
	  {
		  elapsed=HAL_GetTick()-last_time;
 800102c:	f001 fa7a 	bl	8002524 <HAL_GetTick>
 8001030:	0002      	movs	r2, r0
 8001032:	4b1a      	ldr	r3, [pc, #104]	@ (800109c <main+0xdc>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	1ad2      	subs	r2, r2, r3
 8001038:	4b19      	ldr	r3, [pc, #100]	@ (80010a0 <main+0xe0>)
 800103a:	601a      	str	r2, [r3, #0]
		  last_time=HAL_GetTick();
 800103c:	f001 fa72 	bl	8002524 <HAL_GetTick>
 8001040:	0002      	movs	r2, r0
 8001042:	4b16      	ldr	r3, [pc, #88]	@ (800109c <main+0xdc>)
 8001044:	601a      	str	r2, [r3, #0]
		  if(!MBUS_SetTransmittedData(MBUSBridgeID,CHIDrpm,RPM_MESSAGE_SIZE,RPMMessage,true))
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	2201      	movs	r2, #1
 800104a:	9200      	str	r2, [sp, #0]
 800104c:	2205      	movs	r2, #5
 800104e:	21bb      	movs	r1, #187	@ 0xbb
 8001050:	2003      	movs	r0, #3
 8001052:	f000 f94d 	bl	80012f0 <MBUS_SetTransmittedData>
 8001056:	1e03      	subs	r3, r0, #0
 8001058:	d100      	bne.n	800105c <main+0x9c>
		  {
			  __NOP();
 800105a:	46c0      	nop			@ (mov r8, r8)
		  }
	  }


	  if(MBUS_GetProcessedFrame(ReceivedFrameBuffer)==TX_NO_ACK){counterTX_NO_ACK++;}
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	0018      	movs	r0, r3
 8001060:	f000 f9b4 	bl	80013cc <MBUS_GetProcessedFrame>
 8001064:	0003      	movs	r3, r0
 8001066:	2b01      	cmp	r3, #1
 8001068:	d105      	bne.n	8001076 <main+0xb6>
 800106a:	4b0e      	ldr	r3, [pc, #56]	@ (80010a4 <main+0xe4>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	1c5a      	adds	r2, r3, #1
 8001070:	4b0c      	ldr	r3, [pc, #48]	@ (80010a4 <main+0xe4>)
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	e7d4      	b.n	8001020 <main+0x60>
	  else if(MBUS_GetProcessedFrame(ReceivedFrameBuffer)==TX_IDLE_FRAME){counterTX_IDLE_FRAME++;}
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	0018      	movs	r0, r3
 800107a:	f000 f9a7 	bl	80013cc <MBUS_GetProcessedFrame>
 800107e:	1e03      	subs	r3, r0, #0
 8001080:	d105      	bne.n	800108e <main+0xce>
 8001082:	4b09      	ldr	r3, [pc, #36]	@ (80010a8 <main+0xe8>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	1c5a      	adds	r2, r3, #1
 8001088:	4b07      	ldr	r3, [pc, #28]	@ (80010a8 <main+0xe8>)
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	e7c8      	b.n	8001020 <main+0x60>
	  else(counterELSE++);
 800108e:	4b07      	ldr	r3, [pc, #28]	@ (80010ac <main+0xec>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	1c5a      	adds	r2, r3, #1
 8001094:	4b05      	ldr	r3, [pc, #20]	@ (80010ac <main+0xec>)
 8001096:	601a      	str	r2, [r3, #0]
	  if(!RPM_GetData(RPMMessage))
 8001098:	e7c2      	b.n	8001020 <main+0x60>
 800109a:	46c0      	nop			@ (mov r8, r8)
 800109c:	20000088 	.word	0x20000088
 80010a0:	2000008c 	.word	0x2000008c
 80010a4:	2000007c 	.word	0x2000007c
 80010a8:	20000080 	.word	0x20000080
 80010ac:	20000084 	.word	0x20000084

080010b0 <SystemClock_Config>:
  }
}


void SystemClock_Config(void)
{
 80010b0:	b590      	push	{r4, r7, lr}
 80010b2:	b08d      	sub	sp, #52	@ 0x34
 80010b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b6:	2414      	movs	r4, #20
 80010b8:	193b      	adds	r3, r7, r4
 80010ba:	0018      	movs	r0, r3
 80010bc:	231c      	movs	r3, #28
 80010be:	001a      	movs	r2, r3
 80010c0:	2100      	movs	r1, #0
 80010c2:	f006 f93b 	bl	800733c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c6:	003b      	movs	r3, r7
 80010c8:	0018      	movs	r0, r3
 80010ca:	2314      	movs	r3, #20
 80010cc:	001a      	movs	r2, r3
 80010ce:	2100      	movs	r1, #0
 80010d0:	f006 f934 	bl	800733c <memset>

  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 80010d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001144 <SystemClock_Config+0x94>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001144 <SystemClock_Config+0x94>)
 80010da:	2107      	movs	r1, #7
 80010dc:	438a      	bics	r2, r1
 80010de:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010e0:	193b      	adds	r3, r7, r4
 80010e2:	2202      	movs	r2, #2
 80010e4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010e6:	193b      	adds	r3, r7, r4
 80010e8:	2280      	movs	r2, #128	@ 0x80
 80010ea:	0052      	lsls	r2, r2, #1
 80010ec:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80010ee:	193b      	adds	r3, r7, r4
 80010f0:	2200      	movs	r2, #0
 80010f2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010f4:	193b      	adds	r3, r7, r4
 80010f6:	2240      	movs	r2, #64	@ 0x40
 80010f8:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010fa:	193b      	adds	r3, r7, r4
 80010fc:	0018      	movs	r0, r3
 80010fe:	f001 fd4b 	bl	8002b98 <HAL_RCC_OscConfig>
 8001102:	1e03      	subs	r3, r0, #0
 8001104:	d001      	beq.n	800110a <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8001106:	f000 f841 	bl	800118c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800110a:	003b      	movs	r3, r7
 800110c:	2207      	movs	r2, #7
 800110e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001110:	003b      	movs	r3, r7
 8001112:	2200      	movs	r2, #0
 8001114:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001116:	003b      	movs	r3, r7
 8001118:	2200      	movs	r2, #0
 800111a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800111c:	003b      	movs	r3, r7
 800111e:	2200      	movs	r2, #0
 8001120:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001122:	003b      	movs	r3, r7
 8001124:	2200      	movs	r2, #0
 8001126:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001128:	003b      	movs	r3, r7
 800112a:	2100      	movs	r1, #0
 800112c:	0018      	movs	r0, r3
 800112e:	f001 ff17 	bl	8002f60 <HAL_RCC_ClockConfig>
 8001132:	1e03      	subs	r3, r0, #0
 8001134:	d001      	beq.n	800113a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001136:	f000 f829 	bl	800118c <Error_Handler>
  }
}
 800113a:	46c0      	nop			@ (mov r8, r8)
 800113c:	46bd      	mov	sp, r7
 800113e:	b00d      	add	sp, #52	@ 0x34
 8001140:	bd90      	pop	{r4, r7, pc}
 8001142:	46c0      	nop			@ (mov r8, r8)
 8001144:	40022000 	.word	0x40022000

08001148 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800114e:	4b0e      	ldr	r3, [pc, #56]	@ (8001188 <MX_GPIO_Init+0x40>)
 8001150:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001152:	4b0d      	ldr	r3, [pc, #52]	@ (8001188 <MX_GPIO_Init+0x40>)
 8001154:	2102      	movs	r1, #2
 8001156:	430a      	orrs	r2, r1
 8001158:	635a      	str	r2, [r3, #52]	@ 0x34
 800115a:	4b0b      	ldr	r3, [pc, #44]	@ (8001188 <MX_GPIO_Init+0x40>)
 800115c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800115e:	2202      	movs	r2, #2
 8001160:	4013      	ands	r3, r2
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001166:	4b08      	ldr	r3, [pc, #32]	@ (8001188 <MX_GPIO_Init+0x40>)
 8001168:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800116a:	4b07      	ldr	r3, [pc, #28]	@ (8001188 <MX_GPIO_Init+0x40>)
 800116c:	2101      	movs	r1, #1
 800116e:	430a      	orrs	r2, r1
 8001170:	635a      	str	r2, [r3, #52]	@ 0x34
 8001172:	4b05      	ldr	r3, [pc, #20]	@ (8001188 <MX_GPIO_Init+0x40>)
 8001174:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001176:	2201      	movs	r2, #1
 8001178:	4013      	ands	r3, r2
 800117a:	603b      	str	r3, [r7, #0]
 800117c:	683b      	ldr	r3, [r7, #0]
}
 800117e:	46c0      	nop			@ (mov r8, r8)
 8001180:	46bd      	mov	sp, r7
 8001182:	b002      	add	sp, #8
 8001184:	bd80      	pop	{r7, pc}
 8001186:	46c0      	nop			@ (mov r8, r8)
 8001188:	40021000 	.word	0x40021000

0800118c <Error_Handler>:

void Error_Handler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001190:	b672      	cpsid	i
}
 8001192:	46c0      	nop			@ (mov r8, r8)
 __disable_irq();
  while (1)
  {
	  __NOP();
 8001194:	46c0      	nop			@ (mov r8, r8)
 8001196:	e7fd      	b.n	8001194 <Error_Handler+0x8>

08001198 <HALCPU_CRC_CRC16CCITT>:
uint16_t timerTop=320;
uint16_t timerFrameDuration=10;


// INTERNAL: FRAME CHECKSUM SUBFUNCTION
void static HALCPU_CRC_CRC16CCITT(const uint8_t aData[], const uint16_t aSize, uint8_t aCRCresult[2],uint16_t aCRCinput) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	0008      	movs	r0, r1
 80011a2:	607a      	str	r2, [r7, #4]
 80011a4:	0019      	movs	r1, r3
 80011a6:	230a      	movs	r3, #10
 80011a8:	18fb      	adds	r3, r7, r3
 80011aa:	1c02      	adds	r2, r0, #0
 80011ac:	801a      	strh	r2, [r3, #0]
 80011ae:	2308      	movs	r3, #8
 80011b0:	18fb      	adds	r3, r7, r3
 80011b2:	1c0a      	adds	r2, r1, #0
 80011b4:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < aSize; i++) {
 80011b6:	2316      	movs	r3, #22
 80011b8:	18fb      	adds	r3, r7, r3
 80011ba:	2200      	movs	r2, #0
 80011bc:	801a      	strh	r2, [r3, #0]
 80011be:	e01f      	b.n	8001200 <HALCPU_CRC_CRC16CCITT+0x68>
    	aCRCinput = HALCPU_CRC_CRC16CCITT_LUT8B_au16[(uint8_t)(aData[i] ^ (aCRCinput >> 8))] ^ (aCRCinput << 8);
 80011c0:	2116      	movs	r1, #22
 80011c2:	187b      	adds	r3, r7, r1
 80011c4:	881b      	ldrh	r3, [r3, #0]
 80011c6:	68fa      	ldr	r2, [r7, #12]
 80011c8:	18d3      	adds	r3, r2, r3
 80011ca:	781a      	ldrb	r2, [r3, #0]
 80011cc:	2008      	movs	r0, #8
 80011ce:	183b      	adds	r3, r7, r0
 80011d0:	881b      	ldrh	r3, [r3, #0]
 80011d2:	0a1b      	lsrs	r3, r3, #8
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	4053      	eors	r3, r2
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	001a      	movs	r2, r3
 80011de:	4b15      	ldr	r3, [pc, #84]	@ (8001234 <HALCPU_CRC_CRC16CCITT+0x9c>)
 80011e0:	0052      	lsls	r2, r2, #1
 80011e2:	5ad3      	ldrh	r3, [r2, r3]
 80011e4:	b21a      	sxth	r2, r3
 80011e6:	183b      	adds	r3, r7, r0
 80011e8:	881b      	ldrh	r3, [r3, #0]
 80011ea:	021b      	lsls	r3, r3, #8
 80011ec:	b21b      	sxth	r3, r3
 80011ee:	4053      	eors	r3, r2
 80011f0:	b21a      	sxth	r2, r3
 80011f2:	183b      	adds	r3, r7, r0
 80011f4:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < aSize; i++) {
 80011f6:	187b      	adds	r3, r7, r1
 80011f8:	881a      	ldrh	r2, [r3, #0]
 80011fa:	187b      	adds	r3, r7, r1
 80011fc:	3201      	adds	r2, #1
 80011fe:	801a      	strh	r2, [r3, #0]
 8001200:	2316      	movs	r3, #22
 8001202:	18fa      	adds	r2, r7, r3
 8001204:	230a      	movs	r3, #10
 8001206:	18fb      	adds	r3, r7, r3
 8001208:	8812      	ldrh	r2, [r2, #0]
 800120a:	881b      	ldrh	r3, [r3, #0]
 800120c:	429a      	cmp	r2, r3
 800120e:	d3d7      	bcc.n	80011c0 <HALCPU_CRC_CRC16CCITT+0x28>
    }
    aCRCresult[0] = (uint8_t)(aCRCinput & 0xFF);
 8001210:	2108      	movs	r1, #8
 8001212:	187b      	adds	r3, r7, r1
 8001214:	881b      	ldrh	r3, [r3, #0]
 8001216:	b2da      	uxtb	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	701a      	strb	r2, [r3, #0]
    aCRCresult[1] = (uint8_t)((aCRCinput >> 8) & 0xFF);
 800121c:	187b      	adds	r3, r7, r1
 800121e:	881b      	ldrh	r3, [r3, #0]
 8001220:	0a1b      	lsrs	r3, r3, #8
 8001222:	b29a      	uxth	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3301      	adds	r3, #1
 8001228:	b2d2      	uxtb	r2, r2
 800122a:	701a      	strb	r2, [r3, #0]
}
 800122c:	46c0      	nop			@ (mov r8, r8)
 800122e:	46bd      	mov	sp, r7
 8001230:	b006      	add	sp, #24
 8001232:	bd80      	pop	{r7, pc}
 8001234:	08007504 	.word	0x08007504

08001238 <CalculateFCS>:

// INTERNAL: FRAME CHECKSUM CALCULATION
void static CalculateFCS(uint8_t aFCS[2],struct FrameBuffer *aFrameBuffer){
 8001238:	b590      	push	{r4, r7, lr}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
	uint16_t CurrentFrameSize=4*sizeof(uint8_t)+MBUS_FrameBuffer->PS[0];
 8001242:	4b29      	ldr	r3, [pc, #164]	@ (80012e8 <CalculateFCS+0xb0>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	791b      	ldrb	r3, [r3, #4]
 8001248:	001a      	movs	r2, r3
 800124a:	210c      	movs	r1, #12
 800124c:	187b      	adds	r3, r7, r1
 800124e:	3204      	adds	r2, #4
 8001250:	801a      	strh	r2, [r3, #0]
	uint8_t *tmpFrameBuffer;
	tmpFrameBuffer=malloc(CurrentFrameSize*sizeof(uint8_t));
 8001252:	187b      	adds	r3, r7, r1
 8001254:	881b      	ldrh	r3, [r3, #0]
 8001256:	0018      	movs	r0, r3
 8001258:	f005 ffaa 	bl	80071b0 <malloc>
 800125c:	0003      	movs	r3, r0
 800125e:	60bb      	str	r3, [r7, #8]
	tmpFrameBuffer[0]=aFrameBuffer->TXID[0];
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	785a      	ldrb	r2, [r3, #1]
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	701a      	strb	r2, [r3, #0]
	tmpFrameBuffer[1]=aFrameBuffer->RXID[0];
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	3301      	adds	r3, #1
 800126c:	683a      	ldr	r2, [r7, #0]
 800126e:	7892      	ldrb	r2, [r2, #2]
 8001270:	701a      	strb	r2, [r3, #0]
	tmpFrameBuffer[2]=aFrameBuffer->CHID[0];
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	3302      	adds	r3, #2
 8001276:	683a      	ldr	r2, [r7, #0]
 8001278:	78d2      	ldrb	r2, [r2, #3]
 800127a:	701a      	strb	r2, [r3, #0]
	tmpFrameBuffer[3]=aFrameBuffer->PS[0];
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	3303      	adds	r3, #3
 8001280:	683a      	ldr	r2, [r7, #0]
 8001282:	7912      	ldrb	r2, [r2, #4]
 8001284:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0 ; i < aFrameBuffer->PS[0]; i++ ){
 8001286:	230e      	movs	r3, #14
 8001288:	18fb      	adds	r3, r7, r3
 800128a:	2200      	movs	r2, #0
 800128c:	801a      	strh	r2, [r3, #0]
 800128e:	e011      	b.n	80012b4 <CalculateFCS+0x7c>
		tmpFrameBuffer[4+i]=aFrameBuffer->Payload[i];	// copy data from Payload to tmpFrameBuffer
 8001290:	200e      	movs	r0, #14
 8001292:	183b      	adds	r3, r7, r0
 8001294:	881a      	ldrh	r2, [r3, #0]
 8001296:	183b      	adds	r3, r7, r0
 8001298:	881b      	ldrh	r3, [r3, #0]
 800129a:	3304      	adds	r3, #4
 800129c:	0019      	movs	r1, r3
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	185b      	adds	r3, r3, r1
 80012a2:	6839      	ldr	r1, [r7, #0]
 80012a4:	188a      	adds	r2, r1, r2
 80012a6:	7952      	ldrb	r2, [r2, #5]
 80012a8:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0 ; i < aFrameBuffer->PS[0]; i++ ){
 80012aa:	183b      	adds	r3, r7, r0
 80012ac:	881a      	ldrh	r2, [r3, #0]
 80012ae:	183b      	adds	r3, r7, r0
 80012b0:	3201      	adds	r2, #1
 80012b2:	801a      	strh	r2, [r3, #0]
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	791b      	ldrb	r3, [r3, #4]
 80012b8:	001a      	movs	r2, r3
 80012ba:	230e      	movs	r3, #14
 80012bc:	18fb      	adds	r3, r7, r3
 80012be:	881b      	ldrh	r3, [r3, #0]
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d3e5      	bcc.n	8001290 <CalculateFCS+0x58>
	}

	HALCPU_CRC_CRC16CCITT(tmpFrameBuffer,CurrentFrameSize,aFCS,0xFFFF);
 80012c4:	4c09      	ldr	r4, [pc, #36]	@ (80012ec <CalculateFCS+0xb4>)
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	230c      	movs	r3, #12
 80012ca:	18fb      	adds	r3, r7, r3
 80012cc:	8819      	ldrh	r1, [r3, #0]
 80012ce:	68b8      	ldr	r0, [r7, #8]
 80012d0:	0023      	movs	r3, r4
 80012d2:	f7ff ff61 	bl	8001198 <HALCPU_CRC_CRC16CCITT>
	free(tmpFrameBuffer);
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	0018      	movs	r0, r3
 80012da:	f005 ff73 	bl	80071c4 <free>
}
 80012de:	46c0      	nop			@ (mov r8, r8)
 80012e0:	46bd      	mov	sp, r7
 80012e2:	b005      	add	sp, #20
 80012e4:	bd90      	pop	{r4, r7, pc}
 80012e6:	46c0      	nop			@ (mov r8, r8)
 80012e8:	20000174 	.word	0x20000174
 80012ec:	0000ffff 	.word	0x0000ffff

080012f0 <MBUS_SetTransmittedData>:

// API: UPDATE DATA TO TRANSMIT
unsigned MBUS_SetTransmittedData(const uint8_t aRXID,const uint8_t aCHID,const uint8_t aPayloadSize,const uint8_t aPayload[PAYLOAD_MAX_SIZE],const bool aAlowOverwrite){
 80012f0:	b590      	push	{r4, r7, lr}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	0004      	movs	r4, r0
 80012f8:	0008      	movs	r0, r1
 80012fa:	0011      	movs	r1, r2
 80012fc:	603b      	str	r3, [r7, #0]
 80012fe:	1dfb      	adds	r3, r7, #7
 8001300:	1c22      	adds	r2, r4, #0
 8001302:	701a      	strb	r2, [r3, #0]
 8001304:	1dbb      	adds	r3, r7, #6
 8001306:	1c02      	adds	r2, r0, #0
 8001308:	701a      	strb	r2, [r3, #0]
 800130a:	1d7b      	adds	r3, r7, #5
 800130c:	1c0a      	adds	r2, r1, #0
 800130e:	701a      	strb	r2, [r3, #0]
	if(	bNewDataToTransmit && !aAlowOverwrite){return 1;}	// last data not processed && overwrite is not allowed
 8001310:	4b2c      	ldr	r3, [pc, #176]	@ (80013c4 <MBUS_SetTransmittedData+0xd4>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b00      	cmp	r3, #0
 8001318:	d009      	beq.n	800132e <MBUS_SetTransmittedData+0x3e>
 800131a:	2318      	movs	r3, #24
 800131c:	18fb      	adds	r3, r7, r3
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2201      	movs	r2, #1
 8001322:	4053      	eors	r3, r2
 8001324:	b2db      	uxtb	r3, r3
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MBUS_SetTransmittedData+0x3e>
 800132a:	2301      	movs	r3, #1
 800132c:	e046      	b.n	80013bc <MBUS_SetTransmittedData+0xcc>

	MBUS_FrameBuffer_ToTransmit->TXID[0]=myID;
 800132e:	4b26      	ldr	r3, [pc, #152]	@ (80013c8 <MBUS_SetTransmittedData+0xd8>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	220c      	movs	r2, #12
 8001334:	705a      	strb	r2, [r3, #1]
	if(aRXID>=0x00 && aRXID<=0x0F && aRXID!=myID){MBUS_FrameBuffer_ToTransmit->RXID[0]=aRXID;}	// check argument validity
 8001336:	1dfb      	adds	r3, r7, #7
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b0f      	cmp	r3, #15
 800133c:	d812      	bhi.n	8001364 <MBUS_SetTransmittedData+0x74>
 800133e:	1dfb      	adds	r3, r7, #7
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b0c      	cmp	r3, #12
 8001344:	d00e      	beq.n	8001364 <MBUS_SetTransmittedData+0x74>
 8001346:	4b20      	ldr	r3, [pc, #128]	@ (80013c8 <MBUS_SetTransmittedData+0xd8>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	1dfa      	adds	r2, r7, #7
 800134c:	7812      	ldrb	r2, [r2, #0]
 800134e:	709a      	strb	r2, [r3, #2]
	else{return 2;}

	MBUS_FrameBuffer_ToTransmit->CHID[0]=aCHID;
 8001350:	4b1d      	ldr	r3, [pc, #116]	@ (80013c8 <MBUS_SetTransmittedData+0xd8>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	1dba      	adds	r2, r7, #6
 8001356:	7812      	ldrb	r2, [r2, #0]
 8001358:	70da      	strb	r2, [r3, #3]

	if(aPayloadSize>0 && aPayloadSize<=PAYLOAD_MAX_SIZE && aPayload){	// check argument validity
 800135a:	1d7b      	adds	r3, r7, #5
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d102      	bne.n	8001368 <MBUS_SetTransmittedData+0x78>
 8001362:	e02a      	b.n	80013ba <MBUS_SetTransmittedData+0xca>
	else{return 2;}
 8001364:	2302      	movs	r3, #2
 8001366:	e029      	b.n	80013bc <MBUS_SetTransmittedData+0xcc>
	if(aPayloadSize>0 && aPayloadSize<=PAYLOAD_MAX_SIZE && aPayload){	// check argument validity
 8001368:	1d7b      	adds	r3, r7, #5
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b20      	cmp	r3, #32
 800136e:	d824      	bhi.n	80013ba <MBUS_SetTransmittedData+0xca>
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d021      	beq.n	80013ba <MBUS_SetTransmittedData+0xca>
		MBUS_FrameBuffer_ToTransmit->PS[0]=aPayloadSize;
 8001376:	4b14      	ldr	r3, [pc, #80]	@ (80013c8 <MBUS_SetTransmittedData+0xd8>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	1d7a      	adds	r2, r7, #5
 800137c:	7812      	ldrb	r2, [r2, #0]
 800137e:	711a      	strb	r2, [r3, #4]
		memcpy(MBUS_FrameBuffer_ToTransmit->Payload,aPayload,aPayloadSize);
 8001380:	4b11      	ldr	r3, [pc, #68]	@ (80013c8 <MBUS_SetTransmittedData+0xd8>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	1d58      	adds	r0, r3, #5
 8001386:	1d7b      	adds	r3, r7, #5
 8001388:	781a      	ldrb	r2, [r3, #0]
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	0019      	movs	r1, r3
 800138e:	f006 f81b 	bl	80073c8 <memcpy>
	}
	else{return 3;}

	CalculateFCS(MBUS_FrameBuffer_ToTransmit->FCS,MBUS_FrameBuffer_ToTransmit);
 8001392:	4b0d      	ldr	r3, [pc, #52]	@ (80013c8 <MBUS_SetTransmittedData+0xd8>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	3325      	adds	r3, #37	@ 0x25
 8001398:	001a      	movs	r2, r3
 800139a:	4b0b      	ldr	r3, [pc, #44]	@ (80013c8 <MBUS_SetTransmittedData+0xd8>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	0019      	movs	r1, r3
 80013a0:	0010      	movs	r0, r2
 80013a2:	f7ff ff49 	bl	8001238 <CalculateFCS>
	MBUS_FrameBuffer_ToTransmit->ACK[0]=0xFF;
 80013a6:	4b08      	ldr	r3, [pc, #32]	@ (80013c8 <MBUS_SetTransmittedData+0xd8>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2227      	movs	r2, #39	@ 0x27
 80013ac:	21ff      	movs	r1, #255	@ 0xff
 80013ae:	5499      	strb	r1, [r3, r2]
	bNewDataToTransmit=true;
 80013b0:	4b04      	ldr	r3, [pc, #16]	@ (80013c4 <MBUS_SetTransmittedData+0xd4>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	701a      	strb	r2, [r3, #0]
	return 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	e000      	b.n	80013bc <MBUS_SetTransmittedData+0xcc>
	else{return 3;}
 80013ba:	2303      	movs	r3, #3
}
 80013bc:	0018      	movs	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	b003      	add	sp, #12
 80013c2:	bd90      	pop	{r4, r7, pc}
 80013c4:	20000182 	.word	0x20000182
 80013c8:	20000178 	.word	0x20000178

080013cc <MBUS_GetProcessedFrame>:

// API: FOR MAIN
enum ProcessedFrameStatus MBUS_GetProcessedFrame(struct FrameBuffer *aFrameBuffer){
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	if(bNewProcessedData){
 80013d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001404 <MBUS_GetProcessedFrame+0x38>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d00d      	beq.n	80013fa <MBUS_GetProcessedFrame+0x2e>
		if(aFrameBuffer== NULL){return ERROR_INVALID_POINTER;}	// invalid pointer
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d101      	bne.n	80013e8 <MBUS_GetProcessedFrame+0x1c>
 80013e4:	2307      	movs	r3, #7
 80013e6:	e009      	b.n	80013fc <MBUS_GetProcessedFrame+0x30>
		aFrameBuffer=MBUS_FrameBuffer_Processed;
 80013e8:	4b07      	ldr	r3, [pc, #28]	@ (8001408 <MBUS_GetProcessedFrame+0x3c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	607b      	str	r3, [r7, #4]
		bNewProcessedData=false;
 80013ee:	4b05      	ldr	r3, [pc, #20]	@ (8001404 <MBUS_GetProcessedFrame+0x38>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	701a      	strb	r2, [r3, #0]
		return MBUS_ProcessedFrameStatus;
 80013f4:	4b05      	ldr	r3, [pc, #20]	@ (800140c <MBUS_GetProcessedFrame+0x40>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	e000      	b.n	80013fc <MBUS_GetProcessedFrame+0x30>
	}
	else{return NO_NEW_DATA;}
 80013fa:	2309      	movs	r3, #9
}
 80013fc:	0018      	movs	r0, r3
 80013fe:	46bd      	mov	sp, r7
 8001400:	b002      	add	sp, #8
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20000183 	.word	0x20000183
 8001408:	2000017c 	.word	0x2000017c
 800140c:	20000171 	.word	0x20000171

08001410 <MBUS_UpdateTransmittedBuffer>:

// INTERNAL: INPUT DATA TO TRANSMIT
void static MBUS_UpdateTransmittedBuffer(void){
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
	if(bNewDataToTransmit){	// no new data -> transmit IDLE frame
 8001414:	4b09      	ldr	r3, [pc, #36]	@ (800143c <MBUS_UpdateTransmittedBuffer+0x2c>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	b2db      	uxtb	r3, r3
 800141a:	2b00      	cmp	r3, #0
 800141c:	d007      	beq.n	800142e <MBUS_UpdateTransmittedBuffer+0x1e>
		MBUS_FrameBuffer=MBUS_FrameBuffer_ToTransmit;
 800141e:	4b08      	ldr	r3, [pc, #32]	@ (8001440 <MBUS_UpdateTransmittedBuffer+0x30>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	4b08      	ldr	r3, [pc, #32]	@ (8001444 <MBUS_UpdateTransmittedBuffer+0x34>)
 8001424:	601a      	str	r2, [r3, #0]
		bNewDataToTransmit=false;
 8001426:	4b05      	ldr	r3, [pc, #20]	@ (800143c <MBUS_UpdateTransmittedBuffer+0x2c>)
 8001428:	2200      	movs	r2, #0
 800142a:	701a      	strb	r2, [r3, #0]
	}
	else{MBUS_FrameBuffer->RXID[0]=IDLEframe;}
}
 800142c:	e003      	b.n	8001436 <MBUS_UpdateTransmittedBuffer+0x26>
	else{MBUS_FrameBuffer->RXID[0]=IDLEframe;}
 800142e:	4b05      	ldr	r3, [pc, #20]	@ (8001444 <MBUS_UpdateTransmittedBuffer+0x34>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	22a5      	movs	r2, #165	@ 0xa5
 8001434:	709a      	strb	r2, [r3, #2]
}
 8001436:	46c0      	nop			@ (mov r8, r8)
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000182 	.word	0x20000182
 8001440:	20000178 	.word	0x20000178
 8001444:	20000174 	.word	0x20000174

08001448 <MBUS_UpdateProcessedBuffer>:

// INTERNAL: RECEIVED DATA TO OUTPUT BUFFER
void static MBUS_UpdateProcessedBuffer(enum ProcessedFrameStatus aProcessedFrameStatus){
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	0002      	movs	r2, r0
 8001450:	1dfb      	adds	r3, r7, #7
 8001452:	701a      	strb	r2, [r3, #0]
	MBUS_FrameBuffer_Processed=MBUS_FrameBuffer;
 8001454:	4b07      	ldr	r3, [pc, #28]	@ (8001474 <MBUS_UpdateProcessedBuffer+0x2c>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4b07      	ldr	r3, [pc, #28]	@ (8001478 <MBUS_UpdateProcessedBuffer+0x30>)
 800145a:	601a      	str	r2, [r3, #0]
	MBUS_ProcessedFrameStatus = aProcessedFrameStatus;
 800145c:	4b07      	ldr	r3, [pc, #28]	@ (800147c <MBUS_UpdateProcessedBuffer+0x34>)
 800145e:	1dfa      	adds	r2, r7, #7
 8001460:	7812      	ldrb	r2, [r2, #0]
 8001462:	701a      	strb	r2, [r3, #0]
	bNewProcessedData=true;
 8001464:	4b06      	ldr	r3, [pc, #24]	@ (8001480 <MBUS_UpdateProcessedBuffer+0x38>)
 8001466:	2201      	movs	r2, #1
 8001468:	701a      	strb	r2, [r3, #0]
}
 800146a:	46c0      	nop			@ (mov r8, r8)
 800146c:	46bd      	mov	sp, r7
 800146e:	b002      	add	sp, #8
 8001470:	bd80      	pop	{r7, pc}
 8001472:	46c0      	nop			@ (mov r8, r8)
 8001474:	20000174 	.word	0x20000174
 8001478:	2000017c 	.word	0x2000017c
 800147c:	20000171 	.word	0x20000171
 8001480:	20000183 	.word	0x20000183

08001484 <MBUS_Reset>:

// INTERNAL: RESET COMMUNICATION
void static MBUS_Reset(void){
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
	HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_1);
 8001488:	4b0b      	ldr	r3, [pc, #44]	@ (80014b8 <MBUS_Reset+0x34>)
 800148a:	2100      	movs	r1, #0
 800148c:	0018      	movs	r0, r3
 800148e:	f002 f9e7 	bl	8003860 <HAL_TIM_OC_Stop_IT>
    MBUS_FrameBuffer->TXID[0]=0xFF;
 8001492:	4b0a      	ldr	r3, [pc, #40]	@ (80014bc <MBUS_Reset+0x38>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	22ff      	movs	r2, #255	@ 0xff
 8001498:	705a      	strb	r2, [r3, #1]
	HAL_UART_Receive_IT(&huart,MBUS_FrameBuffer->BREAK, sizeof(MBUS_FrameBuffer->BREAK));
 800149a:	4b08      	ldr	r3, [pc, #32]	@ (80014bc <MBUS_Reset+0x38>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	0019      	movs	r1, r3
 80014a0:	4b07      	ldr	r3, [pc, #28]	@ (80014c0 <MBUS_Reset+0x3c>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	0018      	movs	r0, r3
 80014a6:	f003 fdb9 	bl	800501c <HAL_UART_Receive_IT>
	MBUS_FrameStatus=IDLE;
 80014aa:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <MBUS_Reset+0x40>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	701a      	strb	r2, [r3, #0]
}
 80014b0:	46c0      	nop			@ (mov r8, r8)
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	46c0      	nop			@ (mov r8, r8)
 80014b8:	20000090 	.word	0x20000090
 80014bc:	20000174 	.word	0x20000174
 80014c0:	200000dc 	.word	0x200000dc
 80014c4:	20000170 	.word	0x20000170

080014c8 <MBUS_Init>:

// API: INIT FUNCTION FOR UART AND TIMEOUT TIMER
unsigned MBUS_Init(void) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08e      	sub	sp, #56	@ 0x38
 80014cc:	af00      	add	r7, sp, #0
	// MBUS UART INIT
	huart.Instance = USART1;
 80014ce:	4b6f      	ldr	r3, [pc, #444]	@ (800168c <MBUS_Init+0x1c4>)
 80014d0:	4a6f      	ldr	r2, [pc, #444]	@ (8001690 <MBUS_Init+0x1c8>)
 80014d2:	601a      	str	r2, [r3, #0]
	huart.Init.BaudRate = 57600;
 80014d4:	4b6d      	ldr	r3, [pc, #436]	@ (800168c <MBUS_Init+0x1c4>)
 80014d6:	22e1      	movs	r2, #225	@ 0xe1
 80014d8:	0212      	lsls	r2, r2, #8
 80014da:	605a      	str	r2, [r3, #4]
	huart.Init.WordLength = UART_WORDLENGTH_8B;
 80014dc:	4b6b      	ldr	r3, [pc, #428]	@ (800168c <MBUS_Init+0x1c4>)
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
	huart.Init.StopBits = UART_STOPBITS_1;
 80014e2:	4b6a      	ldr	r3, [pc, #424]	@ (800168c <MBUS_Init+0x1c4>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	60da      	str	r2, [r3, #12]
	huart.Init.Parity = UART_PARITY_NONE;
 80014e8:	4b68      	ldr	r3, [pc, #416]	@ (800168c <MBUS_Init+0x1c4>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	611a      	str	r2, [r3, #16]
	huart.Init.Mode = UART_MODE_TX_RX;
 80014ee:	4b67      	ldr	r3, [pc, #412]	@ (800168c <MBUS_Init+0x1c4>)
 80014f0:	220c      	movs	r2, #12
 80014f2:	615a      	str	r2, [r3, #20]
	huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014f4:	4b65      	ldr	r3, [pc, #404]	@ (800168c <MBUS_Init+0x1c4>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	619a      	str	r2, [r3, #24]
	huart.Init.OverSampling = UART_OVERSAMPLING_16;
 80014fa:	4b64      	ldr	r3, [pc, #400]	@ (800168c <MBUS_Init+0x1c4>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	61da      	str	r2, [r3, #28]
	huart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001500:	4b62      	ldr	r3, [pc, #392]	@ (800168c <MBUS_Init+0x1c4>)
 8001502:	2200      	movs	r2, #0
 8001504:	621a      	str	r2, [r3, #32]
	huart.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001506:	4b61      	ldr	r3, [pc, #388]	@ (800168c <MBUS_Init+0x1c4>)
 8001508:	2200      	movs	r2, #0
 800150a:	625a      	str	r2, [r3, #36]	@ 0x24
	huart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800150c:	4b5f      	ldr	r3, [pc, #380]	@ (800168c <MBUS_Init+0x1c4>)
 800150e:	2200      	movs	r2, #0
 8001510:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart) != HAL_OK) {return 1;}
 8001512:	4b5e      	ldr	r3, [pc, #376]	@ (800168c <MBUS_Init+0x1c4>)
 8001514:	0018      	movs	r0, r3
 8001516:	f003 fc83 	bl	8004e20 <HAL_UART_Init>
 800151a:	1e03      	subs	r3, r0, #0
 800151c:	d001      	beq.n	8001522 <MBUS_Init+0x5a>
 800151e:	2301      	movs	r3, #1
 8001520:	e0b0      	b.n	8001684 <MBUS_Init+0x1bc>
	if (HAL_UARTEx_SetTxFifoThreshold(&huart, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK) {return 2;}
 8001522:	4b5a      	ldr	r3, [pc, #360]	@ (800168c <MBUS_Init+0x1c4>)
 8001524:	2100      	movs	r1, #0
 8001526:	0018      	movs	r0, r3
 8001528:	f005 fd2a 	bl	8006f80 <HAL_UARTEx_SetTxFifoThreshold>
 800152c:	1e03      	subs	r3, r0, #0
 800152e:	d001      	beq.n	8001534 <MBUS_Init+0x6c>
 8001530:	2302      	movs	r3, #2
 8001532:	e0a7      	b.n	8001684 <MBUS_Init+0x1bc>
	if (HAL_UARTEx_SetRxFifoThreshold(&huart, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK) {return 3;}
 8001534:	4b55      	ldr	r3, [pc, #340]	@ (800168c <MBUS_Init+0x1c4>)
 8001536:	2100      	movs	r1, #0
 8001538:	0018      	movs	r0, r3
 800153a:	f005 fd61 	bl	8007000 <HAL_UARTEx_SetRxFifoThreshold>
 800153e:	1e03      	subs	r3, r0, #0
 8001540:	d001      	beq.n	8001546 <MBUS_Init+0x7e>
 8001542:	2303      	movs	r3, #3
 8001544:	e09e      	b.n	8001684 <MBUS_Init+0x1bc>
	if (HAL_UARTEx_DisableFifoMode(&huart) != HAL_OK) {return 4;}
 8001546:	4b51      	ldr	r3, [pc, #324]	@ (800168c <MBUS_Init+0x1c4>)
 8001548:	0018      	movs	r0, r3
 800154a:	f005 fcdf 	bl	8006f0c <HAL_UARTEx_DisableFifoMode>
 800154e:	1e03      	subs	r3, r0, #0
 8001550:	d001      	beq.n	8001556 <MBUS_Init+0x8e>
 8001552:	2304      	movs	r3, #4
 8001554:	e096      	b.n	8001684 <MBUS_Init+0x1bc>
	MBUS_FrameBuffer=calloc(1,sizeof(struct FrameBuffer));
 8001556:	2128      	movs	r1, #40	@ 0x28
 8001558:	2001      	movs	r0, #1
 800155a:	f005 fdf1 	bl	8007140 <calloc>
 800155e:	0003      	movs	r3, r0
 8001560:	001a      	movs	r2, r3
 8001562:	4b4c      	ldr	r3, [pc, #304]	@ (8001694 <MBUS_Init+0x1cc>)
 8001564:	601a      	str	r2, [r3, #0]
	MBUS_FrameBuffer_ToTransmit=calloc(1,sizeof(struct FrameBuffer));
 8001566:	2128      	movs	r1, #40	@ 0x28
 8001568:	2001      	movs	r0, #1
 800156a:	f005 fde9 	bl	8007140 <calloc>
 800156e:	0003      	movs	r3, r0
 8001570:	001a      	movs	r2, r3
 8001572:	4b49      	ldr	r3, [pc, #292]	@ (8001698 <MBUS_Init+0x1d0>)
 8001574:	601a      	str	r2, [r3, #0]
	MBUS_FrameBuffer_Processed=calloc(1,sizeof(struct FrameBuffer));
 8001576:	2128      	movs	r1, #40	@ 0x28
 8001578:	2001      	movs	r0, #1
 800157a:	f005 fde1 	bl	8007140 <calloc>
 800157e:	0003      	movs	r3, r0
 8001580:	001a      	movs	r2, r3
 8001582:	4b46      	ldr	r3, [pc, #280]	@ (800169c <MBUS_Init+0x1d4>)
 8001584:	601a      	str	r2, [r3, #0]
	if (MBUS_FrameBuffer== NULL || MBUS_FrameBuffer_ToTransmit== NULL || MBUS_FrameBuffer_Processed== NULL) {return 5;}
 8001586:	4b43      	ldr	r3, [pc, #268]	@ (8001694 <MBUS_Init+0x1cc>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d007      	beq.n	800159e <MBUS_Init+0xd6>
 800158e:	4b42      	ldr	r3, [pc, #264]	@ (8001698 <MBUS_Init+0x1d0>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <MBUS_Init+0xd6>
 8001596:	4b41      	ldr	r3, [pc, #260]	@ (800169c <MBUS_Init+0x1d4>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <MBUS_Init+0xda>
 800159e:	2305      	movs	r3, #5
 80015a0:	e070      	b.n	8001684 <MBUS_Init+0x1bc>

	// MBUS TIMEOUT TIMER INIT
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015a2:	232c      	movs	r3, #44	@ 0x2c
 80015a4:	18fb      	adds	r3, r7, r3
 80015a6:	0018      	movs	r0, r3
 80015a8:	230c      	movs	r3, #12
 80015aa:	001a      	movs	r2, r3
 80015ac:	2100      	movs	r1, #0
 80015ae:	f005 fec5 	bl	800733c <memset>
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015b2:	231c      	movs	r3, #28
 80015b4:	18fb      	adds	r3, r7, r3
 80015b6:	0018      	movs	r0, r3
 80015b8:	2310      	movs	r3, #16
 80015ba:	001a      	movs	r2, r3
 80015bc:	2100      	movs	r1, #0
 80015be:	f005 febd 	bl	800733c <memset>
	TIM_OC_InitTypeDef sConfigOC = {0};
 80015c2:	003b      	movs	r3, r7
 80015c4:	0018      	movs	r0, r3
 80015c6:	231c      	movs	r3, #28
 80015c8:	001a      	movs	r2, r3
 80015ca:	2100      	movs	r1, #0
 80015cc:	f005 feb6 	bl	800733c <memset>
	htim3.Instance = TIM3;
 80015d0:	4b33      	ldr	r3, [pc, #204]	@ (80016a0 <MBUS_Init+0x1d8>)
 80015d2:	4a34      	ldr	r2, [pc, #208]	@ (80016a4 <MBUS_Init+0x1dc>)
 80015d4:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 2500;
 80015d6:	4b32      	ldr	r3, [pc, #200]	@ (80016a0 <MBUS_Init+0x1d8>)
 80015d8:	4a33      	ldr	r2, [pc, #204]	@ (80016a8 <MBUS_Init+0x1e0>)
 80015da:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015dc:	4b30      	ldr	r3, [pc, #192]	@ (80016a0 <MBUS_Init+0x1d8>)
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80015e2:	4b2f      	ldr	r3, [pc, #188]	@ (80016a0 <MBUS_Init+0x1d8>)
 80015e4:	4a31      	ldr	r2, [pc, #196]	@ (80016ac <MBUS_Init+0x1e4>)
 80015e6:	60da      	str	r2, [r3, #12]
	//htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e8:	4b2d      	ldr	r3, [pc, #180]	@ (80016a0 <MBUS_Init+0x1d8>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK){return 6;}
 80015ee:	4b2c      	ldr	r3, [pc, #176]	@ (80016a0 <MBUS_Init+0x1d8>)
 80015f0:	0018      	movs	r0, r3
 80015f2:	f001 ff19 	bl	8003428 <HAL_TIM_Base_Init>
 80015f6:	1e03      	subs	r3, r0, #0
 80015f8:	d001      	beq.n	80015fe <MBUS_Init+0x136>
 80015fa:	2306      	movs	r3, #6
 80015fc:	e042      	b.n	8001684 <MBUS_Init+0x1bc>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015fe:	211c      	movs	r1, #28
 8001600:	187b      	adds	r3, r7, r1
 8001602:	2280      	movs	r2, #128	@ 0x80
 8001604:	0152      	lsls	r2, r2, #5
 8001606:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK){return 7;}
 8001608:	187a      	adds	r2, r7, r1
 800160a:	4b25      	ldr	r3, [pc, #148]	@ (80016a0 <MBUS_Init+0x1d8>)
 800160c:	0011      	movs	r1, r2
 800160e:	0018      	movs	r0, r3
 8001610:	f002 fd82 	bl	8004118 <HAL_TIM_ConfigClockSource>
 8001614:	1e03      	subs	r3, r0, #0
 8001616:	d001      	beq.n	800161c <MBUS_Init+0x154>
 8001618:	2307      	movs	r3, #7
 800161a:	e033      	b.n	8001684 <MBUS_Init+0x1bc>
	if (HAL_TIM_OC_Init(&htim3) != HAL_OK){return 8;}
 800161c:	4b20      	ldr	r3, [pc, #128]	@ (80016a0 <MBUS_Init+0x1d8>)
 800161e:	0018      	movs	r0, r3
 8001620:	f001 ffa8 	bl	8003574 <HAL_TIM_OC_Init>
 8001624:	1e03      	subs	r3, r0, #0
 8001626:	d001      	beq.n	800162c <MBUS_Init+0x164>
 8001628:	2308      	movs	r3, #8
 800162a:	e02b      	b.n	8001684 <MBUS_Init+0x1bc>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800162c:	212c      	movs	r1, #44	@ 0x2c
 800162e:	187b      	adds	r3, r7, r1
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001634:	187b      	adds	r3, r7, r1
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK){return 9;}
 800163a:	187a      	adds	r2, r7, r1
 800163c:	4b18      	ldr	r3, [pc, #96]	@ (80016a0 <MBUS_Init+0x1d8>)
 800163e:	0011      	movs	r1, r2
 8001640:	0018      	movs	r0, r3
 8001642:	f003 fb73 	bl	8004d2c <HAL_TIMEx_MasterConfigSynchronization>
 8001646:	1e03      	subs	r3, r0, #0
 8001648:	d001      	beq.n	800164e <MBUS_Init+0x186>
 800164a:	2309      	movs	r3, #9
 800164c:	e01a      	b.n	8001684 <MBUS_Init+0x1bc>
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800164e:	003b      	movs	r3, r7
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = timerTop;
 8001654:	4b16      	ldr	r3, [pc, #88]	@ (80016b0 <MBUS_Init+0x1e8>)
 8001656:	881b      	ldrh	r3, [r3, #0]
 8001658:	001a      	movs	r2, r3
 800165a:	003b      	movs	r3, r7
 800165c:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800165e:	003b      	movs	r3, r7
 8001660:	2200      	movs	r2, #0
 8001662:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001664:	003b      	movs	r3, r7
 8001666:	2200      	movs	r2, #0
 8001668:	611a      	str	r2, [r3, #16]
	if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK){return 10;}
 800166a:	0039      	movs	r1, r7
 800166c:	4b0c      	ldr	r3, [pc, #48]	@ (80016a0 <MBUS_Init+0x1d8>)
 800166e:	2200      	movs	r2, #0
 8001670:	0018      	movs	r0, r3
 8001672:	f002 fc4d 	bl	8003f10 <HAL_TIM_OC_ConfigChannel>
 8001676:	1e03      	subs	r3, r0, #0
 8001678:	d001      	beq.n	800167e <MBUS_Init+0x1b6>
 800167a:	230a      	movs	r3, #10
 800167c:	e002      	b.n	8001684 <MBUS_Init+0x1bc>

	// START COMMUNICATION
	MBUS_Reset();
 800167e:	f7ff ff01 	bl	8001484 <MBUS_Reset>
	return 0;
 8001682:	2300      	movs	r3, #0
}
 8001684:	0018      	movs	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	b00e      	add	sp, #56	@ 0x38
 800168a:	bd80      	pop	{r7, pc}
 800168c:	200000dc 	.word	0x200000dc
 8001690:	40013800 	.word	0x40013800
 8001694:	20000174 	.word	0x20000174
 8001698:	20000178 	.word	0x20000178
 800169c:	2000017c 	.word	0x2000017c
 80016a0:	20000090 	.word	0x20000090
 80016a4:	40000400 	.word	0x40000400
 80016a8:	000009c4 	.word	0x000009c4
 80016ac:	0000ffff 	.word	0x0000ffff
 80016b0:	20000000 	.word	0x20000000

080016b4 <MBUS_StartTimeoutTimer>:

void MBUS_StartTimeoutTimer(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
	HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_1);		// STOP TIMEOUT TIMER
 80016b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001728 <MBUS_StartTimeoutTimer+0x74>)
 80016ba:	2100      	movs	r1, #0
 80016bc:	0018      	movs	r0, r3
 80016be:	f002 f8cf 	bl	8003860 <HAL_TIM_OC_Stop_IT>
	if(MBUS_FrameStatus==Payload){__HAL_TIM_SET_COUNTER(&htim3,timerTop-MBUS_FrameBuffer->PS[0]*timerFrameDuration);}
 80016c2:	4b1a      	ldr	r3, [pc, #104]	@ (800172c <MBUS_StartTimeoutTimer+0x78>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	2b05      	cmp	r3, #5
 80016c8:	d10e      	bne.n	80016e8 <MBUS_StartTimeoutTimer+0x34>
 80016ca:	4b19      	ldr	r3, [pc, #100]	@ (8001730 <MBUS_StartTimeoutTimer+0x7c>)
 80016cc:	881b      	ldrh	r3, [r3, #0]
 80016ce:	001a      	movs	r2, r3
 80016d0:	4b18      	ldr	r3, [pc, #96]	@ (8001734 <MBUS_StartTimeoutTimer+0x80>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	791b      	ldrb	r3, [r3, #4]
 80016d6:	0019      	movs	r1, r3
 80016d8:	4b17      	ldr	r3, [pc, #92]	@ (8001738 <MBUS_StartTimeoutTimer+0x84>)
 80016da:	881b      	ldrh	r3, [r3, #0]
 80016dc:	434b      	muls	r3, r1
 80016de:	1ad2      	subs	r2, r2, r3
 80016e0:	4b11      	ldr	r3, [pc, #68]	@ (8001728 <MBUS_StartTimeoutTimer+0x74>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	625a      	str	r2, [r3, #36]	@ 0x24
 80016e6:	e017      	b.n	8001718 <MBUS_StartTimeoutTimer+0x64>
	else if(MBUS_FrameStatus==FCS){__HAL_TIM_SET_COUNTER(&htim3,timerTop-2*timerFrameDuration);}
 80016e8:	4b10      	ldr	r3, [pc, #64]	@ (800172c <MBUS_StartTimeoutTimer+0x78>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b06      	cmp	r3, #6
 80016ee:	d10a      	bne.n	8001706 <MBUS_StartTimeoutTimer+0x52>
 80016f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001730 <MBUS_StartTimeoutTimer+0x7c>)
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	001a      	movs	r2, r3
 80016f6:	4b10      	ldr	r3, [pc, #64]	@ (8001738 <MBUS_StartTimeoutTimer+0x84>)
 80016f8:	881b      	ldrh	r3, [r3, #0]
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	1ad2      	subs	r2, r2, r3
 80016fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001728 <MBUS_StartTimeoutTimer+0x74>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	625a      	str	r2, [r3, #36]	@ 0x24
 8001704:	e008      	b.n	8001718 <MBUS_StartTimeoutTimer+0x64>
	else{__HAL_TIM_SET_COUNTER(&htim3,timerTop-timerFrameDuration);}
 8001706:	4b0a      	ldr	r3, [pc, #40]	@ (8001730 <MBUS_StartTimeoutTimer+0x7c>)
 8001708:	881b      	ldrh	r3, [r3, #0]
 800170a:	001a      	movs	r2, r3
 800170c:	4b0a      	ldr	r3, [pc, #40]	@ (8001738 <MBUS_StartTimeoutTimer+0x84>)
 800170e:	881b      	ldrh	r3, [r3, #0]
 8001710:	1ad2      	subs	r2, r2, r3
 8001712:	4b05      	ldr	r3, [pc, #20]	@ (8001728 <MBUS_StartTimeoutTimer+0x74>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);		// START TIMEOUT TIMER
 8001718:	4b03      	ldr	r3, [pc, #12]	@ (8001728 <MBUS_StartTimeoutTimer+0x74>)
 800171a:	2100      	movs	r1, #0
 800171c:	0018      	movs	r0, r3
 800171e:	f001 ff81 	bl	8003624 <HAL_TIM_OC_Start_IT>

}
 8001722:	46c0      	nop			@ (mov r8, r8)
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20000090 	.word	0x20000090
 800172c:	20000170 	.word	0x20000170
 8001730:	20000000 	.word	0x20000000
 8001734:	20000174 	.word	0x20000174
 8001738:	20000002 	.word	0x20000002

0800173c <HAL_UART_TxCpltCallback>:

// INTERNAL: INTERRUPT - UART FINISHED TRANSMITTING
 void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1){
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a3f      	ldr	r2, [pc, #252]	@ (8001848 <HAL_UART_TxCpltCallback+0x10c>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d000      	beq.n	8001750 <HAL_UART_TxCpltCallback+0x14>
 800174e:	e077      	b.n	8001840 <HAL_UART_TxCpltCallback+0x104>
  __ASM volatile ("cpsid i" : : : "memory");
 8001750:	b672      	cpsid	i
}
 8001752:	46c0      	nop			@ (mov r8, r8)
    	__disable_irq();
    	switch (MBUS_FrameStatus) {
 8001754:	4b3d      	ldr	r3, [pc, #244]	@ (800184c <HAL_UART_TxCpltCallback+0x110>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b07      	cmp	r3, #7
 800175a:	d869      	bhi.n	8001830 <HAL_UART_TxCpltCallback+0xf4>
 800175c:	009a      	lsls	r2, r3, #2
 800175e:	4b3c      	ldr	r3, [pc, #240]	@ (8001850 <HAL_UART_TxCpltCallback+0x114>)
 8001760:	18d3      	adds	r3, r2, r3
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	469f      	mov	pc, r3
    	    case IDLE:
    	    	break;

    	    case TXID:
    	    	// FAULT:
    	    	MBUS_Reset();
 8001766:	f7ff fe8d 	bl	8001484 <MBUS_Reset>
    	    	break;
 800176a:	e065      	b.n	8001838 <HAL_UART_TxCpltCallback+0xfc>

    	    case RXID:
    	    	// MASTER:
    	    	if(MBUS_FrameBuffer->RXID[0]==IDLEframe){
 800176c:	4b39      	ldr	r3, [pc, #228]	@ (8001854 <HAL_UART_TxCpltCallback+0x118>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	789b      	ldrb	r3, [r3, #2]
 8001772:	2ba5      	cmp	r3, #165	@ 0xa5
 8001774:	d105      	bne.n	8001782 <HAL_UART_TxCpltCallback+0x46>
	    			MBUS_UpdateProcessedBuffer(TX_IDLE_FRAME);
 8001776:	2000      	movs	r0, #0
 8001778:	f7ff fe66 	bl	8001448 <MBUS_UpdateProcessedBuffer>
    	    		MBUS_Reset();	// transmitted IDLE frame -> wait for new communication
 800177c:	f7ff fe82 	bl	8001484 <MBUS_Reset>
    	    	}
    	    	else{
    	    		HAL_UART_Transmit_IT(huart,MBUS_FrameBuffer->CHID, sizeof(MBUS_FrameBuffer->CHID));
    	    		MBUS_FrameStatus=CHID;
    	    	}
        		break;
 8001780:	e05a      	b.n	8001838 <HAL_UART_TxCpltCallback+0xfc>
    	    		HAL_UART_Transmit_IT(huart,MBUS_FrameBuffer->CHID, sizeof(MBUS_FrameBuffer->CHID));
 8001782:	4b34      	ldr	r3, [pc, #208]	@ (8001854 <HAL_UART_TxCpltCallback+0x118>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	1cd9      	adds	r1, r3, #3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2201      	movs	r2, #1
 800178c:	0018      	movs	r0, r3
 800178e:	f003 fb9d 	bl	8004ecc <HAL_UART_Transmit_IT>
    	    		MBUS_FrameStatus=CHID;
 8001792:	4b2e      	ldr	r3, [pc, #184]	@ (800184c <HAL_UART_TxCpltCallback+0x110>)
 8001794:	2203      	movs	r2, #3
 8001796:	701a      	strb	r2, [r3, #0]
        		break;
 8001798:	e04e      	b.n	8001838 <HAL_UART_TxCpltCallback+0xfc>

    	    case CHID:
    	        // MASTER:
        		HAL_UART_Transmit_IT(huart,MBUS_FrameBuffer->PS, sizeof(MBUS_FrameBuffer->PS));
 800179a:	4b2e      	ldr	r3, [pc, #184]	@ (8001854 <HAL_UART_TxCpltCallback+0x118>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	1d19      	adds	r1, r3, #4
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2201      	movs	r2, #1
 80017a4:	0018      	movs	r0, r3
 80017a6:	f003 fb91 	bl	8004ecc <HAL_UART_Transmit_IT>
	        	MBUS_FrameStatus=PS;
 80017aa:	4b28      	ldr	r3, [pc, #160]	@ (800184c <HAL_UART_TxCpltCallback+0x110>)
 80017ac:	2204      	movs	r2, #4
 80017ae:	701a      	strb	r2, [r3, #0]
        		break;
 80017b0:	e042      	b.n	8001838 <HAL_UART_TxCpltCallback+0xfc>

    	    case PS:
    	    	// MASTER:
    	    	HAL_UART_Transmit_IT(huart,MBUS_FrameBuffer->Payload,MBUS_FrameBuffer->PS[0]);
 80017b2:	4b28      	ldr	r3, [pc, #160]	@ (8001854 <HAL_UART_TxCpltCallback+0x118>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	1d59      	adds	r1, r3, #5
 80017b8:	4b26      	ldr	r3, [pc, #152]	@ (8001854 <HAL_UART_TxCpltCallback+0x118>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	791b      	ldrb	r3, [r3, #4]
 80017be:	001a      	movs	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	0018      	movs	r0, r3
 80017c4:	f003 fb82 	bl	8004ecc <HAL_UART_Transmit_IT>
	        	MBUS_FrameStatus=Payload;
 80017c8:	4b20      	ldr	r3, [pc, #128]	@ (800184c <HAL_UART_TxCpltCallback+0x110>)
 80017ca:	2205      	movs	r2, #5
 80017cc:	701a      	strb	r2, [r3, #0]
    	        break;
 80017ce:	e033      	b.n	8001838 <HAL_UART_TxCpltCallback+0xfc>

    	    case Payload:
    	    	// MASTER:
    	    	HAL_UART_Transmit_IT(huart,MBUS_FrameBuffer->FCS, sizeof(MBUS_FrameBuffer->FCS));
 80017d0:	4b20      	ldr	r3, [pc, #128]	@ (8001854 <HAL_UART_TxCpltCallback+0x118>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	3325      	adds	r3, #37	@ 0x25
 80017d6:	0019      	movs	r1, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2202      	movs	r2, #2
 80017dc:	0018      	movs	r0, r3
 80017de:	f003 fb75 	bl	8004ecc <HAL_UART_Transmit_IT>
	        	MBUS_FrameStatus=FCS;
 80017e2:	4b1a      	ldr	r3, [pc, #104]	@ (800184c <HAL_UART_TxCpltCallback+0x110>)
 80017e4:	2206      	movs	r2, #6
 80017e6:	701a      	strb	r2, [r3, #0]
        		break;
 80017e8:	e026      	b.n	8001838 <HAL_UART_TxCpltCallback+0xfc>

    	    case FCS:
    	    	// MASTER:
    	    	if(myID==MBUS_FrameBuffer->TXID[0] && MBUS_FrameBuffer->RXID[0]!=RXIDbroadcast){	// after frame transmission I expect ACK byte
 80017ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001854 <HAL_UART_TxCpltCallback+0x118>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	785b      	ldrb	r3, [r3, #1]
 80017f0:	2b0c      	cmp	r3, #12
 80017f2:	d111      	bne.n	8001818 <HAL_UART_TxCpltCallback+0xdc>
 80017f4:	4b17      	ldr	r3, [pc, #92]	@ (8001854 <HAL_UART_TxCpltCallback+0x118>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	789b      	ldrb	r3, [r3, #2]
 80017fa:	2b0f      	cmp	r3, #15
 80017fc:	d00c      	beq.n	8001818 <HAL_UART_TxCpltCallback+0xdc>
    	        	HAL_UART_Receive_IT(huart,MBUS_FrameBuffer->ACK, sizeof(MBUS_FrameBuffer->ACK));
 80017fe:	4b15      	ldr	r3, [pc, #84]	@ (8001854 <HAL_UART_TxCpltCallback+0x118>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	3327      	adds	r3, #39	@ 0x27
 8001804:	0019      	movs	r1, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2201      	movs	r2, #1
 800180a:	0018      	movs	r0, r3
 800180c:	f003 fc06 	bl	800501c <HAL_UART_Receive_IT>
    	        	MBUS_FrameStatus=ACK;
 8001810:	4b0e      	ldr	r3, [pc, #56]	@ (800184c <HAL_UART_TxCpltCallback+0x110>)
 8001812:	2207      	movs	r2, #7
 8001814:	701a      	strb	r2, [r3, #0]
    	    	}
    	    	else{	// fault or RXID is broadcast
	    			MBUS_UpdateProcessedBuffer(TX_OK);
    	    		MBUS_Reset();
    	    	}
    	        break;
 8001816:	e00f      	b.n	8001838 <HAL_UART_TxCpltCallback+0xfc>
	    			MBUS_UpdateProcessedBuffer(TX_OK);
 8001818:	2002      	movs	r0, #2
 800181a:	f7ff fe15 	bl	8001448 <MBUS_UpdateProcessedBuffer>
    	    		MBUS_Reset();
 800181e:	f7ff fe31 	bl	8001484 <MBUS_Reset>
    	        break;
 8001822:	e009      	b.n	8001838 <HAL_UART_TxCpltCallback+0xfc>

    	    case ACK:
    	    	// SLAVE:
    			MBUS_UpdateProcessedBuffer(RX_OK);
 8001824:	2004      	movs	r0, #4
 8001826:	f7ff fe0f 	bl	8001448 <MBUS_UpdateProcessedBuffer>
    	    	MBUS_Reset();
 800182a:	f7ff fe2b 	bl	8001484 <MBUS_Reset>
    	        break;
 800182e:	e003      	b.n	8001838 <HAL_UART_TxCpltCallback+0xfc>

    	    default:
    	    	MBUS_Reset();
 8001830:	f7ff fe28 	bl	8001484 <MBUS_Reset>
    	    	break;
 8001834:	e000      	b.n	8001838 <HAL_UART_TxCpltCallback+0xfc>
    	    	break;
 8001836:	46c0      	nop			@ (mov r8, r8)
    	}
    	MBUS_StartTimeoutTimer();
 8001838:	f7ff ff3c 	bl	80016b4 <MBUS_StartTimeoutTimer>
  __ASM volatile ("cpsie i" : : : "memory");
 800183c:	b662      	cpsie	i
}
 800183e:	46c0      	nop			@ (mov r8, r8)
    	__enable_irq();
    }
}
 8001840:	46c0      	nop			@ (mov r8, r8)
 8001842:	46bd      	mov	sp, r7
 8001844:	b002      	add	sp, #8
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40013800 	.word	0x40013800
 800184c:	20000170 	.word	0x20000170
 8001850:	08007708 	.word	0x08007708
 8001854:	20000174 	.word	0x20000174

08001858 <HAL_UART_RxCpltCallback>:

// INTERNAL: INTERRUPT - UART FINISHED RECEIVING
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1){
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a6d      	ldr	r2, [pc, #436]	@ (8001a1c <HAL_UART_RxCpltCallback+0x1c4>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d000      	beq.n	800186c <HAL_UART_RxCpltCallback+0x14>
 800186a:	e0d3      	b.n	8001a14 <HAL_UART_RxCpltCallback+0x1bc>
  __ASM volatile ("cpsid i" : : : "memory");
 800186c:	b672      	cpsid	i
}
 800186e:	46c0      	nop			@ (mov r8, r8)
    	__disable_irq();
		switch (MBUS_FrameStatus) {
 8001870:	4b6b      	ldr	r3, [pc, #428]	@ (8001a20 <HAL_UART_RxCpltCallback+0x1c8>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b07      	cmp	r3, #7
 8001876:	d900      	bls.n	800187a <HAL_UART_RxCpltCallback+0x22>
 8001878:	e0c4      	b.n	8001a04 <HAL_UART_RxCpltCallback+0x1ac>
 800187a:	009a      	lsls	r2, r3, #2
 800187c:	4b69      	ldr	r3, [pc, #420]	@ (8001a24 <HAL_UART_RxCpltCallback+0x1cc>)
 800187e:	18d3      	adds	r3, r2, r3
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	469f      	mov	pc, r3
		    case IDLE:
				break;

		    case TXID:
		    	// MASTER:
		        if(MBUS_FrameBuffer->TXID[0]==myID){
 8001884:	4b68      	ldr	r3, [pc, #416]	@ (8001a28 <HAL_UART_RxCpltCallback+0x1d0>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	785b      	ldrb	r3, [r3, #1]
 800188a:	2b0c      	cmp	r3, #12
 800188c:	d10d      	bne.n	80018aa <HAL_UART_RxCpltCallback+0x52>
		        	MBUS_UpdateTransmittedBuffer();
 800188e:	f7ff fdbf 	bl	8001410 <MBUS_UpdateTransmittedBuffer>
	        		HAL_UART_Transmit_IT(huart,MBUS_FrameBuffer->RXID, sizeof(MBUS_FrameBuffer->RXID));
 8001892:	4b65      	ldr	r3, [pc, #404]	@ (8001a28 <HAL_UART_RxCpltCallback+0x1d0>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	1c99      	adds	r1, r3, #2
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2201      	movs	r2, #1
 800189c:	0018      	movs	r0, r3
 800189e:	f003 fb15 	bl	8004ecc <HAL_UART_Transmit_IT>
		        	MBUS_FrameStatus=RXID;
 80018a2:	4b5f      	ldr	r3, [pc, #380]	@ (8001a20 <HAL_UART_RxCpltCallback+0x1c8>)
 80018a4:	2202      	movs	r2, #2
 80018a6:	701a      	strb	r2, [r3, #0]
		        else{	// invalid TXID or SYNC byte
		        	if(MBUS_FrameBuffer->TXID[0]>=SYNCbyte){MBUS_UpdateProcessedBuffer(SYNC_BYTE);}
		        	else{MBUS_UpdateProcessedBuffer(RX_ERROR);}
		        	MBUS_Reset();
		        }
		        break;
 80018a8:	e0b0      	b.n	8001a0c <HAL_UART_RxCpltCallback+0x1b4>
		        else if (MBUS_FrameBuffer->TXID[0]>=0x00 && MBUS_FrameBuffer->TXID[0]<=0x0E){	// check validity of TXID
 80018aa:	4b5f      	ldr	r3, [pc, #380]	@ (8001a28 <HAL_UART_RxCpltCallback+0x1d0>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	785b      	ldrb	r3, [r3, #1]
 80018b0:	2b0e      	cmp	r3, #14
 80018b2:	d80b      	bhi.n	80018cc <HAL_UART_RxCpltCallback+0x74>
		        	HAL_UART_Receive_IT(huart,MBUS_FrameBuffer->RXID, sizeof(MBUS_FrameBuffer->RXID));
 80018b4:	4b5c      	ldr	r3, [pc, #368]	@ (8001a28 <HAL_UART_RxCpltCallback+0x1d0>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	1c99      	adds	r1, r3, #2
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2201      	movs	r2, #1
 80018be:	0018      	movs	r0, r3
 80018c0:	f003 fbac 	bl	800501c <HAL_UART_Receive_IT>
			        MBUS_FrameStatus=RXID;
 80018c4:	4b56      	ldr	r3, [pc, #344]	@ (8001a20 <HAL_UART_RxCpltCallback+0x1c8>)
 80018c6:	2202      	movs	r2, #2
 80018c8:	701a      	strb	r2, [r3, #0]
		        break;
 80018ca:	e09f      	b.n	8001a0c <HAL_UART_RxCpltCallback+0x1b4>
		        	if(MBUS_FrameBuffer->TXID[0]>=SYNCbyte){MBUS_UpdateProcessedBuffer(SYNC_BYTE);}
 80018cc:	4b56      	ldr	r3, [pc, #344]	@ (8001a28 <HAL_UART_RxCpltCallback+0x1d0>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	785b      	ldrb	r3, [r3, #1]
 80018d2:	2b54      	cmp	r3, #84	@ 0x54
 80018d4:	d903      	bls.n	80018de <HAL_UART_RxCpltCallback+0x86>
 80018d6:	2008      	movs	r0, #8
 80018d8:	f7ff fdb6 	bl	8001448 <MBUS_UpdateProcessedBuffer>
 80018dc:	e002      	b.n	80018e4 <HAL_UART_RxCpltCallback+0x8c>
		        	else{MBUS_UpdateProcessedBuffer(RX_ERROR);}
 80018de:	2005      	movs	r0, #5
 80018e0:	f7ff fdb2 	bl	8001448 <MBUS_UpdateProcessedBuffer>
		        	MBUS_Reset();
 80018e4:	f7ff fdce 	bl	8001484 <MBUS_Reset>
		        break;
 80018e8:	e090      	b.n	8001a0c <HAL_UART_RxCpltCallback+0x1b4>

		    case RXID:
		    	// SLAVE:
		        if(myID==MBUS_FrameBuffer->RXID[0] || RXIDbroadcast ==MBUS_FrameBuffer->RXID[0]){	// received RXID is equal to myID or broadcast
 80018ea:	4b4f      	ldr	r3, [pc, #316]	@ (8001a28 <HAL_UART_RxCpltCallback+0x1d0>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	789b      	ldrb	r3, [r3, #2]
 80018f0:	2b0c      	cmp	r3, #12
 80018f2:	d004      	beq.n	80018fe <HAL_UART_RxCpltCallback+0xa6>
 80018f4:	4b4c      	ldr	r3, [pc, #304]	@ (8001a28 <HAL_UART_RxCpltCallback+0x1d0>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	789b      	ldrb	r3, [r3, #2]
 80018fa:	2b0f      	cmp	r3, #15
 80018fc:	d10b      	bne.n	8001916 <HAL_UART_RxCpltCallback+0xbe>
		        	HAL_UART_Receive_IT(huart,MBUS_FrameBuffer->CHID, sizeof(MBUS_FrameBuffer->CHID));
 80018fe:	4b4a      	ldr	r3, [pc, #296]	@ (8001a28 <HAL_UART_RxCpltCallback+0x1d0>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	1cd9      	adds	r1, r3, #3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	0018      	movs	r0, r3
 800190a:	f003 fb87 	bl	800501c <HAL_UART_Receive_IT>
		        	MBUS_FrameStatus=CHID;
 800190e:	4b44      	ldr	r3, [pc, #272]	@ (8001a20 <HAL_UART_RxCpltCallback+0x1c8>)
 8001910:	2203      	movs	r2, #3
 8001912:	701a      	strb	r2, [r3, #0]
		        }
		        else{	// frame is not for me
		        	MBUS_UpdateProcessedBuffer(RX_NOT_MY_ADDRESS);
		        	MBUS_Reset();
		        }
		        break;
 8001914:	e07a      	b.n	8001a0c <HAL_UART_RxCpltCallback+0x1b4>
		        	MBUS_UpdateProcessedBuffer(RX_NOT_MY_ADDRESS);
 8001916:	2006      	movs	r0, #6
 8001918:	f7ff fd96 	bl	8001448 <MBUS_UpdateProcessedBuffer>
		        	MBUS_Reset();
 800191c:	f7ff fdb2 	bl	8001484 <MBUS_Reset>
		        break;
 8001920:	e074      	b.n	8001a0c <HAL_UART_RxCpltCallback+0x1b4>

		    case CHID:
		    	// SLAVE:
	        	HAL_UART_Receive_IT(huart,MBUS_FrameBuffer->PS, sizeof(MBUS_FrameBuffer->PS));
 8001922:	4b41      	ldr	r3, [pc, #260]	@ (8001a28 <HAL_UART_RxCpltCallback+0x1d0>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	1d19      	adds	r1, r3, #4
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	0018      	movs	r0, r3
 800192e:	f003 fb75 	bl	800501c <HAL_UART_Receive_IT>
	        	MBUS_FrameStatus=PS;
 8001932:	4b3b      	ldr	r3, [pc, #236]	@ (8001a20 <HAL_UART_RxCpltCallback+0x1c8>)
 8001934:	2204      	movs	r2, #4
 8001936:	701a      	strb	r2, [r3, #0]
		        break;
 8001938:	e068      	b.n	8001a0c <HAL_UART_RxCpltCallback+0x1b4>

		    case PS:
		    	// SLAVE:
	        	HAL_UART_Receive_IT(huart,MBUS_FrameBuffer->Payload,MBUS_FrameBuffer->PS[0]);
 800193a:	4b3b      	ldr	r3, [pc, #236]	@ (8001a28 <HAL_UART_RxCpltCallback+0x1d0>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	1d59      	adds	r1, r3, #5
 8001940:	4b39      	ldr	r3, [pc, #228]	@ (8001a28 <HAL_UART_RxCpltCallback+0x1d0>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	791b      	ldrb	r3, [r3, #4]
 8001946:	001a      	movs	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	0018      	movs	r0, r3
 800194c:	f003 fb66 	bl	800501c <HAL_UART_Receive_IT>
	        	MBUS_FrameStatus=Payload;
 8001950:	4b33      	ldr	r3, [pc, #204]	@ (8001a20 <HAL_UART_RxCpltCallback+0x1c8>)
 8001952:	2205      	movs	r2, #5
 8001954:	701a      	strb	r2, [r3, #0]
		        break;
 8001956:	e059      	b.n	8001a0c <HAL_UART_RxCpltCallback+0x1b4>

		    case Payload:
		    	// SLAVE:
	        	HAL_UART_Receive_IT(huart,MBUS_FrameBuffer->FCS,sizeof(MBUS_FrameBuffer->FCS));
 8001958:	4b33      	ldr	r3, [pc, #204]	@ (8001a28 <HAL_UART_RxCpltCallback+0x1d0>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	3325      	adds	r3, #37	@ 0x25
 800195e:	0019      	movs	r1, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2202      	movs	r2, #2
 8001964:	0018      	movs	r0, r3
 8001966:	f003 fb59 	bl	800501c <HAL_UART_Receive_IT>
	    		CalculateFCS(tmpFCSbuffer,MBUS_FrameBuffer);
 800196a:	4b2f      	ldr	r3, [pc, #188]	@ (8001a28 <HAL_UART_RxCpltCallback+0x1d0>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	4b2f      	ldr	r3, [pc, #188]	@ (8001a2c <HAL_UART_RxCpltCallback+0x1d4>)
 8001970:	0011      	movs	r1, r2
 8001972:	0018      	movs	r0, r3
 8001974:	f7ff fc60 	bl	8001238 <CalculateFCS>
	        	MBUS_FrameStatus=FCS;
 8001978:	4b29      	ldr	r3, [pc, #164]	@ (8001a20 <HAL_UART_RxCpltCallback+0x1c8>)
 800197a:	2206      	movs	r2, #6
 800197c:	701a      	strb	r2, [r3, #0]
	    		break;
 800197e:	e045      	b.n	8001a0c <HAL_UART_RxCpltCallback+0x1b4>

		    case FCS:
		    	// SLAVE:
		    	if(MBUS_FrameBuffer->FCS[0]==tmpFCSbuffer[0] && MBUS_FrameBuffer->FCS[1]==tmpFCSbuffer[1]){	// compare FCS
 8001980:	4b29      	ldr	r3, [pc, #164]	@ (8001a28 <HAL_UART_RxCpltCallback+0x1d0>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2225      	movs	r2, #37	@ 0x25
 8001986:	5c9a      	ldrb	r2, [r3, r2]
 8001988:	4b28      	ldr	r3, [pc, #160]	@ (8001a2c <HAL_UART_RxCpltCallback+0x1d4>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	429a      	cmp	r2, r3
 800198e:	d11d      	bne.n	80019cc <HAL_UART_RxCpltCallback+0x174>
 8001990:	4b25      	ldr	r3, [pc, #148]	@ (8001a28 <HAL_UART_RxCpltCallback+0x1d0>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2226      	movs	r2, #38	@ 0x26
 8001996:	5c9a      	ldrb	r2, [r3, r2]
 8001998:	4b24      	ldr	r3, [pc, #144]	@ (8001a2c <HAL_UART_RxCpltCallback+0x1d4>)
 800199a:	785b      	ldrb	r3, [r3, #1]
 800199c:	429a      	cmp	r2, r3
 800199e:	d115      	bne.n	80019cc <HAL_UART_RxCpltCallback+0x174>
		    		if(MBUS_FrameBuffer->RXID[0]==RXIDbroadcast){	// if RXID is BROADCAST -> do not ACK
 80019a0:	4b21      	ldr	r3, [pc, #132]	@ (8001a28 <HAL_UART_RxCpltCallback+0x1d0>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	789b      	ldrb	r3, [r3, #2]
 80019a6:	2b0f      	cmp	r3, #15
 80019a8:	d105      	bne.n	80019b6 <HAL_UART_RxCpltCallback+0x15e>
		    			MBUS_UpdateProcessedBuffer(RX_OK);
 80019aa:	2004      	movs	r0, #4
 80019ac:	f7ff fd4c 	bl	8001448 <MBUS_UpdateProcessedBuffer>
		    			MBUS_Reset();
 80019b0:	f7ff fd68 	bl	8001484 <MBUS_Reset>
		    	        break;
 80019b4:	e02a      	b.n	8001a0c <HAL_UART_RxCpltCallback+0x1b4>
		    		}
		    		else{
		    			HAL_UART_Transmit_IT(huart, &ACKbyte, sizeof(ACKbyte));	// transmit ACK
 80019b6:	491e      	ldr	r1, [pc, #120]	@ (8001a30 <HAL_UART_RxCpltCallback+0x1d8>)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2201      	movs	r2, #1
 80019bc:	0018      	movs	r0, r3
 80019be:	f003 fa85 	bl	8004ecc <HAL_UART_Transmit_IT>
		    		if(MBUS_FrameBuffer->RXID[0]==RXIDbroadcast){	// if RXID is BROADCAST -> do not ACK
 80019c2:	46c0      	nop			@ (mov r8, r8)
		    	else{	// invalid FCS
	    			MBUS_UpdateProcessedBuffer(RX_ERROR);
		    		MBUS_Reset();
		    		break;
		    	}
	        	MBUS_FrameStatus=ACK;
 80019c4:	4b16      	ldr	r3, [pc, #88]	@ (8001a20 <HAL_UART_RxCpltCallback+0x1c8>)
 80019c6:	2207      	movs	r2, #7
 80019c8:	701a      	strb	r2, [r3, #0]
		        break;
 80019ca:	e01f      	b.n	8001a0c <HAL_UART_RxCpltCallback+0x1b4>
	    			MBUS_UpdateProcessedBuffer(RX_ERROR);
 80019cc:	2005      	movs	r0, #5
 80019ce:	f7ff fd3b 	bl	8001448 <MBUS_UpdateProcessedBuffer>
		    		MBUS_Reset();
 80019d2:	f7ff fd57 	bl	8001484 <MBUS_Reset>
		    		break;
 80019d6:	e019      	b.n	8001a0c <HAL_UART_RxCpltCallback+0x1b4>

		    case ACK:
		    	// MASTER:
		    	if(myID==MBUS_FrameBuffer->TXID[0]){
 80019d8:	4b13      	ldr	r3, [pc, #76]	@ (8001a28 <HAL_UART_RxCpltCallback+0x1d0>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	785b      	ldrb	r3, [r3, #1]
 80019de:	2b0c      	cmp	r3, #12
 80019e0:	d10d      	bne.n	80019fe <HAL_UART_RxCpltCallback+0x1a6>
		    		if(MBUS_FrameBuffer->ACK[0]==ACKbyte){
 80019e2:	4b11      	ldr	r3, [pc, #68]	@ (8001a28 <HAL_UART_RxCpltCallback+0x1d0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2227      	movs	r2, #39	@ 0x27
 80019e8:	5c9b      	ldrb	r3, [r3, r2]
 80019ea:	22a5      	movs	r2, #165	@ 0xa5
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d103      	bne.n	80019f8 <HAL_UART_RxCpltCallback+0x1a0>
		    			MBUS_UpdateProcessedBuffer(TX_OK);
 80019f0:	2002      	movs	r0, #2
 80019f2:	f7ff fd29 	bl	8001448 <MBUS_UpdateProcessedBuffer>
 80019f6:	e002      	b.n	80019fe <HAL_UART_RxCpltCallback+0x1a6>
		    		}
		    		else{
		    			MBUS_UpdateProcessedBuffer(TX_NO_ACK);	// communication error: no ACK
 80019f8:	2001      	movs	r0, #1
 80019fa:	f7ff fd25 	bl	8001448 <MBUS_UpdateProcessedBuffer>
		    		}
		    	}
		    	MBUS_Reset();
 80019fe:	f7ff fd41 	bl	8001484 <MBUS_Reset>
    	    	break;
 8001a02:	e003      	b.n	8001a0c <HAL_UART_RxCpltCallback+0x1b4>

		    default:
		    	MBUS_Reset();
 8001a04:	f7ff fd3e 	bl	8001484 <MBUS_Reset>
		    	break;
 8001a08:	e000      	b.n	8001a0c <HAL_UART_RxCpltCallback+0x1b4>
				break;
 8001a0a:	46c0      	nop			@ (mov r8, r8)
		    }
		MBUS_StartTimeoutTimer();
 8001a0c:	f7ff fe52 	bl	80016b4 <MBUS_StartTimeoutTimer>
  __ASM volatile ("cpsie i" : : : "memory");
 8001a10:	b662      	cpsie	i
}
 8001a12:	46c0      	nop			@ (mov r8, r8)
    	__enable_irq();
	}
}
 8001a14:	46c0      	nop			@ (mov r8, r8)
 8001a16:	46bd      	mov	sp, r7
 8001a18:	b002      	add	sp, #8
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40013800 	.word	0x40013800
 8001a20:	20000170 	.word	0x20000170
 8001a24:	08007728 	.word	0x08007728
 8001a28:	20000174 	.word	0x20000174
 8001a2c:	20000180 	.word	0x20000180
 8001a30:	08007704 	.word	0x08007704

08001a34 <HAL_UART_ErrorCallback>:

// INTERNAL: BREAK EVENT
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a3c:	b672      	cpsid	i
}
 8001a3e:	46c0      	nop			@ (mov r8, r8)
	if (HAL_UART_ERROR_FE) {
    	__disable_irq();
    	HAL_UART_Receive_IT(huart,MBUS_FrameBuffer->TXID, sizeof(MBUS_FrameBuffer->TXID));
 8001a40:	4b08      	ldr	r3, [pc, #32]	@ (8001a64 <HAL_UART_ErrorCallback+0x30>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	1c59      	adds	r1, r3, #1
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	0018      	movs	r0, r3
 8001a4c:	f003 fae6 	bl	800501c <HAL_UART_Receive_IT>
    	MBUS_FrameStatus=TXID;
 8001a50:	4b05      	ldr	r3, [pc, #20]	@ (8001a68 <HAL_UART_ErrorCallback+0x34>)
 8001a52:	2201      	movs	r2, #1
 8001a54:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001a56:	b662      	cpsie	i
}
 8001a58:	46c0      	nop			@ (mov r8, r8)
    	__enable_irq();
    }
}
 8001a5a:	46c0      	nop			@ (mov r8, r8)
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	b002      	add	sp, #8
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	46c0      	nop			@ (mov r8, r8)
 8001a64:	20000174 	.word	0x20000174
 8001a68:	20000170 	.word	0x20000170

08001a6c <HAL_TIM_OC_DelayElapsedCallback>:

// TIMER TIMEOUT
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a0e      	ldr	r2, [pc, #56]	@ (8001ab4 <HAL_TIM_OC_DelayElapsedCallback+0x48>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d115      	bne.n	8001aaa <HAL_TIM_OC_DelayElapsedCallback+0x3e>
  __ASM volatile ("cpsid i" : : : "memory");
 8001a7e:	b672      	cpsid	i
}
 8001a80:	46c0      	nop			@ (mov r8, r8)
    	__disable_irq();
		__HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2202      	movs	r2, #2
 8001a88:	4252      	negs	r2, r2
 8001a8a:	611a      	str	r2, [r3, #16]
		if(MBUS_FrameStatus==ACK){MBUS_UpdateProcessedBuffer(TX_NO_ACK);}
 8001a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ab8 <HAL_TIM_OC_DelayElapsedCallback+0x4c>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b07      	cmp	r3, #7
 8001a92:	d103      	bne.n	8001a9c <HAL_TIM_OC_DelayElapsedCallback+0x30>
 8001a94:	2001      	movs	r0, #1
 8001a96:	f7ff fcd7 	bl	8001448 <MBUS_UpdateProcessedBuffer>
 8001a9a:	e002      	b.n	8001aa2 <HAL_TIM_OC_DelayElapsedCallback+0x36>
		else{MBUS_UpdateProcessedBuffer(ERROR_TIMEOUT);}
 8001a9c:	2003      	movs	r0, #3
 8001a9e:	f7ff fcd3 	bl	8001448 <MBUS_UpdateProcessedBuffer>
		MBUS_Reset();
 8001aa2:	f7ff fcef 	bl	8001484 <MBUS_Reset>
  __ASM volatile ("cpsie i" : : : "memory");
 8001aa6:	b662      	cpsie	i
}
 8001aa8:	46c0      	nop			@ (mov r8, r8)
    	__enable_irq();
	}
}
 8001aaa:	46c0      	nop			@ (mov r8, r8)
 8001aac:	46bd      	mov	sp, r7
 8001aae:	b002      	add	sp, #8
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	46c0      	nop			@ (mov r8, r8)
 8001ab4:	40000400 	.word	0x40000400
 8001ab8:	20000170 	.word	0x20000170

08001abc <RPM_Init>:
volatile static uint32_t OVFcounter=0;
static volatile uint8_t measureCounter=0;



unsigned RPM_Init(void){
 8001abc:	b590      	push	{r4, r7, lr}
 8001abe:	b089      	sub	sp, #36	@ 0x24
 8001ac0:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac2:	2314      	movs	r3, #20
 8001ac4:	18fb      	adds	r3, r7, r3
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	230c      	movs	r3, #12
 8001aca:	001a      	movs	r2, r3
 8001acc:	2100      	movs	r1, #0
 8001ace:	f005 fc35 	bl	800733c <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001ad2:	1d3b      	adds	r3, r7, #4
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	2310      	movs	r3, #16
 8001ad8:	001a      	movs	r2, r3
 8001ada:	2100      	movs	r1, #0
 8001adc:	f005 fc2e 	bl	800733c <memset>
  htim1.Instance = TIM1;
 8001ae0:	4b55      	ldr	r3, [pc, #340]	@ (8001c38 <RPM_Init+0x17c>)
 8001ae2:	4a56      	ldr	r2, [pc, #344]	@ (8001c3c <RPM_Init+0x180>)
 8001ae4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001ae6:	4b54      	ldr	r3, [pc, #336]	@ (8001c38 <RPM_Init+0x17c>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aec:	4b52      	ldr	r3, [pc, #328]	@ (8001c38 <RPM_Init+0x17c>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001af2:	4b51      	ldr	r3, [pc, #324]	@ (8001c38 <RPM_Init+0x17c>)
 8001af4:	4a52      	ldr	r2, [pc, #328]	@ (8001c40 <RPM_Init+0x184>)
 8001af6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001af8:	4b4f      	ldr	r3, [pc, #316]	@ (8001c38 <RPM_Init+0x17c>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001afe:	4b4e      	ldr	r3, [pc, #312]	@ (8001c38 <RPM_Init+0x17c>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b04:	4b4c      	ldr	r3, [pc, #304]	@ (8001c38 <RPM_Init+0x17c>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK){return 1;}
 8001b0a:	4b4b      	ldr	r3, [pc, #300]	@ (8001c38 <RPM_Init+0x17c>)
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	f001 ff75 	bl	80039fc <HAL_TIM_IC_Init>
 8001b12:	1e03      	subs	r3, r0, #0
 8001b14:	d001      	beq.n	8001b1a <RPM_Init+0x5e>
 8001b16:	2301      	movs	r3, #1
 8001b18:	e089      	b.n	8001c2e <RPM_Init+0x172>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b1a:	2114      	movs	r1, #20
 8001b1c:	187b      	adds	r3, r7, r1
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b22:	187b      	adds	r3, r7, r1
 8001b24:	2200      	movs	r2, #0
 8001b26:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b28:	187b      	adds	r3, r7, r1
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK){return 2;}
 8001b2e:	187a      	adds	r2, r7, r1
 8001b30:	4b41      	ldr	r3, [pc, #260]	@ (8001c38 <RPM_Init+0x17c>)
 8001b32:	0011      	movs	r1, r2
 8001b34:	0018      	movs	r0, r3
 8001b36:	f003 f8f9 	bl	8004d2c <HAL_TIMEx_MasterConfigSynchronization>
 8001b3a:	1e03      	subs	r3, r0, #0
 8001b3c:	d001      	beq.n	8001b42 <RPM_Init+0x86>
 8001b3e:	2302      	movs	r3, #2
 8001b40:	e075      	b.n	8001c2e <RPM_Init+0x172>

  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001b42:	1d3b      	adds	r3, r7, #4
 8001b44:	2202      	movs	r2, #2
 8001b46:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b48:	1d3b      	adds	r3, r7, #4
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b4e:	1d3b      	adds	r3, r7, #4
 8001b50:	2200      	movs	r2, #0
 8001b52:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8001b54:	1d3b      	adds	r3, r7, #4
 8001b56:	2200      	movs	r2, #0
 8001b58:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK){return 3;}
 8001b5a:	1d39      	adds	r1, r7, #4
 8001b5c:	4b36      	ldr	r3, [pc, #216]	@ (8001c38 <RPM_Init+0x17c>)
 8001b5e:	220c      	movs	r2, #12
 8001b60:	0018      	movs	r0, r3
 8001b62:	f002 fa35 	bl	8003fd0 <HAL_TIM_IC_ConfigChannel>
 8001b66:	1e03      	subs	r3, r0, #0
 8001b68:	d001      	beq.n	8001b6e <RPM_Init+0xb2>
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e05f      	b.n	8001c2e <RPM_Init+0x172>

  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_4);
 8001b6e:	4b32      	ldr	r3, [pc, #200]	@ (8001c38 <RPM_Init+0x17c>)
 8001b70:	210c      	movs	r1, #12
 8001b72:	0018      	movs	r0, r3
 8001b74:	f001 ff9a 	bl	8003aac <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8001b78:	4b2f      	ldr	r3, [pc, #188]	@ (8001c38 <RPM_Init+0x17c>)
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	f001 fcac 	bl	80034d8 <HAL_TIM_Base_Start_IT>

  CLK=HAL_RCC_GetPCLK1Freq();
 8001b80:	f001 fb4e 	bl	8003220 <HAL_RCC_GetPCLK1Freq>
 8001b84:	0002      	movs	r2, r0
 8001b86:	4b2f      	ldr	r3, [pc, #188]	@ (8001c44 <RPM_Init+0x188>)
 8001b88:	601a      	str	r2, [r3, #0]
  OVFlimit=(CLK*60)/(RPM_THRESHHOLD*65536*RPM_PULSES);
 8001b8a:	4b2e      	ldr	r3, [pc, #184]	@ (8001c44 <RPM_Init+0x188>)
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	0013      	movs	r3, r2
 8001b90:	011b      	lsls	r3, r3, #4
 8001b92:	1a9b      	subs	r3, r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	001a      	movs	r2, r3
 8001b98:	23af      	movs	r3, #175	@ 0xaf
 8001b9a:	04d9      	lsls	r1, r3, #19
 8001b9c:	0010      	movs	r0, r2
 8001b9e:	f7fe fab3 	bl	8000108 <__udivsi3>
 8001ba2:	0003      	movs	r3, r0
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	4b28      	ldr	r3, [pc, #160]	@ (8001c48 <RPM_Init+0x18c>)
 8001ba8:	801a      	strh	r2, [r3, #0]
  minMeasureTime=((uint32_t)((float)(OVFlimit/3)*65536))/(CLK/1000);
 8001baa:	4b27      	ldr	r3, [pc, #156]	@ (8001c48 <RPM_Init+0x18c>)
 8001bac:	881b      	ldrh	r3, [r3, #0]
 8001bae:	2103      	movs	r1, #3
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	f7fe faa9 	bl	8000108 <__udivsi3>
 8001bb6:	0003      	movs	r3, r0
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	0018      	movs	r0, r3
 8001bbc:	f7ff f954 	bl	8000e68 <__aeabi_i2f>
 8001bc0:	1c03      	adds	r3, r0, #0
 8001bc2:	218f      	movs	r1, #143	@ 0x8f
 8001bc4:	05c9      	lsls	r1, r1, #23
 8001bc6:	1c18      	adds	r0, r3, #0
 8001bc8:	f7fe fe4c 	bl	8000864 <__aeabi_fmul>
 8001bcc:	1c03      	adds	r3, r0, #0
 8001bce:	1c18      	adds	r0, r3, #0
 8001bd0:	f7fe fc4a 	bl	8000468 <__aeabi_f2uiz>
 8001bd4:	0004      	movs	r4, r0
 8001bd6:	4b1b      	ldr	r3, [pc, #108]	@ (8001c44 <RPM_Init+0x188>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	22fa      	movs	r2, #250	@ 0xfa
 8001bdc:	0091      	lsls	r1, r2, #2
 8001bde:	0018      	movs	r0, r3
 8001be0:	f7fe fa92 	bl	8000108 <__udivsi3>
 8001be4:	0003      	movs	r3, r0
 8001be6:	0019      	movs	r1, r3
 8001be8:	0020      	movs	r0, r4
 8001bea:	f7fe fa8d 	bl	8000108 <__udivsi3>
 8001bee:	0003      	movs	r3, r0
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	4b16      	ldr	r3, [pc, #88]	@ (8001c4c <RPM_Init+0x190>)
 8001bf4:	701a      	strb	r2, [r3, #0]
  maxMeasureTime=((uint32_t)(float)OVFlimit*65536)/(CLK/1000);
 8001bf6:	4b14      	ldr	r3, [pc, #80]	@ (8001c48 <RPM_Init+0x18c>)
 8001bf8:	881b      	ldrh	r3, [r3, #0]
 8001bfa:	0018      	movs	r0, r3
 8001bfc:	f7ff f980 	bl	8000f00 <__aeabi_ui2f>
 8001c00:	1c03      	adds	r3, r0, #0
 8001c02:	1c18      	adds	r0, r3, #0
 8001c04:	f7fe fc30 	bl	8000468 <__aeabi_f2uiz>
 8001c08:	0003      	movs	r3, r0
 8001c0a:	041c      	lsls	r4, r3, #16
 8001c0c:	4b0d      	ldr	r3, [pc, #52]	@ (8001c44 <RPM_Init+0x188>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	22fa      	movs	r2, #250	@ 0xfa
 8001c12:	0091      	lsls	r1, r2, #2
 8001c14:	0018      	movs	r0, r3
 8001c16:	f7fe fa77 	bl	8000108 <__udivsi3>
 8001c1a:	0003      	movs	r3, r0
 8001c1c:	0019      	movs	r1, r3
 8001c1e:	0020      	movs	r0, r4
 8001c20:	f7fe fa72 	bl	8000108 <__udivsi3>
 8001c24:	0003      	movs	r3, r0
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	4b09      	ldr	r3, [pc, #36]	@ (8001c50 <RPM_Init+0x194>)
 8001c2a:	701a      	strb	r2, [r3, #0]
  return 0;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	0018      	movs	r0, r3
 8001c30:	46bd      	mov	sp, r7
 8001c32:	b009      	add	sp, #36	@ 0x24
 8001c34:	bd90      	pop	{r4, r7, pc}
 8001c36:	46c0      	nop			@ (mov r8, r8)
 8001c38:	20000184 	.word	0x20000184
 8001c3c:	40012c00 	.word	0x40012c00
 8001c40:	0000ffff 	.word	0x0000ffff
 8001c44:	200001d4 	.word	0x200001d4
 8001c48:	200001da 	.word	0x200001da
 8001c4c:	200001ea 	.word	0x200001ea
 8001c50:	200001eb 	.word	0x200001eb

08001c54 <RPM_ResetMeasurement>:

void RPM_ResetMeasurement(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
	previousCaptureValue = captureValue;
 8001c58:	4b08      	ldr	r3, [pc, #32]	@ (8001c7c <RPM_ResetMeasurement+0x28>)
 8001c5a:	881b      	ldrh	r3, [r3, #0]
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	4b08      	ldr	r3, [pc, #32]	@ (8001c80 <RPM_ResetMeasurement+0x2c>)
 8001c60:	801a      	strh	r2, [r3, #0]
	OVFcounter=0;
 8001c62:	4b08      	ldr	r3, [pc, #32]	@ (8001c84 <RPM_ResetMeasurement+0x30>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
	measureCounter=0;
 8001c68:	4b07      	ldr	r3, [pc, #28]	@ (8001c88 <RPM_ResetMeasurement+0x34>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	701a      	strb	r2, [r3, #0]
	bNewRPM=true;
 8001c6e:	4b07      	ldr	r3, [pc, #28]	@ (8001c8c <RPM_ResetMeasurement+0x38>)
 8001c70:	2201      	movs	r2, #1
 8001c72:	701a      	strb	r2, [r3, #0]
}
 8001c74:	46c0      	nop			@ (mov r8, r8)
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	46c0      	nop			@ (mov r8, r8)
 8001c7c:	200001dc 	.word	0x200001dc
 8001c80:	200001de 	.word	0x200001de
 8001c84:	200001ec 	.word	0x200001ec
 8001c88:	200001f0 	.word	0x200001f0
 8001c8c:	200001d0 	.word	0x200001d0

08001c90 <RPM_GetData>:

unsigned RPM_GetData(uint8_t aRPMMessage[5])
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
	if(!bNewRPM){return 1;}					// no new data
 8001c98:	4b12      	ldr	r3, [pc, #72]	@ (8001ce4 <RPM_GetData+0x54>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	4053      	eors	r3, r2
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <RPM_GetData+0x1c>
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e017      	b.n	8001cdc <RPM_GetData+0x4c>
	if(aRPMMessage == NULL){return 2;}		// invalid pointer
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <RPM_GetData+0x26>
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	e012      	b.n	8001cdc <RPM_GetData+0x4c>
	RPMtoRPMMessage(aRPMMessage,&RPM,&measureTime,RPM_ID);
 8001cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce8 <RPM_GetData+0x58>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	4a0b      	ldr	r2, [pc, #44]	@ (8001cec <RPM_GetData+0x5c>)
 8001cbe:	490c      	ldr	r1, [pc, #48]	@ (8001cf0 <RPM_GetData+0x60>)
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f000 f817 	bl	8001cf4 <RPMtoRPMMessage>
	RPM_ID++;
 8001cc6:	4b08      	ldr	r3, [pc, #32]	@ (8001ce8 <RPM_GetData+0x58>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	3301      	adds	r3, #1
 8001cce:	b2da      	uxtb	r2, r3
 8001cd0:	4b05      	ldr	r3, [pc, #20]	@ (8001ce8 <RPM_GetData+0x58>)
 8001cd2:	701a      	strb	r2, [r3, #0]
	bNewRPM=false;
 8001cd4:	4b03      	ldr	r3, [pc, #12]	@ (8001ce4 <RPM_GetData+0x54>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	701a      	strb	r2, [r3, #0]
	return 0;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	0018      	movs	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	b002      	add	sp, #8
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	200001d0 	.word	0x200001d0
 8001ce8:	200001d8 	.word	0x200001d8
 8001cec:	200001e8 	.word	0x200001e8
 8001cf0:	200001e4 	.word	0x200001e4

08001cf4 <RPMtoRPMMessage>:

unsigned RPMtoRPMMessage(uint8_t aRPMMessage[RPM_MESSAGE_SIZE], float *aRPM, uint16_t *aTime, uint8_t aID)
{
 8001cf4:	b590      	push	{r4, r7, lr}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
 8001d00:	001a      	movs	r2, r3
 8001d02:	1cfb      	adds	r3, r7, #3
 8001d04:	701a      	strb	r2, [r3, #0]
	if(*aRPM>255){return 1;}	// invalid data
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4924      	ldr	r1, [pc, #144]	@ (8001d9c <RPMtoRPMMessage+0xa8>)
 8001d0c:	1c18      	adds	r0, r3, #0
 8001d0e:	f7fe fb97 	bl	8000440 <__aeabi_fcmpgt>
 8001d12:	1e03      	subs	r3, r0, #0
 8001d14:	d001      	beq.n	8001d1a <RPMtoRPMMessage+0x26>
 8001d16:	2301      	movs	r3, #1
 8001d18:	e03c      	b.n	8001d94 <RPMtoRPMMessage+0xa0>
		[2] time_h - GG = T/256
		[3] time_l - HH = T%256
		[4] settings: 0-optical, 1-Hall
	**/
	if(aID>255){return 3;}	// invalid data
	if(aRPMMessage == NULL){return 4;}
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d101      	bne.n	8001d24 <RPMtoRPMMessage+0x30>
 8001d20:	2304      	movs	r3, #4
 8001d22:	e037      	b.n	8001d94 <RPMtoRPMMessage+0xa0>
	aRPMMessage[0]=(uint8_t)*aRPM;
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	1c18      	adds	r0, r3, #0
 8001d2a:	f7fe fb9d 	bl	8000468 <__aeabi_f2uiz>
 8001d2e:	0003      	movs	r3, r0
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	701a      	strb	r2, [r3, #0]
	aRPMMessage[1]=(uint8_t)(float)((*aRPM-aRPMMessage[0])*100);
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	681c      	ldr	r4, [r3, #0]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	0018      	movs	r0, r3
 8001d40:	f7ff f892 	bl	8000e68 <__aeabi_i2f>
 8001d44:	1c03      	adds	r3, r0, #0
 8001d46:	1c19      	adds	r1, r3, #0
 8001d48:	1c20      	adds	r0, r4, #0
 8001d4a:	f7fe fec9 	bl	8000ae0 <__aeabi_fsub>
 8001d4e:	1c03      	adds	r3, r0, #0
 8001d50:	4913      	ldr	r1, [pc, #76]	@ (8001da0 <RPMtoRPMMessage+0xac>)
 8001d52:	1c18      	adds	r0, r3, #0
 8001d54:	f7fe fd86 	bl	8000864 <__aeabi_fmul>
 8001d58:	1c03      	adds	r3, r0, #0
 8001d5a:	1c1a      	adds	r2, r3, #0
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	1c5c      	adds	r4, r3, #1
 8001d60:	1c10      	adds	r0, r2, #0
 8001d62:	f7fe fb81 	bl	8000468 <__aeabi_f2uiz>
 8001d66:	0003      	movs	r3, r0
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	7023      	strb	r3, [r4, #0]
	aRPMMessage[2]=(uint8_t)(*aTime >> 8);		// H Byte
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	881b      	ldrh	r3, [r3, #0]
 8001d70:	0a1b      	lsrs	r3, r3, #8
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	3302      	adds	r3, #2
 8001d78:	b2d2      	uxtb	r2, r2
 8001d7a:	701a      	strb	r2, [r3, #0]
	aRPMMessage[3]=(uint8_t)(*aTime & 0xFF);	// L Byte
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	881a      	ldrh	r2, [r3, #0]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	3303      	adds	r3, #3
 8001d84:	b2d2      	uxtb	r2, r2
 8001d86:	701a      	strb	r2, [r3, #0]
	aRPMMessage[4]=aID;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	3304      	adds	r3, #4
 8001d8c:	1cfa      	adds	r2, r7, #3
 8001d8e:	7812      	ldrb	r2, [r2, #0]
 8001d90:	701a      	strb	r2, [r3, #0]
	return 0;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	0018      	movs	r0, r3
 8001d96:	46bd      	mov	sp, r7
 8001d98:	b005      	add	sp, #20
 8001d9a:	bd90      	pop	{r4, r7, pc}
 8001d9c:	437f0000 	.word	0x437f0000
 8001da0:	42c80000 	.word	0x42c80000

08001da4 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001da4:	b590      	push	{r4, r7, lr}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) //
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a5b      	ldr	r2, [pc, #364]	@ (8001f20 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d000      	beq.n	8001db8 <HAL_TIM_IC_CaptureCallback+0x14>
 8001db6:	e0af      	b.n	8001f18 <HAL_TIM_IC_CaptureCallback+0x174>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	7f1b      	ldrb	r3, [r3, #28]
 8001dbc:	2b08      	cmp	r3, #8
 8001dbe:	d000      	beq.n	8001dc2 <HAL_TIM_IC_CaptureCallback+0x1e>
 8001dc0:	e0aa      	b.n	8001f18 <HAL_TIM_IC_CaptureCallback+0x174>
  __ASM volatile ("cpsid i" : : : "memory");
 8001dc2:	b672      	cpsid	i
}
 8001dc4:	46c0      	nop			@ (mov r8, r8)
    {
		__disable_irq();
		captureValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	210c      	movs	r1, #12
 8001dca:	0018      	movs	r0, r3
 8001dcc:	f002 fa7a 	bl	80042c4 <HAL_TIM_ReadCapturedValue>
 8001dd0:	0003      	movs	r3, r0
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	4b53      	ldr	r3, [pc, #332]	@ (8001f24 <HAL_TIM_IC_CaptureCallback+0x180>)
 8001dd6:	801a      	strh	r2, [r3, #0]
		if(OVFcounter>0){ticks=65536*OVFcounter + captureValue - previousCaptureValue;}
 8001dd8:	4b53      	ldr	r3, [pc, #332]	@ (8001f28 <HAL_TIM_IC_CaptureCallback+0x184>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d00d      	beq.n	8001dfc <HAL_TIM_IC_CaptureCallback+0x58>
 8001de0:	4b51      	ldr	r3, [pc, #324]	@ (8001f28 <HAL_TIM_IC_CaptureCallback+0x184>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	041b      	lsls	r3, r3, #16
 8001de6:	4a4f      	ldr	r2, [pc, #316]	@ (8001f24 <HAL_TIM_IC_CaptureCallback+0x180>)
 8001de8:	8812      	ldrh	r2, [r2, #0]
 8001dea:	b292      	uxth	r2, r2
 8001dec:	189b      	adds	r3, r3, r2
 8001dee:	4a4f      	ldr	r2, [pc, #316]	@ (8001f2c <HAL_TIM_IC_CaptureCallback+0x188>)
 8001df0:	8812      	ldrh	r2, [r2, #0]
 8001df2:	b292      	uxth	r2, r2
 8001df4:	1a9a      	subs	r2, r3, r2
 8001df6:	4b4e      	ldr	r3, [pc, #312]	@ (8001f30 <HAL_TIM_IC_CaptureCallback+0x18c>)
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	e00a      	b.n	8001e12 <HAL_TIM_IC_CaptureCallback+0x6e>
		else{ticks=captureValue - previousCaptureValue;}
 8001dfc:	4b49      	ldr	r3, [pc, #292]	@ (8001f24 <HAL_TIM_IC_CaptureCallback+0x180>)
 8001dfe:	881b      	ldrh	r3, [r3, #0]
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	001a      	movs	r2, r3
 8001e04:	4b49      	ldr	r3, [pc, #292]	@ (8001f2c <HAL_TIM_IC_CaptureCallback+0x188>)
 8001e06:	881b      	ldrh	r3, [r3, #0]
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	001a      	movs	r2, r3
 8001e0e:	4b48      	ldr	r3, [pc, #288]	@ (8001f30 <HAL_TIM_IC_CaptureCallback+0x18c>)
 8001e10:	601a      	str	r2, [r3, #0]
		measureTime=((float)ticks/(float)(CLK/1000));	// measureTime in ms
 8001e12:	4b47      	ldr	r3, [pc, #284]	@ (8001f30 <HAL_TIM_IC_CaptureCallback+0x18c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	0018      	movs	r0, r3
 8001e18:	f7ff f872 	bl	8000f00 <__aeabi_ui2f>
 8001e1c:	1c04      	adds	r4, r0, #0
 8001e1e:	4b45      	ldr	r3, [pc, #276]	@ (8001f34 <HAL_TIM_IC_CaptureCallback+0x190>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	22fa      	movs	r2, #250	@ 0xfa
 8001e24:	0091      	lsls	r1, r2, #2
 8001e26:	0018      	movs	r0, r3
 8001e28:	f7fe f96e 	bl	8000108 <__udivsi3>
 8001e2c:	0003      	movs	r3, r0
 8001e2e:	0018      	movs	r0, r3
 8001e30:	f7ff f866 	bl	8000f00 <__aeabi_ui2f>
 8001e34:	1c03      	adds	r3, r0, #0
 8001e36:	1c19      	adds	r1, r3, #0
 8001e38:	1c20      	adds	r0, r4, #0
 8001e3a:	f7fe fb2d 	bl	8000498 <__aeabi_fdiv>
 8001e3e:	1c03      	adds	r3, r0, #0
 8001e40:	1c18      	adds	r0, r3, #0
 8001e42:	f7fe fb11 	bl	8000468 <__aeabi_f2uiz>
 8001e46:	0003      	movs	r3, r0
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f38 <HAL_TIM_IC_CaptureCallback+0x194>)
 8001e4c:	801a      	strh	r2, [r3, #0]
		measureCounter++;
 8001e4e:	4b3b      	ldr	r3, [pc, #236]	@ (8001f3c <HAL_TIM_IC_CaptureCallback+0x198>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	3301      	adds	r3, #1
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	4b38      	ldr	r3, [pc, #224]	@ (8001f3c <HAL_TIM_IC_CaptureCallback+0x198>)
 8001e5a:	701a      	strb	r2, [r3, #0]
		if(bMaxMeasureTimeExceeded)
 8001e5c:	4b38      	ldr	r3, [pc, #224]	@ (8001f40 <HAL_TIM_IC_CaptureCallback+0x19c>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d008      	beq.n	8001e78 <HAL_TIM_IC_CaptureCallback+0xd4>
		{
			RPM=0;
 8001e66:	4b37      	ldr	r3, [pc, #220]	@ (8001f44 <HAL_TIM_IC_CaptureCallback+0x1a0>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
			RPM_ResetMeasurement();
 8001e6c:	f7ff fef2 	bl	8001c54 <RPM_ResetMeasurement>
			bMaxMeasureTimeExceeded=false;
 8001e70:	4b33      	ldr	r3, [pc, #204]	@ (8001f40 <HAL_TIM_IC_CaptureCallback+0x19c>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	701a      	strb	r2, [r3, #0]
 8001e76:	e04d      	b.n	8001f14 <HAL_TIM_IC_CaptureCallback+0x170>
		}
		else if(measureTime>minMeasureTime)
 8001e78:	4b33      	ldr	r3, [pc, #204]	@ (8001f48 <HAL_TIM_IC_CaptureCallback+0x1a4>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	001a      	movs	r2, r3
 8001e80:	4b2d      	ldr	r3, [pc, #180]	@ (8001f38 <HAL_TIM_IC_CaptureCallback+0x194>)
 8001e82:	881b      	ldrh	r3, [r3, #0]
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d244      	bcs.n	8001f14 <HAL_TIM_IC_CaptureCallback+0x170>
		{
			RPM=((float)(CLK/1000)*60*measureCounter)/((float)(ticks/1000)*RPM_PULSES);
 8001e8a:	4b2a      	ldr	r3, [pc, #168]	@ (8001f34 <HAL_TIM_IC_CaptureCallback+0x190>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	22fa      	movs	r2, #250	@ 0xfa
 8001e90:	0091      	lsls	r1, r2, #2
 8001e92:	0018      	movs	r0, r3
 8001e94:	f7fe f938 	bl	8000108 <__udivsi3>
 8001e98:	0003      	movs	r3, r0
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	f7ff f830 	bl	8000f00 <__aeabi_ui2f>
 8001ea0:	1c03      	adds	r3, r0, #0
 8001ea2:	492a      	ldr	r1, [pc, #168]	@ (8001f4c <HAL_TIM_IC_CaptureCallback+0x1a8>)
 8001ea4:	1c18      	adds	r0, r3, #0
 8001ea6:	f7fe fcdd 	bl	8000864 <__aeabi_fmul>
 8001eaa:	1c03      	adds	r3, r0, #0
 8001eac:	1c1c      	adds	r4, r3, #0
 8001eae:	4b23      	ldr	r3, [pc, #140]	@ (8001f3c <HAL_TIM_IC_CaptureCallback+0x198>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	f7fe ffd7 	bl	8000e68 <__aeabi_i2f>
 8001eba:	1c03      	adds	r3, r0, #0
 8001ebc:	1c19      	adds	r1, r3, #0
 8001ebe:	1c20      	adds	r0, r4, #0
 8001ec0:	f7fe fcd0 	bl	8000864 <__aeabi_fmul>
 8001ec4:	1c03      	adds	r3, r0, #0
 8001ec6:	1c1c      	adds	r4, r3, #0
 8001ec8:	4b19      	ldr	r3, [pc, #100]	@ (8001f30 <HAL_TIM_IC_CaptureCallback+0x18c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	22fa      	movs	r2, #250	@ 0xfa
 8001ece:	0091      	lsls	r1, r2, #2
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	f7fe f919 	bl	8000108 <__udivsi3>
 8001ed6:	0003      	movs	r3, r0
 8001ed8:	0018      	movs	r0, r3
 8001eda:	f7ff f811 	bl	8000f00 <__aeabi_ui2f>
 8001ede:	1c03      	adds	r3, r0, #0
 8001ee0:	491b      	ldr	r1, [pc, #108]	@ (8001f50 <HAL_TIM_IC_CaptureCallback+0x1ac>)
 8001ee2:	1c18      	adds	r0, r3, #0
 8001ee4:	f7fe fcbe 	bl	8000864 <__aeabi_fmul>
 8001ee8:	1c03      	adds	r3, r0, #0
 8001eea:	1c19      	adds	r1, r3, #0
 8001eec:	1c20      	adds	r0, r4, #0
 8001eee:	f7fe fad3 	bl	8000498 <__aeabi_fdiv>
 8001ef2:	1c03      	adds	r3, r0, #0
 8001ef4:	1c1a      	adds	r2, r3, #0
 8001ef6:	4b13      	ldr	r3, [pc, #76]	@ (8001f44 <HAL_TIM_IC_CaptureCallback+0x1a0>)
 8001ef8:	601a      	str	r2, [r3, #0]
			if(RPM > RPM_LIMIT){	// invalid value
 8001efa:	4b12      	ldr	r3, [pc, #72]	@ (8001f44 <HAL_TIM_IC_CaptureCallback+0x1a0>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4915      	ldr	r1, [pc, #84]	@ (8001f54 <HAL_TIM_IC_CaptureCallback+0x1b0>)
 8001f00:	1c18      	adds	r0, r3, #0
 8001f02:	f7fe fa9d 	bl	8000440 <__aeabi_fcmpgt>
 8001f06:	1e03      	subs	r3, r0, #0
 8001f08:	d002      	beq.n	8001f10 <HAL_TIM_IC_CaptureCallback+0x16c>
				RPM=255.255;
 8001f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f44 <HAL_TIM_IC_CaptureCallback+0x1a0>)
 8001f0c:	4a12      	ldr	r2, [pc, #72]	@ (8001f58 <HAL_TIM_IC_CaptureCallback+0x1b4>)
 8001f0e:	601a      	str	r2, [r3, #0]
			}
			RPM_ResetMeasurement();
 8001f10:	f7ff fea0 	bl	8001c54 <RPM_ResetMeasurement>
  __ASM volatile ("cpsie i" : : : "memory");
 8001f14:	b662      	cpsie	i
}
 8001f16:	46c0      	nop			@ (mov r8, r8)
		}
		__enable_irq();
    }
}
 8001f18:	46c0      	nop			@ (mov r8, r8)
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	b003      	add	sp, #12
 8001f1e:	bd90      	pop	{r4, r7, pc}
 8001f20:	40012c00 	.word	0x40012c00
 8001f24:	200001dc 	.word	0x200001dc
 8001f28:	200001ec 	.word	0x200001ec
 8001f2c:	200001de 	.word	0x200001de
 8001f30:	200001e0 	.word	0x200001e0
 8001f34:	200001d4 	.word	0x200001d4
 8001f38:	200001e8 	.word	0x200001e8
 8001f3c:	200001f0 	.word	0x200001f0
 8001f40:	200001d1 	.word	0x200001d1
 8001f44:	200001e4 	.word	0x200001e4
 8001f48:	200001ea 	.word	0x200001ea
 8001f4c:	42700000 	.word	0x42700000
 8001f50:	430c0000 	.word	0x430c0000
 8001f54:	428c0000 	.word	0x428c0000
 8001f58:	437f4148 	.word	0x437f4148

08001f5c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1){
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a1a      	ldr	r2, [pc, #104]	@ (8001fd4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d12e      	bne.n	8001fcc <HAL_TIM_PeriodElapsedCallback+0x70>
  __ASM volatile ("cpsid i" : : : "memory");
 8001f6e:	b672      	cpsid	i
}
 8001f70:	46c0      	nop			@ (mov r8, r8)
		__disable_irq();
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d123      	bne.n	8001fc8 <HAL_TIM_PeriodElapsedCallback+0x6c>
		{
			if(OVFcounter>=OVFlimit)
 8001f80:	4b15      	ldr	r3, [pc, #84]	@ (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001f82:	881b      	ldrh	r3, [r3, #0]
 8001f84:	001a      	movs	r2, r3
 8001f86:	4b15      	ldr	r3, [pc, #84]	@ (8001fdc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d817      	bhi.n	8001fbe <HAL_TIM_PeriodElapsedCallback+0x62>
			{
				measureTime=maxMeasureTime;
 8001f8e:	4b14      	ldr	r3, [pc, #80]	@ (8001fe0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	001a      	movs	r2, r3
 8001f96:	4b13      	ldr	r3, [pc, #76]	@ (8001fe4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001f98:	801a      	strh	r2, [r3, #0]
				captureValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	210c      	movs	r1, #12
 8001f9e:	0018      	movs	r0, r3
 8001fa0:	f002 f990 	bl	80042c4 <HAL_TIM_ReadCapturedValue>
 8001fa4:	0003      	movs	r3, r0
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001faa:	801a      	strh	r2, [r3, #0]
				RPM=0;	// value below threshold
 8001fac:	4b0f      	ldr	r3, [pc, #60]	@ (8001fec <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
				RPM_ResetMeasurement();
 8001fb2:	f7ff fe4f 	bl	8001c54 <RPM_ResetMeasurement>
				bMaxMeasureTimeExceeded=true;
 8001fb6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001fb8:	2201      	movs	r2, #1
 8001fba:	701a      	strb	r2, [r3, #0]
 8001fbc:	e004      	b.n	8001fc8 <HAL_TIM_PeriodElapsedCallback+0x6c>
			}
			else{OVFcounter++;}
 8001fbe:	4b07      	ldr	r3, [pc, #28]	@ (8001fdc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	1c5a      	adds	r2, r3, #1
 8001fc4:	4b05      	ldr	r3, [pc, #20]	@ (8001fdc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001fc6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001fc8:	b662      	cpsie	i
}
 8001fca:	46c0      	nop			@ (mov r8, r8)
		}
		__enable_irq();
	}
}
 8001fcc:	46c0      	nop			@ (mov r8, r8)
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	b002      	add	sp, #8
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40012c00 	.word	0x40012c00
 8001fd8:	200001da 	.word	0x200001da
 8001fdc:	200001ec 	.word	0x200001ec
 8001fe0:	200001eb 	.word	0x200001eb
 8001fe4:	200001e8 	.word	0x200001e8
 8001fe8:	200001dc 	.word	0x200001dc
 8001fec:	200001e4 	.word	0x200001e4
 8001ff0:	200001d1 	.word	0x200001d1

08001ff4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ffa:	4b0f      	ldr	r3, [pc, #60]	@ (8002038 <HAL_MspInit+0x44>)
 8001ffc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8002038 <HAL_MspInit+0x44>)
 8002000:	2101      	movs	r1, #1
 8002002:	430a      	orrs	r2, r1
 8002004:	641a      	str	r2, [r3, #64]	@ 0x40
 8002006:	4b0c      	ldr	r3, [pc, #48]	@ (8002038 <HAL_MspInit+0x44>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200a:	2201      	movs	r2, #1
 800200c:	4013      	ands	r3, r2
 800200e:	607b      	str	r3, [r7, #4]
 8002010:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002012:	4b09      	ldr	r3, [pc, #36]	@ (8002038 <HAL_MspInit+0x44>)
 8002014:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002016:	4b08      	ldr	r3, [pc, #32]	@ (8002038 <HAL_MspInit+0x44>)
 8002018:	2180      	movs	r1, #128	@ 0x80
 800201a:	0549      	lsls	r1, r1, #21
 800201c:	430a      	orrs	r2, r1
 800201e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002020:	4b05      	ldr	r3, [pc, #20]	@ (8002038 <HAL_MspInit+0x44>)
 8002022:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002024:	2380      	movs	r3, #128	@ 0x80
 8002026:	055b      	lsls	r3, r3, #21
 8002028:	4013      	ands	r3, r2
 800202a:	603b      	str	r3, [r7, #0]
 800202c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800202e:	46c0      	nop			@ (mov r8, r8)
 8002030:	46bd      	mov	sp, r7
 8002032:	b002      	add	sp, #8
 8002034:	bd80      	pop	{r7, pc}
 8002036:	46c0      	nop			@ (mov r8, r8)
 8002038:	40021000 	.word	0x40021000

0800203c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800203c:	b590      	push	{r4, r7, lr}
 800203e:	b08b      	sub	sp, #44	@ 0x2c
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002044:	2414      	movs	r4, #20
 8002046:	193b      	adds	r3, r7, r4
 8002048:	0018      	movs	r0, r3
 800204a:	2314      	movs	r3, #20
 800204c:	001a      	movs	r2, r3
 800204e:	2100      	movs	r1, #0
 8002050:	f005 f974 	bl	800733c <memset>
  if(htim_ic->Instance==TIM1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a25      	ldr	r2, [pc, #148]	@ (80020f0 <HAL_TIM_IC_MspInit+0xb4>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d144      	bne.n	80020e8 <HAL_TIM_IC_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800205e:	4b25      	ldr	r3, [pc, #148]	@ (80020f4 <HAL_TIM_IC_MspInit+0xb8>)
 8002060:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002062:	4b24      	ldr	r3, [pc, #144]	@ (80020f4 <HAL_TIM_IC_MspInit+0xb8>)
 8002064:	2180      	movs	r1, #128	@ 0x80
 8002066:	0109      	lsls	r1, r1, #4
 8002068:	430a      	orrs	r2, r1
 800206a:	641a      	str	r2, [r3, #64]	@ 0x40
 800206c:	4b21      	ldr	r3, [pc, #132]	@ (80020f4 <HAL_TIM_IC_MspInit+0xb8>)
 800206e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002070:	2380      	movs	r3, #128	@ 0x80
 8002072:	011b      	lsls	r3, r3, #4
 8002074:	4013      	ands	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
 8002078:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800207a:	4b1e      	ldr	r3, [pc, #120]	@ (80020f4 <HAL_TIM_IC_MspInit+0xb8>)
 800207c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800207e:	4b1d      	ldr	r3, [pc, #116]	@ (80020f4 <HAL_TIM_IC_MspInit+0xb8>)
 8002080:	2102      	movs	r1, #2
 8002082:	430a      	orrs	r2, r1
 8002084:	635a      	str	r2, [r3, #52]	@ 0x34
 8002086:	4b1b      	ldr	r3, [pc, #108]	@ (80020f4 <HAL_TIM_IC_MspInit+0xb8>)
 8002088:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800208a:	2202      	movs	r2, #2
 800208c:	4013      	ands	r3, r2
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PB7     ------> TIM1_CH4
    */

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002092:	0021      	movs	r1, r4
 8002094:	187b      	adds	r3, r7, r1
 8002096:	2280      	movs	r2, #128	@ 0x80
 8002098:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209a:	187b      	adds	r3, r7, r1
 800209c:	2202      	movs	r2, #2
 800209e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	187b      	adds	r3, r7, r1
 80020a2:	2200      	movs	r2, #0
 80020a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a6:	187b      	adds	r3, r7, r1
 80020a8:	2200      	movs	r2, #0
 80020aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80020ac:	187b      	adds	r3, r7, r1
 80020ae:	2201      	movs	r2, #1
 80020b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b2:	187b      	adds	r3, r7, r1
 80020b4:	4a10      	ldr	r2, [pc, #64]	@ (80020f8 <HAL_TIM_IC_MspInit+0xbc>)
 80020b6:	0019      	movs	r1, r3
 80020b8:	0010      	movs	r0, r2
 80020ba:	f000 fc03 	bl	80028c4 <HAL_GPIO_Init>

    HAL_SYSCFG_SetPinBinding(HAL_BIND_SO8_PIN1_PB7);
 80020be:	23c0      	movs	r3, #192	@ 0xc0
 80020c0:	029b      	lsls	r3, r3, #10
 80020c2:	0018      	movs	r0, r3
 80020c4:	f000 fa38 	bl	8002538 <HAL_SYSCFG_SetPinBinding>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 80020c8:	2200      	movs	r2, #0
 80020ca:	2100      	movs	r1, #0
 80020cc:	200d      	movs	r0, #13
 80020ce:	f000 faeb 	bl	80026a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80020d2:	200d      	movs	r0, #13
 80020d4:	f000 fafd 	bl	80026d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80020d8:	2200      	movs	r2, #0
 80020da:	2100      	movs	r1, #0
 80020dc:	200e      	movs	r0, #14
 80020de:	f000 fae3 	bl	80026a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80020e2:	200e      	movs	r0, #14
 80020e4:	f000 faf5 	bl	80026d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */

  }
}
 80020e8:	46c0      	nop			@ (mov r8, r8)
 80020ea:	46bd      	mov	sp, r7
 80020ec:	b00b      	add	sp, #44	@ 0x2c
 80020ee:	bd90      	pop	{r4, r7, pc}
 80020f0:	40012c00 	.word	0x40012c00
 80020f4:	40021000 	.word	0x40021000
 80020f8:	50000400 	.word	0x50000400

080020fc <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a0d      	ldr	r2, [pc, #52]	@ (8002140 <HAL_TIM_OC_MspInit+0x44>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d113      	bne.n	8002136 <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800210e:	4b0d      	ldr	r3, [pc, #52]	@ (8002144 <HAL_TIM_OC_MspInit+0x48>)
 8002110:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002112:	4b0c      	ldr	r3, [pc, #48]	@ (8002144 <HAL_TIM_OC_MspInit+0x48>)
 8002114:	2102      	movs	r1, #2
 8002116:	430a      	orrs	r2, r1
 8002118:	63da      	str	r2, [r3, #60]	@ 0x3c
 800211a:	4b0a      	ldr	r3, [pc, #40]	@ (8002144 <HAL_TIM_OC_MspInit+0x48>)
 800211c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800211e:	2202      	movs	r2, #2
 8002120:	4013      	ands	r3, r2
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002126:	2200      	movs	r2, #0
 8002128:	2100      	movs	r1, #0
 800212a:	2010      	movs	r0, #16
 800212c:	f000 fabc 	bl	80026a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002130:	2010      	movs	r0, #16
 8002132:	f000 face 	bl	80026d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */

  }
}
 8002136:	46c0      	nop			@ (mov r8, r8)
 8002138:	46bd      	mov	sp, r7
 800213a:	b004      	add	sp, #16
 800213c:	bd80      	pop	{r7, pc}
 800213e:	46c0      	nop			@ (mov r8, r8)
 8002140:	40000400 	.word	0x40000400
 8002144:	40021000 	.word	0x40021000

08002148 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a0d      	ldr	r2, [pc, #52]	@ (800218c <HAL_TIM_Base_MspInit+0x44>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d113      	bne.n	8002182 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800215a:	4b0d      	ldr	r3, [pc, #52]	@ (8002190 <HAL_TIM_Base_MspInit+0x48>)
 800215c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800215e:	4b0c      	ldr	r3, [pc, #48]	@ (8002190 <HAL_TIM_Base_MspInit+0x48>)
 8002160:	2102      	movs	r1, #2
 8002162:	430a      	orrs	r2, r1
 8002164:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002166:	4b0a      	ldr	r3, [pc, #40]	@ (8002190 <HAL_TIM_Base_MspInit+0x48>)
 8002168:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800216a:	2202      	movs	r2, #2
 800216c:	4013      	ands	r3, r2
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002172:	2200      	movs	r2, #0
 8002174:	2100      	movs	r1, #0
 8002176:	2010      	movs	r0, #16
 8002178:	f000 fa96 	bl	80026a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800217c:	2010      	movs	r0, #16
 800217e:	f000 faa8 	bl	80026d2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002182:	46c0      	nop			@ (mov r8, r8)
 8002184:	46bd      	mov	sp, r7
 8002186:	b004      	add	sp, #16
 8002188:	bd80      	pop	{r7, pc}
 800218a:	46c0      	nop			@ (mov r8, r8)
 800218c:	40000400 	.word	0x40000400
 8002190:	40021000 	.word	0x40021000

08002194 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002194:	b590      	push	{r4, r7, lr}
 8002196:	b091      	sub	sp, #68	@ 0x44
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219c:	232c      	movs	r3, #44	@ 0x2c
 800219e:	18fb      	adds	r3, r7, r3
 80021a0:	0018      	movs	r0, r3
 80021a2:	2314      	movs	r3, #20
 80021a4:	001a      	movs	r2, r3
 80021a6:	2100      	movs	r1, #0
 80021a8:	f005 f8c8 	bl	800733c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021ac:	2410      	movs	r4, #16
 80021ae:	193b      	adds	r3, r7, r4
 80021b0:	0018      	movs	r0, r3
 80021b2:	231c      	movs	r3, #28
 80021b4:	001a      	movs	r2, r3
 80021b6:	2100      	movs	r1, #0
 80021b8:	f005 f8c0 	bl	800733c <memset>
  if(huart->Instance==USART1)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a34      	ldr	r2, [pc, #208]	@ (8002294 <HAL_UART_MspInit+0x100>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d162      	bne.n	800228c <HAL_UART_MspInit+0xf8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80021c6:	193b      	adds	r3, r7, r4
 80021c8:	2201      	movs	r2, #1
 80021ca:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80021cc:	193b      	adds	r3, r7, r4
 80021ce:	2200      	movs	r2, #0
 80021d0:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021d2:	193b      	adds	r3, r7, r4
 80021d4:	0018      	movs	r0, r3
 80021d6:	f001 f83b 	bl	8003250 <HAL_RCCEx_PeriphCLKConfig>
 80021da:	1e03      	subs	r3, r0, #0
 80021dc:	d001      	beq.n	80021e2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80021de:	f7fe ffd5 	bl	800118c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021e2:	4b2d      	ldr	r3, [pc, #180]	@ (8002298 <HAL_UART_MspInit+0x104>)
 80021e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80021e6:	4b2c      	ldr	r3, [pc, #176]	@ (8002298 <HAL_UART_MspInit+0x104>)
 80021e8:	2180      	movs	r1, #128	@ 0x80
 80021ea:	01c9      	lsls	r1, r1, #7
 80021ec:	430a      	orrs	r2, r1
 80021ee:	641a      	str	r2, [r3, #64]	@ 0x40
 80021f0:	4b29      	ldr	r3, [pc, #164]	@ (8002298 <HAL_UART_MspInit+0x104>)
 80021f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80021f4:	2380      	movs	r3, #128	@ 0x80
 80021f6:	01db      	lsls	r3, r3, #7
 80021f8:	4013      	ands	r3, r2
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021fe:	4b26      	ldr	r3, [pc, #152]	@ (8002298 <HAL_UART_MspInit+0x104>)
 8002200:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002202:	4b25      	ldr	r3, [pc, #148]	@ (8002298 <HAL_UART_MspInit+0x104>)
 8002204:	2101      	movs	r1, #1
 8002206:	430a      	orrs	r2, r1
 8002208:	635a      	str	r2, [r3, #52]	@ 0x34
 800220a:	4b23      	ldr	r3, [pc, #140]	@ (8002298 <HAL_UART_MspInit+0x104>)
 800220c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800220e:	2201      	movs	r2, #1
 8002210:	4013      	ands	r3, r2
 8002212:	60bb      	str	r3, [r7, #8]
 8002214:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA0     ------> USART1_TX
    PA8     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin;
 8002216:	242c      	movs	r4, #44	@ 0x2c
 8002218:	193b      	adds	r3, r7, r4
 800221a:	2201      	movs	r2, #1
 800221c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221e:	193b      	adds	r3, r7, r4
 8002220:	2202      	movs	r2, #2
 8002222:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	193b      	adds	r3, r7, r4
 8002226:	2200      	movs	r2, #0
 8002228:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222a:	193b      	adds	r3, r7, r4
 800222c:	2200      	movs	r2, #0
 800222e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002230:	193b      	adds	r3, r7, r4
 8002232:	2204      	movs	r2, #4
 8002234:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 8002236:	193a      	adds	r2, r7, r4
 8002238:	23a0      	movs	r3, #160	@ 0xa0
 800223a:	05db      	lsls	r3, r3, #23
 800223c:	0011      	movs	r1, r2
 800223e:	0018      	movs	r0, r3
 8002240:	f000 fb40 	bl	80028c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART1_RX_Pin;
 8002244:	0021      	movs	r1, r4
 8002246:	187b      	adds	r3, r7, r1
 8002248:	2280      	movs	r2, #128	@ 0x80
 800224a:	0052      	lsls	r2, r2, #1
 800224c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224e:	187b      	adds	r3, r7, r1
 8002250:	2202      	movs	r2, #2
 8002252:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002254:	187b      	adds	r3, r7, r1
 8002256:	2200      	movs	r2, #0
 8002258:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225a:	187b      	adds	r3, r7, r1
 800225c:	2200      	movs	r2, #0
 800225e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF14_USART1;
 8002260:	187b      	adds	r3, r7, r1
 8002262:	220e      	movs	r2, #14
 8002264:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(USART1_RX_GPIO_Port, &GPIO_InitStruct);
 8002266:	187a      	adds	r2, r7, r1
 8002268:	23a0      	movs	r3, #160	@ 0xa0
 800226a:	05db      	lsls	r3, r3, #23
 800226c:	0011      	movs	r1, r2
 800226e:	0018      	movs	r0, r3
 8002270:	f000 fb28 	bl	80028c4 <HAL_GPIO_Init>

    HAL_SYSCFG_SetPinBinding(HAL_BIND_SO8_PIN4_PA0|HAL_BIND_SO8_PIN5_PA8);
 8002274:	4b09      	ldr	r3, [pc, #36]	@ (800229c <HAL_UART_MspInit+0x108>)
 8002276:	0018      	movs	r0, r3
 8002278:	f000 f95e 	bl	8002538 <HAL_SYSCFG_SetPinBinding>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800227c:	2200      	movs	r2, #0
 800227e:	2100      	movs	r1, #0
 8002280:	201b      	movs	r0, #27
 8002282:	f000 fa11 	bl	80026a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002286:	201b      	movs	r0, #27
 8002288:	f000 fa23 	bl	80026d2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800228c:	46c0      	nop			@ (mov r8, r8)
 800228e:	46bd      	mov	sp, r7
 8002290:	b011      	add	sp, #68	@ 0x44
 8002292:	bd90      	pop	{r4, r7, pc}
 8002294:	40013800 	.word	0x40013800
 8002298:	40021000 	.word	0x40021000
 800229c:	003c0004 	.word	0x003c0004

080022a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022a4:	46c0      	nop			@ (mov r8, r8)
 80022a6:	e7fd      	b.n	80022a4 <NMI_Handler+0x4>

080022a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022ac:	46c0      	nop			@ (mov r8, r8)
 80022ae:	e7fd      	b.n	80022ac <HardFault_Handler+0x4>

080022b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80022b4:	46c0      	nop			@ (mov r8, r8)
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022be:	46c0      	nop			@ (mov r8, r8)
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022c8:	f000 f91a 	bl	8002500 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022cc:	46c0      	nop			@ (mov r8, r8)
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
	...

080022d4 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022d8:	4b03      	ldr	r3, [pc, #12]	@ (80022e8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80022da:	0018      	movs	r0, r3
 80022dc:	f001 fd10 	bl	8003d00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80022e0:	46c0      	nop			@ (mov r8, r8)
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	46c0      	nop			@ (mov r8, r8)
 80022e8:	20000184 	.word	0x20000184

080022ec <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022f0:	4b03      	ldr	r3, [pc, #12]	@ (8002300 <TIM1_CC_IRQHandler+0x14>)
 80022f2:	0018      	movs	r0, r3
 80022f4:	f001 fd04 	bl	8003d00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80022f8:	46c0      	nop			@ (mov r8, r8)
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	46c0      	nop			@ (mov r8, r8)
 8002300:	20000184 	.word	0x20000184

08002304 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002308:	4b03      	ldr	r3, [pc, #12]	@ (8002318 <TIM3_IRQHandler+0x14>)
 800230a:	0018      	movs	r0, r3
 800230c:	f001 fcf8 	bl	8003d00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002310:	46c0      	nop			@ (mov r8, r8)
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	46c0      	nop			@ (mov r8, r8)
 8002318:	20000090 	.word	0x20000090

0800231c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 interrupt.
  */
void USART1_IRQHandler(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart);
 8002320:	4b03      	ldr	r3, [pc, #12]	@ (8002330 <USART1_IRQHandler+0x14>)
 8002322:	0018      	movs	r0, r3
 8002324:	f002 fed2 	bl	80050cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002328:	46c0      	nop			@ (mov r8, r8)
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	46c0      	nop			@ (mov r8, r8)
 8002330:	200000dc 	.word	0x200000dc

08002334 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800233c:	4a14      	ldr	r2, [pc, #80]	@ (8002390 <_sbrk+0x5c>)
 800233e:	4b15      	ldr	r3, [pc, #84]	@ (8002394 <_sbrk+0x60>)
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002348:	4b13      	ldr	r3, [pc, #76]	@ (8002398 <_sbrk+0x64>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d102      	bne.n	8002356 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002350:	4b11      	ldr	r3, [pc, #68]	@ (8002398 <_sbrk+0x64>)
 8002352:	4a12      	ldr	r2, [pc, #72]	@ (800239c <_sbrk+0x68>)
 8002354:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002356:	4b10      	ldr	r3, [pc, #64]	@ (8002398 <_sbrk+0x64>)
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	18d3      	adds	r3, r2, r3
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	429a      	cmp	r2, r3
 8002362:	d207      	bcs.n	8002374 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002364:	f005 f804 	bl	8007370 <__errno>
 8002368:	0003      	movs	r3, r0
 800236a:	220c      	movs	r2, #12
 800236c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800236e:	2301      	movs	r3, #1
 8002370:	425b      	negs	r3, r3
 8002372:	e009      	b.n	8002388 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002374:	4b08      	ldr	r3, [pc, #32]	@ (8002398 <_sbrk+0x64>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800237a:	4b07      	ldr	r3, [pc, #28]	@ (8002398 <_sbrk+0x64>)
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	18d2      	adds	r2, r2, r3
 8002382:	4b05      	ldr	r3, [pc, #20]	@ (8002398 <_sbrk+0x64>)
 8002384:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002386:	68fb      	ldr	r3, [r7, #12]
}
 8002388:	0018      	movs	r0, r3
 800238a:	46bd      	mov	sp, r7
 800238c:	b006      	add	sp, #24
 800238e:	bd80      	pop	{r7, pc}
 8002390:	20001800 	.word	0x20001800
 8002394:	00000400 	.word	0x00000400
 8002398:	200001f4 	.word	0x200001f4
 800239c:	20000348 	.word	0x20000348

080023a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80023a4:	4b03      	ldr	r3, [pc, #12]	@ (80023b4 <SystemInit+0x14>)
 80023a6:	2280      	movs	r2, #128	@ 0x80
 80023a8:	0512      	lsls	r2, r2, #20
 80023aa:	609a      	str	r2, [r3, #8]
#endif
}
 80023ac:	46c0      	nop			@ (mov r8, r8)
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	46c0      	nop			@ (mov r8, r8)
 80023b4:	e000ed00 	.word	0xe000ed00

080023b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80023b8:	480d      	ldr	r0, [pc, #52]	@ (80023f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80023ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80023bc:	f7ff fff0 	bl	80023a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80023c0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80023c2:	e003      	b.n	80023cc <LoopCopyDataInit>

080023c4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80023c4:	4b0b      	ldr	r3, [pc, #44]	@ (80023f4 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80023c6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80023c8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80023ca:	3104      	adds	r1, #4

080023cc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80023cc:	480a      	ldr	r0, [pc, #40]	@ (80023f8 <LoopForever+0xa>)
  ldr r3, =_edata
 80023ce:	4b0b      	ldr	r3, [pc, #44]	@ (80023fc <LoopForever+0xe>)
  adds r2, r0, r1
 80023d0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80023d2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80023d4:	d3f6      	bcc.n	80023c4 <CopyDataInit>
  ldr r2, =_sbss
 80023d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002400 <LoopForever+0x12>)
  b LoopFillZerobss
 80023d8:	e002      	b.n	80023e0 <LoopFillZerobss>

080023da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80023da:	2300      	movs	r3, #0
  str  r3, [r2]
 80023dc:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023de:	3204      	adds	r2, #4

080023e0 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80023e0:	4b08      	ldr	r3, [pc, #32]	@ (8002404 <LoopForever+0x16>)
  cmp r2, r3
 80023e2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80023e4:	d3f9      	bcc.n	80023da <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80023e6:	f004 ffc9 	bl	800737c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80023ea:	f7fe fde9 	bl	8000fc0 <main>

080023ee <LoopForever>:

LoopForever:
    b LoopForever
 80023ee:	e7fe      	b.n	80023ee <LoopForever>
  ldr   r0, =_estack
 80023f0:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 80023f4:	0800782c 	.word	0x0800782c
  ldr r0, =_sdata
 80023f8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80023fc:	20000060 	.word	0x20000060
  ldr r2, =_sbss
 8002400:	20000060 	.word	0x20000060
  ldr r3, = _ebss
 8002404:	20000344 	.word	0x20000344

08002408 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002408:	e7fe      	b.n	8002408 <ADC1_IRQHandler>
	...

0800240c <LL_SYSCFG_ConfigPinMux>:
  * @rmtoll SYSCFG_CFGR3 CLL   LL_SYSCFG_ConfigPinMux\n
  * @param  mux_cfg This parameter can be a value of @ref SYSTEM_LL_PINMUX_CFG
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_ConfigPinMux(uint32_t mux_cfg)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  MODIFY_REG(SYSCFG->CFGR3, (mux_cfg >> 16U), (mux_cfg & 0x0000FFFFU));
 8002414:	4b08      	ldr	r3, [pc, #32]	@ (8002438 <LL_SYSCFG_ConfigPinMux+0x2c>)
 8002416:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	0c12      	lsrs	r2, r2, #16
 800241c:	43d2      	mvns	r2, r2
 800241e:	401a      	ands	r2, r3
 8002420:	0011      	movs	r1, r2
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	041b      	lsls	r3, r3, #16
 8002426:	0c1a      	lsrs	r2, r3, #16
 8002428:	4b03      	ldr	r3, [pc, #12]	@ (8002438 <LL_SYSCFG_ConfigPinMux+0x2c>)
 800242a:	430a      	orrs	r2, r1
 800242c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800242e:	46c0      	nop			@ (mov r8, r8)
 8002430:	46bd      	mov	sp, r7
 8002432:	b002      	add	sp, #8
 8002434:	bd80      	pop	{r7, pc}
 8002436:	46c0      	nop			@ (mov r8, r8)
 8002438:	40010000 	.word	0x40010000

0800243c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002442:	1dfb      	adds	r3, r7, #7
 8002444:	2200      	movs	r2, #0
 8002446:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002448:	2003      	movs	r0, #3
 800244a:	f000 f80f 	bl	800246c <HAL_InitTick>
 800244e:	1e03      	subs	r3, r0, #0
 8002450:	d003      	beq.n	800245a <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8002452:	1dfb      	adds	r3, r7, #7
 8002454:	2201      	movs	r2, #1
 8002456:	701a      	strb	r2, [r3, #0]
 8002458:	e001      	b.n	800245e <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800245a:	f7ff fdcb 	bl	8001ff4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800245e:	1dfb      	adds	r3, r7, #7
 8002460:	781b      	ldrb	r3, [r3, #0]
}
 8002462:	0018      	movs	r0, r3
 8002464:	46bd      	mov	sp, r7
 8002466:	b002      	add	sp, #8
 8002468:	bd80      	pop	{r7, pc}
	...

0800246c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800246c:	b590      	push	{r4, r7, lr}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002474:	230f      	movs	r3, #15
 8002476:	18fb      	adds	r3, r7, r3
 8002478:	2200      	movs	r2, #0
 800247a:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 800247c:	4b1d      	ldr	r3, [pc, #116]	@ (80024f4 <HAL_InitTick+0x88>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d02b      	beq.n	80024dc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8002484:	4b1c      	ldr	r3, [pc, #112]	@ (80024f8 <HAL_InitTick+0x8c>)
 8002486:	681c      	ldr	r4, [r3, #0]
 8002488:	4b1a      	ldr	r3, [pc, #104]	@ (80024f4 <HAL_InitTick+0x88>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	0019      	movs	r1, r3
 800248e:	23fa      	movs	r3, #250	@ 0xfa
 8002490:	0098      	lsls	r0, r3, #2
 8002492:	f7fd fe39 	bl	8000108 <__udivsi3>
 8002496:	0003      	movs	r3, r0
 8002498:	0019      	movs	r1, r3
 800249a:	0020      	movs	r0, r4
 800249c:	f7fd fe34 	bl	8000108 <__udivsi3>
 80024a0:	0003      	movs	r3, r0
 80024a2:	0018      	movs	r0, r3
 80024a4:	f000 f925 	bl	80026f2 <HAL_SYSTICK_Config>
 80024a8:	1e03      	subs	r3, r0, #0
 80024aa:	d112      	bne.n	80024d2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b03      	cmp	r3, #3
 80024b0:	d80a      	bhi.n	80024c8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	2301      	movs	r3, #1
 80024b6:	425b      	negs	r3, r3
 80024b8:	2200      	movs	r2, #0
 80024ba:	0018      	movs	r0, r3
 80024bc:	f000 f8f4 	bl	80026a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024c0:	4b0e      	ldr	r3, [pc, #56]	@ (80024fc <HAL_InitTick+0x90>)
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	601a      	str	r2, [r3, #0]
 80024c6:	e00d      	b.n	80024e4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80024c8:	230f      	movs	r3, #15
 80024ca:	18fb      	adds	r3, r7, r3
 80024cc:	2201      	movs	r2, #1
 80024ce:	701a      	strb	r2, [r3, #0]
 80024d0:	e008      	b.n	80024e4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80024d2:	230f      	movs	r3, #15
 80024d4:	18fb      	adds	r3, r7, r3
 80024d6:	2201      	movs	r2, #1
 80024d8:	701a      	strb	r2, [r3, #0]
 80024da:	e003      	b.n	80024e4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024dc:	230f      	movs	r3, #15
 80024de:	18fb      	adds	r3, r7, r3
 80024e0:	2201      	movs	r2, #1
 80024e2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80024e4:	230f      	movs	r3, #15
 80024e6:	18fb      	adds	r3, r7, r3
 80024e8:	781b      	ldrb	r3, [r3, #0]
}
 80024ea:	0018      	movs	r0, r3
 80024ec:	46bd      	mov	sp, r7
 80024ee:	b005      	add	sp, #20
 80024f0:	bd90      	pop	{r4, r7, pc}
 80024f2:	46c0      	nop			@ (mov r8, r8)
 80024f4:	2000000c 	.word	0x2000000c
 80024f8:	20000004 	.word	0x20000004
 80024fc:	20000008 	.word	0x20000008

08002500 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002504:	4b05      	ldr	r3, [pc, #20]	@ (800251c <HAL_IncTick+0x1c>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	001a      	movs	r2, r3
 800250a:	4b05      	ldr	r3, [pc, #20]	@ (8002520 <HAL_IncTick+0x20>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	18d2      	adds	r2, r2, r3
 8002510:	4b03      	ldr	r3, [pc, #12]	@ (8002520 <HAL_IncTick+0x20>)
 8002512:	601a      	str	r2, [r3, #0]
}
 8002514:	46c0      	nop			@ (mov r8, r8)
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	46c0      	nop			@ (mov r8, r8)
 800251c:	2000000c 	.word	0x2000000c
 8002520:	200001f8 	.word	0x200001f8

08002524 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  return uwTick;
 8002528:	4b02      	ldr	r3, [pc, #8]	@ (8002534 <HAL_GetTick+0x10>)
 800252a:	681b      	ldr	r3, [r3, #0]
}
 800252c:	0018      	movs	r0, r3
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	46c0      	nop			@ (mov r8, r8)
 8002534:	200001f8 	.word	0x200001f8

08002538 <HAL_SYSCFG_SetPinBinding>:
  *         for each die package
  *         This parameter can be a value of @ref HAL_BIND_CFG
  * @retval None
  */
void HAL_SYSCFG_SetPinBinding(uint32_t pin_binding)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_HAL_SYSCFG_PINBINDING(pin_binding));
  LL_SYSCFG_ConfigPinMux(pin_binding);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	0018      	movs	r0, r3
 8002544:	f7ff ff62 	bl	800240c <LL_SYSCFG_ConfigPinMux>
}
 8002548:	46c0      	nop			@ (mov r8, r8)
 800254a:	46bd      	mov	sp, r7
 800254c:	b002      	add	sp, #8
 800254e:	bd80      	pop	{r7, pc}

08002550 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	0002      	movs	r2, r0
 8002558:	1dfb      	adds	r3, r7, #7
 800255a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800255c:	1dfb      	adds	r3, r7, #7
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b7f      	cmp	r3, #127	@ 0x7f
 8002562:	d809      	bhi.n	8002578 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002564:	1dfb      	adds	r3, r7, #7
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	001a      	movs	r2, r3
 800256a:	231f      	movs	r3, #31
 800256c:	401a      	ands	r2, r3
 800256e:	4b04      	ldr	r3, [pc, #16]	@ (8002580 <__NVIC_EnableIRQ+0x30>)
 8002570:	2101      	movs	r1, #1
 8002572:	4091      	lsls	r1, r2
 8002574:	000a      	movs	r2, r1
 8002576:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002578:	46c0      	nop			@ (mov r8, r8)
 800257a:	46bd      	mov	sp, r7
 800257c:	b002      	add	sp, #8
 800257e:	bd80      	pop	{r7, pc}
 8002580:	e000e100 	.word	0xe000e100

08002584 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002584:	b590      	push	{r4, r7, lr}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	0002      	movs	r2, r0
 800258c:	6039      	str	r1, [r7, #0]
 800258e:	1dfb      	adds	r3, r7, #7
 8002590:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002592:	1dfb      	adds	r3, r7, #7
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	2b7f      	cmp	r3, #127	@ 0x7f
 8002598:	d828      	bhi.n	80025ec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800259a:	4a2f      	ldr	r2, [pc, #188]	@ (8002658 <__NVIC_SetPriority+0xd4>)
 800259c:	1dfb      	adds	r3, r7, #7
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	b25b      	sxtb	r3, r3
 80025a2:	089b      	lsrs	r3, r3, #2
 80025a4:	33c0      	adds	r3, #192	@ 0xc0
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	589b      	ldr	r3, [r3, r2]
 80025aa:	1dfa      	adds	r2, r7, #7
 80025ac:	7812      	ldrb	r2, [r2, #0]
 80025ae:	0011      	movs	r1, r2
 80025b0:	2203      	movs	r2, #3
 80025b2:	400a      	ands	r2, r1
 80025b4:	00d2      	lsls	r2, r2, #3
 80025b6:	21ff      	movs	r1, #255	@ 0xff
 80025b8:	4091      	lsls	r1, r2
 80025ba:	000a      	movs	r2, r1
 80025bc:	43d2      	mvns	r2, r2
 80025be:	401a      	ands	r2, r3
 80025c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	019b      	lsls	r3, r3, #6
 80025c6:	22ff      	movs	r2, #255	@ 0xff
 80025c8:	401a      	ands	r2, r3
 80025ca:	1dfb      	adds	r3, r7, #7
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	0018      	movs	r0, r3
 80025d0:	2303      	movs	r3, #3
 80025d2:	4003      	ands	r3, r0
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025d8:	481f      	ldr	r0, [pc, #124]	@ (8002658 <__NVIC_SetPriority+0xd4>)
 80025da:	1dfb      	adds	r3, r7, #7
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	b25b      	sxtb	r3, r3
 80025e0:	089b      	lsrs	r3, r3, #2
 80025e2:	430a      	orrs	r2, r1
 80025e4:	33c0      	adds	r3, #192	@ 0xc0
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80025ea:	e031      	b.n	8002650 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025ec:	4a1b      	ldr	r2, [pc, #108]	@ (800265c <__NVIC_SetPriority+0xd8>)
 80025ee:	1dfb      	adds	r3, r7, #7
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	0019      	movs	r1, r3
 80025f4:	230f      	movs	r3, #15
 80025f6:	400b      	ands	r3, r1
 80025f8:	3b08      	subs	r3, #8
 80025fa:	089b      	lsrs	r3, r3, #2
 80025fc:	3306      	adds	r3, #6
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	18d3      	adds	r3, r2, r3
 8002602:	3304      	adds	r3, #4
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	1dfa      	adds	r2, r7, #7
 8002608:	7812      	ldrb	r2, [r2, #0]
 800260a:	0011      	movs	r1, r2
 800260c:	2203      	movs	r2, #3
 800260e:	400a      	ands	r2, r1
 8002610:	00d2      	lsls	r2, r2, #3
 8002612:	21ff      	movs	r1, #255	@ 0xff
 8002614:	4091      	lsls	r1, r2
 8002616:	000a      	movs	r2, r1
 8002618:	43d2      	mvns	r2, r2
 800261a:	401a      	ands	r2, r3
 800261c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	019b      	lsls	r3, r3, #6
 8002622:	22ff      	movs	r2, #255	@ 0xff
 8002624:	401a      	ands	r2, r3
 8002626:	1dfb      	adds	r3, r7, #7
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	0018      	movs	r0, r3
 800262c:	2303      	movs	r3, #3
 800262e:	4003      	ands	r3, r0
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002634:	4809      	ldr	r0, [pc, #36]	@ (800265c <__NVIC_SetPriority+0xd8>)
 8002636:	1dfb      	adds	r3, r7, #7
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	001c      	movs	r4, r3
 800263c:	230f      	movs	r3, #15
 800263e:	4023      	ands	r3, r4
 8002640:	3b08      	subs	r3, #8
 8002642:	089b      	lsrs	r3, r3, #2
 8002644:	430a      	orrs	r2, r1
 8002646:	3306      	adds	r3, #6
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	18c3      	adds	r3, r0, r3
 800264c:	3304      	adds	r3, #4
 800264e:	601a      	str	r2, [r3, #0]
}
 8002650:	46c0      	nop			@ (mov r8, r8)
 8002652:	46bd      	mov	sp, r7
 8002654:	b003      	add	sp, #12
 8002656:	bd90      	pop	{r4, r7, pc}
 8002658:	e000e100 	.word	0xe000e100
 800265c:	e000ed00 	.word	0xe000ed00

08002660 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	1e5a      	subs	r2, r3, #1
 800266c:	2380      	movs	r3, #128	@ 0x80
 800266e:	045b      	lsls	r3, r3, #17
 8002670:	429a      	cmp	r2, r3
 8002672:	d301      	bcc.n	8002678 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002674:	2301      	movs	r3, #1
 8002676:	e010      	b.n	800269a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002678:	4b0a      	ldr	r3, [pc, #40]	@ (80026a4 <SysTick_Config+0x44>)
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	3a01      	subs	r2, #1
 800267e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002680:	2301      	movs	r3, #1
 8002682:	425b      	negs	r3, r3
 8002684:	2103      	movs	r1, #3
 8002686:	0018      	movs	r0, r3
 8002688:	f7ff ff7c 	bl	8002584 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800268c:	4b05      	ldr	r3, [pc, #20]	@ (80026a4 <SysTick_Config+0x44>)
 800268e:	2200      	movs	r2, #0
 8002690:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002692:	4b04      	ldr	r3, [pc, #16]	@ (80026a4 <SysTick_Config+0x44>)
 8002694:	2207      	movs	r2, #7
 8002696:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002698:	2300      	movs	r3, #0
}
 800269a:	0018      	movs	r0, r3
 800269c:	46bd      	mov	sp, r7
 800269e:	b002      	add	sp, #8
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	46c0      	nop			@ (mov r8, r8)
 80026a4:	e000e010 	.word	0xe000e010

080026a8 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60b9      	str	r1, [r7, #8]
 80026b0:	607a      	str	r2, [r7, #4]
 80026b2:	210f      	movs	r1, #15
 80026b4:	187b      	adds	r3, r7, r1
 80026b6:	1c02      	adds	r2, r0, #0
 80026b8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80026ba:	68ba      	ldr	r2, [r7, #8]
 80026bc:	187b      	adds	r3, r7, r1
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	b25b      	sxtb	r3, r3
 80026c2:	0011      	movs	r1, r2
 80026c4:	0018      	movs	r0, r3
 80026c6:	f7ff ff5d 	bl	8002584 <__NVIC_SetPriority>
}
 80026ca:	46c0      	nop			@ (mov r8, r8)
 80026cc:	46bd      	mov	sp, r7
 80026ce:	b004      	add	sp, #16
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b082      	sub	sp, #8
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	0002      	movs	r2, r0
 80026da:	1dfb      	adds	r3, r7, #7
 80026dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026de:	1dfb      	adds	r3, r7, #7
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	b25b      	sxtb	r3, r3
 80026e4:	0018      	movs	r0, r3
 80026e6:	f7ff ff33 	bl	8002550 <__NVIC_EnableIRQ>
}
 80026ea:	46c0      	nop			@ (mov r8, r8)
 80026ec:	46bd      	mov	sp, r7
 80026ee:	b002      	add	sp, #8
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b082      	sub	sp, #8
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	0018      	movs	r0, r3
 80026fe:	f7ff ffaf 	bl	8002660 <SysTick_Config>
 8002702:	0003      	movs	r3, r0
}
 8002704:	0018      	movs	r0, r3
 8002706:	46bd      	mov	sp, r7
 8002708:	b002      	add	sp, #8
 800270a:	bd80      	pop	{r7, pc}

0800270c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e050      	b.n	80027c0 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2225      	movs	r2, #37	@ 0x25
 8002722:	5c9b      	ldrb	r3, [r3, r2]
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d008      	beq.n	800273c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2204      	movs	r2, #4
 800272e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2224      	movs	r2, #36	@ 0x24
 8002734:	2100      	movs	r1, #0
 8002736:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e041      	b.n	80027c0 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	210e      	movs	r1, #14
 8002748:	438a      	bics	r2, r1
 800274a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002756:	491c      	ldr	r1, [pc, #112]	@ (80027c8 <HAL_DMA_Abort+0xbc>)
 8002758:	400a      	ands	r2, r1
 800275a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2101      	movs	r1, #1
 8002768:	438a      	bics	r2, r1
 800276a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 800276c:	4b17      	ldr	r3, [pc, #92]	@ (80027cc <HAL_DMA_Abort+0xc0>)
 800276e:	6859      	ldr	r1, [r3, #4]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002774:	221c      	movs	r2, #28
 8002776:	4013      	ands	r3, r2
 8002778:	2201      	movs	r2, #1
 800277a:	409a      	lsls	r2, r3
 800277c:	4b13      	ldr	r3, [pc, #76]	@ (80027cc <HAL_DMA_Abort+0xc0>)
 800277e:	430a      	orrs	r2, r1
 8002780:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800278a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00c      	beq.n	80027ae <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800279e:	490a      	ldr	r1, [pc, #40]	@ (80027c8 <HAL_DMA_Abort+0xbc>)
 80027a0:	400a      	ands	r2, r1
 80027a2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80027ac:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2225      	movs	r2, #37	@ 0x25
 80027b2:	2101      	movs	r1, #1
 80027b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2224      	movs	r2, #36	@ 0x24
 80027ba:	2100      	movs	r1, #0
 80027bc:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	0018      	movs	r0, r3
 80027c2:	46bd      	mov	sp, r7
 80027c4:	b002      	add	sp, #8
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	fffffeff 	.word	0xfffffeff
 80027cc:	40020000 	.word	0x40020000

080027d0 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027d8:	230f      	movs	r3, #15
 80027da:	18fb      	adds	r3, r7, r3
 80027dc:	2200      	movs	r2, #0
 80027de:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2224      	movs	r2, #36	@ 0x24
 80027e4:	2100      	movs	r1, #0
 80027e6:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2224      	movs	r2, #36	@ 0x24
 80027ec:	5c9b      	ldrb	r3, [r3, r2]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d101      	bne.n	80027f6 <HAL_DMA_Abort_IT+0x26>
 80027f2:	2302      	movs	r3, #2
 80027f4:	e05e      	b.n	80028b4 <HAL_DMA_Abort_IT+0xe4>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2224      	movs	r2, #36	@ 0x24
 80027fa:	2101      	movs	r1, #1
 80027fc:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2225      	movs	r2, #37	@ 0x25
 8002802:	5c9b      	ldrb	r3, [r3, r2]
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d007      	beq.n	800281a <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2204      	movs	r2, #4
 800280e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002810:	230f      	movs	r3, #15
 8002812:	18fb      	adds	r3, r7, r3
 8002814:	2201      	movs	r2, #1
 8002816:	701a      	strb	r2, [r3, #0]
 8002818:	e049      	b.n	80028ae <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	210e      	movs	r1, #14
 8002826:	438a      	bics	r2, r1
 8002828:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2101      	movs	r1, #1
 8002836:	438a      	bics	r2, r1
 8002838:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002844:	491d      	ldr	r1, [pc, #116]	@ (80028bc <HAL_DMA_Abort_IT+0xec>)
 8002846:	400a      	ands	r2, r1
 8002848:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 800284a:	4b1d      	ldr	r3, [pc, #116]	@ (80028c0 <HAL_DMA_Abort_IT+0xf0>)
 800284c:	6859      	ldr	r1, [r3, #4]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002852:	221c      	movs	r2, #28
 8002854:	4013      	ands	r3, r2
 8002856:	2201      	movs	r2, #1
 8002858:	409a      	lsls	r2, r3
 800285a:	4b19      	ldr	r3, [pc, #100]	@ (80028c0 <HAL_DMA_Abort_IT+0xf0>)
 800285c:	430a      	orrs	r2, r1
 800285e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002868:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00c      	beq.n	800288c <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800287c:	490f      	ldr	r1, [pc, #60]	@ (80028bc <HAL_DMA_Abort_IT+0xec>)
 800287e:	400a      	ands	r2, r1
 8002880:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800288a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2225      	movs	r2, #37	@ 0x25
 8002890:	2101      	movs	r1, #1
 8002892:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2224      	movs	r2, #36	@ 0x24
 8002898:	2100      	movs	r1, #0
 800289a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d004      	beq.n	80028ae <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	0010      	movs	r0, r2
 80028ac:	4798      	blx	r3
    }
  }
  return status;
 80028ae:	230f      	movs	r3, #15
 80028b0:	18fb      	adds	r3, r7, r3
 80028b2:	781b      	ldrb	r3, [r3, #0]
}
 80028b4:	0018      	movs	r0, r3
 80028b6:	46bd      	mov	sp, r7
 80028b8:	b004      	add	sp, #16
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	fffffeff 	.word	0xfffffeff
 80028c0:	40020000 	.word	0x40020000

080028c4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80028ce:	2300      	movs	r3, #0
 80028d0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80028d2:	e14d      	b.n	8002b70 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2101      	movs	r1, #1
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	4091      	lsls	r1, r2
 80028de:	000a      	movs	r2, r1
 80028e0:	4013      	ands	r3, r2
 80028e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d100      	bne.n	80028ec <HAL_GPIO_Init+0x28>
 80028ea:	e13e      	b.n	8002b6a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d003      	beq.n	80028fc <HAL_GPIO_Init+0x38>
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	2b12      	cmp	r3, #18
 80028fa:	d125      	bne.n	8002948 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	08da      	lsrs	r2, r3, #3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3208      	adds	r2, #8
 8002904:	0092      	lsls	r2, r2, #2
 8002906:	58d3      	ldr	r3, [r2, r3]
 8002908:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	2207      	movs	r2, #7
 800290e:	4013      	ands	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	220f      	movs	r2, #15
 8002914:	409a      	lsls	r2, r3
 8002916:	0013      	movs	r3, r2
 8002918:	43da      	mvns	r2, r3
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	4013      	ands	r3, r2
 800291e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	220f      	movs	r2, #15
 8002926:	401a      	ands	r2, r3
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	2107      	movs	r1, #7
 800292c:	400b      	ands	r3, r1
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	409a      	lsls	r2, r3
 8002932:	0013      	movs	r3, r2
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	4313      	orrs	r3, r2
 8002938:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	08da      	lsrs	r2, r3, #3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	3208      	adds	r2, #8
 8002942:	0092      	lsls	r2, r2, #2
 8002944:	6979      	ldr	r1, [r7, #20]
 8002946:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	2203      	movs	r2, #3
 8002954:	409a      	lsls	r2, r3
 8002956:	0013      	movs	r3, r2
 8002958:	43da      	mvns	r2, r3
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	4013      	ands	r3, r2
 800295e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	2203      	movs	r2, #3
 8002966:	401a      	ands	r2, r3
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	409a      	lsls	r2, r3
 800296e:	0013      	movs	r3, r2
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	4313      	orrs	r3, r2
 8002974:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	697a      	ldr	r2, [r7, #20]
 800297a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d00b      	beq.n	800299c <HAL_GPIO_Init+0xd8>
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	2b02      	cmp	r3, #2
 800298a:	d007      	beq.n	800299c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002990:	2b11      	cmp	r3, #17
 8002992:	d003      	beq.n	800299c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	2b12      	cmp	r3, #18
 800299a:	d130      	bne.n	80029fe <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	2203      	movs	r2, #3
 80029a8:	409a      	lsls	r2, r3
 80029aa:	0013      	movs	r3, r2
 80029ac:	43da      	mvns	r2, r3
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	4013      	ands	r3, r2
 80029b2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	68da      	ldr	r2, [r3, #12]
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	409a      	lsls	r2, r3
 80029be:	0013      	movs	r3, r2
 80029c0:	697a      	ldr	r2, [r7, #20]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	697a      	ldr	r2, [r7, #20]
 80029ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029d2:	2201      	movs	r2, #1
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	409a      	lsls	r2, r3
 80029d8:	0013      	movs	r3, r2
 80029da:	43da      	mvns	r2, r3
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	4013      	ands	r3, r2
 80029e0:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	091b      	lsrs	r3, r3, #4
 80029e8:	2201      	movs	r2, #1
 80029ea:	401a      	ands	r2, r3
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	409a      	lsls	r2, r3
 80029f0:	0013      	movs	r3, r2
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	2b03      	cmp	r3, #3
 8002a04:	d017      	beq.n	8002a36 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	2203      	movs	r2, #3
 8002a12:	409a      	lsls	r2, r3
 8002a14:	0013      	movs	r3, r2
 8002a16:	43da      	mvns	r2, r3
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	689a      	ldr	r2, [r3, #8]
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	409a      	lsls	r2, r3
 8002a28:	0013      	movs	r3, r2
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685a      	ldr	r2, [r3, #4]
 8002a3a:	2380      	movs	r3, #128	@ 0x80
 8002a3c:	055b      	lsls	r3, r3, #21
 8002a3e:	4013      	ands	r3, r2
 8002a40:	d100      	bne.n	8002a44 <HAL_GPIO_Init+0x180>
 8002a42:	e092      	b.n	8002b6a <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002a44:	4a50      	ldr	r2, [pc, #320]	@ (8002b88 <HAL_GPIO_Init+0x2c4>)
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	089b      	lsrs	r3, r3, #2
 8002a4a:	3318      	adds	r3, #24
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	589b      	ldr	r3, [r3, r2]
 8002a50:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	2203      	movs	r2, #3
 8002a56:	4013      	ands	r3, r2
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	220f      	movs	r2, #15
 8002a5c:	409a      	lsls	r2, r3
 8002a5e:	0013      	movs	r3, r2
 8002a60:	43da      	mvns	r2, r3
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	4013      	ands	r3, r2
 8002a66:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	23a0      	movs	r3, #160	@ 0xa0
 8002a6c:	05db      	lsls	r3, r3, #23
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d013      	beq.n	8002a9a <HAL_GPIO_Init+0x1d6>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a45      	ldr	r2, [pc, #276]	@ (8002b8c <HAL_GPIO_Init+0x2c8>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d00d      	beq.n	8002a96 <HAL_GPIO_Init+0x1d2>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a44      	ldr	r2, [pc, #272]	@ (8002b90 <HAL_GPIO_Init+0x2cc>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d007      	beq.n	8002a92 <HAL_GPIO_Init+0x1ce>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a43      	ldr	r2, [pc, #268]	@ (8002b94 <HAL_GPIO_Init+0x2d0>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d101      	bne.n	8002a8e <HAL_GPIO_Init+0x1ca>
 8002a8a:	2305      	movs	r3, #5
 8002a8c:	e006      	b.n	8002a9c <HAL_GPIO_Init+0x1d8>
 8002a8e:	2306      	movs	r3, #6
 8002a90:	e004      	b.n	8002a9c <HAL_GPIO_Init+0x1d8>
 8002a92:	2302      	movs	r3, #2
 8002a94:	e002      	b.n	8002a9c <HAL_GPIO_Init+0x1d8>
 8002a96:	2301      	movs	r3, #1
 8002a98:	e000      	b.n	8002a9c <HAL_GPIO_Init+0x1d8>
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	2103      	movs	r1, #3
 8002aa0:	400a      	ands	r2, r1
 8002aa2:	00d2      	lsls	r2, r2, #3
 8002aa4:	4093      	lsls	r3, r2
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002aac:	4936      	ldr	r1, [pc, #216]	@ (8002b88 <HAL_GPIO_Init+0x2c4>)
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	089b      	lsrs	r3, r3, #2
 8002ab2:	3318      	adds	r3, #24
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	697a      	ldr	r2, [r7, #20]
 8002ab8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8002aba:	4a33      	ldr	r2, [pc, #204]	@ (8002b88 <HAL_GPIO_Init+0x2c4>)
 8002abc:	2380      	movs	r3, #128	@ 0x80
 8002abe:	58d3      	ldr	r3, [r2, r3]
 8002ac0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	43da      	mvns	r2, r3
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	2380      	movs	r3, #128	@ 0x80
 8002ad2:	025b      	lsls	r3, r3, #9
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	d003      	beq.n	8002ae0 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002ae0:	4929      	ldr	r1, [pc, #164]	@ (8002b88 <HAL_GPIO_Init+0x2c4>)
 8002ae2:	2280      	movs	r2, #128	@ 0x80
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8002ae8:	4a27      	ldr	r2, [pc, #156]	@ (8002b88 <HAL_GPIO_Init+0x2c4>)
 8002aea:	2384      	movs	r3, #132	@ 0x84
 8002aec:	58d3      	ldr	r3, [r2, r3]
 8002aee:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	43da      	mvns	r2, r3
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	4013      	ands	r3, r2
 8002af8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	2380      	movs	r3, #128	@ 0x80
 8002b00:	029b      	lsls	r3, r3, #10
 8002b02:	4013      	ands	r3, r2
 8002b04:	d003      	beq.n	8002b0e <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002b0e:	491e      	ldr	r1, [pc, #120]	@ (8002b88 <HAL_GPIO_Init+0x2c4>)
 8002b10:	2284      	movs	r2, #132	@ 0x84
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002b16:	4b1c      	ldr	r3, [pc, #112]	@ (8002b88 <HAL_GPIO_Init+0x2c4>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	43da      	mvns	r2, r3
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	4013      	ands	r3, r2
 8002b24:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685a      	ldr	r2, [r3, #4]
 8002b2a:	2380      	movs	r3, #128	@ 0x80
 8002b2c:	035b      	lsls	r3, r3, #13
 8002b2e:	4013      	ands	r3, r2
 8002b30:	d003      	beq.n	8002b3a <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002b3a:	4b13      	ldr	r3, [pc, #76]	@ (8002b88 <HAL_GPIO_Init+0x2c4>)
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8002b40:	4b11      	ldr	r3, [pc, #68]	@ (8002b88 <HAL_GPIO_Init+0x2c4>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	43da      	mvns	r2, r3
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685a      	ldr	r2, [r3, #4]
 8002b54:	2380      	movs	r3, #128	@ 0x80
 8002b56:	039b      	lsls	r3, r3, #14
 8002b58:	4013      	ands	r3, r2
 8002b5a:	d003      	beq.n	8002b64 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002b64:	4b08      	ldr	r3, [pc, #32]	@ (8002b88 <HAL_GPIO_Init+0x2c4>)
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	40da      	lsrs	r2, r3
 8002b78:	1e13      	subs	r3, r2, #0
 8002b7a:	d000      	beq.n	8002b7e <HAL_GPIO_Init+0x2ba>
 8002b7c:	e6aa      	b.n	80028d4 <HAL_GPIO_Init+0x10>
  }
}
 8002b7e:	46c0      	nop			@ (mov r8, r8)
 8002b80:	46c0      	nop			@ (mov r8, r8)
 8002b82:	46bd      	mov	sp, r7
 8002b84:	b006      	add	sp, #24
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40021800 	.word	0x40021800
 8002b8c:	50000400 	.word	0x50000400
 8002b90:	50000800 	.word	0x50000800
 8002b94:	50001400 	.word	0x50001400

08002b98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e1d0      	b.n	8002f4c <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	d100      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x1e>
 8002bb4:	e069      	b.n	8002c8a <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bb6:	4bc8      	ldr	r3, [pc, #800]	@ (8002ed8 <HAL_RCC_OscConfig+0x340>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	2238      	movs	r2, #56	@ 0x38
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	2b08      	cmp	r3, #8
 8002bc4:	d105      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d15d      	bne.n	8002c8a <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e1bc      	b.n	8002f4c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	2380      	movs	r3, #128	@ 0x80
 8002bd8:	025b      	lsls	r3, r3, #9
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d107      	bne.n	8002bee <HAL_RCC_OscConfig+0x56>
 8002bde:	4bbe      	ldr	r3, [pc, #760]	@ (8002ed8 <HAL_RCC_OscConfig+0x340>)
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	4bbd      	ldr	r3, [pc, #756]	@ (8002ed8 <HAL_RCC_OscConfig+0x340>)
 8002be4:	2180      	movs	r1, #128	@ 0x80
 8002be6:	0249      	lsls	r1, r1, #9
 8002be8:	430a      	orrs	r2, r1
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	e020      	b.n	8002c30 <HAL_RCC_OscConfig+0x98>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	23a0      	movs	r3, #160	@ 0xa0
 8002bf4:	02db      	lsls	r3, r3, #11
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d10e      	bne.n	8002c18 <HAL_RCC_OscConfig+0x80>
 8002bfa:	4bb7      	ldr	r3, [pc, #732]	@ (8002ed8 <HAL_RCC_OscConfig+0x340>)
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	4bb6      	ldr	r3, [pc, #728]	@ (8002ed8 <HAL_RCC_OscConfig+0x340>)
 8002c00:	2180      	movs	r1, #128	@ 0x80
 8002c02:	02c9      	lsls	r1, r1, #11
 8002c04:	430a      	orrs	r2, r1
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	4bb3      	ldr	r3, [pc, #716]	@ (8002ed8 <HAL_RCC_OscConfig+0x340>)
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	4bb2      	ldr	r3, [pc, #712]	@ (8002ed8 <HAL_RCC_OscConfig+0x340>)
 8002c0e:	2180      	movs	r1, #128	@ 0x80
 8002c10:	0249      	lsls	r1, r1, #9
 8002c12:	430a      	orrs	r2, r1
 8002c14:	601a      	str	r2, [r3, #0]
 8002c16:	e00b      	b.n	8002c30 <HAL_RCC_OscConfig+0x98>
 8002c18:	4baf      	ldr	r3, [pc, #700]	@ (8002ed8 <HAL_RCC_OscConfig+0x340>)
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	4bae      	ldr	r3, [pc, #696]	@ (8002ed8 <HAL_RCC_OscConfig+0x340>)
 8002c1e:	49af      	ldr	r1, [pc, #700]	@ (8002edc <HAL_RCC_OscConfig+0x344>)
 8002c20:	400a      	ands	r2, r1
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	4bac      	ldr	r3, [pc, #688]	@ (8002ed8 <HAL_RCC_OscConfig+0x340>)
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	4bab      	ldr	r3, [pc, #684]	@ (8002ed8 <HAL_RCC_OscConfig+0x340>)
 8002c2a:	49ad      	ldr	r1, [pc, #692]	@ (8002ee0 <HAL_RCC_OscConfig+0x348>)
 8002c2c:	400a      	ands	r2, r1
 8002c2e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d014      	beq.n	8002c62 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c38:	f7ff fc74 	bl	8002524 <HAL_GetTick>
 8002c3c:	0003      	movs	r3, r0
 8002c3e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c40:	e008      	b.n	8002c54 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002c42:	f7ff fc6f 	bl	8002524 <HAL_GetTick>
 8002c46:	0002      	movs	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b64      	cmp	r3, #100	@ 0x64
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e17b      	b.n	8002f4c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c54:	4ba0      	ldr	r3, [pc, #640]	@ (8002ed8 <HAL_RCC_OscConfig+0x340>)
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	2380      	movs	r3, #128	@ 0x80
 8002c5a:	029b      	lsls	r3, r3, #10
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	d0f0      	beq.n	8002c42 <HAL_RCC_OscConfig+0xaa>
 8002c60:	e013      	b.n	8002c8a <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c62:	f7ff fc5f 	bl	8002524 <HAL_GetTick>
 8002c66:	0003      	movs	r3, r0
 8002c68:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002c6c:	f7ff fc5a 	bl	8002524 <HAL_GetTick>
 8002c70:	0002      	movs	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b64      	cmp	r3, #100	@ 0x64
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e166      	b.n	8002f4c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c7e:	4b96      	ldr	r3, [pc, #600]	@ (8002ed8 <HAL_RCC_OscConfig+0x340>)
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	2380      	movs	r3, #128	@ 0x80
 8002c84:	029b      	lsls	r3, r3, #10
 8002c86:	4013      	ands	r3, r2
 8002c88:	d1f0      	bne.n	8002c6c <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2202      	movs	r2, #2
 8002c90:	4013      	ands	r3, r2
 8002c92:	d100      	bne.n	8002c96 <HAL_RCC_OscConfig+0xfe>
 8002c94:	e086      	b.n	8002da4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c96:	4b90      	ldr	r3, [pc, #576]	@ (8002ed8 <HAL_RCC_OscConfig+0x340>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	2238      	movs	r2, #56	@ 0x38
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d12f      	bne.n	8002d06 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e14c      	b.n	8002f4c <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb2:	4b89      	ldr	r3, [pc, #548]	@ (8002ed8 <HAL_RCC_OscConfig+0x340>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	4a8b      	ldr	r2, [pc, #556]	@ (8002ee4 <HAL_RCC_OscConfig+0x34c>)
 8002cb8:	4013      	ands	r3, r2
 8002cba:	0019      	movs	r1, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	695b      	ldr	r3, [r3, #20]
 8002cc0:	021a      	lsls	r2, r3, #8
 8002cc2:	4b85      	ldr	r3, [pc, #532]	@ (8002ed8 <HAL_RCC_OscConfig+0x340>)
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d112      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002cce:	4b82      	ldr	r3, [pc, #520]	@ (8002ed8 <HAL_RCC_OscConfig+0x340>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a85      	ldr	r2, [pc, #532]	@ (8002ee8 <HAL_RCC_OscConfig+0x350>)
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	0019      	movs	r1, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	691a      	ldr	r2, [r3, #16]
 8002cdc:	4b7e      	ldr	r3, [pc, #504]	@ (8002ed8 <HAL_RCC_OscConfig+0x340>)
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002ce2:	4b7d      	ldr	r3, [pc, #500]	@ (8002ed8 <HAL_RCC_OscConfig+0x340>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	0adb      	lsrs	r3, r3, #11
 8002ce8:	2207      	movs	r2, #7
 8002cea:	4013      	ands	r3, r2
 8002cec:	4a7f      	ldr	r2, [pc, #508]	@ (8002eec <HAL_RCC_OscConfig+0x354>)
 8002cee:	40da      	lsrs	r2, r3
 8002cf0:	4b7f      	ldr	r3, [pc, #508]	@ (8002ef0 <HAL_RCC_OscConfig+0x358>)
 8002cf2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002cf4:	4b7f      	ldr	r3, [pc, #508]	@ (8002ef4 <HAL_RCC_OscConfig+0x35c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	f7ff fbb7 	bl	800246c <HAL_InitTick>
 8002cfe:	1e03      	subs	r3, r0, #0
 8002d00:	d050      	beq.n	8002da4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e122      	b.n	8002f4c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d030      	beq.n	8002d70 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002d0e:	4b72      	ldr	r3, [pc, #456]	@ (8002ed8 <HAL_RCC_OscConfig+0x340>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a75      	ldr	r2, [pc, #468]	@ (8002ee8 <HAL_RCC_OscConfig+0x350>)
 8002d14:	4013      	ands	r3, r2
 8002d16:	0019      	movs	r1, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	691a      	ldr	r2, [r3, #16]
 8002d1c:	4b6e      	ldr	r3, [pc, #440]	@ (8002ed8 <HAL_RCC_OscConfig+0x340>)
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8002d22:	4b6d      	ldr	r3, [pc, #436]	@ (8002ed8 <HAL_RCC_OscConfig+0x340>)
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	4b6c      	ldr	r3, [pc, #432]	@ (8002ed8 <HAL_RCC_OscConfig+0x340>)
 8002d28:	2180      	movs	r1, #128	@ 0x80
 8002d2a:	0049      	lsls	r1, r1, #1
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d30:	f7ff fbf8 	bl	8002524 <HAL_GetTick>
 8002d34:	0003      	movs	r3, r0
 8002d36:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d38:	e008      	b.n	8002d4c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002d3a:	f7ff fbf3 	bl	8002524 <HAL_GetTick>
 8002d3e:	0002      	movs	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e0ff      	b.n	8002f4c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d4c:	4b62      	ldr	r3, [pc, #392]	@ (8002ed8 <HAL_RCC_OscConfig+0x340>)
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	2380      	movs	r3, #128	@ 0x80
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	4013      	ands	r3, r2
 8002d56:	d0f0      	beq.n	8002d3a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d58:	4b5f      	ldr	r3, [pc, #380]	@ (8002ed8 <HAL_RCC_OscConfig+0x340>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	4a61      	ldr	r2, [pc, #388]	@ (8002ee4 <HAL_RCC_OscConfig+0x34c>)
 8002d5e:	4013      	ands	r3, r2
 8002d60:	0019      	movs	r1, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	021a      	lsls	r2, r3, #8
 8002d68:	4b5b      	ldr	r3, [pc, #364]	@ (8002ed8 <HAL_RCC_OscConfig+0x340>)
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	605a      	str	r2, [r3, #4]
 8002d6e:	e019      	b.n	8002da4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8002d70:	4b59      	ldr	r3, [pc, #356]	@ (8002ed8 <HAL_RCC_OscConfig+0x340>)
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	4b58      	ldr	r3, [pc, #352]	@ (8002ed8 <HAL_RCC_OscConfig+0x340>)
 8002d76:	4960      	ldr	r1, [pc, #384]	@ (8002ef8 <HAL_RCC_OscConfig+0x360>)
 8002d78:	400a      	ands	r2, r1
 8002d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7c:	f7ff fbd2 	bl	8002524 <HAL_GetTick>
 8002d80:	0003      	movs	r3, r0
 8002d82:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d84:	e008      	b.n	8002d98 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002d86:	f7ff fbcd 	bl	8002524 <HAL_GetTick>
 8002d8a:	0002      	movs	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e0d9      	b.n	8002f4c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d98:	4b4f      	ldr	r3, [pc, #316]	@ (8002ed8 <HAL_RCC_OscConfig+0x340>)
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	2380      	movs	r3, #128	@ 0x80
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	4013      	ands	r3, r2
 8002da2:	d1f0      	bne.n	8002d86 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2208      	movs	r2, #8
 8002daa:	4013      	ands	r3, r2
 8002dac:	d042      	beq.n	8002e34 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002dae:	4b4a      	ldr	r3, [pc, #296]	@ (8002ed8 <HAL_RCC_OscConfig+0x340>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	2238      	movs	r2, #56	@ 0x38
 8002db4:	4013      	ands	r3, r2
 8002db6:	2b18      	cmp	r3, #24
 8002db8:	d105      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d138      	bne.n	8002e34 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e0c2      	b.n	8002f4c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d019      	beq.n	8002e02 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002dce:	4b42      	ldr	r3, [pc, #264]	@ (8002ed8 <HAL_RCC_OscConfig+0x340>)
 8002dd0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002dd2:	4b41      	ldr	r3, [pc, #260]	@ (8002ed8 <HAL_RCC_OscConfig+0x340>)
 8002dd4:	2101      	movs	r1, #1
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dda:	f7ff fba3 	bl	8002524 <HAL_GetTick>
 8002dde:	0003      	movs	r3, r0
 8002de0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002de4:	f7ff fb9e 	bl	8002524 <HAL_GetTick>
 8002de8:	0002      	movs	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e0aa      	b.n	8002f4c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002df6:	4b38      	ldr	r3, [pc, #224]	@ (8002ed8 <HAL_RCC_OscConfig+0x340>)
 8002df8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	d0f1      	beq.n	8002de4 <HAL_RCC_OscConfig+0x24c>
 8002e00:	e018      	b.n	8002e34 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002e02:	4b35      	ldr	r3, [pc, #212]	@ (8002ed8 <HAL_RCC_OscConfig+0x340>)
 8002e04:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002e06:	4b34      	ldr	r3, [pc, #208]	@ (8002ed8 <HAL_RCC_OscConfig+0x340>)
 8002e08:	2101      	movs	r1, #1
 8002e0a:	438a      	bics	r2, r1
 8002e0c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e0e:	f7ff fb89 	bl	8002524 <HAL_GetTick>
 8002e12:	0003      	movs	r3, r0
 8002e14:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002e18:	f7ff fb84 	bl	8002524 <HAL_GetTick>
 8002e1c:	0002      	movs	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e090      	b.n	8002f4c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002e2a:	4b2b      	ldr	r3, [pc, #172]	@ (8002ed8 <HAL_RCC_OscConfig+0x340>)
 8002e2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e2e:	2202      	movs	r2, #2
 8002e30:	4013      	ands	r3, r2
 8002e32:	d1f1      	bne.n	8002e18 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2204      	movs	r2, #4
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	d100      	bne.n	8002e40 <HAL_RCC_OscConfig+0x2a8>
 8002e3e:	e084      	b.n	8002f4a <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e40:	230f      	movs	r3, #15
 8002e42:	18fb      	adds	r3, r7, r3
 8002e44:	2200      	movs	r2, #0
 8002e46:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002e48:	4b23      	ldr	r3, [pc, #140]	@ (8002ed8 <HAL_RCC_OscConfig+0x340>)
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	2238      	movs	r2, #56	@ 0x38
 8002e4e:	4013      	ands	r3, r2
 8002e50:	2b20      	cmp	r3, #32
 8002e52:	d106      	bne.n	8002e62 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d000      	beq.n	8002e5e <HAL_RCC_OscConfig+0x2c6>
 8002e5c:	e075      	b.n	8002f4a <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e074      	b.n	8002f4c <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d106      	bne.n	8002e78 <HAL_RCC_OscConfig+0x2e0>
 8002e6a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ed8 <HAL_RCC_OscConfig+0x340>)
 8002e6c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002e6e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ed8 <HAL_RCC_OscConfig+0x340>)
 8002e70:	2101      	movs	r1, #1
 8002e72:	430a      	orrs	r2, r1
 8002e74:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002e76:	e01c      	b.n	8002eb2 <HAL_RCC_OscConfig+0x31a>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	2b05      	cmp	r3, #5
 8002e7e:	d10c      	bne.n	8002e9a <HAL_RCC_OscConfig+0x302>
 8002e80:	4b15      	ldr	r3, [pc, #84]	@ (8002ed8 <HAL_RCC_OscConfig+0x340>)
 8002e82:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002e84:	4b14      	ldr	r3, [pc, #80]	@ (8002ed8 <HAL_RCC_OscConfig+0x340>)
 8002e86:	2104      	movs	r1, #4
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002e8c:	4b12      	ldr	r3, [pc, #72]	@ (8002ed8 <HAL_RCC_OscConfig+0x340>)
 8002e8e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002e90:	4b11      	ldr	r3, [pc, #68]	@ (8002ed8 <HAL_RCC_OscConfig+0x340>)
 8002e92:	2101      	movs	r1, #1
 8002e94:	430a      	orrs	r2, r1
 8002e96:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002e98:	e00b      	b.n	8002eb2 <HAL_RCC_OscConfig+0x31a>
 8002e9a:	4b0f      	ldr	r3, [pc, #60]	@ (8002ed8 <HAL_RCC_OscConfig+0x340>)
 8002e9c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002e9e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ed8 <HAL_RCC_OscConfig+0x340>)
 8002ea0:	2101      	movs	r1, #1
 8002ea2:	438a      	bics	r2, r1
 8002ea4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8002ed8 <HAL_RCC_OscConfig+0x340>)
 8002ea8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8002ed8 <HAL_RCC_OscConfig+0x340>)
 8002eac:	2104      	movs	r1, #4
 8002eae:	438a      	bics	r2, r1
 8002eb0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d028      	beq.n	8002f0c <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eba:	f7ff fb33 	bl	8002524 <HAL_GetTick>
 8002ebe:	0003      	movs	r3, r0
 8002ec0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002ec2:	e01d      	b.n	8002f00 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ec4:	f7ff fb2e 	bl	8002524 <HAL_GetTick>
 8002ec8:	0002      	movs	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	4a0b      	ldr	r2, [pc, #44]	@ (8002efc <HAL_RCC_OscConfig+0x364>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d915      	bls.n	8002f00 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e039      	b.n	8002f4c <HAL_RCC_OscConfig+0x3b4>
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	fffeffff 	.word	0xfffeffff
 8002ee0:	fffbffff 	.word	0xfffbffff
 8002ee4:	ffff80ff 	.word	0xffff80ff
 8002ee8:	ffffc7ff 	.word	0xffffc7ff
 8002eec:	02dc6c00 	.word	0x02dc6c00
 8002ef0:	20000004 	.word	0x20000004
 8002ef4:	20000008 	.word	0x20000008
 8002ef8:	fffffeff 	.word	0xfffffeff
 8002efc:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002f00:	4b14      	ldr	r3, [pc, #80]	@ (8002f54 <HAL_RCC_OscConfig+0x3bc>)
 8002f02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f04:	2202      	movs	r2, #2
 8002f06:	4013      	ands	r3, r2
 8002f08:	d0dc      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x32c>
 8002f0a:	e013      	b.n	8002f34 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f0c:	f7ff fb0a 	bl	8002524 <HAL_GetTick>
 8002f10:	0003      	movs	r3, r0
 8002f12:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002f14:	e009      	b.n	8002f2a <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f16:	f7ff fb05 	bl	8002524 <HAL_GetTick>
 8002f1a:	0002      	movs	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	4a0d      	ldr	r2, [pc, #52]	@ (8002f58 <HAL_RCC_OscConfig+0x3c0>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e010      	b.n	8002f4c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f54 <HAL_RCC_OscConfig+0x3bc>)
 8002f2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f2e:	2202      	movs	r2, #2
 8002f30:	4013      	ands	r3, r2
 8002f32:	d1f0      	bne.n	8002f16 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002f34:	230f      	movs	r3, #15
 8002f36:	18fb      	adds	r3, r7, r3
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d105      	bne.n	8002f4a <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002f3e:	4b05      	ldr	r3, [pc, #20]	@ (8002f54 <HAL_RCC_OscConfig+0x3bc>)
 8002f40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f42:	4b04      	ldr	r3, [pc, #16]	@ (8002f54 <HAL_RCC_OscConfig+0x3bc>)
 8002f44:	4905      	ldr	r1, [pc, #20]	@ (8002f5c <HAL_RCC_OscConfig+0x3c4>)
 8002f46:	400a      	ands	r2, r1
 8002f48:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	b006      	add	sp, #24
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	40021000 	.word	0x40021000
 8002f58:	00001388 	.word	0x00001388
 8002f5c:	efffffff 	.word	0xefffffff

08002f60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d101      	bne.n	8002f74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e0df      	b.n	8003134 <HAL_RCC_ClockConfig+0x1d4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f74:	4b71      	ldr	r3, [pc, #452]	@ (800313c <HAL_RCC_ClockConfig+0x1dc>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2207      	movs	r2, #7
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d91e      	bls.n	8002fc0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f82:	4b6e      	ldr	r3, [pc, #440]	@ (800313c <HAL_RCC_ClockConfig+0x1dc>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2207      	movs	r2, #7
 8002f88:	4393      	bics	r3, r2
 8002f8a:	0019      	movs	r1, r3
 8002f8c:	4b6b      	ldr	r3, [pc, #428]	@ (800313c <HAL_RCC_ClockConfig+0x1dc>)
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002f94:	f7ff fac6 	bl	8002524 <HAL_GetTick>
 8002f98:	0003      	movs	r3, r0
 8002f9a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002f9c:	e009      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002f9e:	f7ff fac1 	bl	8002524 <HAL_GetTick>
 8002fa2:	0002      	movs	r2, r0
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	4a65      	ldr	r2, [pc, #404]	@ (8003140 <HAL_RCC_ClockConfig+0x1e0>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e0c0      	b.n	8003134 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002fb2:	4b62      	ldr	r3, [pc, #392]	@ (800313c <HAL_RCC_ClockConfig+0x1dc>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2207      	movs	r2, #7
 8002fb8:	4013      	ands	r3, r2
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d1ee      	bne.n	8002f9e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2202      	movs	r2, #2
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	d017      	beq.n	8002ffa <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2204      	movs	r2, #4
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	d008      	beq.n	8002fe6 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002fd4:	4b5b      	ldr	r3, [pc, #364]	@ (8003144 <HAL_RCC_ClockConfig+0x1e4>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	4a5b      	ldr	r2, [pc, #364]	@ (8003148 <HAL_RCC_ClockConfig+0x1e8>)
 8002fda:	401a      	ands	r2, r3
 8002fdc:	4b59      	ldr	r3, [pc, #356]	@ (8003144 <HAL_RCC_ClockConfig+0x1e4>)
 8002fde:	21b0      	movs	r1, #176	@ 0xb0
 8002fe0:	0109      	lsls	r1, r1, #4
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fe6:	4b57      	ldr	r3, [pc, #348]	@ (8003144 <HAL_RCC_ClockConfig+0x1e4>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	4a58      	ldr	r2, [pc, #352]	@ (800314c <HAL_RCC_ClockConfig+0x1ec>)
 8002fec:	4013      	ands	r3, r2
 8002fee:	0019      	movs	r1, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68da      	ldr	r2, [r3, #12]
 8002ff4:	4b53      	ldr	r3, [pc, #332]	@ (8003144 <HAL_RCC_ClockConfig+0x1e4>)
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2201      	movs	r2, #1
 8003000:	4013      	ands	r3, r2
 8003002:	d04b      	beq.n	800309c <HAL_RCC_ClockConfig+0x13c>
#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d107      	bne.n	800301c <HAL_RCC_ClockConfig+0xbc>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800300c:	4b4d      	ldr	r3, [pc, #308]	@ (8003144 <HAL_RCC_ClockConfig+0x1e4>)
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	2380      	movs	r3, #128	@ 0x80
 8003012:	029b      	lsls	r3, r3, #10
 8003014:	4013      	ands	r3, r2
 8003016:	d11f      	bne.n	8003058 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e08b      	b.n	8003134 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d107      	bne.n	8003034 <HAL_RCC_ClockConfig+0xd4>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003024:	4b47      	ldr	r3, [pc, #284]	@ (8003144 <HAL_RCC_ClockConfig+0x1e4>)
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	2380      	movs	r3, #128	@ 0x80
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	4013      	ands	r3, r2
 800302e:	d113      	bne.n	8003058 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e07f      	b.n	8003134 <HAL_RCC_ClockConfig+0x1d4>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	2b03      	cmp	r3, #3
 800303a:	d106      	bne.n	800304a <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800303c:	4b41      	ldr	r3, [pc, #260]	@ (8003144 <HAL_RCC_ClockConfig+0x1e4>)
 800303e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003040:	2202      	movs	r2, #2
 8003042:	4013      	ands	r3, r2
 8003044:	d108      	bne.n	8003058 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e074      	b.n	8003134 <HAL_RCC_ClockConfig+0x1d4>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800304a:	4b3e      	ldr	r3, [pc, #248]	@ (8003144 <HAL_RCC_ClockConfig+0x1e4>)
 800304c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800304e:	2202      	movs	r2, #2
 8003050:	4013      	ands	r3, r2
 8003052:	d101      	bne.n	8003058 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e06d      	b.n	8003134 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003058:	4b3a      	ldr	r3, [pc, #232]	@ (8003144 <HAL_RCC_ClockConfig+0x1e4>)
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	2207      	movs	r2, #7
 800305e:	4393      	bics	r3, r2
 8003060:	0019      	movs	r1, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685a      	ldr	r2, [r3, #4]
 8003066:	4b37      	ldr	r3, [pc, #220]	@ (8003144 <HAL_RCC_ClockConfig+0x1e4>)
 8003068:	430a      	orrs	r2, r1
 800306a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800306c:	f7ff fa5a 	bl	8002524 <HAL_GetTick>
 8003070:	0003      	movs	r3, r0
 8003072:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003074:	e009      	b.n	800308a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003076:	f7ff fa55 	bl	8002524 <HAL_GetTick>
 800307a:	0002      	movs	r2, r0
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	4a2f      	ldr	r2, [pc, #188]	@ (8003140 <HAL_RCC_ClockConfig+0x1e0>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d901      	bls.n	800308a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e054      	b.n	8003134 <HAL_RCC_ClockConfig+0x1d4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800308a:	4b2e      	ldr	r3, [pc, #184]	@ (8003144 <HAL_RCC_ClockConfig+0x1e4>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	2238      	movs	r2, #56	@ 0x38
 8003090:	401a      	ands	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	429a      	cmp	r2, r3
 800309a:	d1ec      	bne.n	8003076 <HAL_RCC_ClockConfig+0x116>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800309c:	4b27      	ldr	r3, [pc, #156]	@ (800313c <HAL_RCC_ClockConfig+0x1dc>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2207      	movs	r2, #7
 80030a2:	4013      	ands	r3, r2
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d21e      	bcs.n	80030e8 <HAL_RCC_ClockConfig+0x188>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030aa:	4b24      	ldr	r3, [pc, #144]	@ (800313c <HAL_RCC_ClockConfig+0x1dc>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2207      	movs	r2, #7
 80030b0:	4393      	bics	r3, r2
 80030b2:	0019      	movs	r1, r3
 80030b4:	4b21      	ldr	r3, [pc, #132]	@ (800313c <HAL_RCC_ClockConfig+0x1dc>)
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80030bc:	f7ff fa32 	bl	8002524 <HAL_GetTick>
 80030c0:	0003      	movs	r3, r0
 80030c2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80030c4:	e009      	b.n	80030da <HAL_RCC_ClockConfig+0x17a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80030c6:	f7ff fa2d 	bl	8002524 <HAL_GetTick>
 80030ca:	0002      	movs	r2, r0
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	4a1b      	ldr	r2, [pc, #108]	@ (8003140 <HAL_RCC_ClockConfig+0x1e0>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_ClockConfig+0x17a>
      {
        return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e02c      	b.n	8003134 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80030da:	4b18      	ldr	r3, [pc, #96]	@ (800313c <HAL_RCC_ClockConfig+0x1dc>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2207      	movs	r2, #7
 80030e0:	4013      	ands	r3, r2
 80030e2:	683a      	ldr	r2, [r7, #0]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d1ee      	bne.n	80030c6 <HAL_RCC_ClockConfig+0x166>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2204      	movs	r2, #4
 80030ee:	4013      	ands	r3, r2
 80030f0:	d009      	beq.n	8003106 <HAL_RCC_ClockConfig+0x1a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80030f2:	4b14      	ldr	r3, [pc, #80]	@ (8003144 <HAL_RCC_ClockConfig+0x1e4>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	4a16      	ldr	r2, [pc, #88]	@ (8003150 <HAL_RCC_ClockConfig+0x1f0>)
 80030f8:	4013      	ands	r3, r2
 80030fa:	0019      	movs	r1, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	691a      	ldr	r2, [r3, #16]
 8003100:	4b10      	ldr	r3, [pc, #64]	@ (8003144 <HAL_RCC_ClockConfig+0x1e4>)
 8003102:	430a      	orrs	r2, r1
 8003104:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003106:	f000 f82b 	bl	8003160 <HAL_RCC_GetSysClockFreq>
 800310a:	0001      	movs	r1, r0
 800310c:	4b0d      	ldr	r3, [pc, #52]	@ (8003144 <HAL_RCC_ClockConfig+0x1e4>)
 800310e:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003110:	0a1b      	lsrs	r3, r3, #8
 8003112:	220f      	movs	r2, #15
 8003114:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003116:	4b0f      	ldr	r3, [pc, #60]	@ (8003154 <HAL_RCC_ClockConfig+0x1f4>)
 8003118:	0092      	lsls	r2, r2, #2
 800311a:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800311c:	221f      	movs	r2, #31
 800311e:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003120:	000a      	movs	r2, r1
 8003122:	40da      	lsrs	r2, r3
 8003124:	4b0c      	ldr	r3, [pc, #48]	@ (8003158 <HAL_RCC_ClockConfig+0x1f8>)
 8003126:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003128:	4b0c      	ldr	r3, [pc, #48]	@ (800315c <HAL_RCC_ClockConfig+0x1fc>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	0018      	movs	r0, r3
 800312e:	f7ff f99d 	bl	800246c <HAL_InitTick>
 8003132:	0003      	movs	r3, r0
}
 8003134:	0018      	movs	r0, r3
 8003136:	46bd      	mov	sp, r7
 8003138:	b004      	add	sp, #16
 800313a:	bd80      	pop	{r7, pc}
 800313c:	40022000 	.word	0x40022000
 8003140:	00001388 	.word	0x00001388
 8003144:	40021000 	.word	0x40021000
 8003148:	ffff84ff 	.word	0xffff84ff
 800314c:	fffff0ff 	.word	0xfffff0ff
 8003150:	ffff8fff 	.word	0xffff8fff
 8003154:	08007748 	.word	0x08007748
 8003158:	20000004 	.word	0x20000004
 800315c:	20000008 	.word	0x20000008

08003160 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003166:	4b1c      	ldr	r3, [pc, #112]	@ (80031d8 <HAL_RCC_GetSysClockFreq+0x78>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	2238      	movs	r2, #56	@ 0x38
 800316c:	4013      	ands	r3, r2
 800316e:	d10f      	bne.n	8003190 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003170:	4b19      	ldr	r3, [pc, #100]	@ (80031d8 <HAL_RCC_GetSysClockFreq+0x78>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	0adb      	lsrs	r3, r3, #11
 8003176:	2207      	movs	r2, #7
 8003178:	4013      	ands	r3, r2
 800317a:	2201      	movs	r2, #1
 800317c:	409a      	lsls	r2, r3
 800317e:	0013      	movs	r3, r2
 8003180:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003182:	6839      	ldr	r1, [r7, #0]
 8003184:	4815      	ldr	r0, [pc, #84]	@ (80031dc <HAL_RCC_GetSysClockFreq+0x7c>)
 8003186:	f7fc ffbf 	bl	8000108 <__udivsi3>
 800318a:	0003      	movs	r3, r0
 800318c:	607b      	str	r3, [r7, #4]
 800318e:	e01e      	b.n	80031ce <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003190:	4b11      	ldr	r3, [pc, #68]	@ (80031d8 <HAL_RCC_GetSysClockFreq+0x78>)
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	2238      	movs	r2, #56	@ 0x38
 8003196:	4013      	ands	r3, r2
 8003198:	2b08      	cmp	r3, #8
 800319a:	d102      	bne.n	80031a2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800319c:	4b10      	ldr	r3, [pc, #64]	@ (80031e0 <HAL_RCC_GetSysClockFreq+0x80>)
 800319e:	607b      	str	r3, [r7, #4]
 80031a0:	e015      	b.n	80031ce <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80031a2:	4b0d      	ldr	r3, [pc, #52]	@ (80031d8 <HAL_RCC_GetSysClockFreq+0x78>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	2238      	movs	r2, #56	@ 0x38
 80031a8:	4013      	ands	r3, r2
 80031aa:	2b20      	cmp	r3, #32
 80031ac:	d103      	bne.n	80031b6 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80031ae:	2380      	movs	r3, #128	@ 0x80
 80031b0:	021b      	lsls	r3, r3, #8
 80031b2:	607b      	str	r3, [r7, #4]
 80031b4:	e00b      	b.n	80031ce <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80031b6:	4b08      	ldr	r3, [pc, #32]	@ (80031d8 <HAL_RCC_GetSysClockFreq+0x78>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	2238      	movs	r2, #56	@ 0x38
 80031bc:	4013      	ands	r3, r2
 80031be:	2b18      	cmp	r3, #24
 80031c0:	d103      	bne.n	80031ca <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80031c2:	23fa      	movs	r3, #250	@ 0xfa
 80031c4:	01db      	lsls	r3, r3, #7
 80031c6:	607b      	str	r3, [r7, #4]
 80031c8:	e001      	b.n	80031ce <HAL_RCC_GetSysClockFreq+0x6e>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 80031ca:	2300      	movs	r3, #0
 80031cc:	607b      	str	r3, [r7, #4]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 80031ce:	687b      	ldr	r3, [r7, #4]
}
 80031d0:	0018      	movs	r0, r3
 80031d2:	46bd      	mov	sp, r7
 80031d4:	b002      	add	sp, #8
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	40021000 	.word	0x40021000
 80031dc:	02dc6c00 	.word	0x02dc6c00
 80031e0:	007a1200 	.word	0x007a1200

080031e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80031e8:	f7ff ffba 	bl	8003160 <HAL_RCC_GetSysClockFreq>
 80031ec:	0001      	movs	r1, r0
 80031ee:	4b09      	ldr	r3, [pc, #36]	@ (8003214 <HAL_RCC_GetHCLKFreq+0x30>)
 80031f0:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80031f2:	0a1b      	lsrs	r3, r3, #8
 80031f4:	220f      	movs	r2, #15
 80031f6:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80031f8:	4b07      	ldr	r3, [pc, #28]	@ (8003218 <HAL_RCC_GetHCLKFreq+0x34>)
 80031fa:	0092      	lsls	r2, r2, #2
 80031fc:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80031fe:	221f      	movs	r2, #31
 8003200:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003202:	000a      	movs	r2, r1
 8003204:	40da      	lsrs	r2, r3
 8003206:	4b05      	ldr	r3, [pc, #20]	@ (800321c <HAL_RCC_GetHCLKFreq+0x38>)
 8003208:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 800320a:	4b04      	ldr	r3, [pc, #16]	@ (800321c <HAL_RCC_GetHCLKFreq+0x38>)
 800320c:	681b      	ldr	r3, [r3, #0]
}
 800320e:	0018      	movs	r0, r3
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	40021000 	.word	0x40021000
 8003218:	08007748 	.word	0x08007748
 800321c:	20000004 	.word	0x20000004

08003220 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8003224:	f7ff ffde 	bl	80031e4 <HAL_RCC_GetHCLKFreq>
 8003228:	0001      	movs	r1, r0
 800322a:	4b07      	ldr	r3, [pc, #28]	@ (8003248 <HAL_RCC_GetPCLK1Freq+0x28>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	0b1b      	lsrs	r3, r3, #12
 8003230:	2207      	movs	r2, #7
 8003232:	401a      	ands	r2, r3
 8003234:	4b05      	ldr	r3, [pc, #20]	@ (800324c <HAL_RCC_GetPCLK1Freq+0x2c>)
 8003236:	0092      	lsls	r2, r2, #2
 8003238:	58d3      	ldr	r3, [r2, r3]
 800323a:	221f      	movs	r2, #31
 800323c:	4013      	ands	r3, r2
 800323e:	40d9      	lsrs	r1, r3
 8003240:	000b      	movs	r3, r1
}
 8003242:	0018      	movs	r0, r3
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	40021000 	.word	0x40021000
 800324c:	08007788 	.word	0x08007788

08003250 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b086      	sub	sp, #24
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003258:	2313      	movs	r3, #19
 800325a:	18fb      	adds	r3, r7, r3
 800325c:	2200      	movs	r2, #0
 800325e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003260:	2312      	movs	r3, #18
 8003262:	18fb      	adds	r3, r7, r3
 8003264:	2200      	movs	r2, #0
 8003266:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2240      	movs	r2, #64	@ 0x40
 800326e:	4013      	ands	r3, r2
 8003270:	d100      	bne.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8003272:	e079      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003274:	2011      	movs	r0, #17
 8003276:	183b      	adds	r3, r7, r0
 8003278:	2200      	movs	r2, #0
 800327a:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800327c:	4b63      	ldr	r3, [pc, #396]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800327e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003280:	2380      	movs	r3, #128	@ 0x80
 8003282:	055b      	lsls	r3, r3, #21
 8003284:	4013      	ands	r3, r2
 8003286:	d110      	bne.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003288:	4b60      	ldr	r3, [pc, #384]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800328a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800328c:	4b5f      	ldr	r3, [pc, #380]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800328e:	2180      	movs	r1, #128	@ 0x80
 8003290:	0549      	lsls	r1, r1, #21
 8003292:	430a      	orrs	r2, r1
 8003294:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003296:	4b5d      	ldr	r3, [pc, #372]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003298:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800329a:	2380      	movs	r3, #128	@ 0x80
 800329c:	055b      	lsls	r3, r3, #21
 800329e:	4013      	ands	r3, r2
 80032a0:	60bb      	str	r3, [r7, #8]
 80032a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032a4:	183b      	adds	r3, r7, r0
 80032a6:	2201      	movs	r2, #1
 80032a8:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 80032aa:	4b58      	ldr	r3, [pc, #352]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032ac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80032ae:	23c0      	movs	r3, #192	@ 0xc0
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4013      	ands	r3, r2
 80032b4:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d019      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d014      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 80032c6:	4b51      	ldr	r3, [pc, #324]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ca:	4a51      	ldr	r2, [pc, #324]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80032cc:	4013      	ands	r3, r2
 80032ce:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032d0:	4b4e      	ldr	r3, [pc, #312]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032d2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80032d4:	4b4d      	ldr	r3, [pc, #308]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032d6:	2180      	movs	r1, #128	@ 0x80
 80032d8:	0249      	lsls	r1, r1, #9
 80032da:	430a      	orrs	r2, r1
 80032dc:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032de:	4b4b      	ldr	r3, [pc, #300]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032e0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80032e2:	4b4a      	ldr	r3, [pc, #296]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032e4:	494b      	ldr	r1, [pc, #300]	@ (8003414 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80032e6:	400a      	ands	r2, r1
 80032e8:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 80032ea:	4b48      	ldr	r3, [pc, #288]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032ec:	697a      	ldr	r2, [r7, #20]
 80032ee:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	2201      	movs	r2, #1
 80032f4:	4013      	ands	r3, r2
 80032f6:	d016      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f8:	f7ff f914 	bl	8002524 <HAL_GetTick>
 80032fc:	0003      	movs	r3, r0
 80032fe:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003300:	e00c      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003302:	f7ff f90f 	bl	8002524 <HAL_GetTick>
 8003306:	0002      	movs	r2, r0
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	4a42      	ldr	r2, [pc, #264]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d904      	bls.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8003312:	2313      	movs	r3, #19
 8003314:	18fb      	adds	r3, r7, r3
 8003316:	2203      	movs	r2, #3
 8003318:	701a      	strb	r2, [r3, #0]
          break;
 800331a:	e004      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800331c:	4b3b      	ldr	r3, [pc, #236]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800331e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003320:	2202      	movs	r2, #2
 8003322:	4013      	ands	r3, r2
 8003324:	d0ed      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8003326:	2313      	movs	r3, #19
 8003328:	18fb      	adds	r3, r7, r3
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d10a      	bne.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003330:	4b36      	ldr	r3, [pc, #216]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003332:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003334:	4a36      	ldr	r2, [pc, #216]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003336:	4013      	ands	r3, r2
 8003338:	0019      	movs	r1, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	699a      	ldr	r2, [r3, #24]
 800333e:	4b33      	ldr	r3, [pc, #204]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003340:	430a      	orrs	r2, r1
 8003342:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003344:	e005      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003346:	2312      	movs	r3, #18
 8003348:	18fb      	adds	r3, r7, r3
 800334a:	2213      	movs	r2, #19
 800334c:	18ba      	adds	r2, r7, r2
 800334e:	7812      	ldrb	r2, [r2, #0]
 8003350:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003352:	2311      	movs	r3, #17
 8003354:	18fb      	adds	r3, r7, r3
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d105      	bne.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800335c:	4b2b      	ldr	r3, [pc, #172]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800335e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003360:	4b2a      	ldr	r3, [pc, #168]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003362:	492e      	ldr	r1, [pc, #184]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003364:	400a      	ands	r2, r1
 8003366:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2201      	movs	r2, #1
 800336e:	4013      	ands	r3, r2
 8003370:	d009      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003372:	4b26      	ldr	r3, [pc, #152]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003376:	2203      	movs	r2, #3
 8003378:	4393      	bics	r3, r2
 800337a:	0019      	movs	r1, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	4b22      	ldr	r3, [pc, #136]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003382:	430a      	orrs	r2, r1
 8003384:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2202      	movs	r2, #2
 800338c:	4013      	ands	r3, r2
 800338e:	d009      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003390:	4b1e      	ldr	r3, [pc, #120]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003392:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003394:	4a22      	ldr	r2, [pc, #136]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003396:	4013      	ands	r3, r2
 8003398:	0019      	movs	r1, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68da      	ldr	r2, [r3, #12]
 800339e:	4b1b      	ldr	r3, [pc, #108]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80033a0:	430a      	orrs	r2, r1
 80033a2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2220      	movs	r2, #32
 80033aa:	4013      	ands	r3, r2
 80033ac:	d008      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033ae:	4b17      	ldr	r3, [pc, #92]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80033b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	0899      	lsrs	r1, r3, #2
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	695a      	ldr	r2, [r3, #20]
 80033ba:	4b14      	ldr	r3, [pc, #80]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80033bc:	430a      	orrs	r2, r1
 80033be:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_FDCAN1_CONFIG(PeriphClkInit->Fdcan1ClockSelection);

  }
#endif /* FDCAN1 */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2204      	movs	r2, #4
 80033c6:	4013      	ands	r3, r2
 80033c8:	d009      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80033ca:	4b10      	ldr	r3, [pc, #64]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80033cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ce:	4a15      	ldr	r2, [pc, #84]	@ (8003424 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80033d0:	4013      	ands	r3, r2
 80033d2:	0019      	movs	r1, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	691a      	ldr	r2, [r3, #16]
 80033d8:	4b0c      	ldr	r3, [pc, #48]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80033da:	430a      	orrs	r2, r1
 80033dc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2280      	movs	r2, #128	@ 0x80
 80033e4:	4013      	ands	r3, r2
 80033e6:	d009      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 80033e8:	4b08      	ldr	r3, [pc, #32]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	22e0      	movs	r2, #224	@ 0xe0
 80033ee:	4393      	bics	r3, r2
 80033f0:	0019      	movs	r1, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685a      	ldr	r2, [r3, #4]
 80033f6:	4b05      	ldr	r3, [pc, #20]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80033f8:	430a      	orrs	r2, r1
 80033fa:	601a      	str	r2, [r3, #0]
  }
  return status;
 80033fc:	2312      	movs	r3, #18
 80033fe:	18fb      	adds	r3, r7, r3
 8003400:	781b      	ldrb	r3, [r3, #0]
}
 8003402:	0018      	movs	r0, r3
 8003404:	46bd      	mov	sp, r7
 8003406:	b006      	add	sp, #24
 8003408:	bd80      	pop	{r7, pc}
 800340a:	46c0      	nop			@ (mov r8, r8)
 800340c:	40021000 	.word	0x40021000
 8003410:	fffffcff 	.word	0xfffffcff
 8003414:	fffeffff 	.word	0xfffeffff
 8003418:	00001388 	.word	0x00001388
 800341c:	efffffff 	.word	0xefffffff
 8003420:	ffffcfff 	.word	0xffffcfff
 8003424:	ffff3fff 	.word	0xffff3fff

08003428 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e04a      	b.n	80034d0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	223d      	movs	r2, #61	@ 0x3d
 800343e:	5c9b      	ldrb	r3, [r3, r2]
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d107      	bne.n	8003456 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	223c      	movs	r2, #60	@ 0x3c
 800344a:	2100      	movs	r1, #0
 800344c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	0018      	movs	r0, r3
 8003452:	f7fe fe79 	bl	8002148 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	223d      	movs	r2, #61	@ 0x3d
 800345a:	2102      	movs	r1, #2
 800345c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	3304      	adds	r3, #4
 8003466:	0019      	movs	r1, r3
 8003468:	0010      	movs	r0, r2
 800346a:	f000 ff6f 	bl	800434c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2248      	movs	r2, #72	@ 0x48
 8003472:	2101      	movs	r1, #1
 8003474:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	223e      	movs	r2, #62	@ 0x3e
 800347a:	2101      	movs	r1, #1
 800347c:	5499      	strb	r1, [r3, r2]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	223f      	movs	r2, #63	@ 0x3f
 8003482:	2101      	movs	r1, #1
 8003484:	5499      	strb	r1, [r3, r2]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2240      	movs	r2, #64	@ 0x40
 800348a:	2101      	movs	r1, #1
 800348c:	5499      	strb	r1, [r3, r2]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2241      	movs	r2, #65	@ 0x41
 8003492:	2101      	movs	r1, #1
 8003494:	5499      	strb	r1, [r3, r2]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2242      	movs	r2, #66	@ 0x42
 800349a:	2101      	movs	r1, #1
 800349c:	5499      	strb	r1, [r3, r2]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2243      	movs	r2, #67	@ 0x43
 80034a2:	2101      	movs	r1, #1
 80034a4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2244      	movs	r2, #68	@ 0x44
 80034aa:	2101      	movs	r1, #1
 80034ac:	5499      	strb	r1, [r3, r2]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2245      	movs	r2, #69	@ 0x45
 80034b2:	2101      	movs	r1, #1
 80034b4:	5499      	strb	r1, [r3, r2]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2246      	movs	r2, #70	@ 0x46
 80034ba:	2101      	movs	r1, #1
 80034bc:	5499      	strb	r1, [r3, r2]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2247      	movs	r2, #71	@ 0x47
 80034c2:	2101      	movs	r1, #1
 80034c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	223d      	movs	r2, #61	@ 0x3d
 80034ca:	2101      	movs	r1, #1
 80034cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	0018      	movs	r0, r3
 80034d2:	46bd      	mov	sp, r7
 80034d4:	b002      	add	sp, #8
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	223d      	movs	r2, #61	@ 0x3d
 80034e4:	5c9b      	ldrb	r3, [r3, r2]
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d001      	beq.n	80034f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e037      	b.n	8003560 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	223d      	movs	r2, #61	@ 0x3d
 80034f4:	2102      	movs	r1, #2
 80034f6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68da      	ldr	r2, [r3, #12]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2101      	movs	r1, #1
 8003504:	430a      	orrs	r2, r1
 8003506:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a16      	ldr	r2, [pc, #88]	@ (8003568 <HAL_TIM_Base_Start_IT+0x90>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d004      	beq.n	800351c <HAL_TIM_Base_Start_IT+0x44>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a15      	ldr	r2, [pc, #84]	@ (800356c <HAL_TIM_Base_Start_IT+0x94>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d116      	bne.n	800354a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	4a13      	ldr	r2, [pc, #76]	@ (8003570 <HAL_TIM_Base_Start_IT+0x98>)
 8003524:	4013      	ands	r3, r2
 8003526:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2b06      	cmp	r3, #6
 800352c:	d016      	beq.n	800355c <HAL_TIM_Base_Start_IT+0x84>
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	2380      	movs	r3, #128	@ 0x80
 8003532:	025b      	lsls	r3, r3, #9
 8003534:	429a      	cmp	r2, r3
 8003536:	d011      	beq.n	800355c <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2101      	movs	r1, #1
 8003544:	430a      	orrs	r2, r1
 8003546:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003548:	e008      	b.n	800355c <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2101      	movs	r1, #1
 8003556:	430a      	orrs	r2, r1
 8003558:	601a      	str	r2, [r3, #0]
 800355a:	e000      	b.n	800355e <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800355c:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	0018      	movs	r0, r3
 8003562:	46bd      	mov	sp, r7
 8003564:	b004      	add	sp, #16
 8003566:	bd80      	pop	{r7, pc}
 8003568:	40012c00 	.word	0x40012c00
 800356c:	40000400 	.word	0x40000400
 8003570:	00010007 	.word	0x00010007

08003574 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e04a      	b.n	800361c <HAL_TIM_OC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	223d      	movs	r2, #61	@ 0x3d
 800358a:	5c9b      	ldrb	r3, [r3, r2]
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d107      	bne.n	80035a2 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	223c      	movs	r2, #60	@ 0x3c
 8003596:	2100      	movs	r1, #0
 8003598:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	0018      	movs	r0, r3
 800359e:	f7fe fdad 	bl	80020fc <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	223d      	movs	r2, #61	@ 0x3d
 80035a6:	2102      	movs	r1, #2
 80035a8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	3304      	adds	r3, #4
 80035b2:	0019      	movs	r1, r3
 80035b4:	0010      	movs	r0, r2
 80035b6:	f000 fec9 	bl	800434c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2248      	movs	r2, #72	@ 0x48
 80035be:	2101      	movs	r1, #1
 80035c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	223e      	movs	r2, #62	@ 0x3e
 80035c6:	2101      	movs	r1, #1
 80035c8:	5499      	strb	r1, [r3, r2]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	223f      	movs	r2, #63	@ 0x3f
 80035ce:	2101      	movs	r1, #1
 80035d0:	5499      	strb	r1, [r3, r2]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2240      	movs	r2, #64	@ 0x40
 80035d6:	2101      	movs	r1, #1
 80035d8:	5499      	strb	r1, [r3, r2]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2241      	movs	r2, #65	@ 0x41
 80035de:	2101      	movs	r1, #1
 80035e0:	5499      	strb	r1, [r3, r2]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2242      	movs	r2, #66	@ 0x42
 80035e6:	2101      	movs	r1, #1
 80035e8:	5499      	strb	r1, [r3, r2]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2243      	movs	r2, #67	@ 0x43
 80035ee:	2101      	movs	r1, #1
 80035f0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2244      	movs	r2, #68	@ 0x44
 80035f6:	2101      	movs	r1, #1
 80035f8:	5499      	strb	r1, [r3, r2]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2245      	movs	r2, #69	@ 0x45
 80035fe:	2101      	movs	r1, #1
 8003600:	5499      	strb	r1, [r3, r2]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2246      	movs	r2, #70	@ 0x46
 8003606:	2101      	movs	r1, #1
 8003608:	5499      	strb	r1, [r3, r2]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2247      	movs	r2, #71	@ 0x47
 800360e:	2101      	movs	r1, #1
 8003610:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	223d      	movs	r2, #61	@ 0x3d
 8003616:	2101      	movs	r1, #1
 8003618:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	0018      	movs	r0, r3
 800361e:	46bd      	mov	sp, r7
 8003620:	b002      	add	sp, #8
 8003622:	bd80      	pop	{r7, pc}

08003624 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800362e:	230f      	movs	r3, #15
 8003630:	18fb      	adds	r3, r7, r3
 8003632:	2200      	movs	r2, #0
 8003634:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d108      	bne.n	800364e <HAL_TIM_OC_Start_IT+0x2a>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	223e      	movs	r2, #62	@ 0x3e
 8003640:	5c9b      	ldrb	r3, [r3, r2]
 8003642:	b2db      	uxtb	r3, r3
 8003644:	3b01      	subs	r3, #1
 8003646:	1e5a      	subs	r2, r3, #1
 8003648:	4193      	sbcs	r3, r2
 800364a:	b2db      	uxtb	r3, r3
 800364c:	e037      	b.n	80036be <HAL_TIM_OC_Start_IT+0x9a>
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	2b04      	cmp	r3, #4
 8003652:	d108      	bne.n	8003666 <HAL_TIM_OC_Start_IT+0x42>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	223f      	movs	r2, #63	@ 0x3f
 8003658:	5c9b      	ldrb	r3, [r3, r2]
 800365a:	b2db      	uxtb	r3, r3
 800365c:	3b01      	subs	r3, #1
 800365e:	1e5a      	subs	r2, r3, #1
 8003660:	4193      	sbcs	r3, r2
 8003662:	b2db      	uxtb	r3, r3
 8003664:	e02b      	b.n	80036be <HAL_TIM_OC_Start_IT+0x9a>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	2b08      	cmp	r3, #8
 800366a:	d108      	bne.n	800367e <HAL_TIM_OC_Start_IT+0x5a>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2240      	movs	r2, #64	@ 0x40
 8003670:	5c9b      	ldrb	r3, [r3, r2]
 8003672:	b2db      	uxtb	r3, r3
 8003674:	3b01      	subs	r3, #1
 8003676:	1e5a      	subs	r2, r3, #1
 8003678:	4193      	sbcs	r3, r2
 800367a:	b2db      	uxtb	r3, r3
 800367c:	e01f      	b.n	80036be <HAL_TIM_OC_Start_IT+0x9a>
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	2b0c      	cmp	r3, #12
 8003682:	d108      	bne.n	8003696 <HAL_TIM_OC_Start_IT+0x72>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2241      	movs	r2, #65	@ 0x41
 8003688:	5c9b      	ldrb	r3, [r3, r2]
 800368a:	b2db      	uxtb	r3, r3
 800368c:	3b01      	subs	r3, #1
 800368e:	1e5a      	subs	r2, r3, #1
 8003690:	4193      	sbcs	r3, r2
 8003692:	b2db      	uxtb	r3, r3
 8003694:	e013      	b.n	80036be <HAL_TIM_OC_Start_IT+0x9a>
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	2b10      	cmp	r3, #16
 800369a:	d108      	bne.n	80036ae <HAL_TIM_OC_Start_IT+0x8a>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2242      	movs	r2, #66	@ 0x42
 80036a0:	5c9b      	ldrb	r3, [r3, r2]
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	3b01      	subs	r3, #1
 80036a6:	1e5a      	subs	r2, r3, #1
 80036a8:	4193      	sbcs	r3, r2
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	e007      	b.n	80036be <HAL_TIM_OC_Start_IT+0x9a>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2243      	movs	r2, #67	@ 0x43
 80036b2:	5c9b      	ldrb	r3, [r3, r2]
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	3b01      	subs	r3, #1
 80036b8:	1e5a      	subs	r2, r3, #1
 80036ba:	4193      	sbcs	r3, r2
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <HAL_TIM_OC_Start_IT+0xa2>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e0be      	b.n	8003844 <HAL_TIM_OC_Start_IT+0x220>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d104      	bne.n	80036d6 <HAL_TIM_OC_Start_IT+0xb2>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	223e      	movs	r2, #62	@ 0x3e
 80036d0:	2102      	movs	r1, #2
 80036d2:	5499      	strb	r1, [r3, r2]
 80036d4:	e023      	b.n	800371e <HAL_TIM_OC_Start_IT+0xfa>
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	2b04      	cmp	r3, #4
 80036da:	d104      	bne.n	80036e6 <HAL_TIM_OC_Start_IT+0xc2>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	223f      	movs	r2, #63	@ 0x3f
 80036e0:	2102      	movs	r1, #2
 80036e2:	5499      	strb	r1, [r3, r2]
 80036e4:	e01b      	b.n	800371e <HAL_TIM_OC_Start_IT+0xfa>
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	2b08      	cmp	r3, #8
 80036ea:	d104      	bne.n	80036f6 <HAL_TIM_OC_Start_IT+0xd2>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2240      	movs	r2, #64	@ 0x40
 80036f0:	2102      	movs	r1, #2
 80036f2:	5499      	strb	r1, [r3, r2]
 80036f4:	e013      	b.n	800371e <HAL_TIM_OC_Start_IT+0xfa>
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	2b0c      	cmp	r3, #12
 80036fa:	d104      	bne.n	8003706 <HAL_TIM_OC_Start_IT+0xe2>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2241      	movs	r2, #65	@ 0x41
 8003700:	2102      	movs	r1, #2
 8003702:	5499      	strb	r1, [r3, r2]
 8003704:	e00b      	b.n	800371e <HAL_TIM_OC_Start_IT+0xfa>
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	2b10      	cmp	r3, #16
 800370a:	d104      	bne.n	8003716 <HAL_TIM_OC_Start_IT+0xf2>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2242      	movs	r2, #66	@ 0x42
 8003710:	2102      	movs	r1, #2
 8003712:	5499      	strb	r1, [r3, r2]
 8003714:	e003      	b.n	800371e <HAL_TIM_OC_Start_IT+0xfa>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2243      	movs	r2, #67	@ 0x43
 800371a:	2102      	movs	r1, #2
 800371c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	2b0c      	cmp	r3, #12
 8003722:	d02a      	beq.n	800377a <HAL_TIM_OC_Start_IT+0x156>
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	2b0c      	cmp	r3, #12
 8003728:	d830      	bhi.n	800378c <HAL_TIM_OC_Start_IT+0x168>
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	2b08      	cmp	r3, #8
 800372e:	d01b      	beq.n	8003768 <HAL_TIM_OC_Start_IT+0x144>
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	2b08      	cmp	r3, #8
 8003734:	d82a      	bhi.n	800378c <HAL_TIM_OC_Start_IT+0x168>
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d003      	beq.n	8003744 <HAL_TIM_OC_Start_IT+0x120>
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	2b04      	cmp	r3, #4
 8003740:	d009      	beq.n	8003756 <HAL_TIM_OC_Start_IT+0x132>
 8003742:	e023      	b.n	800378c <HAL_TIM_OC_Start_IT+0x168>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68da      	ldr	r2, [r3, #12]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2102      	movs	r1, #2
 8003750:	430a      	orrs	r2, r1
 8003752:	60da      	str	r2, [r3, #12]
      break;
 8003754:	e01f      	b.n	8003796 <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68da      	ldr	r2, [r3, #12]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2104      	movs	r1, #4
 8003762:	430a      	orrs	r2, r1
 8003764:	60da      	str	r2, [r3, #12]
      break;
 8003766:	e016      	b.n	8003796 <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68da      	ldr	r2, [r3, #12]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2108      	movs	r1, #8
 8003774:	430a      	orrs	r2, r1
 8003776:	60da      	str	r2, [r3, #12]
      break;
 8003778:	e00d      	b.n	8003796 <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68da      	ldr	r2, [r3, #12]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2110      	movs	r1, #16
 8003786:	430a      	orrs	r2, r1
 8003788:	60da      	str	r2, [r3, #12]
      break;
 800378a:	e004      	b.n	8003796 <HAL_TIM_OC_Start_IT+0x172>
    }

    default:
      status = HAL_ERROR;
 800378c:	230f      	movs	r3, #15
 800378e:	18fb      	adds	r3, r7, r3
 8003790:	2201      	movs	r2, #1
 8003792:	701a      	strb	r2, [r3, #0]
      break;
 8003794:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8003796:	230f      	movs	r3, #15
 8003798:	18fb      	adds	r3, r7, r3
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d14e      	bne.n	800383e <HAL_TIM_OC_Start_IT+0x21a>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6839      	ldr	r1, [r7, #0]
 80037a6:	2201      	movs	r2, #1
 80037a8:	0018      	movs	r0, r3
 80037aa:	f001 fa9b 	bl	8004ce4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a26      	ldr	r2, [pc, #152]	@ (800384c <HAL_TIM_OC_Start_IT+0x228>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d009      	beq.n	80037cc <HAL_TIM_OC_Start_IT+0x1a8>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a24      	ldr	r2, [pc, #144]	@ (8003850 <HAL_TIM_OC_Start_IT+0x22c>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d004      	beq.n	80037cc <HAL_TIM_OC_Start_IT+0x1a8>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a23      	ldr	r2, [pc, #140]	@ (8003854 <HAL_TIM_OC_Start_IT+0x230>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d101      	bne.n	80037d0 <HAL_TIM_OC_Start_IT+0x1ac>
 80037cc:	2301      	movs	r3, #1
 80037ce:	e000      	b.n	80037d2 <HAL_TIM_OC_Start_IT+0x1ae>
 80037d0:	2300      	movs	r3, #0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d008      	beq.n	80037e8 <HAL_TIM_OC_Start_IT+0x1c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2180      	movs	r1, #128	@ 0x80
 80037e2:	0209      	lsls	r1, r1, #8
 80037e4:	430a      	orrs	r2, r1
 80037e6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a17      	ldr	r2, [pc, #92]	@ (800384c <HAL_TIM_OC_Start_IT+0x228>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d004      	beq.n	80037fc <HAL_TIM_OC_Start_IT+0x1d8>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a18      	ldr	r2, [pc, #96]	@ (8003858 <HAL_TIM_OC_Start_IT+0x234>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d116      	bne.n	800382a <HAL_TIM_OC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	4a16      	ldr	r2, [pc, #88]	@ (800385c <HAL_TIM_OC_Start_IT+0x238>)
 8003804:	4013      	ands	r3, r2
 8003806:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	2b06      	cmp	r3, #6
 800380c:	d016      	beq.n	800383c <HAL_TIM_OC_Start_IT+0x218>
 800380e:	68ba      	ldr	r2, [r7, #8]
 8003810:	2380      	movs	r3, #128	@ 0x80
 8003812:	025b      	lsls	r3, r3, #9
 8003814:	429a      	cmp	r2, r3
 8003816:	d011      	beq.n	800383c <HAL_TIM_OC_Start_IT+0x218>
      {
        __HAL_TIM_ENABLE(htim);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2101      	movs	r1, #1
 8003824:	430a      	orrs	r2, r1
 8003826:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003828:	e008      	b.n	800383c <HAL_TIM_OC_Start_IT+0x218>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2101      	movs	r1, #1
 8003836:	430a      	orrs	r2, r1
 8003838:	601a      	str	r2, [r3, #0]
 800383a:	e000      	b.n	800383e <HAL_TIM_OC_Start_IT+0x21a>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800383c:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 800383e:	230f      	movs	r3, #15
 8003840:	18fb      	adds	r3, r7, r3
 8003842:	781b      	ldrb	r3, [r3, #0]
}
 8003844:	0018      	movs	r0, r3
 8003846:	46bd      	mov	sp, r7
 8003848:	b004      	add	sp, #16
 800384a:	bd80      	pop	{r7, pc}
 800384c:	40012c00 	.word	0x40012c00
 8003850:	40014400 	.word	0x40014400
 8003854:	40014800 	.word	0x40014800
 8003858:	40000400 	.word	0x40000400
 800385c:	00010007 	.word	0x00010007

08003860 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800386a:	230f      	movs	r3, #15
 800386c:	18fb      	adds	r3, r7, r3
 800386e:	2200      	movs	r2, #0
 8003870:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	2b0c      	cmp	r3, #12
 8003876:	d02a      	beq.n	80038ce <HAL_TIM_OC_Stop_IT+0x6e>
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	2b0c      	cmp	r3, #12
 800387c:	d830      	bhi.n	80038e0 <HAL_TIM_OC_Stop_IT+0x80>
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	2b08      	cmp	r3, #8
 8003882:	d01b      	beq.n	80038bc <HAL_TIM_OC_Stop_IT+0x5c>
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	2b08      	cmp	r3, #8
 8003888:	d82a      	bhi.n	80038e0 <HAL_TIM_OC_Stop_IT+0x80>
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <HAL_TIM_OC_Stop_IT+0x38>
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	2b04      	cmp	r3, #4
 8003894:	d009      	beq.n	80038aa <HAL_TIM_OC_Stop_IT+0x4a>
 8003896:	e023      	b.n	80038e0 <HAL_TIM_OC_Stop_IT+0x80>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68da      	ldr	r2, [r3, #12]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2102      	movs	r1, #2
 80038a4:	438a      	bics	r2, r1
 80038a6:	60da      	str	r2, [r3, #12]
      break;
 80038a8:	e01f      	b.n	80038ea <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68da      	ldr	r2, [r3, #12]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2104      	movs	r1, #4
 80038b6:	438a      	bics	r2, r1
 80038b8:	60da      	str	r2, [r3, #12]
      break;
 80038ba:	e016      	b.n	80038ea <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68da      	ldr	r2, [r3, #12]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2108      	movs	r1, #8
 80038c8:	438a      	bics	r2, r1
 80038ca:	60da      	str	r2, [r3, #12]
      break;
 80038cc:	e00d      	b.n	80038ea <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68da      	ldr	r2, [r3, #12]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2110      	movs	r1, #16
 80038da:	438a      	bics	r2, r1
 80038dc:	60da      	str	r2, [r3, #12]
      break;
 80038de:	e004      	b.n	80038ea <HAL_TIM_OC_Stop_IT+0x8a>
    }

    default:
      status = HAL_ERROR;
 80038e0:	230f      	movs	r3, #15
 80038e2:	18fb      	adds	r3, r7, r3
 80038e4:	2201      	movs	r2, #1
 80038e6:	701a      	strb	r2, [r3, #0]
      break;
 80038e8:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 80038ea:	230f      	movs	r3, #15
 80038ec:	18fb      	adds	r3, r7, r3
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d000      	beq.n	80038f6 <HAL_TIM_OC_Stop_IT+0x96>
 80038f4:	e06e      	b.n	80039d4 <HAL_TIM_OC_Stop_IT+0x174>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	6839      	ldr	r1, [r7, #0]
 80038fc:	2200      	movs	r2, #0
 80038fe:	0018      	movs	r0, r3
 8003900:	f001 f9f0 	bl	8004ce4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a36      	ldr	r2, [pc, #216]	@ (80039e4 <HAL_TIM_OC_Stop_IT+0x184>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d009      	beq.n	8003922 <HAL_TIM_OC_Stop_IT+0xc2>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a35      	ldr	r2, [pc, #212]	@ (80039e8 <HAL_TIM_OC_Stop_IT+0x188>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d004      	beq.n	8003922 <HAL_TIM_OC_Stop_IT+0xc2>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a33      	ldr	r2, [pc, #204]	@ (80039ec <HAL_TIM_OC_Stop_IT+0x18c>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d101      	bne.n	8003926 <HAL_TIM_OC_Stop_IT+0xc6>
 8003922:	2301      	movs	r3, #1
 8003924:	e000      	b.n	8003928 <HAL_TIM_OC_Stop_IT+0xc8>
 8003926:	2300      	movs	r3, #0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d013      	beq.n	8003954 <HAL_TIM_OC_Stop_IT+0xf4>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6a1b      	ldr	r3, [r3, #32]
 8003932:	4a2f      	ldr	r2, [pc, #188]	@ (80039f0 <HAL_TIM_OC_Stop_IT+0x190>)
 8003934:	4013      	ands	r3, r2
 8003936:	d10d      	bne.n	8003954 <HAL_TIM_OC_Stop_IT+0xf4>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	4a2d      	ldr	r2, [pc, #180]	@ (80039f4 <HAL_TIM_OC_Stop_IT+0x194>)
 8003940:	4013      	ands	r3, r2
 8003942:	d107      	bne.n	8003954 <HAL_TIM_OC_Stop_IT+0xf4>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	492a      	ldr	r1, [pc, #168]	@ (80039f8 <HAL_TIM_OC_Stop_IT+0x198>)
 8003950:	400a      	ands	r2, r1
 8003952:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	4a25      	ldr	r2, [pc, #148]	@ (80039f0 <HAL_TIM_OC_Stop_IT+0x190>)
 800395c:	4013      	ands	r3, r2
 800395e:	d10d      	bne.n	800397c <HAL_TIM_OC_Stop_IT+0x11c>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	4a23      	ldr	r2, [pc, #140]	@ (80039f4 <HAL_TIM_OC_Stop_IT+0x194>)
 8003968:	4013      	ands	r3, r2
 800396a:	d107      	bne.n	800397c <HAL_TIM_OC_Stop_IT+0x11c>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2101      	movs	r1, #1
 8003978:	438a      	bics	r2, r1
 800397a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d104      	bne.n	800398c <HAL_TIM_OC_Stop_IT+0x12c>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	223e      	movs	r2, #62	@ 0x3e
 8003986:	2101      	movs	r1, #1
 8003988:	5499      	strb	r1, [r3, r2]
 800398a:	e023      	b.n	80039d4 <HAL_TIM_OC_Stop_IT+0x174>
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	2b04      	cmp	r3, #4
 8003990:	d104      	bne.n	800399c <HAL_TIM_OC_Stop_IT+0x13c>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	223f      	movs	r2, #63	@ 0x3f
 8003996:	2101      	movs	r1, #1
 8003998:	5499      	strb	r1, [r3, r2]
 800399a:	e01b      	b.n	80039d4 <HAL_TIM_OC_Stop_IT+0x174>
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	2b08      	cmp	r3, #8
 80039a0:	d104      	bne.n	80039ac <HAL_TIM_OC_Stop_IT+0x14c>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2240      	movs	r2, #64	@ 0x40
 80039a6:	2101      	movs	r1, #1
 80039a8:	5499      	strb	r1, [r3, r2]
 80039aa:	e013      	b.n	80039d4 <HAL_TIM_OC_Stop_IT+0x174>
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	2b0c      	cmp	r3, #12
 80039b0:	d104      	bne.n	80039bc <HAL_TIM_OC_Stop_IT+0x15c>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2241      	movs	r2, #65	@ 0x41
 80039b6:	2101      	movs	r1, #1
 80039b8:	5499      	strb	r1, [r3, r2]
 80039ba:	e00b      	b.n	80039d4 <HAL_TIM_OC_Stop_IT+0x174>
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	2b10      	cmp	r3, #16
 80039c0:	d104      	bne.n	80039cc <HAL_TIM_OC_Stop_IT+0x16c>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2242      	movs	r2, #66	@ 0x42
 80039c6:	2101      	movs	r1, #1
 80039c8:	5499      	strb	r1, [r3, r2]
 80039ca:	e003      	b.n	80039d4 <HAL_TIM_OC_Stop_IT+0x174>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2243      	movs	r2, #67	@ 0x43
 80039d0:	2101      	movs	r1, #1
 80039d2:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 80039d4:	230f      	movs	r3, #15
 80039d6:	18fb      	adds	r3, r7, r3
 80039d8:	781b      	ldrb	r3, [r3, #0]
}
 80039da:	0018      	movs	r0, r3
 80039dc:	46bd      	mov	sp, r7
 80039de:	b004      	add	sp, #16
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	46c0      	nop			@ (mov r8, r8)
 80039e4:	40012c00 	.word	0x40012c00
 80039e8:	40014400 	.word	0x40014400
 80039ec:	40014800 	.word	0x40014800
 80039f0:	00001111 	.word	0x00001111
 80039f4:	00000444 	.word	0x00000444
 80039f8:	ffff7fff 	.word	0xffff7fff

080039fc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e04a      	b.n	8003aa4 <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	223d      	movs	r2, #61	@ 0x3d
 8003a12:	5c9b      	ldrb	r3, [r3, r2]
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d107      	bne.n	8003a2a <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	223c      	movs	r2, #60	@ 0x3c
 8003a1e:	2100      	movs	r1, #0
 8003a20:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	0018      	movs	r0, r3
 8003a26:	f7fe fb09 	bl	800203c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	223d      	movs	r2, #61	@ 0x3d
 8003a2e:	2102      	movs	r1, #2
 8003a30:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	3304      	adds	r3, #4
 8003a3a:	0019      	movs	r1, r3
 8003a3c:	0010      	movs	r0, r2
 8003a3e:	f000 fc85 	bl	800434c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2248      	movs	r2, #72	@ 0x48
 8003a46:	2101      	movs	r1, #1
 8003a48:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	223e      	movs	r2, #62	@ 0x3e
 8003a4e:	2101      	movs	r1, #1
 8003a50:	5499      	strb	r1, [r3, r2]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	223f      	movs	r2, #63	@ 0x3f
 8003a56:	2101      	movs	r1, #1
 8003a58:	5499      	strb	r1, [r3, r2]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2240      	movs	r2, #64	@ 0x40
 8003a5e:	2101      	movs	r1, #1
 8003a60:	5499      	strb	r1, [r3, r2]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2241      	movs	r2, #65	@ 0x41
 8003a66:	2101      	movs	r1, #1
 8003a68:	5499      	strb	r1, [r3, r2]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2242      	movs	r2, #66	@ 0x42
 8003a6e:	2101      	movs	r1, #1
 8003a70:	5499      	strb	r1, [r3, r2]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2243      	movs	r2, #67	@ 0x43
 8003a76:	2101      	movs	r1, #1
 8003a78:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2244      	movs	r2, #68	@ 0x44
 8003a7e:	2101      	movs	r1, #1
 8003a80:	5499      	strb	r1, [r3, r2]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2245      	movs	r2, #69	@ 0x45
 8003a86:	2101      	movs	r1, #1
 8003a88:	5499      	strb	r1, [r3, r2]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2246      	movs	r2, #70	@ 0x46
 8003a8e:	2101      	movs	r1, #1
 8003a90:	5499      	strb	r1, [r3, r2]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2247      	movs	r2, #71	@ 0x47
 8003a96:	2101      	movs	r1, #1
 8003a98:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	223d      	movs	r2, #61	@ 0x3d
 8003a9e:	2101      	movs	r1, #1
 8003aa0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	0018      	movs	r0, r3
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	b002      	add	sp, #8
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ab6:	230f      	movs	r3, #15
 8003ab8:	18fb      	adds	r3, r7, r3
 8003aba:	2200      	movs	r2, #0
 8003abc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d104      	bne.n	8003ace <HAL_TIM_IC_Start_IT+0x22>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	223e      	movs	r2, #62	@ 0x3e
 8003ac8:	5c9b      	ldrb	r3, [r3, r2]
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	e023      	b.n	8003b16 <HAL_TIM_IC_Start_IT+0x6a>
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	2b04      	cmp	r3, #4
 8003ad2:	d104      	bne.n	8003ade <HAL_TIM_IC_Start_IT+0x32>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	223f      	movs	r2, #63	@ 0x3f
 8003ad8:	5c9b      	ldrb	r3, [r3, r2]
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	e01b      	b.n	8003b16 <HAL_TIM_IC_Start_IT+0x6a>
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	d104      	bne.n	8003aee <HAL_TIM_IC_Start_IT+0x42>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2240      	movs	r2, #64	@ 0x40
 8003ae8:	5c9b      	ldrb	r3, [r3, r2]
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	e013      	b.n	8003b16 <HAL_TIM_IC_Start_IT+0x6a>
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	2b0c      	cmp	r3, #12
 8003af2:	d104      	bne.n	8003afe <HAL_TIM_IC_Start_IT+0x52>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2241      	movs	r2, #65	@ 0x41
 8003af8:	5c9b      	ldrb	r3, [r3, r2]
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	e00b      	b.n	8003b16 <HAL_TIM_IC_Start_IT+0x6a>
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	2b10      	cmp	r3, #16
 8003b02:	d104      	bne.n	8003b0e <HAL_TIM_IC_Start_IT+0x62>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2242      	movs	r2, #66	@ 0x42
 8003b08:	5c9b      	ldrb	r3, [r3, r2]
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	e003      	b.n	8003b16 <HAL_TIM_IC_Start_IT+0x6a>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2243      	movs	r2, #67	@ 0x43
 8003b12:	5c9b      	ldrb	r3, [r3, r2]
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	220e      	movs	r2, #14
 8003b18:	18ba      	adds	r2, r7, r2
 8003b1a:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d104      	bne.n	8003b2c <HAL_TIM_IC_Start_IT+0x80>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2244      	movs	r2, #68	@ 0x44
 8003b26:	5c9b      	ldrb	r3, [r3, r2]
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	e013      	b.n	8003b54 <HAL_TIM_IC_Start_IT+0xa8>
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	2b04      	cmp	r3, #4
 8003b30:	d104      	bne.n	8003b3c <HAL_TIM_IC_Start_IT+0x90>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2245      	movs	r2, #69	@ 0x45
 8003b36:	5c9b      	ldrb	r3, [r3, r2]
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	e00b      	b.n	8003b54 <HAL_TIM_IC_Start_IT+0xa8>
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	2b08      	cmp	r3, #8
 8003b40:	d104      	bne.n	8003b4c <HAL_TIM_IC_Start_IT+0xa0>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2246      	movs	r2, #70	@ 0x46
 8003b46:	5c9b      	ldrb	r3, [r3, r2]
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	e003      	b.n	8003b54 <HAL_TIM_IC_Start_IT+0xa8>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2247      	movs	r2, #71	@ 0x47
 8003b50:	5c9b      	ldrb	r3, [r3, r2]
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	210d      	movs	r1, #13
 8003b56:	187a      	adds	r2, r7, r1
 8003b58:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b5a:	230e      	movs	r3, #14
 8003b5c:	18fb      	adds	r3, r7, r3
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d103      	bne.n	8003b6c <HAL_TIM_IC_Start_IT+0xc0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003b64:	187b      	adds	r3, r7, r1
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d001      	beq.n	8003b70 <HAL_TIM_IC_Start_IT+0xc4>
  {
    return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e0bd      	b.n	8003cec <HAL_TIM_IC_Start_IT+0x240>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d104      	bne.n	8003b80 <HAL_TIM_IC_Start_IT+0xd4>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	223e      	movs	r2, #62	@ 0x3e
 8003b7a:	2102      	movs	r1, #2
 8003b7c:	5499      	strb	r1, [r3, r2]
 8003b7e:	e023      	b.n	8003bc8 <HAL_TIM_IC_Start_IT+0x11c>
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	2b04      	cmp	r3, #4
 8003b84:	d104      	bne.n	8003b90 <HAL_TIM_IC_Start_IT+0xe4>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	223f      	movs	r2, #63	@ 0x3f
 8003b8a:	2102      	movs	r1, #2
 8003b8c:	5499      	strb	r1, [r3, r2]
 8003b8e:	e01b      	b.n	8003bc8 <HAL_TIM_IC_Start_IT+0x11c>
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	2b08      	cmp	r3, #8
 8003b94:	d104      	bne.n	8003ba0 <HAL_TIM_IC_Start_IT+0xf4>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2240      	movs	r2, #64	@ 0x40
 8003b9a:	2102      	movs	r1, #2
 8003b9c:	5499      	strb	r1, [r3, r2]
 8003b9e:	e013      	b.n	8003bc8 <HAL_TIM_IC_Start_IT+0x11c>
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	2b0c      	cmp	r3, #12
 8003ba4:	d104      	bne.n	8003bb0 <HAL_TIM_IC_Start_IT+0x104>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2241      	movs	r2, #65	@ 0x41
 8003baa:	2102      	movs	r1, #2
 8003bac:	5499      	strb	r1, [r3, r2]
 8003bae:	e00b      	b.n	8003bc8 <HAL_TIM_IC_Start_IT+0x11c>
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	2b10      	cmp	r3, #16
 8003bb4:	d104      	bne.n	8003bc0 <HAL_TIM_IC_Start_IT+0x114>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2242      	movs	r2, #66	@ 0x42
 8003bba:	2102      	movs	r1, #2
 8003bbc:	5499      	strb	r1, [r3, r2]
 8003bbe:	e003      	b.n	8003bc8 <HAL_TIM_IC_Start_IT+0x11c>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2243      	movs	r2, #67	@ 0x43
 8003bc4:	2102      	movs	r1, #2
 8003bc6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d104      	bne.n	8003bd8 <HAL_TIM_IC_Start_IT+0x12c>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2244      	movs	r2, #68	@ 0x44
 8003bd2:	2102      	movs	r1, #2
 8003bd4:	5499      	strb	r1, [r3, r2]
 8003bd6:	e013      	b.n	8003c00 <HAL_TIM_IC_Start_IT+0x154>
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	d104      	bne.n	8003be8 <HAL_TIM_IC_Start_IT+0x13c>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2245      	movs	r2, #69	@ 0x45
 8003be2:	2102      	movs	r1, #2
 8003be4:	5499      	strb	r1, [r3, r2]
 8003be6:	e00b      	b.n	8003c00 <HAL_TIM_IC_Start_IT+0x154>
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	2b08      	cmp	r3, #8
 8003bec:	d104      	bne.n	8003bf8 <HAL_TIM_IC_Start_IT+0x14c>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2246      	movs	r2, #70	@ 0x46
 8003bf2:	2102      	movs	r1, #2
 8003bf4:	5499      	strb	r1, [r3, r2]
 8003bf6:	e003      	b.n	8003c00 <HAL_TIM_IC_Start_IT+0x154>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2247      	movs	r2, #71	@ 0x47
 8003bfc:	2102      	movs	r1, #2
 8003bfe:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	2b0c      	cmp	r3, #12
 8003c04:	d02a      	beq.n	8003c5c <HAL_TIM_IC_Start_IT+0x1b0>
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	2b0c      	cmp	r3, #12
 8003c0a:	d830      	bhi.n	8003c6e <HAL_TIM_IC_Start_IT+0x1c2>
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	2b08      	cmp	r3, #8
 8003c10:	d01b      	beq.n	8003c4a <HAL_TIM_IC_Start_IT+0x19e>
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	2b08      	cmp	r3, #8
 8003c16:	d82a      	bhi.n	8003c6e <HAL_TIM_IC_Start_IT+0x1c2>
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d003      	beq.n	8003c26 <HAL_TIM_IC_Start_IT+0x17a>
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	2b04      	cmp	r3, #4
 8003c22:	d009      	beq.n	8003c38 <HAL_TIM_IC_Start_IT+0x18c>
 8003c24:	e023      	b.n	8003c6e <HAL_TIM_IC_Start_IT+0x1c2>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68da      	ldr	r2, [r3, #12]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2102      	movs	r1, #2
 8003c32:	430a      	orrs	r2, r1
 8003c34:	60da      	str	r2, [r3, #12]
      break;
 8003c36:	e01f      	b.n	8003c78 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68da      	ldr	r2, [r3, #12]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2104      	movs	r1, #4
 8003c44:	430a      	orrs	r2, r1
 8003c46:	60da      	str	r2, [r3, #12]
      break;
 8003c48:	e016      	b.n	8003c78 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68da      	ldr	r2, [r3, #12]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2108      	movs	r1, #8
 8003c56:	430a      	orrs	r2, r1
 8003c58:	60da      	str	r2, [r3, #12]
      break;
 8003c5a:	e00d      	b.n	8003c78 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68da      	ldr	r2, [r3, #12]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2110      	movs	r1, #16
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	60da      	str	r2, [r3, #12]
      break;
 8003c6c:	e004      	b.n	8003c78 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    default:
      status = HAL_ERROR;
 8003c6e:	230f      	movs	r3, #15
 8003c70:	18fb      	adds	r3, r7, r3
 8003c72:	2201      	movs	r2, #1
 8003c74:	701a      	strb	r2, [r3, #0]
      break;
 8003c76:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8003c78:	230f      	movs	r3, #15
 8003c7a:	18fb      	adds	r3, r7, r3
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d131      	bne.n	8003ce6 <HAL_TIM_IC_Start_IT+0x23a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	6839      	ldr	r1, [r7, #0]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	0018      	movs	r0, r3
 8003c8c:	f001 f82a 	bl	8004ce4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a17      	ldr	r2, [pc, #92]	@ (8003cf4 <HAL_TIM_IC_Start_IT+0x248>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d004      	beq.n	8003ca4 <HAL_TIM_IC_Start_IT+0x1f8>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a16      	ldr	r2, [pc, #88]	@ (8003cf8 <HAL_TIM_IC_Start_IT+0x24c>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d116      	bne.n	8003cd2 <HAL_TIM_IC_Start_IT+0x226>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	4a14      	ldr	r2, [pc, #80]	@ (8003cfc <HAL_TIM_IC_Start_IT+0x250>)
 8003cac:	4013      	ands	r3, r2
 8003cae:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	2b06      	cmp	r3, #6
 8003cb4:	d016      	beq.n	8003ce4 <HAL_TIM_IC_Start_IT+0x238>
 8003cb6:	68ba      	ldr	r2, [r7, #8]
 8003cb8:	2380      	movs	r3, #128	@ 0x80
 8003cba:	025b      	lsls	r3, r3, #9
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d011      	beq.n	8003ce4 <HAL_TIM_IC_Start_IT+0x238>
      {
        __HAL_TIM_ENABLE(htim);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2101      	movs	r1, #1
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cd0:	e008      	b.n	8003ce4 <HAL_TIM_IC_Start_IT+0x238>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2101      	movs	r1, #1
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	e000      	b.n	8003ce6 <HAL_TIM_IC_Start_IT+0x23a>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ce4:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8003ce6:	230f      	movs	r3, #15
 8003ce8:	18fb      	adds	r3, r7, r3
 8003cea:	781b      	ldrb	r3, [r3, #0]
}
 8003cec:	0018      	movs	r0, r3
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	b004      	add	sp, #16
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	40012c00 	.word	0x40012c00
 8003cf8:	40000400 	.word	0x40000400
 8003cfc:	00010007 	.word	0x00010007

08003d00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	d021      	beq.n	8003d64 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2202      	movs	r2, #2
 8003d24:	4013      	ands	r3, r2
 8003d26:	d01d      	beq.n	8003d64 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2203      	movs	r2, #3
 8003d2e:	4252      	negs	r2, r2
 8003d30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	2203      	movs	r2, #3
 8003d40:	4013      	ands	r3, r2
 8003d42:	d004      	beq.n	8003d4e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	0018      	movs	r0, r3
 8003d48:	f7fe f82c 	bl	8001da4 <HAL_TIM_IC_CaptureCallback>
 8003d4c:	e007      	b.n	8003d5e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	0018      	movs	r0, r3
 8003d52:	f7fd fe8b 	bl	8001a6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	0018      	movs	r0, r3
 8003d5a:	f000 fae7 	bl	800432c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	2204      	movs	r2, #4
 8003d68:	4013      	ands	r3, r2
 8003d6a:	d022      	beq.n	8003db2 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2204      	movs	r2, #4
 8003d70:	4013      	ands	r3, r2
 8003d72:	d01e      	beq.n	8003db2 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2205      	movs	r2, #5
 8003d7a:	4252      	negs	r2, r2
 8003d7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2202      	movs	r2, #2
 8003d82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	699a      	ldr	r2, [r3, #24]
 8003d8a:	23c0      	movs	r3, #192	@ 0xc0
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	4013      	ands	r3, r2
 8003d90:	d004      	beq.n	8003d9c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	0018      	movs	r0, r3
 8003d96:	f7fe f805 	bl	8001da4 <HAL_TIM_IC_CaptureCallback>
 8003d9a:	e007      	b.n	8003dac <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	0018      	movs	r0, r3
 8003da0:	f7fd fe64 	bl	8001a6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	0018      	movs	r0, r3
 8003da8:	f000 fac0 	bl	800432c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	2208      	movs	r2, #8
 8003db6:	4013      	ands	r3, r2
 8003db8:	d021      	beq.n	8003dfe <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2208      	movs	r2, #8
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	d01d      	beq.n	8003dfe <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2209      	movs	r2, #9
 8003dc8:	4252      	negs	r2, r2
 8003dca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2204      	movs	r2, #4
 8003dd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	69db      	ldr	r3, [r3, #28]
 8003dd8:	2203      	movs	r2, #3
 8003dda:	4013      	ands	r3, r2
 8003ddc:	d004      	beq.n	8003de8 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	0018      	movs	r0, r3
 8003de2:	f7fd ffdf 	bl	8001da4 <HAL_TIM_IC_CaptureCallback>
 8003de6:	e007      	b.n	8003df8 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	0018      	movs	r0, r3
 8003dec:	f7fd fe3e 	bl	8001a6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	0018      	movs	r0, r3
 8003df4:	f000 fa9a 	bl	800432c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	2210      	movs	r2, #16
 8003e02:	4013      	ands	r3, r2
 8003e04:	d022      	beq.n	8003e4c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2210      	movs	r2, #16
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	d01e      	beq.n	8003e4c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2211      	movs	r2, #17
 8003e14:	4252      	negs	r2, r2
 8003e16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2208      	movs	r2, #8
 8003e1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	69da      	ldr	r2, [r3, #28]
 8003e24:	23c0      	movs	r3, #192	@ 0xc0
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	4013      	ands	r3, r2
 8003e2a:	d004      	beq.n	8003e36 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	0018      	movs	r0, r3
 8003e30:	f7fd ffb8 	bl	8001da4 <HAL_TIM_IC_CaptureCallback>
 8003e34:	e007      	b.n	8003e46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	0018      	movs	r0, r3
 8003e3a:	f7fd fe17 	bl	8001a6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	0018      	movs	r0, r3
 8003e42:	f000 fa73 	bl	800432c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	4013      	ands	r3, r2
 8003e52:	d00c      	beq.n	8003e6e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2201      	movs	r2, #1
 8003e58:	4013      	ands	r3, r2
 8003e5a:	d008      	beq.n	8003e6e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2202      	movs	r2, #2
 8003e62:	4252      	negs	r2, r2
 8003e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	0018      	movs	r0, r3
 8003e6a:	f7fe f877 	bl	8001f5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	2280      	movs	r2, #128	@ 0x80
 8003e72:	4013      	ands	r3, r2
 8003e74:	d104      	bne.n	8003e80 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	2380      	movs	r3, #128	@ 0x80
 8003e7a:	019b      	lsls	r3, r3, #6
 8003e7c:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003e7e:	d00b      	beq.n	8003e98 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2280      	movs	r2, #128	@ 0x80
 8003e84:	4013      	ands	r3, r2
 8003e86:	d007      	beq.n	8003e98 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a1e      	ldr	r2, [pc, #120]	@ (8003f08 <HAL_TIM_IRQHandler+0x208>)
 8003e8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	0018      	movs	r0, r3
 8003e94:	f000 ffb4 	bl	8004e00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003e98:	68ba      	ldr	r2, [r7, #8]
 8003e9a:	2380      	movs	r3, #128	@ 0x80
 8003e9c:	005b      	lsls	r3, r3, #1
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	d00b      	beq.n	8003eba <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2280      	movs	r2, #128	@ 0x80
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	d007      	beq.n	8003eba <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a17      	ldr	r2, [pc, #92]	@ (8003f0c <HAL_TIM_IRQHandler+0x20c>)
 8003eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	0018      	movs	r0, r3
 8003eb6:	f000 ffab 	bl	8004e10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	2240      	movs	r2, #64	@ 0x40
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	d00c      	beq.n	8003edc <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2240      	movs	r2, #64	@ 0x40
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	d008      	beq.n	8003edc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2241      	movs	r2, #65	@ 0x41
 8003ed0:	4252      	negs	r2, r2
 8003ed2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	0018      	movs	r0, r3
 8003ed8:	f000 fa30 	bl	800433c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	d00c      	beq.n	8003efe <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	4013      	ands	r3, r2
 8003eea:	d008      	beq.n	8003efe <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2221      	movs	r2, #33	@ 0x21
 8003ef2:	4252      	negs	r2, r2
 8003ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	0018      	movs	r0, r3
 8003efa:	f000 ff79 	bl	8004df0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003efe:	46c0      	nop			@ (mov r8, r8)
 8003f00:	46bd      	mov	sp, r7
 8003f02:	b004      	add	sp, #16
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	46c0      	nop			@ (mov r8, r8)
 8003f08:	ffffdf7f 	.word	0xffffdf7f
 8003f0c:	fffffeff 	.word	0xfffffeff

08003f10 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f1c:	2317      	movs	r3, #23
 8003f1e:	18fb      	adds	r3, r7, r3
 8003f20:	2200      	movs	r2, #0
 8003f22:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	223c      	movs	r2, #60	@ 0x3c
 8003f28:	5c9b      	ldrb	r3, [r3, r2]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d101      	bne.n	8003f32 <HAL_TIM_OC_ConfigChannel+0x22>
 8003f2e:	2302      	movs	r3, #2
 8003f30:	e048      	b.n	8003fc4 <HAL_TIM_OC_ConfigChannel+0xb4>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	223c      	movs	r2, #60	@ 0x3c
 8003f36:	2101      	movs	r1, #1
 8003f38:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b14      	cmp	r3, #20
 8003f3e:	d835      	bhi.n	8003fac <HAL_TIM_OC_ConfigChannel+0x9c>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	009a      	lsls	r2, r3, #2
 8003f44:	4b21      	ldr	r3, [pc, #132]	@ (8003fcc <HAL_TIM_OC_ConfigChannel+0xbc>)
 8003f46:	18d3      	adds	r3, r2, r3
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68ba      	ldr	r2, [r7, #8]
 8003f52:	0011      	movs	r1, r2
 8003f54:	0018      	movs	r0, r3
 8003f56:	f000 fa73 	bl	8004440 <TIM_OC1_SetConfig>
      break;
 8003f5a:	e02c      	b.n	8003fb6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68ba      	ldr	r2, [r7, #8]
 8003f62:	0011      	movs	r1, r2
 8003f64:	0018      	movs	r0, r3
 8003f66:	f000 faeb 	bl	8004540 <TIM_OC2_SetConfig>
      break;
 8003f6a:	e024      	b.n	8003fb6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68ba      	ldr	r2, [r7, #8]
 8003f72:	0011      	movs	r1, r2
 8003f74:	0018      	movs	r0, r3
 8003f76:	f000 fb61 	bl	800463c <TIM_OC3_SetConfig>
      break;
 8003f7a:	e01c      	b.n	8003fb6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68ba      	ldr	r2, [r7, #8]
 8003f82:	0011      	movs	r1, r2
 8003f84:	0018      	movs	r0, r3
 8003f86:	f000 fbdb 	bl	8004740 <TIM_OC4_SetConfig>
      break;
 8003f8a:	e014      	b.n	8003fb6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68ba      	ldr	r2, [r7, #8]
 8003f92:	0011      	movs	r1, r2
 8003f94:	0018      	movs	r0, r3
 8003f96:	f000 fc37 	bl	8004808 <TIM_OC5_SetConfig>
      break;
 8003f9a:	e00c      	b.n	8003fb6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68ba      	ldr	r2, [r7, #8]
 8003fa2:	0011      	movs	r1, r2
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	f000 fc89 	bl	80048bc <TIM_OC6_SetConfig>
      break;
 8003faa:	e004      	b.n	8003fb6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003fac:	2317      	movs	r3, #23
 8003fae:	18fb      	adds	r3, r7, r3
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	701a      	strb	r2, [r3, #0]
      break;
 8003fb4:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	223c      	movs	r2, #60	@ 0x3c
 8003fba:	2100      	movs	r1, #0
 8003fbc:	5499      	strb	r1, [r3, r2]

  return status;
 8003fbe:	2317      	movs	r3, #23
 8003fc0:	18fb      	adds	r3, r7, r3
 8003fc2:	781b      	ldrb	r3, [r3, #0]
}
 8003fc4:	0018      	movs	r0, r3
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	b006      	add	sp, #24
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	080077a8 	.word	0x080077a8

08003fd0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b086      	sub	sp, #24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fdc:	2317      	movs	r3, #23
 8003fde:	18fb      	adds	r3, r7, r3
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	223c      	movs	r2, #60	@ 0x3c
 8003fe8:	5c9b      	ldrb	r3, [r3, r2]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d101      	bne.n	8003ff2 <HAL_TIM_IC_ConfigChannel+0x22>
 8003fee:	2302      	movs	r3, #2
 8003ff0:	e08c      	b.n	800410c <HAL_TIM_IC_ConfigChannel+0x13c>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	223c      	movs	r2, #60	@ 0x3c
 8003ff6:	2101      	movs	r1, #1
 8003ff8:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d11b      	bne.n	8004038 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004010:	f000 fcb2 	bl	8004978 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	699a      	ldr	r2, [r3, #24]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	210c      	movs	r1, #12
 8004020:	438a      	bics	r2, r1
 8004022:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6999      	ldr	r1, [r3, #24]
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	689a      	ldr	r2, [r3, #8]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	430a      	orrs	r2, r1
 8004034:	619a      	str	r2, [r3, #24]
 8004036:	e062      	b.n	80040fe <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b04      	cmp	r3, #4
 800403c:	d11c      	bne.n	8004078 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800404e:	f000 fd13 	bl	8004a78 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	699a      	ldr	r2, [r3, #24]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	492d      	ldr	r1, [pc, #180]	@ (8004114 <HAL_TIM_IC_ConfigChannel+0x144>)
 800405e:	400a      	ands	r2, r1
 8004060:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	6999      	ldr	r1, [r3, #24]
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	021a      	lsls	r2, r3, #8
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	430a      	orrs	r2, r1
 8004074:	619a      	str	r2, [r3, #24]
 8004076:	e042      	b.n	80040fe <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2b08      	cmp	r3, #8
 800407c:	d11b      	bne.n	80040b6 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800408e:	f000 fd67 	bl	8004b60 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	69da      	ldr	r2, [r3, #28]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	210c      	movs	r1, #12
 800409e:	438a      	bics	r2, r1
 80040a0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	69d9      	ldr	r1, [r3, #28]
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	689a      	ldr	r2, [r3, #8]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	61da      	str	r2, [r3, #28]
 80040b4:	e023      	b.n	80040fe <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2b0c      	cmp	r3, #12
 80040ba:	d11c      	bne.n	80040f6 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80040cc:	f000 fd88 	bl	8004be0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	69da      	ldr	r2, [r3, #28]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	490e      	ldr	r1, [pc, #56]	@ (8004114 <HAL_TIM_IC_ConfigChannel+0x144>)
 80040dc:	400a      	ands	r2, r1
 80040de:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	69d9      	ldr	r1, [r3, #28]
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	021a      	lsls	r2, r3, #8
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	430a      	orrs	r2, r1
 80040f2:	61da      	str	r2, [r3, #28]
 80040f4:	e003      	b.n	80040fe <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 80040f6:	2317      	movs	r3, #23
 80040f8:	18fb      	adds	r3, r7, r3
 80040fa:	2201      	movs	r2, #1
 80040fc:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	223c      	movs	r2, #60	@ 0x3c
 8004102:	2100      	movs	r1, #0
 8004104:	5499      	strb	r1, [r3, r2]

  return status;
 8004106:	2317      	movs	r3, #23
 8004108:	18fb      	adds	r3, r7, r3
 800410a:	781b      	ldrb	r3, [r3, #0]
}
 800410c:	0018      	movs	r0, r3
 800410e:	46bd      	mov	sp, r7
 8004110:	b006      	add	sp, #24
 8004112:	bd80      	pop	{r7, pc}
 8004114:	fffff3ff 	.word	0xfffff3ff

08004118 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004122:	230f      	movs	r3, #15
 8004124:	18fb      	adds	r3, r7, r3
 8004126:	2200      	movs	r2, #0
 8004128:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	223c      	movs	r2, #60	@ 0x3c
 800412e:	5c9b      	ldrb	r3, [r3, r2]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d101      	bne.n	8004138 <HAL_TIM_ConfigClockSource+0x20>
 8004134:	2302      	movs	r3, #2
 8004136:	e0bc      	b.n	80042b2 <HAL_TIM_ConfigClockSource+0x19a>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	223c      	movs	r2, #60	@ 0x3c
 800413c:	2101      	movs	r1, #1
 800413e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	223d      	movs	r2, #61	@ 0x3d
 8004144:	2102      	movs	r1, #2
 8004146:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	4a5a      	ldr	r2, [pc, #360]	@ (80042bc <HAL_TIM_ConfigClockSource+0x1a4>)
 8004154:	4013      	ands	r3, r2
 8004156:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	4a59      	ldr	r2, [pc, #356]	@ (80042c0 <HAL_TIM_ConfigClockSource+0x1a8>)
 800415c:	4013      	ands	r3, r2
 800415e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68ba      	ldr	r2, [r7, #8]
 8004166:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2280      	movs	r2, #128	@ 0x80
 800416e:	0192      	lsls	r2, r2, #6
 8004170:	4293      	cmp	r3, r2
 8004172:	d040      	beq.n	80041f6 <HAL_TIM_ConfigClockSource+0xde>
 8004174:	2280      	movs	r2, #128	@ 0x80
 8004176:	0192      	lsls	r2, r2, #6
 8004178:	4293      	cmp	r3, r2
 800417a:	d900      	bls.n	800417e <HAL_TIM_ConfigClockSource+0x66>
 800417c:	e088      	b.n	8004290 <HAL_TIM_ConfigClockSource+0x178>
 800417e:	2280      	movs	r2, #128	@ 0x80
 8004180:	0152      	lsls	r2, r2, #5
 8004182:	4293      	cmp	r3, r2
 8004184:	d100      	bne.n	8004188 <HAL_TIM_ConfigClockSource+0x70>
 8004186:	e088      	b.n	800429a <HAL_TIM_ConfigClockSource+0x182>
 8004188:	2280      	movs	r2, #128	@ 0x80
 800418a:	0152      	lsls	r2, r2, #5
 800418c:	4293      	cmp	r3, r2
 800418e:	d900      	bls.n	8004192 <HAL_TIM_ConfigClockSource+0x7a>
 8004190:	e07e      	b.n	8004290 <HAL_TIM_ConfigClockSource+0x178>
 8004192:	2b70      	cmp	r3, #112	@ 0x70
 8004194:	d018      	beq.n	80041c8 <HAL_TIM_ConfigClockSource+0xb0>
 8004196:	d900      	bls.n	800419a <HAL_TIM_ConfigClockSource+0x82>
 8004198:	e07a      	b.n	8004290 <HAL_TIM_ConfigClockSource+0x178>
 800419a:	2b60      	cmp	r3, #96	@ 0x60
 800419c:	d04f      	beq.n	800423e <HAL_TIM_ConfigClockSource+0x126>
 800419e:	d900      	bls.n	80041a2 <HAL_TIM_ConfigClockSource+0x8a>
 80041a0:	e076      	b.n	8004290 <HAL_TIM_ConfigClockSource+0x178>
 80041a2:	2b50      	cmp	r3, #80	@ 0x50
 80041a4:	d03b      	beq.n	800421e <HAL_TIM_ConfigClockSource+0x106>
 80041a6:	d900      	bls.n	80041aa <HAL_TIM_ConfigClockSource+0x92>
 80041a8:	e072      	b.n	8004290 <HAL_TIM_ConfigClockSource+0x178>
 80041aa:	2b40      	cmp	r3, #64	@ 0x40
 80041ac:	d057      	beq.n	800425e <HAL_TIM_ConfigClockSource+0x146>
 80041ae:	d900      	bls.n	80041b2 <HAL_TIM_ConfigClockSource+0x9a>
 80041b0:	e06e      	b.n	8004290 <HAL_TIM_ConfigClockSource+0x178>
 80041b2:	2b30      	cmp	r3, #48	@ 0x30
 80041b4:	d063      	beq.n	800427e <HAL_TIM_ConfigClockSource+0x166>
 80041b6:	d86b      	bhi.n	8004290 <HAL_TIM_ConfigClockSource+0x178>
 80041b8:	2b20      	cmp	r3, #32
 80041ba:	d060      	beq.n	800427e <HAL_TIM_ConfigClockSource+0x166>
 80041bc:	d868      	bhi.n	8004290 <HAL_TIM_ConfigClockSource+0x178>
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d05d      	beq.n	800427e <HAL_TIM_ConfigClockSource+0x166>
 80041c2:	2b10      	cmp	r3, #16
 80041c4:	d05b      	beq.n	800427e <HAL_TIM_ConfigClockSource+0x166>
 80041c6:	e063      	b.n	8004290 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041d8:	f000 fd64 	bl	8004ca4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	2277      	movs	r2, #119	@ 0x77
 80041e8:	4313      	orrs	r3, r2
 80041ea:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68ba      	ldr	r2, [r7, #8]
 80041f2:	609a      	str	r2, [r3, #8]
      break;
 80041f4:	e052      	b.n	800429c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004206:	f000 fd4d 	bl	8004ca4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	689a      	ldr	r2, [r3, #8]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2180      	movs	r1, #128	@ 0x80
 8004216:	01c9      	lsls	r1, r1, #7
 8004218:	430a      	orrs	r2, r1
 800421a:	609a      	str	r2, [r3, #8]
      break;
 800421c:	e03e      	b.n	800429c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800422a:	001a      	movs	r2, r3
 800422c:	f000 fbf6 	bl	8004a1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2150      	movs	r1, #80	@ 0x50
 8004236:	0018      	movs	r0, r3
 8004238:	f000 fd18 	bl	8004c6c <TIM_ITRx_SetConfig>
      break;
 800423c:	e02e      	b.n	800429c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800424a:	001a      	movs	r2, r3
 800424c:	f000 fc56 	bl	8004afc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2160      	movs	r1, #96	@ 0x60
 8004256:	0018      	movs	r0, r3
 8004258:	f000 fd08 	bl	8004c6c <TIM_ITRx_SetConfig>
      break;
 800425c:	e01e      	b.n	800429c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800426a:	001a      	movs	r2, r3
 800426c:	f000 fbd6 	bl	8004a1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2140      	movs	r1, #64	@ 0x40
 8004276:	0018      	movs	r0, r3
 8004278:	f000 fcf8 	bl	8004c6c <TIM_ITRx_SetConfig>
      break;
 800427c:	e00e      	b.n	800429c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	0019      	movs	r1, r3
 8004288:	0010      	movs	r0, r2
 800428a:	f000 fcef 	bl	8004c6c <TIM_ITRx_SetConfig>
      break;
 800428e:	e005      	b.n	800429c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004290:	230f      	movs	r3, #15
 8004292:	18fb      	adds	r3, r7, r3
 8004294:	2201      	movs	r2, #1
 8004296:	701a      	strb	r2, [r3, #0]
      break;
 8004298:	e000      	b.n	800429c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800429a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	223d      	movs	r2, #61	@ 0x3d
 80042a0:	2101      	movs	r1, #1
 80042a2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	223c      	movs	r2, #60	@ 0x3c
 80042a8:	2100      	movs	r1, #0
 80042aa:	5499      	strb	r1, [r3, r2]

  return status;
 80042ac:	230f      	movs	r3, #15
 80042ae:	18fb      	adds	r3, r7, r3
 80042b0:	781b      	ldrb	r3, [r3, #0]
}
 80042b2:	0018      	movs	r0, r3
 80042b4:	46bd      	mov	sp, r7
 80042b6:	b004      	add	sp, #16
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	46c0      	nop			@ (mov r8, r8)
 80042bc:	ffceff88 	.word	0xffceff88
 80042c0:	ffff00ff 	.word	0xffff00ff

080042c4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80042ce:	2300      	movs	r3, #0
 80042d0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	2b0c      	cmp	r3, #12
 80042d6:	d01e      	beq.n	8004316 <HAL_TIM_ReadCapturedValue+0x52>
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	2b0c      	cmp	r3, #12
 80042dc:	d820      	bhi.n	8004320 <HAL_TIM_ReadCapturedValue+0x5c>
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	2b08      	cmp	r3, #8
 80042e2:	d013      	beq.n	800430c <HAL_TIM_ReadCapturedValue+0x48>
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	2b08      	cmp	r3, #8
 80042e8:	d81a      	bhi.n	8004320 <HAL_TIM_ReadCapturedValue+0x5c>
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d003      	beq.n	80042f8 <HAL_TIM_ReadCapturedValue+0x34>
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	2b04      	cmp	r3, #4
 80042f4:	d005      	beq.n	8004302 <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 80042f6:	e013      	b.n	8004320 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042fe:	60fb      	str	r3, [r7, #12]
      break;
 8004300:	e00f      	b.n	8004322 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004308:	60fb      	str	r3, [r7, #12]
      break;
 800430a:	e00a      	b.n	8004322 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004312:	60fb      	str	r3, [r7, #12]
      break;
 8004314:	e005      	b.n	8004322 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431c:	60fb      	str	r3, [r7, #12]
      break;
 800431e:	e000      	b.n	8004322 <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 8004320:	46c0      	nop			@ (mov r8, r8)
  }

  return tmpreg;
 8004322:	68fb      	ldr	r3, [r7, #12]
}
 8004324:	0018      	movs	r0, r3
 8004326:	46bd      	mov	sp, r7
 8004328:	b004      	add	sp, #16
 800432a:	bd80      	pop	{r7, pc}

0800432c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004334:	46c0      	nop			@ (mov r8, r8)
 8004336:	46bd      	mov	sp, r7
 8004338:	b002      	add	sp, #8
 800433a:	bd80      	pop	{r7, pc}

0800433c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004344:	46c0      	nop			@ (mov r8, r8)
 8004346:	46bd      	mov	sp, r7
 8004348:	b002      	add	sp, #8
 800434a:	bd80      	pop	{r7, pc}

0800434c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a32      	ldr	r2, [pc, #200]	@ (8004428 <TIM_Base_SetConfig+0xdc>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d003      	beq.n	800436c <TIM_Base_SetConfig+0x20>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a31      	ldr	r2, [pc, #196]	@ (800442c <TIM_Base_SetConfig+0xe0>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d108      	bne.n	800437e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2270      	movs	r2, #112	@ 0x70
 8004370:	4393      	bics	r3, r2
 8004372:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	4313      	orrs	r3, r2
 800437c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a29      	ldr	r2, [pc, #164]	@ (8004428 <TIM_Base_SetConfig+0xdc>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d00f      	beq.n	80043a6 <TIM_Base_SetConfig+0x5a>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a28      	ldr	r2, [pc, #160]	@ (800442c <TIM_Base_SetConfig+0xe0>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d00b      	beq.n	80043a6 <TIM_Base_SetConfig+0x5a>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a27      	ldr	r2, [pc, #156]	@ (8004430 <TIM_Base_SetConfig+0xe4>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d007      	beq.n	80043a6 <TIM_Base_SetConfig+0x5a>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a26      	ldr	r2, [pc, #152]	@ (8004434 <TIM_Base_SetConfig+0xe8>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d003      	beq.n	80043a6 <TIM_Base_SetConfig+0x5a>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a25      	ldr	r2, [pc, #148]	@ (8004438 <TIM_Base_SetConfig+0xec>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d108      	bne.n	80043b8 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	4a24      	ldr	r2, [pc, #144]	@ (800443c <TIM_Base_SetConfig+0xf0>)
 80043aa:	4013      	ands	r3, r2
 80043ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2280      	movs	r2, #128	@ 0x80
 80043bc:	4393      	bics	r3, r2
 80043be:	001a      	movs	r2, r3
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	689a      	ldr	r2, [r3, #8]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a11      	ldr	r2, [pc, #68]	@ (8004428 <TIM_Base_SetConfig+0xdc>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d007      	beq.n	80043f6 <TIM_Base_SetConfig+0xaa>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a12      	ldr	r2, [pc, #72]	@ (8004434 <TIM_Base_SetConfig+0xe8>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d003      	beq.n	80043f6 <TIM_Base_SetConfig+0xaa>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a11      	ldr	r2, [pc, #68]	@ (8004438 <TIM_Base_SetConfig+0xec>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d103      	bne.n	80043fe <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	691a      	ldr	r2, [r3, #16]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	2201      	movs	r2, #1
 800440a:	4013      	ands	r3, r2
 800440c:	2b01      	cmp	r3, #1
 800440e:	d106      	bne.n	800441e <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	2201      	movs	r2, #1
 8004416:	4393      	bics	r3, r2
 8004418:	001a      	movs	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	611a      	str	r2, [r3, #16]
  }
}
 800441e:	46c0      	nop			@ (mov r8, r8)
 8004420:	46bd      	mov	sp, r7
 8004422:	b004      	add	sp, #16
 8004424:	bd80      	pop	{r7, pc}
 8004426:	46c0      	nop			@ (mov r8, r8)
 8004428:	40012c00 	.word	0x40012c00
 800442c:	40000400 	.word	0x40000400
 8004430:	40002000 	.word	0x40002000
 8004434:	40014400 	.word	0x40014400
 8004438:	40014800 	.word	0x40014800
 800443c:	fffffcff 	.word	0xfffffcff

08004440 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b086      	sub	sp, #24
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a1b      	ldr	r3, [r3, #32]
 8004454:	2201      	movs	r2, #1
 8004456:	4393      	bics	r3, r2
 8004458:	001a      	movs	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	4a2e      	ldr	r2, [pc, #184]	@ (8004528 <TIM_OC1_SetConfig+0xe8>)
 800446e:	4013      	ands	r3, r2
 8004470:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2203      	movs	r2, #3
 8004476:	4393      	bics	r3, r2
 8004478:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	4313      	orrs	r3, r2
 8004482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	2202      	movs	r2, #2
 8004488:	4393      	bics	r3, r2
 800448a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	697a      	ldr	r2, [r7, #20]
 8004492:	4313      	orrs	r3, r2
 8004494:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a24      	ldr	r2, [pc, #144]	@ (800452c <TIM_OC1_SetConfig+0xec>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d007      	beq.n	80044ae <TIM_OC1_SetConfig+0x6e>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a23      	ldr	r2, [pc, #140]	@ (8004530 <TIM_OC1_SetConfig+0xf0>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d003      	beq.n	80044ae <TIM_OC1_SetConfig+0x6e>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a22      	ldr	r2, [pc, #136]	@ (8004534 <TIM_OC1_SetConfig+0xf4>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d10c      	bne.n	80044c8 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	2208      	movs	r2, #8
 80044b2:	4393      	bics	r3, r2
 80044b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	697a      	ldr	r2, [r7, #20]
 80044bc:	4313      	orrs	r3, r2
 80044be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	2204      	movs	r2, #4
 80044c4:	4393      	bics	r3, r2
 80044c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a18      	ldr	r2, [pc, #96]	@ (800452c <TIM_OC1_SetConfig+0xec>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d007      	beq.n	80044e0 <TIM_OC1_SetConfig+0xa0>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a17      	ldr	r2, [pc, #92]	@ (8004530 <TIM_OC1_SetConfig+0xf0>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d003      	beq.n	80044e0 <TIM_OC1_SetConfig+0xa0>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a16      	ldr	r2, [pc, #88]	@ (8004534 <TIM_OC1_SetConfig+0xf4>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d111      	bne.n	8004504 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	4a15      	ldr	r2, [pc, #84]	@ (8004538 <TIM_OC1_SetConfig+0xf8>)
 80044e4:	4013      	ands	r3, r2
 80044e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	4a14      	ldr	r2, [pc, #80]	@ (800453c <TIM_OC1_SetConfig+0xfc>)
 80044ec:	4013      	ands	r3, r2
 80044ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	695b      	ldr	r3, [r3, #20]
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	4313      	orrs	r3, r2
 8004502:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	685a      	ldr	r2, [r3, #4]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	621a      	str	r2, [r3, #32]
}
 800451e:	46c0      	nop			@ (mov r8, r8)
 8004520:	46bd      	mov	sp, r7
 8004522:	b006      	add	sp, #24
 8004524:	bd80      	pop	{r7, pc}
 8004526:	46c0      	nop			@ (mov r8, r8)
 8004528:	fffeff8f 	.word	0xfffeff8f
 800452c:	40012c00 	.word	0x40012c00
 8004530:	40014400 	.word	0x40014400
 8004534:	40014800 	.word	0x40014800
 8004538:	fffffeff 	.word	0xfffffeff
 800453c:	fffffdff 	.word	0xfffffdff

08004540 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	2210      	movs	r2, #16
 8004556:	4393      	bics	r3, r2
 8004558:	001a      	movs	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	4a2c      	ldr	r2, [pc, #176]	@ (8004620 <TIM_OC2_SetConfig+0xe0>)
 800456e:	4013      	ands	r3, r2
 8004570:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	4a2b      	ldr	r2, [pc, #172]	@ (8004624 <TIM_OC2_SetConfig+0xe4>)
 8004576:	4013      	ands	r3, r2
 8004578:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	021b      	lsls	r3, r3, #8
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	4313      	orrs	r3, r2
 8004584:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	2220      	movs	r2, #32
 800458a:	4393      	bics	r3, r2
 800458c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	011b      	lsls	r3, r3, #4
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	4313      	orrs	r3, r2
 8004598:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a22      	ldr	r2, [pc, #136]	@ (8004628 <TIM_OC2_SetConfig+0xe8>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d10d      	bne.n	80045be <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	2280      	movs	r2, #128	@ 0x80
 80045a6:	4393      	bics	r3, r2
 80045a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	011b      	lsls	r3, r3, #4
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	2240      	movs	r2, #64	@ 0x40
 80045ba:	4393      	bics	r3, r2
 80045bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a19      	ldr	r2, [pc, #100]	@ (8004628 <TIM_OC2_SetConfig+0xe8>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d007      	beq.n	80045d6 <TIM_OC2_SetConfig+0x96>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a18      	ldr	r2, [pc, #96]	@ (800462c <TIM_OC2_SetConfig+0xec>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d003      	beq.n	80045d6 <TIM_OC2_SetConfig+0x96>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a17      	ldr	r2, [pc, #92]	@ (8004630 <TIM_OC2_SetConfig+0xf0>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d113      	bne.n	80045fe <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	4a16      	ldr	r2, [pc, #88]	@ (8004634 <TIM_OC2_SetConfig+0xf4>)
 80045da:	4013      	ands	r3, r2
 80045dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	4a15      	ldr	r2, [pc, #84]	@ (8004638 <TIM_OC2_SetConfig+0xf8>)
 80045e2:	4013      	ands	r3, r2
 80045e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	693a      	ldr	r2, [r7, #16]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	685a      	ldr	r2, [r3, #4]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	697a      	ldr	r2, [r7, #20]
 8004616:	621a      	str	r2, [r3, #32]
}
 8004618:	46c0      	nop			@ (mov r8, r8)
 800461a:	46bd      	mov	sp, r7
 800461c:	b006      	add	sp, #24
 800461e:	bd80      	pop	{r7, pc}
 8004620:	feff8fff 	.word	0xfeff8fff
 8004624:	fffffcff 	.word	0xfffffcff
 8004628:	40012c00 	.word	0x40012c00
 800462c:	40014400 	.word	0x40014400
 8004630:	40014800 	.word	0x40014800
 8004634:	fffffbff 	.word	0xfffffbff
 8004638:	fffff7ff 	.word	0xfffff7ff

0800463c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	4a31      	ldr	r2, [pc, #196]	@ (8004718 <TIM_OC3_SetConfig+0xdc>)
 8004652:	401a      	ands	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	69db      	ldr	r3, [r3, #28]
 8004662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	4a2d      	ldr	r2, [pc, #180]	@ (800471c <TIM_OC3_SetConfig+0xe0>)
 8004668:	4013      	ands	r3, r2
 800466a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2203      	movs	r2, #3
 8004670:	4393      	bics	r3, r2
 8004672:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	4313      	orrs	r3, r2
 800467c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	4a27      	ldr	r2, [pc, #156]	@ (8004720 <TIM_OC3_SetConfig+0xe4>)
 8004682:	4013      	ands	r3, r2
 8004684:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	021b      	lsls	r3, r3, #8
 800468c:	697a      	ldr	r2, [r7, #20]
 800468e:	4313      	orrs	r3, r2
 8004690:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a23      	ldr	r2, [pc, #140]	@ (8004724 <TIM_OC3_SetConfig+0xe8>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d10d      	bne.n	80046b6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	4a22      	ldr	r2, [pc, #136]	@ (8004728 <TIM_OC3_SetConfig+0xec>)
 800469e:	4013      	ands	r3, r2
 80046a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	021b      	lsls	r3, r3, #8
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	4a1e      	ldr	r2, [pc, #120]	@ (800472c <TIM_OC3_SetConfig+0xf0>)
 80046b2:	4013      	ands	r3, r2
 80046b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a1a      	ldr	r2, [pc, #104]	@ (8004724 <TIM_OC3_SetConfig+0xe8>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d007      	beq.n	80046ce <TIM_OC3_SetConfig+0x92>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a1b      	ldr	r2, [pc, #108]	@ (8004730 <TIM_OC3_SetConfig+0xf4>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d003      	beq.n	80046ce <TIM_OC3_SetConfig+0x92>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a1a      	ldr	r2, [pc, #104]	@ (8004734 <TIM_OC3_SetConfig+0xf8>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d113      	bne.n	80046f6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	4a19      	ldr	r2, [pc, #100]	@ (8004738 <TIM_OC3_SetConfig+0xfc>)
 80046d2:	4013      	ands	r3, r2
 80046d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	4a18      	ldr	r2, [pc, #96]	@ (800473c <TIM_OC3_SetConfig+0x100>)
 80046da:	4013      	ands	r3, r2
 80046dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	011b      	lsls	r3, r3, #4
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	011b      	lsls	r3, r3, #4
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	685a      	ldr	r2, [r3, #4]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	621a      	str	r2, [r3, #32]
}
 8004710:	46c0      	nop			@ (mov r8, r8)
 8004712:	46bd      	mov	sp, r7
 8004714:	b006      	add	sp, #24
 8004716:	bd80      	pop	{r7, pc}
 8004718:	fffffeff 	.word	0xfffffeff
 800471c:	fffeff8f 	.word	0xfffeff8f
 8004720:	fffffdff 	.word	0xfffffdff
 8004724:	40012c00 	.word	0x40012c00
 8004728:	fffff7ff 	.word	0xfffff7ff
 800472c:	fffffbff 	.word	0xfffffbff
 8004730:	40014400 	.word	0x40014400
 8004734:	40014800 	.word	0x40014800
 8004738:	ffffefff 	.word	0xffffefff
 800473c:	ffffdfff 	.word	0xffffdfff

08004740 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b086      	sub	sp, #24
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a1b      	ldr	r3, [r3, #32]
 8004754:	4a24      	ldr	r2, [pc, #144]	@ (80047e8 <TIM_OC4_SetConfig+0xa8>)
 8004756:	401a      	ands	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	69db      	ldr	r3, [r3, #28]
 8004766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	4a20      	ldr	r2, [pc, #128]	@ (80047ec <TIM_OC4_SetConfig+0xac>)
 800476c:	4013      	ands	r3, r2
 800476e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4a1f      	ldr	r2, [pc, #124]	@ (80047f0 <TIM_OC4_SetConfig+0xb0>)
 8004774:	4013      	ands	r3, r2
 8004776:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	021b      	lsls	r3, r3, #8
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	4313      	orrs	r3, r2
 8004782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	4a1b      	ldr	r2, [pc, #108]	@ (80047f4 <TIM_OC4_SetConfig+0xb4>)
 8004788:	4013      	ands	r3, r2
 800478a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	031b      	lsls	r3, r3, #12
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	4313      	orrs	r3, r2
 8004796:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a17      	ldr	r2, [pc, #92]	@ (80047f8 <TIM_OC4_SetConfig+0xb8>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d007      	beq.n	80047b0 <TIM_OC4_SetConfig+0x70>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a16      	ldr	r2, [pc, #88]	@ (80047fc <TIM_OC4_SetConfig+0xbc>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d003      	beq.n	80047b0 <TIM_OC4_SetConfig+0x70>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a15      	ldr	r2, [pc, #84]	@ (8004800 <TIM_OC4_SetConfig+0xc0>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d109      	bne.n	80047c4 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	4a14      	ldr	r2, [pc, #80]	@ (8004804 <TIM_OC4_SetConfig+0xc4>)
 80047b4:	4013      	ands	r3, r2
 80047b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	019b      	lsls	r3, r3, #6
 80047be:	697a      	ldr	r2, [r7, #20]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685a      	ldr	r2, [r3, #4]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	693a      	ldr	r2, [r7, #16]
 80047dc:	621a      	str	r2, [r3, #32]
}
 80047de:	46c0      	nop			@ (mov r8, r8)
 80047e0:	46bd      	mov	sp, r7
 80047e2:	b006      	add	sp, #24
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	46c0      	nop			@ (mov r8, r8)
 80047e8:	ffffefff 	.word	0xffffefff
 80047ec:	feff8fff 	.word	0xfeff8fff
 80047f0:	fffffcff 	.word	0xfffffcff
 80047f4:	ffffdfff 	.word	0xffffdfff
 80047f8:	40012c00 	.word	0x40012c00
 80047fc:	40014400 	.word	0x40014400
 8004800:	40014800 	.word	0x40014800
 8004804:	ffffbfff 	.word	0xffffbfff

08004808 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b086      	sub	sp, #24
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a1b      	ldr	r3, [r3, #32]
 800481c:	4a21      	ldr	r2, [pc, #132]	@ (80048a4 <TIM_OC5_SetConfig+0x9c>)
 800481e:	401a      	ands	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800482e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	4a1d      	ldr	r2, [pc, #116]	@ (80048a8 <TIM_OC5_SetConfig+0xa0>)
 8004834:	4013      	ands	r3, r2
 8004836:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	4313      	orrs	r3, r2
 8004840:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	4a19      	ldr	r2, [pc, #100]	@ (80048ac <TIM_OC5_SetConfig+0xa4>)
 8004846:	4013      	ands	r3, r2
 8004848:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	041b      	lsls	r3, r3, #16
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	4313      	orrs	r3, r2
 8004854:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a15      	ldr	r2, [pc, #84]	@ (80048b0 <TIM_OC5_SetConfig+0xa8>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d007      	beq.n	800486e <TIM_OC5_SetConfig+0x66>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a14      	ldr	r2, [pc, #80]	@ (80048b4 <TIM_OC5_SetConfig+0xac>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d003      	beq.n	800486e <TIM_OC5_SetConfig+0x66>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a13      	ldr	r2, [pc, #76]	@ (80048b8 <TIM_OC5_SetConfig+0xb0>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d109      	bne.n	8004882 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	4a0c      	ldr	r2, [pc, #48]	@ (80048a4 <TIM_OC5_SetConfig+0x9c>)
 8004872:	4013      	ands	r3, r2
 8004874:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	021b      	lsls	r3, r3, #8
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	4313      	orrs	r3, r2
 8004880:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	697a      	ldr	r2, [r7, #20]
 8004886:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	685a      	ldr	r2, [r3, #4]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	621a      	str	r2, [r3, #32]
}
 800489c:	46c0      	nop			@ (mov r8, r8)
 800489e:	46bd      	mov	sp, r7
 80048a0:	b006      	add	sp, #24
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	fffeffff 	.word	0xfffeffff
 80048a8:	fffeff8f 	.word	0xfffeff8f
 80048ac:	fffdffff 	.word	0xfffdffff
 80048b0:	40012c00 	.word	0x40012c00
 80048b4:	40014400 	.word	0x40014400
 80048b8:	40014800 	.word	0x40014800

080048bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b086      	sub	sp, #24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a1b      	ldr	r3, [r3, #32]
 80048ca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a1b      	ldr	r3, [r3, #32]
 80048d0:	4a22      	ldr	r2, [pc, #136]	@ (800495c <TIM_OC6_SetConfig+0xa0>)
 80048d2:	401a      	ands	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	4a1e      	ldr	r2, [pc, #120]	@ (8004960 <TIM_OC6_SetConfig+0xa4>)
 80048e8:	4013      	ands	r3, r2
 80048ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	021b      	lsls	r3, r3, #8
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	4a1a      	ldr	r2, [pc, #104]	@ (8004964 <TIM_OC6_SetConfig+0xa8>)
 80048fc:	4013      	ands	r3, r2
 80048fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	051b      	lsls	r3, r3, #20
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	4313      	orrs	r3, r2
 800490a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a16      	ldr	r2, [pc, #88]	@ (8004968 <TIM_OC6_SetConfig+0xac>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d007      	beq.n	8004924 <TIM_OC6_SetConfig+0x68>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a15      	ldr	r2, [pc, #84]	@ (800496c <TIM_OC6_SetConfig+0xb0>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d003      	beq.n	8004924 <TIM_OC6_SetConfig+0x68>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a14      	ldr	r2, [pc, #80]	@ (8004970 <TIM_OC6_SetConfig+0xb4>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d109      	bne.n	8004938 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	4a13      	ldr	r2, [pc, #76]	@ (8004974 <TIM_OC6_SetConfig+0xb8>)
 8004928:	4013      	ands	r3, r2
 800492a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	695b      	ldr	r3, [r3, #20]
 8004930:	029b      	lsls	r3, r3, #10
 8004932:	697a      	ldr	r2, [r7, #20]
 8004934:	4313      	orrs	r3, r2
 8004936:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	685a      	ldr	r2, [r3, #4]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	621a      	str	r2, [r3, #32]
}
 8004952:	46c0      	nop			@ (mov r8, r8)
 8004954:	46bd      	mov	sp, r7
 8004956:	b006      	add	sp, #24
 8004958:	bd80      	pop	{r7, pc}
 800495a:	46c0      	nop			@ (mov r8, r8)
 800495c:	ffefffff 	.word	0xffefffff
 8004960:	feff8fff 	.word	0xfeff8fff
 8004964:	ffdfffff 	.word	0xffdfffff
 8004968:	40012c00 	.word	0x40012c00
 800496c:	40014400 	.word	0x40014400
 8004970:	40014800 	.word	0x40014800
 8004974:	fffbffff 	.word	0xfffbffff

08004978 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
 8004984:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6a1b      	ldr	r3, [r3, #32]
 800498a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6a1b      	ldr	r3, [r3, #32]
 8004990:	2201      	movs	r2, #1
 8004992:	4393      	bics	r3, r2
 8004994:	001a      	movs	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	4a1c      	ldr	r2, [pc, #112]	@ (8004a14 <TIM_TI1_SetConfig+0x9c>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d003      	beq.n	80049b0 <TIM_TI1_SetConfig+0x38>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	4a1b      	ldr	r2, [pc, #108]	@ (8004a18 <TIM_TI1_SetConfig+0xa0>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d101      	bne.n	80049b4 <TIM_TI1_SetConfig+0x3c>
 80049b0:	2301      	movs	r3, #1
 80049b2:	e000      	b.n	80049b6 <TIM_TI1_SetConfig+0x3e>
 80049b4:	2300      	movs	r3, #0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d008      	beq.n	80049cc <TIM_TI1_SetConfig+0x54>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	2203      	movs	r2, #3
 80049be:	4393      	bics	r3, r2
 80049c0:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	617b      	str	r3, [r7, #20]
 80049ca:	e003      	b.n	80049d4 <TIM_TI1_SetConfig+0x5c>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	2201      	movs	r2, #1
 80049d0:	4313      	orrs	r3, r2
 80049d2:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	22f0      	movs	r2, #240	@ 0xf0
 80049d8:	4393      	bics	r3, r2
 80049da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	011b      	lsls	r3, r3, #4
 80049e0:	22ff      	movs	r2, #255	@ 0xff
 80049e2:	4013      	ands	r3, r2
 80049e4:	697a      	ldr	r2, [r7, #20]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	220a      	movs	r2, #10
 80049ee:	4393      	bics	r3, r2
 80049f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	220a      	movs	r2, #10
 80049f6:	4013      	ands	r3, r2
 80049f8:	693a      	ldr	r2, [r7, #16]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	697a      	ldr	r2, [r7, #20]
 8004a02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	621a      	str	r2, [r3, #32]
}
 8004a0a:	46c0      	nop			@ (mov r8, r8)
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	b006      	add	sp, #24
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	46c0      	nop			@ (mov r8, r8)
 8004a14:	40012c00 	.word	0x40012c00
 8004a18:	40000400 	.word	0x40000400

08004a1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b086      	sub	sp, #24
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6a1b      	ldr	r3, [r3, #32]
 8004a2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	2201      	movs	r2, #1
 8004a34:	4393      	bics	r3, r2
 8004a36:	001a      	movs	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	699b      	ldr	r3, [r3, #24]
 8004a40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	22f0      	movs	r2, #240	@ 0xf0
 8004a46:	4393      	bics	r3, r2
 8004a48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	011b      	lsls	r3, r3, #4
 8004a4e:	693a      	ldr	r2, [r7, #16]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	220a      	movs	r2, #10
 8004a58:	4393      	bics	r3, r2
 8004a5a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	697a      	ldr	r2, [r7, #20]
 8004a6e:	621a      	str	r2, [r3, #32]
}
 8004a70:	46c0      	nop			@ (mov r8, r8)
 8004a72:	46bd      	mov	sp, r7
 8004a74:	b006      	add	sp, #24
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b086      	sub	sp, #24
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]
 8004a84:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6a1b      	ldr	r3, [r3, #32]
 8004a90:	2210      	movs	r2, #16
 8004a92:	4393      	bics	r3, r2
 8004a94:	001a      	movs	r2, r3
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	699b      	ldr	r3, [r3, #24]
 8004a9e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	4a14      	ldr	r2, [pc, #80]	@ (8004af4 <TIM_TI2_SetConfig+0x7c>)
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	021b      	lsls	r3, r3, #8
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	4a10      	ldr	r2, [pc, #64]	@ (8004af8 <TIM_TI2_SetConfig+0x80>)
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	031b      	lsls	r3, r3, #12
 8004abe:	041b      	lsls	r3, r3, #16
 8004ac0:	0c1b      	lsrs	r3, r3, #16
 8004ac2:	693a      	ldr	r2, [r7, #16]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	22a0      	movs	r2, #160	@ 0xa0
 8004acc:	4393      	bics	r3, r2
 8004ace:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	011b      	lsls	r3, r3, #4
 8004ad4:	22a0      	movs	r2, #160	@ 0xa0
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	697a      	ldr	r2, [r7, #20]
 8004ae8:	621a      	str	r2, [r3, #32]
}
 8004aea:	46c0      	nop			@ (mov r8, r8)
 8004aec:	46bd      	mov	sp, r7
 8004aee:	b006      	add	sp, #24
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	46c0      	nop			@ (mov r8, r8)
 8004af4:	fffffcff 	.word	0xfffffcff
 8004af8:	ffff0fff 	.word	0xffff0fff

08004afc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b086      	sub	sp, #24
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6a1b      	ldr	r3, [r3, #32]
 8004b0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	2210      	movs	r2, #16
 8004b14:	4393      	bics	r3, r2
 8004b16:	001a      	movs	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	4a0d      	ldr	r2, [pc, #52]	@ (8004b5c <TIM_TI2_ConfigInputStage+0x60>)
 8004b26:	4013      	ands	r3, r2
 8004b28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	031b      	lsls	r3, r3, #12
 8004b2e:	693a      	ldr	r2, [r7, #16]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	22a0      	movs	r2, #160	@ 0xa0
 8004b38:	4393      	bics	r3, r2
 8004b3a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	011b      	lsls	r3, r3, #4
 8004b40:	697a      	ldr	r2, [r7, #20]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	697a      	ldr	r2, [r7, #20]
 8004b50:	621a      	str	r2, [r3, #32]
}
 8004b52:	46c0      	nop			@ (mov r8, r8)
 8004b54:	46bd      	mov	sp, r7
 8004b56:	b006      	add	sp, #24
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	46c0      	nop			@ (mov r8, r8)
 8004b5c:	ffff0fff 	.word	0xffff0fff

08004b60 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
 8004b6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6a1b      	ldr	r3, [r3, #32]
 8004b78:	4a17      	ldr	r2, [pc, #92]	@ (8004bd8 <TIM_TI3_SetConfig+0x78>)
 8004b7a:	401a      	ands	r2, r3
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	69db      	ldr	r3, [r3, #28]
 8004b84:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	2203      	movs	r2, #3
 8004b8a:	4393      	bics	r3, r2
 8004b8c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	22f0      	movs	r2, #240	@ 0xf0
 8004b9a:	4393      	bics	r3, r2
 8004b9c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	011b      	lsls	r3, r3, #4
 8004ba2:	22ff      	movs	r2, #255	@ 0xff
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	693a      	ldr	r2, [r7, #16]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	4a0b      	ldr	r2, [pc, #44]	@ (8004bdc <TIM_TI3_SetConfig+0x7c>)
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	021a      	lsls	r2, r3, #8
 8004bb8:	23a0      	movs	r3, #160	@ 0xa0
 8004bba:	011b      	lsls	r3, r3, #4
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	697a      	ldr	r2, [r7, #20]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	697a      	ldr	r2, [r7, #20]
 8004bce:	621a      	str	r2, [r3, #32]
}
 8004bd0:	46c0      	nop			@ (mov r8, r8)
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	b006      	add	sp, #24
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	fffffeff 	.word	0xfffffeff
 8004bdc:	fffff5ff 	.word	0xfffff5ff

08004be0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b086      	sub	sp, #24
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	607a      	str	r2, [r7, #4]
 8004bec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6a1b      	ldr	r3, [r3, #32]
 8004bf2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6a1b      	ldr	r3, [r3, #32]
 8004bf8:	4a18      	ldr	r2, [pc, #96]	@ (8004c5c <TIM_TI4_SetConfig+0x7c>)
 8004bfa:	401a      	ands	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	69db      	ldr	r3, [r3, #28]
 8004c04:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	4a15      	ldr	r2, [pc, #84]	@ (8004c60 <TIM_TI4_SetConfig+0x80>)
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	021b      	lsls	r3, r3, #8
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	4a12      	ldr	r2, [pc, #72]	@ (8004c64 <TIM_TI4_SetConfig+0x84>)
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	031b      	lsls	r3, r3, #12
 8004c24:	041b      	lsls	r3, r3, #16
 8004c26:	0c1b      	lsrs	r3, r3, #16
 8004c28:	693a      	ldr	r2, [r7, #16]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	4a0d      	ldr	r2, [pc, #52]	@ (8004c68 <TIM_TI4_SetConfig+0x88>)
 8004c32:	4013      	ands	r3, r2
 8004c34:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	031a      	lsls	r2, r3, #12
 8004c3a:	23a0      	movs	r3, #160	@ 0xa0
 8004c3c:	021b      	lsls	r3, r3, #8
 8004c3e:	4013      	ands	r3, r2
 8004c40:	697a      	ldr	r2, [r7, #20]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	693a      	ldr	r2, [r7, #16]
 8004c4a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	621a      	str	r2, [r3, #32]
}
 8004c52:	46c0      	nop			@ (mov r8, r8)
 8004c54:	46bd      	mov	sp, r7
 8004c56:	b006      	add	sp, #24
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	46c0      	nop			@ (mov r8, r8)
 8004c5c:	ffffefff 	.word	0xffffefff
 8004c60:	fffffcff 	.word	0xfffffcff
 8004c64:	ffff0fff 	.word	0xffff0fff
 8004c68:	ffff5fff 	.word	0xffff5fff

08004c6c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	4a08      	ldr	r2, [pc, #32]	@ (8004ca0 <TIM_ITRx_SetConfig+0x34>)
 8004c80:	4013      	ands	r3, r2
 8004c82:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c84:	683a      	ldr	r2, [r7, #0]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	2207      	movs	r2, #7
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	609a      	str	r2, [r3, #8]
}
 8004c96:	46c0      	nop			@ (mov r8, r8)
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	b004      	add	sp, #16
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	46c0      	nop			@ (mov r8, r8)
 8004ca0:	ffcfff8f 	.word	0xffcfff8f

08004ca4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	607a      	str	r2, [r7, #4]
 8004cb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	4a09      	ldr	r2, [pc, #36]	@ (8004ce0 <TIM_ETR_SetConfig+0x3c>)
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	021a      	lsls	r2, r3, #8
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	431a      	orrs	r2, r3
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	697a      	ldr	r2, [r7, #20]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	609a      	str	r2, [r3, #8]
}
 8004cd8:	46c0      	nop			@ (mov r8, r8)
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	b006      	add	sp, #24
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	ffff00ff 	.word	0xffff00ff

08004ce4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b086      	sub	sp, #24
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	221f      	movs	r2, #31
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	409a      	lsls	r2, r3
 8004cfa:	0013      	movs	r3, r2
 8004cfc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	697a      	ldr	r2, [r7, #20]
 8004d04:	43d2      	mvns	r2, r2
 8004d06:	401a      	ands	r2, r3
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6a1a      	ldr	r2, [r3, #32]
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	211f      	movs	r1, #31
 8004d14:	400b      	ands	r3, r1
 8004d16:	6879      	ldr	r1, [r7, #4]
 8004d18:	4099      	lsls	r1, r3
 8004d1a:	000b      	movs	r3, r1
 8004d1c:	431a      	orrs	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	621a      	str	r2, [r3, #32]
}
 8004d22:	46c0      	nop			@ (mov r8, r8)
 8004d24:	46bd      	mov	sp, r7
 8004d26:	b006      	add	sp, #24
 8004d28:	bd80      	pop	{r7, pc}
	...

08004d2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	223c      	movs	r2, #60	@ 0x3c
 8004d3a:	5c9b      	ldrb	r3, [r3, r2]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d101      	bne.n	8004d44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d40:	2302      	movs	r3, #2
 8004d42:	e04a      	b.n	8004dda <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	223c      	movs	r2, #60	@ 0x3c
 8004d48:	2101      	movs	r1, #1
 8004d4a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	223d      	movs	r2, #61	@ 0x3d
 8004d50:	2102      	movs	r1, #2
 8004d52:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a1e      	ldr	r2, [pc, #120]	@ (8004de4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d108      	bne.n	8004d80 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	4a1d      	ldr	r2, [pc, #116]	@ (8004de8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004d72:	4013      	ands	r3, r2
 8004d74:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2270      	movs	r2, #112	@ 0x70
 8004d84:	4393      	bics	r3, r2
 8004d86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a11      	ldr	r2, [pc, #68]	@ (8004de4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d004      	beq.n	8004dae <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a10      	ldr	r2, [pc, #64]	@ (8004dec <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d10c      	bne.n	8004dc8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	2280      	movs	r2, #128	@ 0x80
 8004db2:	4393      	bics	r3, r2
 8004db4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	68ba      	ldr	r2, [r7, #8]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	223d      	movs	r2, #61	@ 0x3d
 8004dcc:	2101      	movs	r1, #1
 8004dce:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	223c      	movs	r2, #60	@ 0x3c
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	0018      	movs	r0, r3
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	b004      	add	sp, #16
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	46c0      	nop			@ (mov r8, r8)
 8004de4:	40012c00 	.word	0x40012c00
 8004de8:	ff0fffff 	.word	0xff0fffff
 8004dec:	40000400 	.word	0x40000400

08004df0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004df8:	46c0      	nop			@ (mov r8, r8)
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	b002      	add	sp, #8
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e08:	46c0      	nop			@ (mov r8, r8)
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	b002      	add	sp, #8
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004e18:	46c0      	nop			@ (mov r8, r8)
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	b002      	add	sp, #8
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e046      	b.n	8004ec0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2288      	movs	r2, #136	@ 0x88
 8004e36:	589b      	ldr	r3, [r3, r2]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d107      	bne.n	8004e4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2284      	movs	r2, #132	@ 0x84
 8004e40:	2100      	movs	r1, #0
 8004e42:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	0018      	movs	r0, r3
 8004e48:	f7fd f9a4 	bl	8002194 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2288      	movs	r2, #136	@ 0x88
 8004e50:	2124      	movs	r1, #36	@ 0x24
 8004e52:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2101      	movs	r1, #1
 8004e60:	438a      	bics	r2, r1
 8004e62:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d003      	beq.n	8004e74 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	0018      	movs	r0, r3
 8004e70:	f000 fdfc 	bl	8005a6c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	0018      	movs	r0, r3
 8004e78:	f000 fc7a 	bl	8005770 <UART_SetConfig>
 8004e7c:	0003      	movs	r3, r0
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d101      	bne.n	8004e86 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e01c      	b.n	8004ec0 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	490d      	ldr	r1, [pc, #52]	@ (8004ec8 <HAL_UART_Init+0xa8>)
 8004e92:	400a      	ands	r2, r1
 8004e94:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	689a      	ldr	r2, [r3, #8]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	212a      	movs	r1, #42	@ 0x2a
 8004ea2:	438a      	bics	r2, r1
 8004ea4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2101      	movs	r1, #1
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	0018      	movs	r0, r3
 8004eba:	f000 fe8b 	bl	8005bd4 <UART_CheckIdleState>
 8004ebe:	0003      	movs	r3, r0
}
 8004ec0:	0018      	movs	r0, r3
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	b002      	add	sp, #8
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	ffffb7ff 	.word	0xffffb7ff

08004ecc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b08c      	sub	sp, #48	@ 0x30
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	1dbb      	adds	r3, r7, #6
 8004ed8:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2288      	movs	r2, #136	@ 0x88
 8004ede:	589b      	ldr	r3, [r3, r2]
 8004ee0:	2b20      	cmp	r3, #32
 8004ee2:	d000      	beq.n	8004ee6 <HAL_UART_Transmit_IT+0x1a>
 8004ee4:	e08d      	b.n	8005002 <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d003      	beq.n	8004ef4 <HAL_UART_Transmit_IT+0x28>
 8004eec:	1dbb      	adds	r3, r7, #6
 8004eee:	881b      	ldrh	r3, [r3, #0]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d101      	bne.n	8004ef8 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e085      	b.n	8005004 <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	689a      	ldr	r2, [r3, #8]
 8004efc:	2380      	movs	r3, #128	@ 0x80
 8004efe:	015b      	lsls	r3, r3, #5
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d109      	bne.n	8004f18 <HAL_UART_Transmit_IT+0x4c>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d105      	bne.n	8004f18 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	4013      	ands	r3, r2
 8004f12:	d001      	beq.n	8004f18 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e075      	b.n	8005004 <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	68ba      	ldr	r2, [r7, #8]
 8004f1c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	1dba      	adds	r2, r7, #6
 8004f22:	2154      	movs	r1, #84	@ 0x54
 8004f24:	8812      	ldrh	r2, [r2, #0]
 8004f26:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	1dba      	adds	r2, r7, #6
 8004f2c:	2156      	movs	r1, #86	@ 0x56
 8004f2e:	8812      	ldrh	r2, [r2, #0]
 8004f30:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2290      	movs	r2, #144	@ 0x90
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2288      	movs	r2, #136	@ 0x88
 8004f44:	2121      	movs	r1, #33	@ 0x21
 8004f46:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004f4c:	2380      	movs	r3, #128	@ 0x80
 8004f4e:	059b      	lsls	r3, r3, #22
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d12a      	bne.n	8004faa <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	689a      	ldr	r2, [r3, #8]
 8004f58:	2380      	movs	r3, #128	@ 0x80
 8004f5a:	015b      	lsls	r3, r3, #5
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d107      	bne.n	8004f70 <HAL_UART_Transmit_IT+0xa4>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d103      	bne.n	8004f70 <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	4a28      	ldr	r2, [pc, #160]	@ (800500c <HAL_UART_Transmit_IT+0x140>)
 8004f6c:	679a      	str	r2, [r3, #120]	@ 0x78
 8004f6e:	e002      	b.n	8004f76 <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	4a27      	ldr	r2, [pc, #156]	@ (8005010 <HAL_UART_Transmit_IT+0x144>)
 8004f74:	679a      	str	r2, [r3, #120]	@ 0x78
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004f76:	f3ef 8310 	mrs	r3, PRIMASK
 8004f7a:	61fb      	str	r3, [r7, #28]
  return(result);
 8004f7c:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004f7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f80:	2301      	movs	r3, #1
 8004f82:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f84:	6a3b      	ldr	r3, [r7, #32]
 8004f86:	f383 8810 	msr	PRIMASK, r3
}
 8004f8a:	46c0      	nop			@ (mov r8, r8)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	689a      	ldr	r2, [r3, #8]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2180      	movs	r1, #128	@ 0x80
 8004f98:	0409      	lsls	r1, r1, #16
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	609a      	str	r2, [r3, #8]
 8004f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fa0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa4:	f383 8810 	msr	PRIMASK, r3
}
 8004fa8:	e029      	b.n	8004ffe <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	689a      	ldr	r2, [r3, #8]
 8004fae:	2380      	movs	r3, #128	@ 0x80
 8004fb0:	015b      	lsls	r3, r3, #5
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d107      	bne.n	8004fc6 <HAL_UART_Transmit_IT+0xfa>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d103      	bne.n	8004fc6 <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	4a14      	ldr	r2, [pc, #80]	@ (8005014 <HAL_UART_Transmit_IT+0x148>)
 8004fc2:	679a      	str	r2, [r3, #120]	@ 0x78
 8004fc4:	e002      	b.n	8004fcc <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	4a13      	ldr	r2, [pc, #76]	@ (8005018 <HAL_UART_Transmit_IT+0x14c>)
 8004fca:	679a      	str	r2, [r3, #120]	@ 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004fcc:	f3ef 8310 	mrs	r3, PRIMASK
 8004fd0:	613b      	str	r3, [r7, #16]
  return(result);
 8004fd2:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	f383 8810 	msr	PRIMASK, r3
}
 8004fe0:	46c0      	nop			@ (mov r8, r8)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2180      	movs	r1, #128	@ 0x80
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	601a      	str	r2, [r3, #0]
 8004ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ff4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	f383 8810 	msr	PRIMASK, r3
}
 8004ffc:	46c0      	nop			@ (mov r8, r8)
    }

    return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
 8005000:	e000      	b.n	8005004 <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 8005002:	2302      	movs	r3, #2
  }
}
 8005004:	0018      	movs	r0, r3
 8005006:	46bd      	mov	sp, r7
 8005008:	b00c      	add	sp, #48	@ 0x30
 800500a:	bd80      	pop	{r7, pc}
 800500c:	080063a1 	.word	0x080063a1
 8005010:	080062b5 	.word	0x080062b5
 8005014:	080061f7 	.word	0x080061f7
 8005018:	08006143 	.word	0x08006143

0800501c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b088      	sub	sp, #32
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	1dbb      	adds	r3, r7, #6
 8005028:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	228c      	movs	r2, #140	@ 0x8c
 800502e:	589b      	ldr	r3, [r3, r2]
 8005030:	2b20      	cmp	r3, #32
 8005032:	d145      	bne.n	80050c0 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d003      	beq.n	8005042 <HAL_UART_Receive_IT+0x26>
 800503a:	1dbb      	adds	r3, r7, #6
 800503c:	881b      	ldrh	r3, [r3, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e03d      	b.n	80050c2 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	689a      	ldr	r2, [r3, #8]
 800504a:	2380      	movs	r3, #128	@ 0x80
 800504c:	015b      	lsls	r3, r3, #5
 800504e:	429a      	cmp	r2, r3
 8005050:	d109      	bne.n	8005066 <HAL_UART_Receive_IT+0x4a>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d105      	bne.n	8005066 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	2201      	movs	r2, #1
 800505e:	4013      	ands	r3, r2
 8005060:	d001      	beq.n	8005066 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e02d      	b.n	80050c2 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2200      	movs	r2, #0
 800506a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	685a      	ldr	r2, [r3, #4]
 8005072:	2380      	movs	r3, #128	@ 0x80
 8005074:	041b      	lsls	r3, r3, #16
 8005076:	4013      	ands	r3, r2
 8005078:	d019      	beq.n	80050ae <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800507a:	f3ef 8310 	mrs	r3, PRIMASK
 800507e:	613b      	str	r3, [r7, #16]
  return(result);
 8005080:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005082:	61fb      	str	r3, [r7, #28]
 8005084:	2301      	movs	r3, #1
 8005086:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	f383 8810 	msr	PRIMASK, r3
}
 800508e:	46c0      	nop			@ (mov r8, r8)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2180      	movs	r1, #128	@ 0x80
 800509c:	04c9      	lsls	r1, r1, #19
 800509e:	430a      	orrs	r2, r1
 80050a0:	601a      	str	r2, [r3, #0]
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	f383 8810 	msr	PRIMASK, r3
}
 80050ac:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80050ae:	1dbb      	adds	r3, r7, #6
 80050b0:	881a      	ldrh	r2, [r3, #0]
 80050b2:	68b9      	ldr	r1, [r7, #8]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	0018      	movs	r0, r3
 80050b8:	f000 fea6 	bl	8005e08 <UART_Start_Receive_IT>
 80050bc:	0003      	movs	r3, r0
 80050be:	e000      	b.n	80050c2 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80050c0:	2302      	movs	r3, #2
  }
}
 80050c2:	0018      	movs	r0, r3
 80050c4:	46bd      	mov	sp, r7
 80050c6:	b008      	add	sp, #32
 80050c8:	bd80      	pop	{r7, pc}
	...

080050cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80050cc:	b5b0      	push	{r4, r5, r7, lr}
 80050ce:	b0aa      	sub	sp, #168	@ 0xa8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	22a4      	movs	r2, #164	@ 0xa4
 80050dc:	18b9      	adds	r1, r7, r2
 80050de:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	20a0      	movs	r0, #160	@ 0xa0
 80050e8:	1839      	adds	r1, r7, r0
 80050ea:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	249c      	movs	r4, #156	@ 0x9c
 80050f4:	1939      	adds	r1, r7, r4
 80050f6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80050f8:	0011      	movs	r1, r2
 80050fa:	18bb      	adds	r3, r7, r2
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4aa2      	ldr	r2, [pc, #648]	@ (8005388 <HAL_UART_IRQHandler+0x2bc>)
 8005100:	4013      	ands	r3, r2
 8005102:	2298      	movs	r2, #152	@ 0x98
 8005104:	18bd      	adds	r5, r7, r2
 8005106:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8005108:	18bb      	adds	r3, r7, r2
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d11a      	bne.n	8005146 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005110:	187b      	adds	r3, r7, r1
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2220      	movs	r2, #32
 8005116:	4013      	ands	r3, r2
 8005118:	d015      	beq.n	8005146 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800511a:	183b      	adds	r3, r7, r0
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2220      	movs	r2, #32
 8005120:	4013      	ands	r3, r2
 8005122:	d105      	bne.n	8005130 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005124:	193b      	adds	r3, r7, r4
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	2380      	movs	r3, #128	@ 0x80
 800512a:	055b      	lsls	r3, r3, #21
 800512c:	4013      	ands	r3, r2
 800512e:	d00a      	beq.n	8005146 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005134:	2b00      	cmp	r3, #0
 8005136:	d100      	bne.n	800513a <HAL_UART_IRQHandler+0x6e>
 8005138:	e2fb      	b.n	8005732 <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	0010      	movs	r0, r2
 8005142:	4798      	blx	r3
      }
      return;
 8005144:	e2f5      	b.n	8005732 <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005146:	2398      	movs	r3, #152	@ 0x98
 8005148:	18fb      	adds	r3, r7, r3
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d100      	bne.n	8005152 <HAL_UART_IRQHandler+0x86>
 8005150:	e122      	b.n	8005398 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005152:	239c      	movs	r3, #156	@ 0x9c
 8005154:	18fb      	adds	r3, r7, r3
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a8c      	ldr	r2, [pc, #560]	@ (800538c <HAL_UART_IRQHandler+0x2c0>)
 800515a:	4013      	ands	r3, r2
 800515c:	d106      	bne.n	800516c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800515e:	23a0      	movs	r3, #160	@ 0xa0
 8005160:	18fb      	adds	r3, r7, r3
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a8a      	ldr	r2, [pc, #552]	@ (8005390 <HAL_UART_IRQHandler+0x2c4>)
 8005166:	4013      	ands	r3, r2
 8005168:	d100      	bne.n	800516c <HAL_UART_IRQHandler+0xa0>
 800516a:	e115      	b.n	8005398 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800516c:	23a4      	movs	r3, #164	@ 0xa4
 800516e:	18fb      	adds	r3, r7, r3
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2201      	movs	r2, #1
 8005174:	4013      	ands	r3, r2
 8005176:	d012      	beq.n	800519e <HAL_UART_IRQHandler+0xd2>
 8005178:	23a0      	movs	r3, #160	@ 0xa0
 800517a:	18fb      	adds	r3, r7, r3
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	2380      	movs	r3, #128	@ 0x80
 8005180:	005b      	lsls	r3, r3, #1
 8005182:	4013      	ands	r3, r2
 8005184:	d00b      	beq.n	800519e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2201      	movs	r2, #1
 800518c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2290      	movs	r2, #144	@ 0x90
 8005192:	589b      	ldr	r3, [r3, r2]
 8005194:	2201      	movs	r2, #1
 8005196:	431a      	orrs	r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2190      	movs	r1, #144	@ 0x90
 800519c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800519e:	23a4      	movs	r3, #164	@ 0xa4
 80051a0:	18fb      	adds	r3, r7, r3
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2202      	movs	r2, #2
 80051a6:	4013      	ands	r3, r2
 80051a8:	d011      	beq.n	80051ce <HAL_UART_IRQHandler+0x102>
 80051aa:	239c      	movs	r3, #156	@ 0x9c
 80051ac:	18fb      	adds	r3, r7, r3
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2201      	movs	r2, #1
 80051b2:	4013      	ands	r3, r2
 80051b4:	d00b      	beq.n	80051ce <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2202      	movs	r2, #2
 80051bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2290      	movs	r2, #144	@ 0x90
 80051c2:	589b      	ldr	r3, [r3, r2]
 80051c4:	2204      	movs	r2, #4
 80051c6:	431a      	orrs	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2190      	movs	r1, #144	@ 0x90
 80051cc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80051ce:	23a4      	movs	r3, #164	@ 0xa4
 80051d0:	18fb      	adds	r3, r7, r3
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2204      	movs	r2, #4
 80051d6:	4013      	ands	r3, r2
 80051d8:	d011      	beq.n	80051fe <HAL_UART_IRQHandler+0x132>
 80051da:	239c      	movs	r3, #156	@ 0x9c
 80051dc:	18fb      	adds	r3, r7, r3
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2201      	movs	r2, #1
 80051e2:	4013      	ands	r3, r2
 80051e4:	d00b      	beq.n	80051fe <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2204      	movs	r2, #4
 80051ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2290      	movs	r2, #144	@ 0x90
 80051f2:	589b      	ldr	r3, [r3, r2]
 80051f4:	2202      	movs	r2, #2
 80051f6:	431a      	orrs	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2190      	movs	r1, #144	@ 0x90
 80051fc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80051fe:	23a4      	movs	r3, #164	@ 0xa4
 8005200:	18fb      	adds	r3, r7, r3
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2208      	movs	r2, #8
 8005206:	4013      	ands	r3, r2
 8005208:	d017      	beq.n	800523a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800520a:	23a0      	movs	r3, #160	@ 0xa0
 800520c:	18fb      	adds	r3, r7, r3
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2220      	movs	r2, #32
 8005212:	4013      	ands	r3, r2
 8005214:	d105      	bne.n	8005222 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005216:	239c      	movs	r3, #156	@ 0x9c
 8005218:	18fb      	adds	r3, r7, r3
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a5b      	ldr	r2, [pc, #364]	@ (800538c <HAL_UART_IRQHandler+0x2c0>)
 800521e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005220:	d00b      	beq.n	800523a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2208      	movs	r2, #8
 8005228:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2290      	movs	r2, #144	@ 0x90
 800522e:	589b      	ldr	r3, [r3, r2]
 8005230:	2208      	movs	r2, #8
 8005232:	431a      	orrs	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2190      	movs	r1, #144	@ 0x90
 8005238:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800523a:	23a4      	movs	r3, #164	@ 0xa4
 800523c:	18fb      	adds	r3, r7, r3
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	2380      	movs	r3, #128	@ 0x80
 8005242:	011b      	lsls	r3, r3, #4
 8005244:	4013      	ands	r3, r2
 8005246:	d013      	beq.n	8005270 <HAL_UART_IRQHandler+0x1a4>
 8005248:	23a0      	movs	r3, #160	@ 0xa0
 800524a:	18fb      	adds	r3, r7, r3
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	2380      	movs	r3, #128	@ 0x80
 8005250:	04db      	lsls	r3, r3, #19
 8005252:	4013      	ands	r3, r2
 8005254:	d00c      	beq.n	8005270 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2280      	movs	r2, #128	@ 0x80
 800525c:	0112      	lsls	r2, r2, #4
 800525e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2290      	movs	r2, #144	@ 0x90
 8005264:	589b      	ldr	r3, [r3, r2]
 8005266:	2220      	movs	r2, #32
 8005268:	431a      	orrs	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2190      	movs	r1, #144	@ 0x90
 800526e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2290      	movs	r2, #144	@ 0x90
 8005274:	589b      	ldr	r3, [r3, r2]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d100      	bne.n	800527c <HAL_UART_IRQHandler+0x1b0>
 800527a:	e25c      	b.n	8005736 <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800527c:	23a4      	movs	r3, #164	@ 0xa4
 800527e:	18fb      	adds	r3, r7, r3
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2220      	movs	r2, #32
 8005284:	4013      	ands	r3, r2
 8005286:	d015      	beq.n	80052b4 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005288:	23a0      	movs	r3, #160	@ 0xa0
 800528a:	18fb      	adds	r3, r7, r3
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2220      	movs	r2, #32
 8005290:	4013      	ands	r3, r2
 8005292:	d106      	bne.n	80052a2 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005294:	239c      	movs	r3, #156	@ 0x9c
 8005296:	18fb      	adds	r3, r7, r3
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	2380      	movs	r3, #128	@ 0x80
 800529c:	055b      	lsls	r3, r3, #21
 800529e:	4013      	ands	r3, r2
 80052a0:	d008      	beq.n	80052b4 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d004      	beq.n	80052b4 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	0010      	movs	r0, r2
 80052b2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2290      	movs	r2, #144	@ 0x90
 80052b8:	589b      	ldr	r3, [r3, r2]
 80052ba:	2194      	movs	r1, #148	@ 0x94
 80052bc:	187a      	adds	r2, r7, r1
 80052be:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	2240      	movs	r2, #64	@ 0x40
 80052c8:	4013      	ands	r3, r2
 80052ca:	2b40      	cmp	r3, #64	@ 0x40
 80052cc:	d004      	beq.n	80052d8 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80052ce:	187b      	adds	r3, r7, r1
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2228      	movs	r2, #40	@ 0x28
 80052d4:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80052d6:	d04c      	beq.n	8005372 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	0018      	movs	r0, r3
 80052dc:	f000 feb8 	bl	8006050 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	2240      	movs	r2, #64	@ 0x40
 80052e8:	4013      	ands	r3, r2
 80052ea:	2b40      	cmp	r3, #64	@ 0x40
 80052ec:	d13c      	bne.n	8005368 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80052ee:	f3ef 8310 	mrs	r3, PRIMASK
 80052f2:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80052f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052f6:	2090      	movs	r0, #144	@ 0x90
 80052f8:	183a      	adds	r2, r7, r0
 80052fa:	6013      	str	r3, [r2, #0]
 80052fc:	2301      	movs	r3, #1
 80052fe:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005300:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005302:	f383 8810 	msr	PRIMASK, r3
}
 8005306:	46c0      	nop			@ (mov r8, r8)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	689a      	ldr	r2, [r3, #8]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2140      	movs	r1, #64	@ 0x40
 8005314:	438a      	bics	r2, r1
 8005316:	609a      	str	r2, [r3, #8]
 8005318:	183b      	adds	r3, r7, r0
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800531e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005320:	f383 8810 	msr	PRIMASK, r3
}
 8005324:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2280      	movs	r2, #128	@ 0x80
 800532a:	589b      	ldr	r3, [r3, r2]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d016      	beq.n	800535e <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2280      	movs	r2, #128	@ 0x80
 8005334:	589b      	ldr	r3, [r3, r2]
 8005336:	4a17      	ldr	r2, [pc, #92]	@ (8005394 <HAL_UART_IRQHandler+0x2c8>)
 8005338:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2280      	movs	r2, #128	@ 0x80
 800533e:	589b      	ldr	r3, [r3, r2]
 8005340:	0018      	movs	r0, r3
 8005342:	f7fd fa45 	bl	80027d0 <HAL_DMA_Abort_IT>
 8005346:	1e03      	subs	r3, r0, #0
 8005348:	d01c      	beq.n	8005384 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2280      	movs	r2, #128	@ 0x80
 800534e:	589b      	ldr	r3, [r3, r2]
 8005350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	2180      	movs	r1, #128	@ 0x80
 8005356:	5852      	ldr	r2, [r2, r1]
 8005358:	0010      	movs	r0, r2
 800535a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800535c:	e012      	b.n	8005384 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	0018      	movs	r0, r3
 8005362:	f7fc fb67 	bl	8001a34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005366:	e00d      	b.n	8005384 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	0018      	movs	r0, r3
 800536c:	f7fc fb62 	bl	8001a34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005370:	e008      	b.n	8005384 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	0018      	movs	r0, r3
 8005376:	f7fc fb5d 	bl	8001a34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2290      	movs	r2, #144	@ 0x90
 800537e:	2100      	movs	r1, #0
 8005380:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005382:	e1d8      	b.n	8005736 <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005384:	46c0      	nop			@ (mov r8, r8)
    return;
 8005386:	e1d6      	b.n	8005736 <HAL_UART_IRQHandler+0x66a>
 8005388:	0000080f 	.word	0x0000080f
 800538c:	10000001 	.word	0x10000001
 8005390:	04000120 	.word	0x04000120
 8005394:	0800611d 	.word	0x0800611d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800539c:	2b01      	cmp	r3, #1
 800539e:	d000      	beq.n	80053a2 <HAL_UART_IRQHandler+0x2d6>
 80053a0:	e15d      	b.n	800565e <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80053a2:	23a4      	movs	r3, #164	@ 0xa4
 80053a4:	18fb      	adds	r3, r7, r3
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2210      	movs	r2, #16
 80053aa:	4013      	ands	r3, r2
 80053ac:	d100      	bne.n	80053b0 <HAL_UART_IRQHandler+0x2e4>
 80053ae:	e156      	b.n	800565e <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80053b0:	23a0      	movs	r3, #160	@ 0xa0
 80053b2:	18fb      	adds	r3, r7, r3
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2210      	movs	r2, #16
 80053b8:	4013      	ands	r3, r2
 80053ba:	d100      	bne.n	80053be <HAL_UART_IRQHandler+0x2f2>
 80053bc:	e14f      	b.n	800565e <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2210      	movs	r2, #16
 80053c4:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	2240      	movs	r2, #64	@ 0x40
 80053ce:	4013      	ands	r3, r2
 80053d0:	2b40      	cmp	r3, #64	@ 0x40
 80053d2:	d000      	beq.n	80053d6 <HAL_UART_IRQHandler+0x30a>
 80053d4:	e0c3      	b.n	800555e <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2280      	movs	r2, #128	@ 0x80
 80053da:	589b      	ldr	r3, [r3, r2]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	685a      	ldr	r2, [r3, #4]
 80053e0:	217e      	movs	r1, #126	@ 0x7e
 80053e2:	187b      	adds	r3, r7, r1
 80053e4:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80053e6:	187b      	adds	r3, r7, r1
 80053e8:	881b      	ldrh	r3, [r3, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d100      	bne.n	80053f0 <HAL_UART_IRQHandler+0x324>
 80053ee:	e097      	b.n	8005520 <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	225c      	movs	r2, #92	@ 0x5c
 80053f4:	5a9b      	ldrh	r3, [r3, r2]
 80053f6:	187a      	adds	r2, r7, r1
 80053f8:	8812      	ldrh	r2, [r2, #0]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d300      	bcc.n	8005400 <HAL_UART_IRQHandler+0x334>
 80053fe:	e08f      	b.n	8005520 <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	187a      	adds	r2, r7, r1
 8005404:	215e      	movs	r1, #94	@ 0x5e
 8005406:	8812      	ldrh	r2, [r2, #0]
 8005408:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2280      	movs	r2, #128	@ 0x80
 800540e:	589b      	ldr	r3, [r3, r2]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2220      	movs	r2, #32
 8005416:	4013      	ands	r3, r2
 8005418:	d170      	bne.n	80054fc <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800541a:	f3ef 8310 	mrs	r3, PRIMASK
 800541e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005422:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005424:	2301      	movs	r3, #1
 8005426:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005428:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800542a:	f383 8810 	msr	PRIMASK, r3
}
 800542e:	46c0      	nop			@ (mov r8, r8)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	49c4      	ldr	r1, [pc, #784]	@ (800574c <HAL_UART_IRQHandler+0x680>)
 800543c:	400a      	ands	r2, r1
 800543e:	601a      	str	r2, [r3, #0]
 8005440:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005442:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005446:	f383 8810 	msr	PRIMASK, r3
}
 800544a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800544c:	f3ef 8310 	mrs	r3, PRIMASK
 8005450:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8005452:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005454:	677b      	str	r3, [r7, #116]	@ 0x74
 8005456:	2301      	movs	r3, #1
 8005458:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800545a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800545c:	f383 8810 	msr	PRIMASK, r3
}
 8005460:	46c0      	nop			@ (mov r8, r8)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	689a      	ldr	r2, [r3, #8]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2101      	movs	r1, #1
 800546e:	438a      	bics	r2, r1
 8005470:	609a      	str	r2, [r3, #8]
 8005472:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005474:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005476:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005478:	f383 8810 	msr	PRIMASK, r3
}
 800547c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800547e:	f3ef 8310 	mrs	r3, PRIMASK
 8005482:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8005484:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005486:	673b      	str	r3, [r7, #112]	@ 0x70
 8005488:	2301      	movs	r3, #1
 800548a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800548c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800548e:	f383 8810 	msr	PRIMASK, r3
}
 8005492:	46c0      	nop			@ (mov r8, r8)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	689a      	ldr	r2, [r3, #8]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2140      	movs	r1, #64	@ 0x40
 80054a0:	438a      	bics	r2, r1
 80054a2:	609a      	str	r2, [r3, #8]
 80054a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80054a6:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054aa:	f383 8810 	msr	PRIMASK, r3
}
 80054ae:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	228c      	movs	r2, #140	@ 0x8c
 80054b4:	2120      	movs	r1, #32
 80054b6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80054be:	f3ef 8310 	mrs	r3, PRIMASK
 80054c2:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80054c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80054c8:	2301      	movs	r3, #1
 80054ca:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80054ce:	f383 8810 	msr	PRIMASK, r3
}
 80054d2:	46c0      	nop			@ (mov r8, r8)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2110      	movs	r1, #16
 80054e0:	438a      	bics	r2, r1
 80054e2:	601a      	str	r2, [r3, #0]
 80054e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80054ea:	f383 8810 	msr	PRIMASK, r3
}
 80054ee:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2280      	movs	r2, #128	@ 0x80
 80054f4:	589b      	ldr	r3, [r3, r2]
 80054f6:	0018      	movs	r0, r3
 80054f8:	f7fd f908 	bl	800270c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2202      	movs	r2, #2
 8005500:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	225c      	movs	r2, #92	@ 0x5c
 8005506:	5a9a      	ldrh	r2, [r3, r2]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	215e      	movs	r1, #94	@ 0x5e
 800550c:	5a5b      	ldrh	r3, [r3, r1]
 800550e:	b29b      	uxth	r3, r3
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	b29a      	uxth	r2, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	0011      	movs	r1, r2
 8005518:	0018      	movs	r0, r3
 800551a:	f000 f91d 	bl	8005758 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800551e:	e10c      	b.n	800573a <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	225c      	movs	r2, #92	@ 0x5c
 8005524:	5a9b      	ldrh	r3, [r3, r2]
 8005526:	227e      	movs	r2, #126	@ 0x7e
 8005528:	18ba      	adds	r2, r7, r2
 800552a:	8812      	ldrh	r2, [r2, #0]
 800552c:	429a      	cmp	r2, r3
 800552e:	d000      	beq.n	8005532 <HAL_UART_IRQHandler+0x466>
 8005530:	e103      	b.n	800573a <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2280      	movs	r2, #128	@ 0x80
 8005536:	589b      	ldr	r3, [r3, r2]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2220      	movs	r2, #32
 800553e:	4013      	ands	r3, r2
 8005540:	2b20      	cmp	r3, #32
 8005542:	d000      	beq.n	8005546 <HAL_UART_IRQHandler+0x47a>
 8005544:	e0f9      	b.n	800573a <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2202      	movs	r2, #2
 800554a:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	225c      	movs	r2, #92	@ 0x5c
 8005550:	5a9a      	ldrh	r2, [r3, r2]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	0011      	movs	r1, r2
 8005556:	0018      	movs	r0, r3
 8005558:	f000 f8fe 	bl	8005758 <HAL_UARTEx_RxEventCallback>
      return;
 800555c:	e0ed      	b.n	800573a <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	225c      	movs	r2, #92	@ 0x5c
 8005562:	5a99      	ldrh	r1, [r3, r2]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	225e      	movs	r2, #94	@ 0x5e
 8005568:	5a9b      	ldrh	r3, [r3, r2]
 800556a:	b29a      	uxth	r2, r3
 800556c:	208e      	movs	r0, #142	@ 0x8e
 800556e:	183b      	adds	r3, r7, r0
 8005570:	1a8a      	subs	r2, r1, r2
 8005572:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	225e      	movs	r2, #94	@ 0x5e
 8005578:	5a9b      	ldrh	r3, [r3, r2]
 800557a:	b29b      	uxth	r3, r3
 800557c:	2b00      	cmp	r3, #0
 800557e:	d100      	bne.n	8005582 <HAL_UART_IRQHandler+0x4b6>
 8005580:	e0dd      	b.n	800573e <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 8005582:	183b      	adds	r3, r7, r0
 8005584:	881b      	ldrh	r3, [r3, #0]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d100      	bne.n	800558c <HAL_UART_IRQHandler+0x4c0>
 800558a:	e0d8      	b.n	800573e <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800558c:	f3ef 8310 	mrs	r3, PRIMASK
 8005590:	60fb      	str	r3, [r7, #12]
  return(result);
 8005592:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005594:	2488      	movs	r4, #136	@ 0x88
 8005596:	193a      	adds	r2, r7, r4
 8005598:	6013      	str	r3, [r2, #0]
 800559a:	2301      	movs	r3, #1
 800559c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	f383 8810 	msr	PRIMASK, r3
}
 80055a4:	46c0      	nop			@ (mov r8, r8)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4967      	ldr	r1, [pc, #412]	@ (8005750 <HAL_UART_IRQHandler+0x684>)
 80055b2:	400a      	ands	r2, r1
 80055b4:	601a      	str	r2, [r3, #0]
 80055b6:	193b      	adds	r3, r7, r4
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	f383 8810 	msr	PRIMASK, r3
}
 80055c2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80055c4:	f3ef 8310 	mrs	r3, PRIMASK
 80055c8:	61bb      	str	r3, [r7, #24]
  return(result);
 80055ca:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80055cc:	2484      	movs	r4, #132	@ 0x84
 80055ce:	193a      	adds	r2, r7, r4
 80055d0:	6013      	str	r3, [r2, #0]
 80055d2:	2301      	movs	r3, #1
 80055d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	f383 8810 	msr	PRIMASK, r3
}
 80055dc:	46c0      	nop			@ (mov r8, r8)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	689a      	ldr	r2, [r3, #8]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	495a      	ldr	r1, [pc, #360]	@ (8005754 <HAL_UART_IRQHandler+0x688>)
 80055ea:	400a      	ands	r2, r1
 80055ec:	609a      	str	r2, [r3, #8]
 80055ee:	193b      	adds	r3, r7, r4
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055f4:	6a3b      	ldr	r3, [r7, #32]
 80055f6:	f383 8810 	msr	PRIMASK, r3
}
 80055fa:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	228c      	movs	r2, #140	@ 0x8c
 8005600:	2120      	movs	r1, #32
 8005602:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005610:	f3ef 8310 	mrs	r3, PRIMASK
 8005614:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005618:	2480      	movs	r4, #128	@ 0x80
 800561a:	193a      	adds	r2, r7, r4
 800561c:	6013      	str	r3, [r2, #0]
 800561e:	2301      	movs	r3, #1
 8005620:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005624:	f383 8810 	msr	PRIMASK, r3
}
 8005628:	46c0      	nop			@ (mov r8, r8)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2110      	movs	r1, #16
 8005636:	438a      	bics	r2, r1
 8005638:	601a      	str	r2, [r3, #0]
 800563a:	193b      	adds	r3, r7, r4
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005642:	f383 8810 	msr	PRIMASK, r3
}
 8005646:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2202      	movs	r2, #2
 800564c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800564e:	183b      	adds	r3, r7, r0
 8005650:	881a      	ldrh	r2, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	0011      	movs	r1, r2
 8005656:	0018      	movs	r0, r3
 8005658:	f000 f87e 	bl	8005758 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800565c:	e06f      	b.n	800573e <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800565e:	23a4      	movs	r3, #164	@ 0xa4
 8005660:	18fb      	adds	r3, r7, r3
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	2380      	movs	r3, #128	@ 0x80
 8005666:	035b      	lsls	r3, r3, #13
 8005668:	4013      	ands	r3, r2
 800566a:	d010      	beq.n	800568e <HAL_UART_IRQHandler+0x5c2>
 800566c:	239c      	movs	r3, #156	@ 0x9c
 800566e:	18fb      	adds	r3, r7, r3
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	2380      	movs	r3, #128	@ 0x80
 8005674:	03db      	lsls	r3, r3, #15
 8005676:	4013      	ands	r3, r2
 8005678:	d009      	beq.n	800568e <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2280      	movs	r2, #128	@ 0x80
 8005680:	0352      	lsls	r2, r2, #13
 8005682:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	0018      	movs	r0, r3
 8005688:	f001 fc28 	bl	8006edc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800568c:	e05a      	b.n	8005744 <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800568e:	23a4      	movs	r3, #164	@ 0xa4
 8005690:	18fb      	adds	r3, r7, r3
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2280      	movs	r2, #128	@ 0x80
 8005696:	4013      	ands	r3, r2
 8005698:	d016      	beq.n	80056c8 <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800569a:	23a0      	movs	r3, #160	@ 0xa0
 800569c:	18fb      	adds	r3, r7, r3
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2280      	movs	r2, #128	@ 0x80
 80056a2:	4013      	ands	r3, r2
 80056a4:	d106      	bne.n	80056b4 <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80056a6:	239c      	movs	r3, #156	@ 0x9c
 80056a8:	18fb      	adds	r3, r7, r3
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	2380      	movs	r3, #128	@ 0x80
 80056ae:	041b      	lsls	r3, r3, #16
 80056b0:	4013      	ands	r3, r2
 80056b2:	d009      	beq.n	80056c8 <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d042      	beq.n	8005742 <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	0010      	movs	r0, r2
 80056c4:	4798      	blx	r3
    }
    return;
 80056c6:	e03c      	b.n	8005742 <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80056c8:	23a4      	movs	r3, #164	@ 0xa4
 80056ca:	18fb      	adds	r3, r7, r3
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2240      	movs	r2, #64	@ 0x40
 80056d0:	4013      	ands	r3, r2
 80056d2:	d00a      	beq.n	80056ea <HAL_UART_IRQHandler+0x61e>
 80056d4:	23a0      	movs	r3, #160	@ 0xa0
 80056d6:	18fb      	adds	r3, r7, r3
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2240      	movs	r2, #64	@ 0x40
 80056dc:	4013      	ands	r3, r2
 80056de:	d004      	beq.n	80056ea <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	0018      	movs	r0, r3
 80056e4:	f000 fed6 	bl	8006494 <UART_EndTransmit_IT>
    return;
 80056e8:	e02c      	b.n	8005744 <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80056ea:	23a4      	movs	r3, #164	@ 0xa4
 80056ec:	18fb      	adds	r3, r7, r3
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	2380      	movs	r3, #128	@ 0x80
 80056f2:	041b      	lsls	r3, r3, #16
 80056f4:	4013      	ands	r3, r2
 80056f6:	d00b      	beq.n	8005710 <HAL_UART_IRQHandler+0x644>
 80056f8:	23a0      	movs	r3, #160	@ 0xa0
 80056fa:	18fb      	adds	r3, r7, r3
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	2380      	movs	r3, #128	@ 0x80
 8005700:	05db      	lsls	r3, r3, #23
 8005702:	4013      	ands	r3, r2
 8005704:	d004      	beq.n	8005710 <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	0018      	movs	r0, r3
 800570a:	f001 fbf7 	bl	8006efc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800570e:	e019      	b.n	8005744 <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005710:	23a4      	movs	r3, #164	@ 0xa4
 8005712:	18fb      	adds	r3, r7, r3
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	2380      	movs	r3, #128	@ 0x80
 8005718:	045b      	lsls	r3, r3, #17
 800571a:	4013      	ands	r3, r2
 800571c:	d012      	beq.n	8005744 <HAL_UART_IRQHandler+0x678>
 800571e:	23a0      	movs	r3, #160	@ 0xa0
 8005720:	18fb      	adds	r3, r7, r3
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2b00      	cmp	r3, #0
 8005726:	da0d      	bge.n	8005744 <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	0018      	movs	r0, r3
 800572c:	f001 fbde 	bl	8006eec <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005730:	e008      	b.n	8005744 <HAL_UART_IRQHandler+0x678>
      return;
 8005732:	46c0      	nop			@ (mov r8, r8)
 8005734:	e006      	b.n	8005744 <HAL_UART_IRQHandler+0x678>
    return;
 8005736:	46c0      	nop			@ (mov r8, r8)
 8005738:	e004      	b.n	8005744 <HAL_UART_IRQHandler+0x678>
      return;
 800573a:	46c0      	nop			@ (mov r8, r8)
 800573c:	e002      	b.n	8005744 <HAL_UART_IRQHandler+0x678>
      return;
 800573e:	46c0      	nop			@ (mov r8, r8)
 8005740:	e000      	b.n	8005744 <HAL_UART_IRQHandler+0x678>
    return;
 8005742:	46c0      	nop			@ (mov r8, r8)
  }
}
 8005744:	46bd      	mov	sp, r7
 8005746:	b02a      	add	sp, #168	@ 0xa8
 8005748:	bdb0      	pop	{r4, r5, r7, pc}
 800574a:	46c0      	nop			@ (mov r8, r8)
 800574c:	fffffeff 	.word	0xfffffeff
 8005750:	fffffedf 	.word	0xfffffedf
 8005754:	effffffe 	.word	0xeffffffe

08005758 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	000a      	movs	r2, r1
 8005762:	1cbb      	adds	r3, r7, #2
 8005764:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005766:	46c0      	nop			@ (mov r8, r8)
 8005768:	46bd      	mov	sp, r7
 800576a:	b002      	add	sp, #8
 800576c:	bd80      	pop	{r7, pc}
	...

08005770 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b088      	sub	sp, #32
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005778:	231e      	movs	r3, #30
 800577a:	18fb      	adds	r3, r7, r3
 800577c:	2200      	movs	r2, #0
 800577e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	689a      	ldr	r2, [r3, #8]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	431a      	orrs	r2, r3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	431a      	orrs	r2, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	69db      	ldr	r3, [r3, #28]
 8005794:	4313      	orrs	r3, r2
 8005796:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4aab      	ldr	r2, [pc, #684]	@ (8005a4c <UART_SetConfig+0x2dc>)
 80057a0:	4013      	ands	r3, r2
 80057a2:	0019      	movs	r1, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	430a      	orrs	r2, r1
 80057ac:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	4aa6      	ldr	r2, [pc, #664]	@ (8005a50 <UART_SetConfig+0x2e0>)
 80057b6:	4013      	ands	r3, r2
 80057b8:	0019      	movs	r1, r3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	68da      	ldr	r2, [r3, #12]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	430a      	orrs	r2, r1
 80057c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a1b      	ldr	r3, [r3, #32]
 80057d0:	697a      	ldr	r2, [r7, #20]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	4a9d      	ldr	r2, [pc, #628]	@ (8005a54 <UART_SetConfig+0x2e4>)
 80057de:	4013      	ands	r3, r2
 80057e0:	0019      	movs	r1, r3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	430a      	orrs	r2, r1
 80057ea:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f2:	220f      	movs	r2, #15
 80057f4:	4393      	bics	r3, r2
 80057f6:	0019      	movs	r1, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	430a      	orrs	r2, r1
 8005802:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a93      	ldr	r2, [pc, #588]	@ (8005a58 <UART_SetConfig+0x2e8>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d127      	bne.n	800585e <UART_SetConfig+0xee>
 800580e:	4b93      	ldr	r3, [pc, #588]	@ (8005a5c <UART_SetConfig+0x2ec>)
 8005810:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005812:	2203      	movs	r2, #3
 8005814:	4013      	ands	r3, r2
 8005816:	2b03      	cmp	r3, #3
 8005818:	d017      	beq.n	800584a <UART_SetConfig+0xda>
 800581a:	d81b      	bhi.n	8005854 <UART_SetConfig+0xe4>
 800581c:	2b02      	cmp	r3, #2
 800581e:	d00a      	beq.n	8005836 <UART_SetConfig+0xc6>
 8005820:	d818      	bhi.n	8005854 <UART_SetConfig+0xe4>
 8005822:	2b00      	cmp	r3, #0
 8005824:	d002      	beq.n	800582c <UART_SetConfig+0xbc>
 8005826:	2b01      	cmp	r3, #1
 8005828:	d00a      	beq.n	8005840 <UART_SetConfig+0xd0>
 800582a:	e013      	b.n	8005854 <UART_SetConfig+0xe4>
 800582c:	231f      	movs	r3, #31
 800582e:	18fb      	adds	r3, r7, r3
 8005830:	2200      	movs	r2, #0
 8005832:	701a      	strb	r2, [r3, #0]
 8005834:	e021      	b.n	800587a <UART_SetConfig+0x10a>
 8005836:	231f      	movs	r3, #31
 8005838:	18fb      	adds	r3, r7, r3
 800583a:	2202      	movs	r2, #2
 800583c:	701a      	strb	r2, [r3, #0]
 800583e:	e01c      	b.n	800587a <UART_SetConfig+0x10a>
 8005840:	231f      	movs	r3, #31
 8005842:	18fb      	adds	r3, r7, r3
 8005844:	2204      	movs	r2, #4
 8005846:	701a      	strb	r2, [r3, #0]
 8005848:	e017      	b.n	800587a <UART_SetConfig+0x10a>
 800584a:	231f      	movs	r3, #31
 800584c:	18fb      	adds	r3, r7, r3
 800584e:	2208      	movs	r2, #8
 8005850:	701a      	strb	r2, [r3, #0]
 8005852:	e012      	b.n	800587a <UART_SetConfig+0x10a>
 8005854:	231f      	movs	r3, #31
 8005856:	18fb      	adds	r3, r7, r3
 8005858:	2210      	movs	r2, #16
 800585a:	701a      	strb	r2, [r3, #0]
 800585c:	e00d      	b.n	800587a <UART_SetConfig+0x10a>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a7f      	ldr	r2, [pc, #508]	@ (8005a60 <UART_SetConfig+0x2f0>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d104      	bne.n	8005872 <UART_SetConfig+0x102>
 8005868:	231f      	movs	r3, #31
 800586a:	18fb      	adds	r3, r7, r3
 800586c:	2200      	movs	r2, #0
 800586e:	701a      	strb	r2, [r3, #0]
 8005870:	e003      	b.n	800587a <UART_SetConfig+0x10a>
 8005872:	231f      	movs	r3, #31
 8005874:	18fb      	adds	r3, r7, r3
 8005876:	2210      	movs	r2, #16
 8005878:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	69da      	ldr	r2, [r3, #28]
 800587e:	2380      	movs	r3, #128	@ 0x80
 8005880:	021b      	lsls	r3, r3, #8
 8005882:	429a      	cmp	r2, r3
 8005884:	d000      	beq.n	8005888 <UART_SetConfig+0x118>
 8005886:	e06f      	b.n	8005968 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8005888:	231f      	movs	r3, #31
 800588a:	18fb      	adds	r3, r7, r3
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	2b08      	cmp	r3, #8
 8005890:	d01f      	beq.n	80058d2 <UART_SetConfig+0x162>
 8005892:	dc22      	bgt.n	80058da <UART_SetConfig+0x16a>
 8005894:	2b04      	cmp	r3, #4
 8005896:	d017      	beq.n	80058c8 <UART_SetConfig+0x158>
 8005898:	dc1f      	bgt.n	80058da <UART_SetConfig+0x16a>
 800589a:	2b00      	cmp	r3, #0
 800589c:	d002      	beq.n	80058a4 <UART_SetConfig+0x134>
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d005      	beq.n	80058ae <UART_SetConfig+0x13e>
 80058a2:	e01a      	b.n	80058da <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058a4:	f7fd fcbc 	bl	8003220 <HAL_RCC_GetPCLK1Freq>
 80058a8:	0003      	movs	r3, r0
 80058aa:	61bb      	str	r3, [r7, #24]
        break;
 80058ac:	e01c      	b.n	80058e8 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80058ae:	4b6b      	ldr	r3, [pc, #428]	@ (8005a5c <UART_SetConfig+0x2ec>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	095b      	lsrs	r3, r3, #5
 80058b4:	2207      	movs	r2, #7
 80058b6:	4013      	ands	r3, r2
 80058b8:	3301      	adds	r3, #1
 80058ba:	0019      	movs	r1, r3
 80058bc:	4869      	ldr	r0, [pc, #420]	@ (8005a64 <UART_SetConfig+0x2f4>)
 80058be:	f7fa fc23 	bl	8000108 <__udivsi3>
 80058c2:	0003      	movs	r3, r0
 80058c4:	61bb      	str	r3, [r7, #24]
        break;
 80058c6:	e00f      	b.n	80058e8 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058c8:	f7fd fc4a 	bl	8003160 <HAL_RCC_GetSysClockFreq>
 80058cc:	0003      	movs	r3, r0
 80058ce:	61bb      	str	r3, [r7, #24]
        break;
 80058d0:	e00a      	b.n	80058e8 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058d2:	2380      	movs	r3, #128	@ 0x80
 80058d4:	021b      	lsls	r3, r3, #8
 80058d6:	61bb      	str	r3, [r7, #24]
        break;
 80058d8:	e006      	b.n	80058e8 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 80058da:	2300      	movs	r3, #0
 80058dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80058de:	231e      	movs	r3, #30
 80058e0:	18fb      	adds	r3, r7, r3
 80058e2:	2201      	movs	r2, #1
 80058e4:	701a      	strb	r2, [r3, #0]
        break;
 80058e6:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d100      	bne.n	80058f0 <UART_SetConfig+0x180>
 80058ee:	e097      	b.n	8005a20 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80058f4:	4b5c      	ldr	r3, [pc, #368]	@ (8005a68 <UART_SetConfig+0x2f8>)
 80058f6:	0052      	lsls	r2, r2, #1
 80058f8:	5ad3      	ldrh	r3, [r2, r3]
 80058fa:	0019      	movs	r1, r3
 80058fc:	69b8      	ldr	r0, [r7, #24]
 80058fe:	f7fa fc03 	bl	8000108 <__udivsi3>
 8005902:	0003      	movs	r3, r0
 8005904:	005a      	lsls	r2, r3, #1
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	085b      	lsrs	r3, r3, #1
 800590c:	18d2      	adds	r2, r2, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	0019      	movs	r1, r3
 8005914:	0010      	movs	r0, r2
 8005916:	f7fa fbf7 	bl	8000108 <__udivsi3>
 800591a:	0003      	movs	r3, r0
 800591c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	2b0f      	cmp	r3, #15
 8005922:	d91c      	bls.n	800595e <UART_SetConfig+0x1ee>
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	2380      	movs	r3, #128	@ 0x80
 8005928:	025b      	lsls	r3, r3, #9
 800592a:	429a      	cmp	r2, r3
 800592c:	d217      	bcs.n	800595e <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	b29a      	uxth	r2, r3
 8005932:	200e      	movs	r0, #14
 8005934:	183b      	adds	r3, r7, r0
 8005936:	210f      	movs	r1, #15
 8005938:	438a      	bics	r2, r1
 800593a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	085b      	lsrs	r3, r3, #1
 8005940:	b29b      	uxth	r3, r3
 8005942:	2207      	movs	r2, #7
 8005944:	4013      	ands	r3, r2
 8005946:	b299      	uxth	r1, r3
 8005948:	183b      	adds	r3, r7, r0
 800594a:	183a      	adds	r2, r7, r0
 800594c:	8812      	ldrh	r2, [r2, #0]
 800594e:	430a      	orrs	r2, r1
 8005950:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	183a      	adds	r2, r7, r0
 8005958:	8812      	ldrh	r2, [r2, #0]
 800595a:	60da      	str	r2, [r3, #12]
 800595c:	e060      	b.n	8005a20 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 800595e:	231e      	movs	r3, #30
 8005960:	18fb      	adds	r3, r7, r3
 8005962:	2201      	movs	r2, #1
 8005964:	701a      	strb	r2, [r3, #0]
 8005966:	e05b      	b.n	8005a20 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005968:	231f      	movs	r3, #31
 800596a:	18fb      	adds	r3, r7, r3
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	2b08      	cmp	r3, #8
 8005970:	d01f      	beq.n	80059b2 <UART_SetConfig+0x242>
 8005972:	dc22      	bgt.n	80059ba <UART_SetConfig+0x24a>
 8005974:	2b04      	cmp	r3, #4
 8005976:	d017      	beq.n	80059a8 <UART_SetConfig+0x238>
 8005978:	dc1f      	bgt.n	80059ba <UART_SetConfig+0x24a>
 800597a:	2b00      	cmp	r3, #0
 800597c:	d002      	beq.n	8005984 <UART_SetConfig+0x214>
 800597e:	2b02      	cmp	r3, #2
 8005980:	d005      	beq.n	800598e <UART_SetConfig+0x21e>
 8005982:	e01a      	b.n	80059ba <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005984:	f7fd fc4c 	bl	8003220 <HAL_RCC_GetPCLK1Freq>
 8005988:	0003      	movs	r3, r0
 800598a:	61bb      	str	r3, [r7, #24]
        break;
 800598c:	e01c      	b.n	80059c8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800598e:	4b33      	ldr	r3, [pc, #204]	@ (8005a5c <UART_SetConfig+0x2ec>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	095b      	lsrs	r3, r3, #5
 8005994:	2207      	movs	r2, #7
 8005996:	4013      	ands	r3, r2
 8005998:	3301      	adds	r3, #1
 800599a:	0019      	movs	r1, r3
 800599c:	4831      	ldr	r0, [pc, #196]	@ (8005a64 <UART_SetConfig+0x2f4>)
 800599e:	f7fa fbb3 	bl	8000108 <__udivsi3>
 80059a2:	0003      	movs	r3, r0
 80059a4:	61bb      	str	r3, [r7, #24]
        break;
 80059a6:	e00f      	b.n	80059c8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059a8:	f7fd fbda 	bl	8003160 <HAL_RCC_GetSysClockFreq>
 80059ac:	0003      	movs	r3, r0
 80059ae:	61bb      	str	r3, [r7, #24]
        break;
 80059b0:	e00a      	b.n	80059c8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059b2:	2380      	movs	r3, #128	@ 0x80
 80059b4:	021b      	lsls	r3, r3, #8
 80059b6:	61bb      	str	r3, [r7, #24]
        break;
 80059b8:	e006      	b.n	80059c8 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 80059ba:	2300      	movs	r3, #0
 80059bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80059be:	231e      	movs	r3, #30
 80059c0:	18fb      	adds	r3, r7, r3
 80059c2:	2201      	movs	r2, #1
 80059c4:	701a      	strb	r2, [r3, #0]
        break;
 80059c6:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d028      	beq.n	8005a20 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80059d2:	4b25      	ldr	r3, [pc, #148]	@ (8005a68 <UART_SetConfig+0x2f8>)
 80059d4:	0052      	lsls	r2, r2, #1
 80059d6:	5ad3      	ldrh	r3, [r2, r3]
 80059d8:	0019      	movs	r1, r3
 80059da:	69b8      	ldr	r0, [r7, #24]
 80059dc:	f7fa fb94 	bl	8000108 <__udivsi3>
 80059e0:	0003      	movs	r3, r0
 80059e2:	001a      	movs	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	085b      	lsrs	r3, r3, #1
 80059ea:	18d2      	adds	r2, r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	0019      	movs	r1, r3
 80059f2:	0010      	movs	r0, r2
 80059f4:	f7fa fb88 	bl	8000108 <__udivsi3>
 80059f8:	0003      	movs	r3, r0
 80059fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	2b0f      	cmp	r3, #15
 8005a00:	d90a      	bls.n	8005a18 <UART_SetConfig+0x2a8>
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	2380      	movs	r3, #128	@ 0x80
 8005a06:	025b      	lsls	r3, r3, #9
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d205      	bcs.n	8005a18 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	b29a      	uxth	r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	60da      	str	r2, [r3, #12]
 8005a16:	e003      	b.n	8005a20 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8005a18:	231e      	movs	r3, #30
 8005a1a:	18fb      	adds	r3, r7, r3
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	226a      	movs	r2, #106	@ 0x6a
 8005a24:	2101      	movs	r1, #1
 8005a26:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2268      	movs	r2, #104	@ 0x68
 8005a2c:	2101      	movs	r1, #1
 8005a2e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005a3c:	231e      	movs	r3, #30
 8005a3e:	18fb      	adds	r3, r7, r3
 8005a40:	781b      	ldrb	r3, [r3, #0]
}
 8005a42:	0018      	movs	r0, r3
 8005a44:	46bd      	mov	sp, r7
 8005a46:	b008      	add	sp, #32
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	46c0      	nop			@ (mov r8, r8)
 8005a4c:	cfff69f3 	.word	0xcfff69f3
 8005a50:	ffffcfff 	.word	0xffffcfff
 8005a54:	11fff4ff 	.word	0x11fff4ff
 8005a58:	40013800 	.word	0x40013800
 8005a5c:	40021000 	.word	0x40021000
 8005a60:	40004400 	.word	0x40004400
 8005a64:	02dc6c00 	.word	0x02dc6c00
 8005a68:	080077fc 	.word	0x080077fc

08005a6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a78:	2208      	movs	r2, #8
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	d00b      	beq.n	8005a96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	4a4a      	ldr	r2, [pc, #296]	@ (8005bb0 <UART_AdvFeatureConfig+0x144>)
 8005a86:	4013      	ands	r3, r2
 8005a88:	0019      	movs	r1, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	430a      	orrs	r2, r1
 8005a94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	d00b      	beq.n	8005ab8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	4a43      	ldr	r2, [pc, #268]	@ (8005bb4 <UART_AdvFeatureConfig+0x148>)
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	0019      	movs	r1, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	430a      	orrs	r2, r1
 8005ab6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005abc:	2202      	movs	r2, #2
 8005abe:	4013      	ands	r3, r2
 8005ac0:	d00b      	beq.n	8005ada <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	4a3b      	ldr	r2, [pc, #236]	@ (8005bb8 <UART_AdvFeatureConfig+0x14c>)
 8005aca:	4013      	ands	r3, r2
 8005acc:	0019      	movs	r1, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	430a      	orrs	r2, r1
 8005ad8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ade:	2204      	movs	r2, #4
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	d00b      	beq.n	8005afc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	4a34      	ldr	r2, [pc, #208]	@ (8005bbc <UART_AdvFeatureConfig+0x150>)
 8005aec:	4013      	ands	r3, r2
 8005aee:	0019      	movs	r1, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	430a      	orrs	r2, r1
 8005afa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b00:	2210      	movs	r2, #16
 8005b02:	4013      	ands	r3, r2
 8005b04:	d00b      	beq.n	8005b1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	4a2c      	ldr	r2, [pc, #176]	@ (8005bc0 <UART_AdvFeatureConfig+0x154>)
 8005b0e:	4013      	ands	r3, r2
 8005b10:	0019      	movs	r1, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	430a      	orrs	r2, r1
 8005b1c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b22:	2220      	movs	r2, #32
 8005b24:	4013      	ands	r3, r2
 8005b26:	d00b      	beq.n	8005b40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	4a25      	ldr	r2, [pc, #148]	@ (8005bc4 <UART_AdvFeatureConfig+0x158>)
 8005b30:	4013      	ands	r3, r2
 8005b32:	0019      	movs	r1, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	430a      	orrs	r2, r1
 8005b3e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b44:	2240      	movs	r2, #64	@ 0x40
 8005b46:	4013      	ands	r3, r2
 8005b48:	d01d      	beq.n	8005b86 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	4a1d      	ldr	r2, [pc, #116]	@ (8005bc8 <UART_AdvFeatureConfig+0x15c>)
 8005b52:	4013      	ands	r3, r2
 8005b54:	0019      	movs	r1, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	430a      	orrs	r2, r1
 8005b60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b66:	2380      	movs	r3, #128	@ 0x80
 8005b68:	035b      	lsls	r3, r3, #13
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d10b      	bne.n	8005b86 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	4a15      	ldr	r2, [pc, #84]	@ (8005bcc <UART_AdvFeatureConfig+0x160>)
 8005b76:	4013      	ands	r3, r2
 8005b78:	0019      	movs	r1, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	430a      	orrs	r2, r1
 8005b84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b8a:	2280      	movs	r2, #128	@ 0x80
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	d00b      	beq.n	8005ba8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	4a0e      	ldr	r2, [pc, #56]	@ (8005bd0 <UART_AdvFeatureConfig+0x164>)
 8005b98:	4013      	ands	r3, r2
 8005b9a:	0019      	movs	r1, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	430a      	orrs	r2, r1
 8005ba6:	605a      	str	r2, [r3, #4]
  }
}
 8005ba8:	46c0      	nop			@ (mov r8, r8)
 8005baa:	46bd      	mov	sp, r7
 8005bac:	b002      	add	sp, #8
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	ffff7fff 	.word	0xffff7fff
 8005bb4:	fffdffff 	.word	0xfffdffff
 8005bb8:	fffeffff 	.word	0xfffeffff
 8005bbc:	fffbffff 	.word	0xfffbffff
 8005bc0:	ffffefff 	.word	0xffffefff
 8005bc4:	ffffdfff 	.word	0xffffdfff
 8005bc8:	ffefffff 	.word	0xffefffff
 8005bcc:	ff9fffff 	.word	0xff9fffff
 8005bd0:	fff7ffff 	.word	0xfff7ffff

08005bd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b092      	sub	sp, #72	@ 0x48
 8005bd8:	af02      	add	r7, sp, #8
 8005bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2290      	movs	r2, #144	@ 0x90
 8005be0:	2100      	movs	r1, #0
 8005be2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005be4:	f7fc fc9e 	bl	8002524 <HAL_GetTick>
 8005be8:	0003      	movs	r3, r0
 8005bea:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2208      	movs	r2, #8
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	2b08      	cmp	r3, #8
 8005bf8:	d12d      	bne.n	8005c56 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bfc:	2280      	movs	r2, #128	@ 0x80
 8005bfe:	0391      	lsls	r1, r2, #14
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	4a47      	ldr	r2, [pc, #284]	@ (8005d20 <UART_CheckIdleState+0x14c>)
 8005c04:	9200      	str	r2, [sp, #0]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f000 f88e 	bl	8005d28 <UART_WaitOnFlagUntilTimeout>
 8005c0c:	1e03      	subs	r3, r0, #0
 8005c0e:	d022      	beq.n	8005c56 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005c10:	f3ef 8310 	mrs	r3, PRIMASK
 8005c14:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005c18:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c20:	f383 8810 	msr	PRIMASK, r3
}
 8005c24:	46c0      	nop			@ (mov r8, r8)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2180      	movs	r1, #128	@ 0x80
 8005c32:	438a      	bics	r2, r1
 8005c34:	601a      	str	r2, [r3, #0]
 8005c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c3c:	f383 8810 	msr	PRIMASK, r3
}
 8005c40:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2288      	movs	r2, #136	@ 0x88
 8005c46:	2120      	movs	r1, #32
 8005c48:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2284      	movs	r2, #132	@ 0x84
 8005c4e:	2100      	movs	r1, #0
 8005c50:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e060      	b.n	8005d18 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2204      	movs	r2, #4
 8005c5e:	4013      	ands	r3, r2
 8005c60:	2b04      	cmp	r3, #4
 8005c62:	d146      	bne.n	8005cf2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c66:	2280      	movs	r2, #128	@ 0x80
 8005c68:	03d1      	lsls	r1, r2, #15
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	4a2c      	ldr	r2, [pc, #176]	@ (8005d20 <UART_CheckIdleState+0x14c>)
 8005c6e:	9200      	str	r2, [sp, #0]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f000 f859 	bl	8005d28 <UART_WaitOnFlagUntilTimeout>
 8005c76:	1e03      	subs	r3, r0, #0
 8005c78:	d03b      	beq.n	8005cf2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005c7a:	f3ef 8310 	mrs	r3, PRIMASK
 8005c7e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c80:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c82:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c84:	2301      	movs	r3, #1
 8005c86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	f383 8810 	msr	PRIMASK, r3
}
 8005c8e:	46c0      	nop			@ (mov r8, r8)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4922      	ldr	r1, [pc, #136]	@ (8005d24 <UART_CheckIdleState+0x150>)
 8005c9c:	400a      	ands	r2, r1
 8005c9e:	601a      	str	r2, [r3, #0]
 8005ca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ca2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	f383 8810 	msr	PRIMASK, r3
}
 8005caa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005cac:	f3ef 8310 	mrs	r3, PRIMASK
 8005cb0:	61bb      	str	r3, [r7, #24]
  return(result);
 8005cb2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	f383 8810 	msr	PRIMASK, r3
}
 8005cc0:	46c0      	nop			@ (mov r8, r8)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	689a      	ldr	r2, [r3, #8]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2101      	movs	r1, #1
 8005cce:	438a      	bics	r2, r1
 8005cd0:	609a      	str	r2, [r3, #8]
 8005cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cd6:	6a3b      	ldr	r3, [r7, #32]
 8005cd8:	f383 8810 	msr	PRIMASK, r3
}
 8005cdc:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	228c      	movs	r2, #140	@ 0x8c
 8005ce2:	2120      	movs	r1, #32
 8005ce4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2284      	movs	r2, #132	@ 0x84
 8005cea:	2100      	movs	r1, #0
 8005cec:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e012      	b.n	8005d18 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2288      	movs	r2, #136	@ 0x88
 8005cf6:	2120      	movs	r1, #32
 8005cf8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	228c      	movs	r2, #140	@ 0x8c
 8005cfe:	2120      	movs	r1, #32
 8005d00:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2284      	movs	r2, #132	@ 0x84
 8005d12:	2100      	movs	r1, #0
 8005d14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	0018      	movs	r0, r3
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	b010      	add	sp, #64	@ 0x40
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	01ffffff 	.word	0x01ffffff
 8005d24:	fffffedf 	.word	0xfffffedf

08005d28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	603b      	str	r3, [r7, #0]
 8005d34:	1dfb      	adds	r3, r7, #7
 8005d36:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d38:	e051      	b.n	8005dde <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	d04e      	beq.n	8005dde <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d40:	f7fc fbf0 	bl	8002524 <HAL_GetTick>
 8005d44:	0002      	movs	r2, r0
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	69ba      	ldr	r2, [r7, #24]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d302      	bcc.n	8005d56 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d101      	bne.n	8005d5a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e051      	b.n	8005dfe <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2204      	movs	r2, #4
 8005d62:	4013      	ands	r3, r2
 8005d64:	d03b      	beq.n	8005dde <UART_WaitOnFlagUntilTimeout+0xb6>
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	2b80      	cmp	r3, #128	@ 0x80
 8005d6a:	d038      	beq.n	8005dde <UART_WaitOnFlagUntilTimeout+0xb6>
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	2b40      	cmp	r3, #64	@ 0x40
 8005d70:	d035      	beq.n	8005dde <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	69db      	ldr	r3, [r3, #28]
 8005d78:	2208      	movs	r2, #8
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	2b08      	cmp	r3, #8
 8005d7e:	d111      	bne.n	8005da4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2208      	movs	r2, #8
 8005d86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	0018      	movs	r0, r3
 8005d8c:	f000 f960 	bl	8006050 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2290      	movs	r2, #144	@ 0x90
 8005d94:	2108      	movs	r1, #8
 8005d96:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2284      	movs	r2, #132	@ 0x84
 8005d9c:	2100      	movs	r1, #0
 8005d9e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e02c      	b.n	8005dfe <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	69da      	ldr	r2, [r3, #28]
 8005daa:	2380      	movs	r3, #128	@ 0x80
 8005dac:	011b      	lsls	r3, r3, #4
 8005dae:	401a      	ands	r2, r3
 8005db0:	2380      	movs	r3, #128	@ 0x80
 8005db2:	011b      	lsls	r3, r3, #4
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d112      	bne.n	8005dde <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2280      	movs	r2, #128	@ 0x80
 8005dbe:	0112      	lsls	r2, r2, #4
 8005dc0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	0018      	movs	r0, r3
 8005dc6:	f000 f943 	bl	8006050 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2290      	movs	r2, #144	@ 0x90
 8005dce:	2120      	movs	r1, #32
 8005dd0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2284      	movs	r2, #132	@ 0x84
 8005dd6:	2100      	movs	r1, #0
 8005dd8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e00f      	b.n	8005dfe <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	69db      	ldr	r3, [r3, #28]
 8005de4:	68ba      	ldr	r2, [r7, #8]
 8005de6:	4013      	ands	r3, r2
 8005de8:	68ba      	ldr	r2, [r7, #8]
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	425a      	negs	r2, r3
 8005dee:	4153      	adcs	r3, r2
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	001a      	movs	r2, r3
 8005df4:	1dfb      	adds	r3, r7, #7
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d09e      	beq.n	8005d3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	0018      	movs	r0, r3
 8005e00:	46bd      	mov	sp, r7
 8005e02:	b004      	add	sp, #16
 8005e04:	bd80      	pop	{r7, pc}
	...

08005e08 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b098      	sub	sp, #96	@ 0x60
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	1dbb      	adds	r3, r7, #6
 8005e14:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	68ba      	ldr	r2, [r7, #8]
 8005e1a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	1dba      	adds	r2, r7, #6
 8005e20:	215c      	movs	r1, #92	@ 0x5c
 8005e22:	8812      	ldrh	r2, [r2, #0]
 8005e24:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	1dba      	adds	r2, r7, #6
 8005e2a:	215e      	movs	r1, #94	@ 0x5e
 8005e2c:	8812      	ldrh	r2, [r2, #0]
 8005e2e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2200      	movs	r2, #0
 8005e34:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	689a      	ldr	r2, [r3, #8]
 8005e3a:	2380      	movs	r3, #128	@ 0x80
 8005e3c:	015b      	lsls	r3, r3, #5
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d10d      	bne.n	8005e5e <UART_Start_Receive_IT+0x56>
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d104      	bne.n	8005e54 <UART_Start_Receive_IT+0x4c>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2260      	movs	r2, #96	@ 0x60
 8005e4e:	497b      	ldr	r1, [pc, #492]	@ (800603c <UART_Start_Receive_IT+0x234>)
 8005e50:	5299      	strh	r1, [r3, r2]
 8005e52:	e02e      	b.n	8005eb2 <UART_Start_Receive_IT+0xaa>
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2260      	movs	r2, #96	@ 0x60
 8005e58:	21ff      	movs	r1, #255	@ 0xff
 8005e5a:	5299      	strh	r1, [r3, r2]
 8005e5c:	e029      	b.n	8005eb2 <UART_Start_Receive_IT+0xaa>
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d10d      	bne.n	8005e82 <UART_Start_Receive_IT+0x7a>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d104      	bne.n	8005e78 <UART_Start_Receive_IT+0x70>
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2260      	movs	r2, #96	@ 0x60
 8005e72:	21ff      	movs	r1, #255	@ 0xff
 8005e74:	5299      	strh	r1, [r3, r2]
 8005e76:	e01c      	b.n	8005eb2 <UART_Start_Receive_IT+0xaa>
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2260      	movs	r2, #96	@ 0x60
 8005e7c:	217f      	movs	r1, #127	@ 0x7f
 8005e7e:	5299      	strh	r1, [r3, r2]
 8005e80:	e017      	b.n	8005eb2 <UART_Start_Receive_IT+0xaa>
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	689a      	ldr	r2, [r3, #8]
 8005e86:	2380      	movs	r3, #128	@ 0x80
 8005e88:	055b      	lsls	r3, r3, #21
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d10d      	bne.n	8005eaa <UART_Start_Receive_IT+0xa2>
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d104      	bne.n	8005ea0 <UART_Start_Receive_IT+0x98>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2260      	movs	r2, #96	@ 0x60
 8005e9a:	217f      	movs	r1, #127	@ 0x7f
 8005e9c:	5299      	strh	r1, [r3, r2]
 8005e9e:	e008      	b.n	8005eb2 <UART_Start_Receive_IT+0xaa>
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2260      	movs	r2, #96	@ 0x60
 8005ea4:	213f      	movs	r1, #63	@ 0x3f
 8005ea6:	5299      	strh	r1, [r3, r2]
 8005ea8:	e003      	b.n	8005eb2 <UART_Start_Receive_IT+0xaa>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2260      	movs	r2, #96	@ 0x60
 8005eae:	2100      	movs	r1, #0
 8005eb0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2290      	movs	r2, #144	@ 0x90
 8005eb6:	2100      	movs	r1, #0
 8005eb8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	228c      	movs	r2, #140	@ 0x8c
 8005ebe:	2122      	movs	r1, #34	@ 0x22
 8005ec0:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005ec2:	f3ef 8310 	mrs	r3, PRIMASK
 8005ec6:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8005ec8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ecc:	2301      	movs	r3, #1
 8005ece:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ed0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ed2:	f383 8810 	msr	PRIMASK, r3
}
 8005ed6:	46c0      	nop			@ (mov r8, r8)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	689a      	ldr	r2, [r3, #8]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2101      	movs	r1, #1
 8005ee4:	430a      	orrs	r2, r1
 8005ee6:	609a      	str	r2, [r3, #8]
 8005ee8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005eea:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005eee:	f383 8810 	msr	PRIMASK, r3
}
 8005ef2:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005ef8:	2380      	movs	r3, #128	@ 0x80
 8005efa:	059b      	lsls	r3, r3, #22
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d150      	bne.n	8005fa2 <UART_Start_Receive_IT+0x19a>
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2268      	movs	r2, #104	@ 0x68
 8005f04:	5a9b      	ldrh	r3, [r3, r2]
 8005f06:	1dba      	adds	r2, r7, #6
 8005f08:	8812      	ldrh	r2, [r2, #0]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d349      	bcc.n	8005fa2 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	689a      	ldr	r2, [r3, #8]
 8005f12:	2380      	movs	r3, #128	@ 0x80
 8005f14:	015b      	lsls	r3, r3, #5
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d107      	bne.n	8005f2a <UART_Start_Receive_IT+0x122>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d103      	bne.n	8005f2a <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	4a46      	ldr	r2, [pc, #280]	@ (8006040 <UART_Start_Receive_IT+0x238>)
 8005f26:	675a      	str	r2, [r3, #116]	@ 0x74
 8005f28:	e002      	b.n	8005f30 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	4a45      	ldr	r2, [pc, #276]	@ (8006044 <UART_Start_Receive_IT+0x23c>)
 8005f2e:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	691b      	ldr	r3, [r3, #16]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d019      	beq.n	8005f6c <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005f38:	f3ef 8310 	mrs	r3, PRIMASK
 8005f3c:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 8005f3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f40:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005f42:	2301      	movs	r3, #1
 8005f44:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f48:	f383 8810 	msr	PRIMASK, r3
}
 8005f4c:	46c0      	nop			@ (mov r8, r8)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2180      	movs	r1, #128	@ 0x80
 8005f5a:	0049      	lsls	r1, r1, #1
 8005f5c:	430a      	orrs	r2, r1
 8005f5e:	601a      	str	r2, [r3, #0]
 8005f60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f66:	f383 8810 	msr	PRIMASK, r3
}
 8005f6a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005f6c:	f3ef 8310 	mrs	r3, PRIMASK
 8005f70:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8005f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005f74:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f76:	2301      	movs	r3, #1
 8005f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f7c:	f383 8810 	msr	PRIMASK, r3
}
 8005f80:	46c0      	nop			@ (mov r8, r8)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	689a      	ldr	r2, [r3, #8]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2180      	movs	r1, #128	@ 0x80
 8005f8e:	0549      	lsls	r1, r1, #21
 8005f90:	430a      	orrs	r2, r1
 8005f92:	609a      	str	r2, [r3, #8]
 8005f94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f96:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f9a:	f383 8810 	msr	PRIMASK, r3
}
 8005f9e:	46c0      	nop			@ (mov r8, r8)
 8005fa0:	e047      	b.n	8006032 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	689a      	ldr	r2, [r3, #8]
 8005fa6:	2380      	movs	r3, #128	@ 0x80
 8005fa8:	015b      	lsls	r3, r3, #5
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d107      	bne.n	8005fbe <UART_Start_Receive_IT+0x1b6>
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d103      	bne.n	8005fbe <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	4a23      	ldr	r2, [pc, #140]	@ (8006048 <UART_Start_Receive_IT+0x240>)
 8005fba:	675a      	str	r2, [r3, #116]	@ 0x74
 8005fbc:	e002      	b.n	8005fc4 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	4a22      	ldr	r2, [pc, #136]	@ (800604c <UART_Start_Receive_IT+0x244>)
 8005fc2:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d019      	beq.n	8006000 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005fcc:	f3ef 8310 	mrs	r3, PRIMASK
 8005fd0:	61fb      	str	r3, [r7, #28]
  return(result);
 8005fd2:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005fd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fda:	6a3b      	ldr	r3, [r7, #32]
 8005fdc:	f383 8810 	msr	PRIMASK, r3
}
 8005fe0:	46c0      	nop			@ (mov r8, r8)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2190      	movs	r1, #144	@ 0x90
 8005fee:	0049      	lsls	r1, r1, #1
 8005ff0:	430a      	orrs	r2, r1
 8005ff2:	601a      	str	r2, [r3, #0]
 8005ff4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ff6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ffa:	f383 8810 	msr	PRIMASK, r3
}
 8005ffe:	e018      	b.n	8006032 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006000:	f3ef 8310 	mrs	r3, PRIMASK
 8006004:	613b      	str	r3, [r7, #16]
  return(result);
 8006006:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006008:	653b      	str	r3, [r7, #80]	@ 0x50
 800600a:	2301      	movs	r3, #1
 800600c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	f383 8810 	msr	PRIMASK, r3
}
 8006014:	46c0      	nop			@ (mov r8, r8)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2120      	movs	r1, #32
 8006022:	430a      	orrs	r2, r1
 8006024:	601a      	str	r2, [r3, #0]
 8006026:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006028:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	f383 8810 	msr	PRIMASK, r3
}
 8006030:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	0018      	movs	r0, r3
 8006036:	46bd      	mov	sp, r7
 8006038:	b018      	add	sp, #96	@ 0x60
 800603a:	bd80      	pop	{r7, pc}
 800603c:	000001ff 	.word	0x000001ff
 8006040:	08006b91 	.word	0x08006b91
 8006044:	0800685d 	.word	0x0800685d
 8006048:	080066a5 	.word	0x080066a5
 800604c:	080064ed 	.word	0x080064ed

08006050 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b08e      	sub	sp, #56	@ 0x38
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006058:	f3ef 8310 	mrs	r3, PRIMASK
 800605c:	617b      	str	r3, [r7, #20]
  return(result);
 800605e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006060:	637b      	str	r3, [r7, #52]	@ 0x34
 8006062:	2301      	movs	r3, #1
 8006064:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	f383 8810 	msr	PRIMASK, r3
}
 800606c:	46c0      	nop			@ (mov r8, r8)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4926      	ldr	r1, [pc, #152]	@ (8006114 <UART_EndRxTransfer+0xc4>)
 800607a:	400a      	ands	r2, r1
 800607c:	601a      	str	r2, [r3, #0]
 800607e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006080:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	f383 8810 	msr	PRIMASK, r3
}
 8006088:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800608a:	f3ef 8310 	mrs	r3, PRIMASK
 800608e:	623b      	str	r3, [r7, #32]
  return(result);
 8006090:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006092:	633b      	str	r3, [r7, #48]	@ 0x30
 8006094:	2301      	movs	r3, #1
 8006096:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800609a:	f383 8810 	msr	PRIMASK, r3
}
 800609e:	46c0      	nop			@ (mov r8, r8)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	689a      	ldr	r2, [r3, #8]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	491b      	ldr	r1, [pc, #108]	@ (8006118 <UART_EndRxTransfer+0xc8>)
 80060ac:	400a      	ands	r2, r1
 80060ae:	609a      	str	r2, [r3, #8]
 80060b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060b6:	f383 8810 	msr	PRIMASK, r3
}
 80060ba:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d118      	bne.n	80060f6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80060c4:	f3ef 8310 	mrs	r3, PRIMASK
 80060c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80060ca:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060ce:	2301      	movs	r3, #1
 80060d0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f383 8810 	msr	PRIMASK, r3
}
 80060d8:	46c0      	nop			@ (mov r8, r8)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2110      	movs	r1, #16
 80060e6:	438a      	bics	r2, r1
 80060e8:	601a      	str	r2, [r3, #0]
 80060ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	f383 8810 	msr	PRIMASK, r3
}
 80060f4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	228c      	movs	r2, #140	@ 0x8c
 80060fa:	2120      	movs	r1, #32
 80060fc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800610a:	46c0      	nop			@ (mov r8, r8)
 800610c:	46bd      	mov	sp, r7
 800610e:	b00e      	add	sp, #56	@ 0x38
 8006110:	bd80      	pop	{r7, pc}
 8006112:	46c0      	nop			@ (mov r8, r8)
 8006114:	fffffedf 	.word	0xfffffedf
 8006118:	effffffe 	.word	0xeffffffe

0800611c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006128:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	225e      	movs	r2, #94	@ 0x5e
 800612e:	2100      	movs	r1, #0
 8006130:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	0018      	movs	r0, r3
 8006136:	f7fb fc7d 	bl	8001a34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800613a:	46c0      	nop			@ (mov r8, r8)
 800613c:	46bd      	mov	sp, r7
 800613e:	b004      	add	sp, #16
 8006140:	bd80      	pop	{r7, pc}

08006142 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006142:	b580      	push	{r7, lr}
 8006144:	b08a      	sub	sp, #40	@ 0x28
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2288      	movs	r2, #136	@ 0x88
 800614e:	589b      	ldr	r3, [r3, r2]
 8006150:	2b21      	cmp	r3, #33	@ 0x21
 8006152:	d14c      	bne.n	80061ee <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2256      	movs	r2, #86	@ 0x56
 8006158:	5a9b      	ldrh	r3, [r3, r2]
 800615a:	b29b      	uxth	r3, r3
 800615c:	2b00      	cmp	r3, #0
 800615e:	d132      	bne.n	80061c6 <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006160:	f3ef 8310 	mrs	r3, PRIMASK
 8006164:	60bb      	str	r3, [r7, #8]
  return(result);
 8006166:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006168:	627b      	str	r3, [r7, #36]	@ 0x24
 800616a:	2301      	movs	r3, #1
 800616c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f383 8810 	msr	PRIMASK, r3
}
 8006174:	46c0      	nop			@ (mov r8, r8)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2180      	movs	r1, #128	@ 0x80
 8006182:	438a      	bics	r2, r1
 8006184:	601a      	str	r2, [r3, #0]
 8006186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006188:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	f383 8810 	msr	PRIMASK, r3
}
 8006190:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006192:	f3ef 8310 	mrs	r3, PRIMASK
 8006196:	617b      	str	r3, [r7, #20]
  return(result);
 8006198:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800619a:	623b      	str	r3, [r7, #32]
 800619c:	2301      	movs	r3, #1
 800619e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	f383 8810 	msr	PRIMASK, r3
}
 80061a6:	46c0      	nop			@ (mov r8, r8)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2140      	movs	r1, #64	@ 0x40
 80061b4:	430a      	orrs	r2, r1
 80061b6:	601a      	str	r2, [r3, #0]
 80061b8:	6a3b      	ldr	r3, [r7, #32]
 80061ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	f383 8810 	msr	PRIMASK, r3
}
 80061c2:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80061c4:	e013      	b.n	80061ee <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061ca:	781a      	ldrb	r2, [r3, #0]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061d6:	1c5a      	adds	r2, r3, #1
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2256      	movs	r2, #86	@ 0x56
 80061e0:	5a9b      	ldrh	r3, [r3, r2]
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	3b01      	subs	r3, #1
 80061e6:	b299      	uxth	r1, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2256      	movs	r2, #86	@ 0x56
 80061ec:	5299      	strh	r1, [r3, r2]
}
 80061ee:	46c0      	nop			@ (mov r8, r8)
 80061f0:	46bd      	mov	sp, r7
 80061f2:	b00a      	add	sp, #40	@ 0x28
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b08c      	sub	sp, #48	@ 0x30
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2288      	movs	r2, #136	@ 0x88
 8006202:	589b      	ldr	r3, [r3, r2]
 8006204:	2b21      	cmp	r3, #33	@ 0x21
 8006206:	d151      	bne.n	80062ac <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2256      	movs	r2, #86	@ 0x56
 800620c:	5a9b      	ldrh	r3, [r3, r2]
 800620e:	b29b      	uxth	r3, r3
 8006210:	2b00      	cmp	r3, #0
 8006212:	d132      	bne.n	800627a <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006214:	f3ef 8310 	mrs	r3, PRIMASK
 8006218:	60fb      	str	r3, [r7, #12]
  return(result);
 800621a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800621c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800621e:	2301      	movs	r3, #1
 8006220:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	f383 8810 	msr	PRIMASK, r3
}
 8006228:	46c0      	nop			@ (mov r8, r8)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2180      	movs	r1, #128	@ 0x80
 8006236:	438a      	bics	r2, r1
 8006238:	601a      	str	r2, [r3, #0]
 800623a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800623c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	f383 8810 	msr	PRIMASK, r3
}
 8006244:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006246:	f3ef 8310 	mrs	r3, PRIMASK
 800624a:	61bb      	str	r3, [r7, #24]
  return(result);
 800624c:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800624e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006250:	2301      	movs	r3, #1
 8006252:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	f383 8810 	msr	PRIMASK, r3
}
 800625a:	46c0      	nop			@ (mov r8, r8)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2140      	movs	r1, #64	@ 0x40
 8006268:	430a      	orrs	r2, r1
 800626a:	601a      	str	r2, [r3, #0]
 800626c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800626e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006270:	6a3b      	ldr	r3, [r7, #32]
 8006272:	f383 8810 	msr	PRIMASK, r3
}
 8006276:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006278:	e018      	b.n	80062ac <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800627e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006282:	881b      	ldrh	r3, [r3, #0]
 8006284:	001a      	movs	r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	05d2      	lsls	r2, r2, #23
 800628c:	0dd2      	lsrs	r2, r2, #23
 800628e:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006294:	1c9a      	adds	r2, r3, #2
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2256      	movs	r2, #86	@ 0x56
 800629e:	5a9b      	ldrh	r3, [r3, r2]
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	3b01      	subs	r3, #1
 80062a4:	b299      	uxth	r1, r3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2256      	movs	r2, #86	@ 0x56
 80062aa:	5299      	strh	r1, [r3, r2]
}
 80062ac:	46c0      	nop			@ (mov r8, r8)
 80062ae:	46bd      	mov	sp, r7
 80062b0:	b00c      	add	sp, #48	@ 0x30
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b08c      	sub	sp, #48	@ 0x30
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2288      	movs	r2, #136	@ 0x88
 80062c0:	589b      	ldr	r3, [r3, r2]
 80062c2:	2b21      	cmp	r3, #33	@ 0x21
 80062c4:	d165      	bne.n	8006392 <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80062c6:	232e      	movs	r3, #46	@ 0x2e
 80062c8:	18fb      	adds	r3, r7, r3
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	216a      	movs	r1, #106	@ 0x6a
 80062ce:	5a52      	ldrh	r2, [r2, r1]
 80062d0:	801a      	strh	r2, [r3, #0]
 80062d2:	e059      	b.n	8006388 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2256      	movs	r2, #86	@ 0x56
 80062d8:	5a9b      	ldrh	r3, [r3, r2]
 80062da:	b29b      	uxth	r3, r3
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d133      	bne.n	8006348 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80062e0:	f3ef 8310 	mrs	r3, PRIMASK
 80062e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80062e6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80062e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062ea:	2301      	movs	r3, #1
 80062ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	f383 8810 	msr	PRIMASK, r3
}
 80062f4:	46c0      	nop			@ (mov r8, r8)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	689a      	ldr	r2, [r3, #8]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4926      	ldr	r1, [pc, #152]	@ (800639c <UART_TxISR_8BIT_FIFOEN+0xe8>)
 8006302:	400a      	ands	r2, r1
 8006304:	609a      	str	r2, [r3, #8]
 8006306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006308:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	f383 8810 	msr	PRIMASK, r3
}
 8006310:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006312:	f3ef 8310 	mrs	r3, PRIMASK
 8006316:	61bb      	str	r3, [r7, #24]
  return(result);
 8006318:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800631a:	627b      	str	r3, [r7, #36]	@ 0x24
 800631c:	2301      	movs	r3, #1
 800631e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	f383 8810 	msr	PRIMASK, r3
}
 8006326:	46c0      	nop			@ (mov r8, r8)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2140      	movs	r1, #64	@ 0x40
 8006334:	430a      	orrs	r2, r1
 8006336:	601a      	str	r2, [r3, #0]
 8006338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800633a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800633c:	6a3b      	ldr	r3, [r7, #32]
 800633e:	f383 8810 	msr	PRIMASK, r3
}
 8006342:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 8006344:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8006346:	e024      	b.n	8006392 <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	69db      	ldr	r3, [r3, #28]
 800634e:	2280      	movs	r2, #128	@ 0x80
 8006350:	4013      	ands	r3, r2
 8006352:	d013      	beq.n	800637c <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006358:	781a      	ldrb	r2, [r3, #0]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006364:	1c5a      	adds	r2, r3, #1
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2256      	movs	r2, #86	@ 0x56
 800636e:	5a9b      	ldrh	r3, [r3, r2]
 8006370:	b29b      	uxth	r3, r3
 8006372:	3b01      	subs	r3, #1
 8006374:	b299      	uxth	r1, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2256      	movs	r2, #86	@ 0x56
 800637a:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800637c:	212e      	movs	r1, #46	@ 0x2e
 800637e:	187b      	adds	r3, r7, r1
 8006380:	881a      	ldrh	r2, [r3, #0]
 8006382:	187b      	adds	r3, r7, r1
 8006384:	3a01      	subs	r2, #1
 8006386:	801a      	strh	r2, [r3, #0]
 8006388:	232e      	movs	r3, #46	@ 0x2e
 800638a:	18fb      	adds	r3, r7, r3
 800638c:	881b      	ldrh	r3, [r3, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1a0      	bne.n	80062d4 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 8006392:	46c0      	nop			@ (mov r8, r8)
 8006394:	46bd      	mov	sp, r7
 8006396:	b00c      	add	sp, #48	@ 0x30
 8006398:	bd80      	pop	{r7, pc}
 800639a:	46c0      	nop			@ (mov r8, r8)
 800639c:	ff7fffff 	.word	0xff7fffff

080063a0 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b08c      	sub	sp, #48	@ 0x30
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2288      	movs	r2, #136	@ 0x88
 80063ac:	589b      	ldr	r3, [r3, r2]
 80063ae:	2b21      	cmp	r3, #33	@ 0x21
 80063b0:	d16a      	bne.n	8006488 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80063b2:	232e      	movs	r3, #46	@ 0x2e
 80063b4:	18fb      	adds	r3, r7, r3
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	216a      	movs	r1, #106	@ 0x6a
 80063ba:	5a52      	ldrh	r2, [r2, r1]
 80063bc:	801a      	strh	r2, [r3, #0]
 80063be:	e05e      	b.n	800647e <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2256      	movs	r2, #86	@ 0x56
 80063c4:	5a9b      	ldrh	r3, [r3, r2]
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d133      	bne.n	8006434 <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80063cc:	f3ef 8310 	mrs	r3, PRIMASK
 80063d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80063d2:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80063d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80063d6:	2301      	movs	r3, #1
 80063d8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f383 8810 	msr	PRIMASK, r3
}
 80063e0:	46c0      	nop			@ (mov r8, r8)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	689a      	ldr	r2, [r3, #8]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4928      	ldr	r1, [pc, #160]	@ (8006490 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 80063ee:	400a      	ands	r2, r1
 80063f0:	609a      	str	r2, [r3, #8]
 80063f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	f383 8810 	msr	PRIMASK, r3
}
 80063fc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80063fe:	f3ef 8310 	mrs	r3, PRIMASK
 8006402:	617b      	str	r3, [r7, #20]
  return(result);
 8006404:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006406:	623b      	str	r3, [r7, #32]
 8006408:	2301      	movs	r3, #1
 800640a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	f383 8810 	msr	PRIMASK, r3
}
 8006412:	46c0      	nop			@ (mov r8, r8)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2140      	movs	r1, #64	@ 0x40
 8006420:	430a      	orrs	r2, r1
 8006422:	601a      	str	r2, [r3, #0]
 8006424:	6a3b      	ldr	r3, [r7, #32]
 8006426:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	f383 8810 	msr	PRIMASK, r3
}
 800642e:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 8006430:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8006432:	e029      	b.n	8006488 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	69db      	ldr	r3, [r3, #28]
 800643a:	2280      	movs	r2, #128	@ 0x80
 800643c:	4013      	ands	r3, r2
 800643e:	d018      	beq.n	8006472 <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006444:	62bb      	str	r3, [r7, #40]	@ 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006448:	881b      	ldrh	r3, [r3, #0]
 800644a:	001a      	movs	r2, r3
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	05d2      	lsls	r2, r2, #23
 8006452:	0dd2      	lsrs	r2, r2, #23
 8006454:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800645a:	1c9a      	adds	r2, r3, #2
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2256      	movs	r2, #86	@ 0x56
 8006464:	5a9b      	ldrh	r3, [r3, r2]
 8006466:	b29b      	uxth	r3, r3
 8006468:	3b01      	subs	r3, #1
 800646a:	b299      	uxth	r1, r3
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2256      	movs	r2, #86	@ 0x56
 8006470:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006472:	212e      	movs	r1, #46	@ 0x2e
 8006474:	187b      	adds	r3, r7, r1
 8006476:	881a      	ldrh	r2, [r3, #0]
 8006478:	187b      	adds	r3, r7, r1
 800647a:	3a01      	subs	r2, #1
 800647c:	801a      	strh	r2, [r3, #0]
 800647e:	232e      	movs	r3, #46	@ 0x2e
 8006480:	18fb      	adds	r3, r7, r3
 8006482:	881b      	ldrh	r3, [r3, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d19b      	bne.n	80063c0 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 8006488:	46c0      	nop			@ (mov r8, r8)
 800648a:	46bd      	mov	sp, r7
 800648c:	b00c      	add	sp, #48	@ 0x30
 800648e:	bd80      	pop	{r7, pc}
 8006490:	ff7fffff 	.word	0xff7fffff

08006494 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b086      	sub	sp, #24
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800649c:	f3ef 8310 	mrs	r3, PRIMASK
 80064a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80064a2:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80064a4:	617b      	str	r3, [r7, #20]
 80064a6:	2301      	movs	r3, #1
 80064a8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f383 8810 	msr	PRIMASK, r3
}
 80064b0:	46c0      	nop			@ (mov r8, r8)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2140      	movs	r1, #64	@ 0x40
 80064be:	438a      	bics	r2, r1
 80064c0:	601a      	str	r2, [r3, #0]
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	f383 8810 	msr	PRIMASK, r3
}
 80064cc:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2288      	movs	r2, #136	@ 0x88
 80064d2:	2120      	movs	r1, #32
 80064d4:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	0018      	movs	r0, r3
 80064e0:	f7fb f92c 	bl	800173c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064e4:	46c0      	nop			@ (mov r8, r8)
 80064e6:	46bd      	mov	sp, r7
 80064e8:	b006      	add	sp, #24
 80064ea:	bd80      	pop	{r7, pc}

080064ec <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b094      	sub	sp, #80	@ 0x50
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80064f4:	204e      	movs	r0, #78	@ 0x4e
 80064f6:	183b      	adds	r3, r7, r0
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	2160      	movs	r1, #96	@ 0x60
 80064fc:	5a52      	ldrh	r2, [r2, r1]
 80064fe:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	228c      	movs	r2, #140	@ 0x8c
 8006504:	589b      	ldr	r3, [r3, r2]
 8006506:	2b22      	cmp	r3, #34	@ 0x22
 8006508:	d000      	beq.n	800650c <UART_RxISR_8BIT+0x20>
 800650a:	e0ba      	b.n	8006682 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006512:	214c      	movs	r1, #76	@ 0x4c
 8006514:	187b      	adds	r3, r7, r1
 8006516:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006518:	187b      	adds	r3, r7, r1
 800651a:	881b      	ldrh	r3, [r3, #0]
 800651c:	b2da      	uxtb	r2, r3
 800651e:	183b      	adds	r3, r7, r0
 8006520:	881b      	ldrh	r3, [r3, #0]
 8006522:	b2d9      	uxtb	r1, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006528:	400a      	ands	r2, r1
 800652a:	b2d2      	uxtb	r2, r2
 800652c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006532:	1c5a      	adds	r2, r3, #1
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	225e      	movs	r2, #94	@ 0x5e
 800653c:	5a9b      	ldrh	r3, [r3, r2]
 800653e:	b29b      	uxth	r3, r3
 8006540:	3b01      	subs	r3, #1
 8006542:	b299      	uxth	r1, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	225e      	movs	r2, #94	@ 0x5e
 8006548:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	225e      	movs	r2, #94	@ 0x5e
 800654e:	5a9b      	ldrh	r3, [r3, r2]
 8006550:	b29b      	uxth	r3, r3
 8006552:	2b00      	cmp	r3, #0
 8006554:	d000      	beq.n	8006558 <UART_RxISR_8BIT+0x6c>
 8006556:	e09c      	b.n	8006692 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006558:	f3ef 8310 	mrs	r3, PRIMASK
 800655c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800655e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006560:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006562:	2301      	movs	r3, #1
 8006564:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006568:	f383 8810 	msr	PRIMASK, r3
}
 800656c:	46c0      	nop			@ (mov r8, r8)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4948      	ldr	r1, [pc, #288]	@ (800669c <UART_RxISR_8BIT+0x1b0>)
 800657a:	400a      	ands	r2, r1
 800657c:	601a      	str	r2, [r3, #0]
 800657e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006580:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006584:	f383 8810 	msr	PRIMASK, r3
}
 8006588:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800658a:	f3ef 8310 	mrs	r3, PRIMASK
 800658e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8006590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006592:	647b      	str	r3, [r7, #68]	@ 0x44
 8006594:	2301      	movs	r3, #1
 8006596:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800659a:	f383 8810 	msr	PRIMASK, r3
}
 800659e:	46c0      	nop			@ (mov r8, r8)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	689a      	ldr	r2, [r3, #8]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2101      	movs	r1, #1
 80065ac:	438a      	bics	r2, r1
 80065ae:	609a      	str	r2, [r3, #8]
 80065b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065b6:	f383 8810 	msr	PRIMASK, r3
}
 80065ba:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	228c      	movs	r2, #140	@ 0x8c
 80065c0:	2120      	movs	r1, #32
 80065c2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	685a      	ldr	r2, [r3, #4]
 80065d6:	2380      	movs	r3, #128	@ 0x80
 80065d8:	041b      	lsls	r3, r3, #16
 80065da:	4013      	ands	r3, r2
 80065dc:	d018      	beq.n	8006610 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80065de:	f3ef 8310 	mrs	r3, PRIMASK
 80065e2:	61bb      	str	r3, [r7, #24]
  return(result);
 80065e4:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80065e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80065e8:	2301      	movs	r3, #1
 80065ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	f383 8810 	msr	PRIMASK, r3
}
 80065f2:	46c0      	nop			@ (mov r8, r8)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4928      	ldr	r1, [pc, #160]	@ (80066a0 <UART_RxISR_8BIT+0x1b4>)
 8006600:	400a      	ands	r2, r1
 8006602:	601a      	str	r2, [r3, #0]
 8006604:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006606:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006608:	6a3b      	ldr	r3, [r7, #32]
 800660a:	f383 8810 	msr	PRIMASK, r3
}
 800660e:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006614:	2b01      	cmp	r3, #1
 8006616:	d12f      	bne.n	8006678 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800661e:	f3ef 8310 	mrs	r3, PRIMASK
 8006622:	60fb      	str	r3, [r7, #12]
  return(result);
 8006624:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006626:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006628:	2301      	movs	r3, #1
 800662a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	f383 8810 	msr	PRIMASK, r3
}
 8006632:	46c0      	nop			@ (mov r8, r8)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2110      	movs	r1, #16
 8006640:	438a      	bics	r2, r1
 8006642:	601a      	str	r2, [r3, #0]
 8006644:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006646:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	f383 8810 	msr	PRIMASK, r3
}
 800664e:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	69db      	ldr	r3, [r3, #28]
 8006656:	2210      	movs	r2, #16
 8006658:	4013      	ands	r3, r2
 800665a:	2b10      	cmp	r3, #16
 800665c:	d103      	bne.n	8006666 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	2210      	movs	r2, #16
 8006664:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	225c      	movs	r2, #92	@ 0x5c
 800666a:	5a9a      	ldrh	r2, [r3, r2]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	0011      	movs	r1, r2
 8006670:	0018      	movs	r0, r3
 8006672:	f7ff f871 	bl	8005758 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006676:	e00c      	b.n	8006692 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	0018      	movs	r0, r3
 800667c:	f7fb f8ec 	bl	8001858 <HAL_UART_RxCpltCallback>
}
 8006680:	e007      	b.n	8006692 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	699a      	ldr	r2, [r3, #24]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	2108      	movs	r1, #8
 800668e:	430a      	orrs	r2, r1
 8006690:	619a      	str	r2, [r3, #24]
}
 8006692:	46c0      	nop			@ (mov r8, r8)
 8006694:	46bd      	mov	sp, r7
 8006696:	b014      	add	sp, #80	@ 0x50
 8006698:	bd80      	pop	{r7, pc}
 800669a:	46c0      	nop			@ (mov r8, r8)
 800669c:	fffffedf 	.word	0xfffffedf
 80066a0:	fbffffff 	.word	0xfbffffff

080066a4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b094      	sub	sp, #80	@ 0x50
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80066ac:	204e      	movs	r0, #78	@ 0x4e
 80066ae:	183b      	adds	r3, r7, r0
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	2160      	movs	r1, #96	@ 0x60
 80066b4:	5a52      	ldrh	r2, [r2, r1]
 80066b6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	228c      	movs	r2, #140	@ 0x8c
 80066bc:	589b      	ldr	r3, [r3, r2]
 80066be:	2b22      	cmp	r3, #34	@ 0x22
 80066c0:	d000      	beq.n	80066c4 <UART_RxISR_16BIT+0x20>
 80066c2:	e0ba      	b.n	800683a <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80066ca:	214c      	movs	r1, #76	@ 0x4c
 80066cc:	187b      	adds	r3, r7, r1
 80066ce:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066d4:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80066d6:	187b      	adds	r3, r7, r1
 80066d8:	183a      	adds	r2, r7, r0
 80066da:	881b      	ldrh	r3, [r3, #0]
 80066dc:	8812      	ldrh	r2, [r2, #0]
 80066de:	4013      	ands	r3, r2
 80066e0:	b29a      	uxth	r2, r3
 80066e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066e4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066ea:	1c9a      	adds	r2, r3, #2
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	225e      	movs	r2, #94	@ 0x5e
 80066f4:	5a9b      	ldrh	r3, [r3, r2]
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	3b01      	subs	r3, #1
 80066fa:	b299      	uxth	r1, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	225e      	movs	r2, #94	@ 0x5e
 8006700:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	225e      	movs	r2, #94	@ 0x5e
 8006706:	5a9b      	ldrh	r3, [r3, r2]
 8006708:	b29b      	uxth	r3, r3
 800670a:	2b00      	cmp	r3, #0
 800670c:	d000      	beq.n	8006710 <UART_RxISR_16BIT+0x6c>
 800670e:	e09c      	b.n	800684a <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006710:	f3ef 8310 	mrs	r3, PRIMASK
 8006714:	623b      	str	r3, [r7, #32]
  return(result);
 8006716:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006718:	647b      	str	r3, [r7, #68]	@ 0x44
 800671a:	2301      	movs	r3, #1
 800671c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800671e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006720:	f383 8810 	msr	PRIMASK, r3
}
 8006724:	46c0      	nop			@ (mov r8, r8)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4948      	ldr	r1, [pc, #288]	@ (8006854 <UART_RxISR_16BIT+0x1b0>)
 8006732:	400a      	ands	r2, r1
 8006734:	601a      	str	r2, [r3, #0]
 8006736:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006738:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800673a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800673c:	f383 8810 	msr	PRIMASK, r3
}
 8006740:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006742:	f3ef 8310 	mrs	r3, PRIMASK
 8006746:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8006748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800674a:	643b      	str	r3, [r7, #64]	@ 0x40
 800674c:	2301      	movs	r3, #1
 800674e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006752:	f383 8810 	msr	PRIMASK, r3
}
 8006756:	46c0      	nop			@ (mov r8, r8)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	689a      	ldr	r2, [r3, #8]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2101      	movs	r1, #1
 8006764:	438a      	bics	r2, r1
 8006766:	609a      	str	r2, [r3, #8]
 8006768:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800676a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800676c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800676e:	f383 8810 	msr	PRIMASK, r3
}
 8006772:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	228c      	movs	r2, #140	@ 0x8c
 8006778:	2120      	movs	r1, #32
 800677a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	685a      	ldr	r2, [r3, #4]
 800678e:	2380      	movs	r3, #128	@ 0x80
 8006790:	041b      	lsls	r3, r3, #16
 8006792:	4013      	ands	r3, r2
 8006794:	d018      	beq.n	80067c8 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006796:	f3ef 8310 	mrs	r3, PRIMASK
 800679a:	617b      	str	r3, [r7, #20]
  return(result);
 800679c:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800679e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067a0:	2301      	movs	r3, #1
 80067a2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	f383 8810 	msr	PRIMASK, r3
}
 80067aa:	46c0      	nop			@ (mov r8, r8)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4928      	ldr	r1, [pc, #160]	@ (8006858 <UART_RxISR_16BIT+0x1b4>)
 80067b8:	400a      	ands	r2, r1
 80067ba:	601a      	str	r2, [r3, #0]
 80067bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	f383 8810 	msr	PRIMASK, r3
}
 80067c6:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d12f      	bne.n	8006830 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80067d6:	f3ef 8310 	mrs	r3, PRIMASK
 80067da:	60bb      	str	r3, [r7, #8]
  return(result);
 80067dc:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80067e0:	2301      	movs	r3, #1
 80067e2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f383 8810 	msr	PRIMASK, r3
}
 80067ea:	46c0      	nop			@ (mov r8, r8)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2110      	movs	r1, #16
 80067f8:	438a      	bics	r2, r1
 80067fa:	601a      	str	r2, [r3, #0]
 80067fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	f383 8810 	msr	PRIMASK, r3
}
 8006806:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	69db      	ldr	r3, [r3, #28]
 800680e:	2210      	movs	r2, #16
 8006810:	4013      	ands	r3, r2
 8006812:	2b10      	cmp	r3, #16
 8006814:	d103      	bne.n	800681e <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	2210      	movs	r2, #16
 800681c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	225c      	movs	r2, #92	@ 0x5c
 8006822:	5a9a      	ldrh	r2, [r3, r2]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	0011      	movs	r1, r2
 8006828:	0018      	movs	r0, r3
 800682a:	f7fe ff95 	bl	8005758 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800682e:	e00c      	b.n	800684a <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	0018      	movs	r0, r3
 8006834:	f7fb f810 	bl	8001858 <HAL_UART_RxCpltCallback>
}
 8006838:	e007      	b.n	800684a <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	699a      	ldr	r2, [r3, #24]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2108      	movs	r1, #8
 8006846:	430a      	orrs	r2, r1
 8006848:	619a      	str	r2, [r3, #24]
}
 800684a:	46c0      	nop			@ (mov r8, r8)
 800684c:	46bd      	mov	sp, r7
 800684e:	b014      	add	sp, #80	@ 0x50
 8006850:	bd80      	pop	{r7, pc}
 8006852:	46c0      	nop			@ (mov r8, r8)
 8006854:	fffffedf 	.word	0xfffffedf
 8006858:	fbffffff 	.word	0xfbffffff

0800685c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b0a0      	sub	sp, #128	@ 0x80
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006864:	237a      	movs	r3, #122	@ 0x7a
 8006866:	18fb      	adds	r3, r7, r3
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	2160      	movs	r1, #96	@ 0x60
 800686c:	5a52      	ldrh	r2, [r2, r1]
 800686e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	69db      	ldr	r3, [r3, #28]
 8006876:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	228c      	movs	r2, #140	@ 0x8c
 800688c:	589b      	ldr	r3, [r3, r2]
 800688e:	2b22      	cmp	r3, #34	@ 0x22
 8006890:	d000      	beq.n	8006894 <UART_RxISR_8BIT_FIFOEN+0x38>
 8006892:	e166      	b.n	8006b62 <UART_RxISR_8BIT_FIFOEN+0x306>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006894:	236e      	movs	r3, #110	@ 0x6e
 8006896:	18fb      	adds	r3, r7, r3
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	2168      	movs	r1, #104	@ 0x68
 800689c:	5a52      	ldrh	r2, [r2, r1]
 800689e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80068a0:	e10d      	b.n	8006abe <UART_RxISR_8BIT_FIFOEN+0x262>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80068a8:	216c      	movs	r1, #108	@ 0x6c
 80068aa:	187b      	adds	r3, r7, r1
 80068ac:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80068ae:	187b      	adds	r3, r7, r1
 80068b0:	881b      	ldrh	r3, [r3, #0]
 80068b2:	b2da      	uxtb	r2, r3
 80068b4:	237a      	movs	r3, #122	@ 0x7a
 80068b6:	18fb      	adds	r3, r7, r3
 80068b8:	881b      	ldrh	r3, [r3, #0]
 80068ba:	b2d9      	uxtb	r1, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068c0:	400a      	ands	r2, r1
 80068c2:	b2d2      	uxtb	r2, r2
 80068c4:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068ca:	1c5a      	adds	r2, r3, #1
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	225e      	movs	r2, #94	@ 0x5e
 80068d4:	5a9b      	ldrh	r3, [r3, r2]
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	3b01      	subs	r3, #1
 80068da:	b299      	uxth	r1, r3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	225e      	movs	r2, #94	@ 0x5e
 80068e0:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	69db      	ldr	r3, [r3, #28]
 80068e8:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80068ea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80068ec:	2207      	movs	r2, #7
 80068ee:	4013      	ands	r3, r2
 80068f0:	d049      	beq.n	8006986 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80068f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80068f4:	2201      	movs	r2, #1
 80068f6:	4013      	ands	r3, r2
 80068f8:	d010      	beq.n	800691c <UART_RxISR_8BIT_FIFOEN+0xc0>
 80068fa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80068fc:	2380      	movs	r3, #128	@ 0x80
 80068fe:	005b      	lsls	r3, r3, #1
 8006900:	4013      	ands	r3, r2
 8006902:	d00b      	beq.n	800691c <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2201      	movs	r2, #1
 800690a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2290      	movs	r2, #144	@ 0x90
 8006910:	589b      	ldr	r3, [r3, r2]
 8006912:	2201      	movs	r2, #1
 8006914:	431a      	orrs	r2, r3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2190      	movs	r1, #144	@ 0x90
 800691a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800691c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800691e:	2202      	movs	r2, #2
 8006920:	4013      	ands	r3, r2
 8006922:	d00f      	beq.n	8006944 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8006924:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006926:	2201      	movs	r2, #1
 8006928:	4013      	ands	r3, r2
 800692a:	d00b      	beq.n	8006944 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	2202      	movs	r2, #2
 8006932:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2290      	movs	r2, #144	@ 0x90
 8006938:	589b      	ldr	r3, [r3, r2]
 800693a:	2204      	movs	r2, #4
 800693c:	431a      	orrs	r2, r3
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2190      	movs	r1, #144	@ 0x90
 8006942:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006944:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006946:	2204      	movs	r2, #4
 8006948:	4013      	ands	r3, r2
 800694a:	d00f      	beq.n	800696c <UART_RxISR_8BIT_FIFOEN+0x110>
 800694c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800694e:	2201      	movs	r2, #1
 8006950:	4013      	ands	r3, r2
 8006952:	d00b      	beq.n	800696c <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	2204      	movs	r2, #4
 800695a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2290      	movs	r2, #144	@ 0x90
 8006960:	589b      	ldr	r3, [r3, r2]
 8006962:	2202      	movs	r2, #2
 8006964:	431a      	orrs	r2, r3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2190      	movs	r1, #144	@ 0x90
 800696a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2290      	movs	r2, #144	@ 0x90
 8006970:	589b      	ldr	r3, [r3, r2]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d007      	beq.n	8006986 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	0018      	movs	r0, r3
 800697a:	f7fb f85b 	bl	8001a34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2290      	movs	r2, #144	@ 0x90
 8006982:	2100      	movs	r1, #0
 8006984:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	225e      	movs	r2, #94	@ 0x5e
 800698a:	5a9b      	ldrh	r3, [r3, r2]
 800698c:	b29b      	uxth	r3, r3
 800698e:	2b00      	cmp	r3, #0
 8006990:	d000      	beq.n	8006994 <UART_RxISR_8BIT_FIFOEN+0x138>
 8006992:	e094      	b.n	8006abe <UART_RxISR_8BIT_FIFOEN+0x262>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006994:	f3ef 8310 	mrs	r3, PRIMASK
 8006998:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 800699a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800699c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800699e:	2301      	movs	r3, #1
 80069a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069a4:	f383 8810 	msr	PRIMASK, r3
}
 80069a8:	46c0      	nop			@ (mov r8, r8)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4971      	ldr	r1, [pc, #452]	@ (8006b7c <UART_RxISR_8BIT_FIFOEN+0x320>)
 80069b6:	400a      	ands	r2, r1
 80069b8:	601a      	str	r2, [r3, #0]
 80069ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80069bc:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069c0:	f383 8810 	msr	PRIMASK, r3
}
 80069c4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80069c6:	f3ef 8310 	mrs	r3, PRIMASK
 80069ca:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 80069cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80069ce:	667b      	str	r3, [r7, #100]	@ 0x64
 80069d0:	2301      	movs	r3, #1
 80069d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069d6:	f383 8810 	msr	PRIMASK, r3
}
 80069da:	46c0      	nop			@ (mov r8, r8)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	689a      	ldr	r2, [r3, #8]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4966      	ldr	r1, [pc, #408]	@ (8006b80 <UART_RxISR_8BIT_FIFOEN+0x324>)
 80069e8:	400a      	ands	r2, r1
 80069ea:	609a      	str	r2, [r3, #8]
 80069ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80069ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069f2:	f383 8810 	msr	PRIMASK, r3
}
 80069f6:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	228c      	movs	r2, #140	@ 0x8c
 80069fc:	2120      	movs	r1, #32
 80069fe:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	685a      	ldr	r2, [r3, #4]
 8006a12:	2380      	movs	r3, #128	@ 0x80
 8006a14:	041b      	lsls	r3, r3, #16
 8006a16:	4013      	ands	r3, r2
 8006a18:	d018      	beq.n	8006a4c <UART_RxISR_8BIT_FIFOEN+0x1f0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006a1a:	f3ef 8310 	mrs	r3, PRIMASK
 8006a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8006a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a22:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a24:	2301      	movs	r3, #1
 8006a26:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a2a:	f383 8810 	msr	PRIMASK, r3
}
 8006a2e:	46c0      	nop			@ (mov r8, r8)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4952      	ldr	r1, [pc, #328]	@ (8006b84 <UART_RxISR_8BIT_FIFOEN+0x328>)
 8006a3c:	400a      	ands	r2, r1
 8006a3e:	601a      	str	r2, [r3, #0]
 8006a40:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a42:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a46:	f383 8810 	msr	PRIMASK, r3
}
 8006a4a:	46c0      	nop			@ (mov r8, r8)
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d12f      	bne.n	8006ab4 <UART_RxISR_8BIT_FIFOEN+0x258>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006a5a:	f3ef 8310 	mrs	r3, PRIMASK
 8006a5e:	623b      	str	r3, [r7, #32]
  return(result);
 8006a60:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a62:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a64:	2301      	movs	r3, #1
 8006a66:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a6a:	f383 8810 	msr	PRIMASK, r3
}
 8006a6e:	46c0      	nop			@ (mov r8, r8)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2110      	movs	r1, #16
 8006a7c:	438a      	bics	r2, r1
 8006a7e:	601a      	str	r2, [r3, #0]
 8006a80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a82:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a86:	f383 8810 	msr	PRIMASK, r3
}
 8006a8a:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	69db      	ldr	r3, [r3, #28]
 8006a92:	2210      	movs	r2, #16
 8006a94:	4013      	ands	r3, r2
 8006a96:	2b10      	cmp	r3, #16
 8006a98:	d103      	bne.n	8006aa2 <UART_RxISR_8BIT_FIFOEN+0x246>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2210      	movs	r2, #16
 8006aa0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	225c      	movs	r2, #92	@ 0x5c
 8006aa6:	5a9a      	ldrh	r2, [r3, r2]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	0011      	movs	r1, r2
 8006aac:	0018      	movs	r0, r3
 8006aae:	f7fe fe53 	bl	8005758 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8006ab2:	e00e      	b.n	8006ad2 <UART_RxISR_8BIT_FIFOEN+0x276>
          HAL_UART_RxCpltCallback(huart);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	0018      	movs	r0, r3
 8006ab8:	f7fa fece 	bl	8001858 <HAL_UART_RxCpltCallback>
        break;
 8006abc:	e009      	b.n	8006ad2 <UART_RxISR_8BIT_FIFOEN+0x276>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006abe:	236e      	movs	r3, #110	@ 0x6e
 8006ac0:	18fb      	adds	r3, r7, r3
 8006ac2:	881b      	ldrh	r3, [r3, #0]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d004      	beq.n	8006ad2 <UART_RxISR_8BIT_FIFOEN+0x276>
 8006ac8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006aca:	2220      	movs	r2, #32
 8006acc:	4013      	ands	r3, r2
 8006ace:	d000      	beq.n	8006ad2 <UART_RxISR_8BIT_FIFOEN+0x276>
 8006ad0:	e6e7      	b.n	80068a2 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006ad2:	205a      	movs	r0, #90	@ 0x5a
 8006ad4:	183b      	adds	r3, r7, r0
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	215e      	movs	r1, #94	@ 0x5e
 8006ada:	5a52      	ldrh	r2, [r2, r1]
 8006adc:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006ade:	0001      	movs	r1, r0
 8006ae0:	187b      	adds	r3, r7, r1
 8006ae2:	881b      	ldrh	r3, [r3, #0]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d044      	beq.n	8006b72 <UART_RxISR_8BIT_FIFOEN+0x316>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2268      	movs	r2, #104	@ 0x68
 8006aec:	5a9b      	ldrh	r3, [r3, r2]
 8006aee:	187a      	adds	r2, r7, r1
 8006af0:	8812      	ldrh	r2, [r2, #0]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d23d      	bcs.n	8006b72 <UART_RxISR_8BIT_FIFOEN+0x316>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006af6:	f3ef 8310 	mrs	r3, PRIMASK
 8006afa:	60bb      	str	r3, [r7, #8]
  return(result);
 8006afc:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006afe:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b00:	2301      	movs	r3, #1
 8006b02:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f383 8810 	msr	PRIMASK, r3
}
 8006b0a:	46c0      	nop			@ (mov r8, r8)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	689a      	ldr	r2, [r3, #8]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	491c      	ldr	r1, [pc, #112]	@ (8006b88 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 8006b18:	400a      	ands	r2, r1
 8006b1a:	609a      	str	r2, [r3, #8]
 8006b1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	f383 8810 	msr	PRIMASK, r3
}
 8006b26:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	4a18      	ldr	r2, [pc, #96]	@ (8006b8c <UART_RxISR_8BIT_FIFOEN+0x330>)
 8006b2c:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006b2e:	f3ef 8310 	mrs	r3, PRIMASK
 8006b32:	617b      	str	r3, [r7, #20]
  return(result);
 8006b34:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006b36:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b38:	2301      	movs	r3, #1
 8006b3a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	f383 8810 	msr	PRIMASK, r3
}
 8006b42:	46c0      	nop			@ (mov r8, r8)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2120      	movs	r1, #32
 8006b50:	430a      	orrs	r2, r1
 8006b52:	601a      	str	r2, [r3, #0]
 8006b54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b56:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	f383 8810 	msr	PRIMASK, r3
}
 8006b5e:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b60:	e007      	b.n	8006b72 <UART_RxISR_8BIT_FIFOEN+0x316>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	699a      	ldr	r2, [r3, #24]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2108      	movs	r1, #8
 8006b6e:	430a      	orrs	r2, r1
 8006b70:	619a      	str	r2, [r3, #24]
}
 8006b72:	46c0      	nop			@ (mov r8, r8)
 8006b74:	46bd      	mov	sp, r7
 8006b76:	b020      	add	sp, #128	@ 0x80
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	46c0      	nop			@ (mov r8, r8)
 8006b7c:	fffffeff 	.word	0xfffffeff
 8006b80:	effffffe 	.word	0xeffffffe
 8006b84:	fbffffff 	.word	0xfbffffff
 8006b88:	efffffff 	.word	0xefffffff
 8006b8c:	080064ed 	.word	0x080064ed

08006b90 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b0a2      	sub	sp, #136	@ 0x88
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006b98:	2382      	movs	r3, #130	@ 0x82
 8006b9a:	18fb      	adds	r3, r7, r3
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	2160      	movs	r1, #96	@ 0x60
 8006ba0:	5a52      	ldrh	r2, [r2, r1]
 8006ba2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	69db      	ldr	r3, [r3, #28]
 8006baa:	2284      	movs	r2, #132	@ 0x84
 8006bac:	18ba      	adds	r2, r7, r2
 8006bae:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	228c      	movs	r2, #140	@ 0x8c
 8006bc4:	589b      	ldr	r3, [r3, r2]
 8006bc6:	2b22      	cmp	r3, #34	@ 0x22
 8006bc8:	d000      	beq.n	8006bcc <UART_RxISR_16BIT_FIFOEN+0x3c>
 8006bca:	e170      	b.n	8006eae <UART_RxISR_16BIT_FIFOEN+0x31e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006bcc:	2376      	movs	r3, #118	@ 0x76
 8006bce:	18fb      	adds	r3, r7, r3
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	2168      	movs	r1, #104	@ 0x68
 8006bd4:	5a52      	ldrh	r2, [r2, r1]
 8006bd6:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006bd8:	e115      	b.n	8006e06 <UART_RxISR_16BIT_FIFOEN+0x276>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006be0:	2174      	movs	r1, #116	@ 0x74
 8006be2:	187b      	adds	r3, r7, r1
 8006be4:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bea:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8006bec:	187b      	adds	r3, r7, r1
 8006bee:	2282      	movs	r2, #130	@ 0x82
 8006bf0:	18ba      	adds	r2, r7, r2
 8006bf2:	881b      	ldrh	r3, [r3, #0]
 8006bf4:	8812      	ldrh	r2, [r2, #0]
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	b29a      	uxth	r2, r3
 8006bfa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006bfc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c02:	1c9a      	adds	r2, r3, #2
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	225e      	movs	r2, #94	@ 0x5e
 8006c0c:	5a9b      	ldrh	r3, [r3, r2]
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	3b01      	subs	r3, #1
 8006c12:	b299      	uxth	r1, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	225e      	movs	r2, #94	@ 0x5e
 8006c18:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	69db      	ldr	r3, [r3, #28]
 8006c20:	2184      	movs	r1, #132	@ 0x84
 8006c22:	187a      	adds	r2, r7, r1
 8006c24:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006c26:	187b      	adds	r3, r7, r1
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	2207      	movs	r2, #7
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	d04e      	beq.n	8006cce <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006c30:	187b      	adds	r3, r7, r1
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2201      	movs	r2, #1
 8006c36:	4013      	ands	r3, r2
 8006c38:	d010      	beq.n	8006c5c <UART_RxISR_16BIT_FIFOEN+0xcc>
 8006c3a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006c3c:	2380      	movs	r3, #128	@ 0x80
 8006c3e:	005b      	lsls	r3, r3, #1
 8006c40:	4013      	ands	r3, r2
 8006c42:	d00b      	beq.n	8006c5c <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	2201      	movs	r2, #1
 8006c4a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2290      	movs	r2, #144	@ 0x90
 8006c50:	589b      	ldr	r3, [r3, r2]
 8006c52:	2201      	movs	r2, #1
 8006c54:	431a      	orrs	r2, r3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2190      	movs	r1, #144	@ 0x90
 8006c5a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c5c:	2384      	movs	r3, #132	@ 0x84
 8006c5e:	18fb      	adds	r3, r7, r3
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2202      	movs	r2, #2
 8006c64:	4013      	ands	r3, r2
 8006c66:	d00f      	beq.n	8006c88 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8006c68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	d00b      	beq.n	8006c88 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2202      	movs	r2, #2
 8006c76:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2290      	movs	r2, #144	@ 0x90
 8006c7c:	589b      	ldr	r3, [r3, r2]
 8006c7e:	2204      	movs	r2, #4
 8006c80:	431a      	orrs	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2190      	movs	r1, #144	@ 0x90
 8006c86:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c88:	2384      	movs	r3, #132	@ 0x84
 8006c8a:	18fb      	adds	r3, r7, r3
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2204      	movs	r2, #4
 8006c90:	4013      	ands	r3, r2
 8006c92:	d00f      	beq.n	8006cb4 <UART_RxISR_16BIT_FIFOEN+0x124>
 8006c94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c96:	2201      	movs	r2, #1
 8006c98:	4013      	ands	r3, r2
 8006c9a:	d00b      	beq.n	8006cb4 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2204      	movs	r2, #4
 8006ca2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2290      	movs	r2, #144	@ 0x90
 8006ca8:	589b      	ldr	r3, [r3, r2]
 8006caa:	2202      	movs	r2, #2
 8006cac:	431a      	orrs	r2, r3
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2190      	movs	r1, #144	@ 0x90
 8006cb2:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2290      	movs	r2, #144	@ 0x90
 8006cb8:	589b      	ldr	r3, [r3, r2]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d007      	beq.n	8006cce <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	0018      	movs	r0, r3
 8006cc2:	f7fa feb7 	bl	8001a34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2290      	movs	r2, #144	@ 0x90
 8006cca:	2100      	movs	r1, #0
 8006ccc:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	225e      	movs	r2, #94	@ 0x5e
 8006cd2:	5a9b      	ldrh	r3, [r3, r2]
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d000      	beq.n	8006cdc <UART_RxISR_16BIT_FIFOEN+0x14c>
 8006cda:	e094      	b.n	8006e06 <UART_RxISR_16BIT_FIFOEN+0x276>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006cdc:	f3ef 8310 	mrs	r3, PRIMASK
 8006ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8006ce2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ce4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cec:	f383 8810 	msr	PRIMASK, r3
}
 8006cf0:	46c0      	nop			@ (mov r8, r8)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4972      	ldr	r1, [pc, #456]	@ (8006ec8 <UART_RxISR_16BIT_FIFOEN+0x338>)
 8006cfe:	400a      	ands	r2, r1
 8006d00:	601a      	str	r2, [r3, #0]
 8006d02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d04:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d08:	f383 8810 	msr	PRIMASK, r3
}
 8006d0c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006d0e:	f3ef 8310 	mrs	r3, PRIMASK
 8006d12:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8006d14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d16:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d18:	2301      	movs	r3, #1
 8006d1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d1e:	f383 8810 	msr	PRIMASK, r3
}
 8006d22:	46c0      	nop			@ (mov r8, r8)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	689a      	ldr	r2, [r3, #8]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4967      	ldr	r1, [pc, #412]	@ (8006ecc <UART_RxISR_16BIT_FIFOEN+0x33c>)
 8006d30:	400a      	ands	r2, r1
 8006d32:	609a      	str	r2, [r3, #8]
 8006d34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006d36:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d3a:	f383 8810 	msr	PRIMASK, r3
}
 8006d3e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	228c      	movs	r2, #140	@ 0x8c
 8006d44:	2120      	movs	r1, #32
 8006d46:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	685a      	ldr	r2, [r3, #4]
 8006d5a:	2380      	movs	r3, #128	@ 0x80
 8006d5c:	041b      	lsls	r3, r3, #16
 8006d5e:	4013      	ands	r3, r2
 8006d60:	d018      	beq.n	8006d94 <UART_RxISR_16BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006d62:	f3ef 8310 	mrs	r3, PRIMASK
 8006d66:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8006d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006d6a:	667b      	str	r3, [r7, #100]	@ 0x64
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d72:	f383 8810 	msr	PRIMASK, r3
}
 8006d76:	46c0      	nop			@ (mov r8, r8)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4953      	ldr	r1, [pc, #332]	@ (8006ed0 <UART_RxISR_16BIT_FIFOEN+0x340>)
 8006d84:	400a      	ands	r2, r1
 8006d86:	601a      	str	r2, [r3, #0]
 8006d88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d8e:	f383 8810 	msr	PRIMASK, r3
}
 8006d92:	46c0      	nop			@ (mov r8, r8)
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d12f      	bne.n	8006dfc <UART_RxISR_16BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006da2:	f3ef 8310 	mrs	r3, PRIMASK
 8006da6:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006daa:	663b      	str	r3, [r7, #96]	@ 0x60
 8006dac:	2301      	movs	r3, #1
 8006dae:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006db2:	f383 8810 	msr	PRIMASK, r3
}
 8006db6:	46c0      	nop			@ (mov r8, r8)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2110      	movs	r1, #16
 8006dc4:	438a      	bics	r2, r1
 8006dc6:	601a      	str	r2, [r3, #0]
 8006dc8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dce:	f383 8810 	msr	PRIMASK, r3
}
 8006dd2:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	69db      	ldr	r3, [r3, #28]
 8006dda:	2210      	movs	r2, #16
 8006ddc:	4013      	ands	r3, r2
 8006dde:	2b10      	cmp	r3, #16
 8006de0:	d103      	bne.n	8006dea <UART_RxISR_16BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2210      	movs	r2, #16
 8006de8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	225c      	movs	r2, #92	@ 0x5c
 8006dee:	5a9a      	ldrh	r2, [r3, r2]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	0011      	movs	r1, r2
 8006df4:	0018      	movs	r0, r3
 8006df6:	f7fe fcaf 	bl	8005758 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8006dfa:	e010      	b.n	8006e1e <UART_RxISR_16BIT_FIFOEN+0x28e>
          HAL_UART_RxCpltCallback(huart);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	0018      	movs	r0, r3
 8006e00:	f7fa fd2a 	bl	8001858 <HAL_UART_RxCpltCallback>
        break;
 8006e04:	e00b      	b.n	8006e1e <UART_RxISR_16BIT_FIFOEN+0x28e>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006e06:	2376      	movs	r3, #118	@ 0x76
 8006e08:	18fb      	adds	r3, r7, r3
 8006e0a:	881b      	ldrh	r3, [r3, #0]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d006      	beq.n	8006e1e <UART_RxISR_16BIT_FIFOEN+0x28e>
 8006e10:	2384      	movs	r3, #132	@ 0x84
 8006e12:	18fb      	adds	r3, r7, r3
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2220      	movs	r2, #32
 8006e18:	4013      	ands	r3, r2
 8006e1a:	d000      	beq.n	8006e1e <UART_RxISR_16BIT_FIFOEN+0x28e>
 8006e1c:	e6dd      	b.n	8006bda <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006e1e:	205e      	movs	r0, #94	@ 0x5e
 8006e20:	183b      	adds	r3, r7, r0
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	215e      	movs	r1, #94	@ 0x5e
 8006e26:	5a52      	ldrh	r2, [r2, r1]
 8006e28:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006e2a:	0001      	movs	r1, r0
 8006e2c:	187b      	adds	r3, r7, r1
 8006e2e:	881b      	ldrh	r3, [r3, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d044      	beq.n	8006ebe <UART_RxISR_16BIT_FIFOEN+0x32e>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2268      	movs	r2, #104	@ 0x68
 8006e38:	5a9b      	ldrh	r3, [r3, r2]
 8006e3a:	187a      	adds	r2, r7, r1
 8006e3c:	8812      	ldrh	r2, [r2, #0]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d23d      	bcs.n	8006ebe <UART_RxISR_16BIT_FIFOEN+0x32e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006e42:	f3ef 8310 	mrs	r3, PRIMASK
 8006e46:	60fb      	str	r3, [r7, #12]
  return(result);
 8006e48:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006e4a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	f383 8810 	msr	PRIMASK, r3
}
 8006e56:	46c0      	nop			@ (mov r8, r8)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	689a      	ldr	r2, [r3, #8]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	491c      	ldr	r1, [pc, #112]	@ (8006ed4 <UART_RxISR_16BIT_FIFOEN+0x344>)
 8006e64:	400a      	ands	r2, r1
 8006e66:	609a      	str	r2, [r3, #8]
 8006e68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006e6a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	f383 8810 	msr	PRIMASK, r3
}
 8006e72:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4a18      	ldr	r2, [pc, #96]	@ (8006ed8 <UART_RxISR_16BIT_FIFOEN+0x348>)
 8006e78:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006e7a:	f3ef 8310 	mrs	r3, PRIMASK
 8006e7e:	61bb      	str	r3, [r7, #24]
  return(result);
 8006e80:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006e82:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e84:	2301      	movs	r3, #1
 8006e86:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e88:	69fb      	ldr	r3, [r7, #28]
 8006e8a:	f383 8810 	msr	PRIMASK, r3
}
 8006e8e:	46c0      	nop			@ (mov r8, r8)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	2120      	movs	r1, #32
 8006e9c:	430a      	orrs	r2, r1
 8006e9e:	601a      	str	r2, [r3, #0]
 8006ea0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ea2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ea4:	6a3b      	ldr	r3, [r7, #32]
 8006ea6:	f383 8810 	msr	PRIMASK, r3
}
 8006eaa:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006eac:	e007      	b.n	8006ebe <UART_RxISR_16BIT_FIFOEN+0x32e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	699a      	ldr	r2, [r3, #24]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2108      	movs	r1, #8
 8006eba:	430a      	orrs	r2, r1
 8006ebc:	619a      	str	r2, [r3, #24]
}
 8006ebe:	46c0      	nop			@ (mov r8, r8)
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	b022      	add	sp, #136	@ 0x88
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	46c0      	nop			@ (mov r8, r8)
 8006ec8:	fffffeff 	.word	0xfffffeff
 8006ecc:	effffffe 	.word	0xeffffffe
 8006ed0:	fbffffff 	.word	0xfbffffff
 8006ed4:	efffffff 	.word	0xefffffff
 8006ed8:	080066a5 	.word	0x080066a5

08006edc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b082      	sub	sp, #8
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006ee4:	46c0      	nop			@ (mov r8, r8)
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	b002      	add	sp, #8
 8006eea:	bd80      	pop	{r7, pc}

08006eec <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006ef4:	46c0      	nop			@ (mov r8, r8)
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	b002      	add	sp, #8
 8006efa:	bd80      	pop	{r7, pc}

08006efc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b082      	sub	sp, #8
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006f04:	46c0      	nop			@ (mov r8, r8)
 8006f06:	46bd      	mov	sp, r7
 8006f08:	b002      	add	sp, #8
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2284      	movs	r2, #132	@ 0x84
 8006f18:	5c9b      	ldrb	r3, [r3, r2]
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d101      	bne.n	8006f22 <HAL_UARTEx_DisableFifoMode+0x16>
 8006f1e:	2302      	movs	r3, #2
 8006f20:	e027      	b.n	8006f72 <HAL_UARTEx_DisableFifoMode+0x66>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2284      	movs	r2, #132	@ 0x84
 8006f26:	2101      	movs	r1, #1
 8006f28:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2288      	movs	r2, #136	@ 0x88
 8006f2e:	2124      	movs	r1, #36	@ 0x24
 8006f30:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2101      	movs	r1, #1
 8006f46:	438a      	bics	r2, r1
 8006f48:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	4a0b      	ldr	r2, [pc, #44]	@ (8006f7c <HAL_UARTEx_DisableFifoMode+0x70>)
 8006f4e:	4013      	ands	r3, r2
 8006f50:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	68fa      	ldr	r2, [r7, #12]
 8006f5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2288      	movs	r2, #136	@ 0x88
 8006f64:	2120      	movs	r1, #32
 8006f66:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2284      	movs	r2, #132	@ 0x84
 8006f6c:	2100      	movs	r1, #0
 8006f6e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	0018      	movs	r0, r3
 8006f74:	46bd      	mov	sp, r7
 8006f76:	b004      	add	sp, #16
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	46c0      	nop			@ (mov r8, r8)
 8006f7c:	dfffffff 	.word	0xdfffffff

08006f80 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2284      	movs	r2, #132	@ 0x84
 8006f8e:	5c9b      	ldrb	r3, [r3, r2]
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d101      	bne.n	8006f98 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006f94:	2302      	movs	r3, #2
 8006f96:	e02e      	b.n	8006ff6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2284      	movs	r2, #132	@ 0x84
 8006f9c:	2101      	movs	r1, #1
 8006f9e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2288      	movs	r2, #136	@ 0x88
 8006fa4:	2124      	movs	r1, #36	@ 0x24
 8006fa6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	2101      	movs	r1, #1
 8006fbc:	438a      	bics	r2, r1
 8006fbe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	00db      	lsls	r3, r3, #3
 8006fc8:	08d9      	lsrs	r1, r3, #3
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	683a      	ldr	r2, [r7, #0]
 8006fd0:	430a      	orrs	r2, r1
 8006fd2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	0018      	movs	r0, r3
 8006fd8:	f000 f854 	bl	8007084 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2288      	movs	r2, #136	@ 0x88
 8006fe8:	2120      	movs	r1, #32
 8006fea:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2284      	movs	r2, #132	@ 0x84
 8006ff0:	2100      	movs	r1, #0
 8006ff2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006ff4:	2300      	movs	r3, #0
}
 8006ff6:	0018      	movs	r0, r3
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	b004      	add	sp, #16
 8006ffc:	bd80      	pop	{r7, pc}
	...

08007000 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2284      	movs	r2, #132	@ 0x84
 800700e:	5c9b      	ldrb	r3, [r3, r2]
 8007010:	2b01      	cmp	r3, #1
 8007012:	d101      	bne.n	8007018 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007014:	2302      	movs	r3, #2
 8007016:	e02f      	b.n	8007078 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2284      	movs	r2, #132	@ 0x84
 800701c:	2101      	movs	r1, #1
 800701e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2288      	movs	r2, #136	@ 0x88
 8007024:	2124      	movs	r1, #36	@ 0x24
 8007026:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	2101      	movs	r1, #1
 800703c:	438a      	bics	r2, r1
 800703e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	4a0e      	ldr	r2, [pc, #56]	@ (8007080 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007048:	4013      	ands	r3, r2
 800704a:	0019      	movs	r1, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	683a      	ldr	r2, [r7, #0]
 8007052:	430a      	orrs	r2, r1
 8007054:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	0018      	movs	r0, r3
 800705a:	f000 f813 	bl	8007084 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68fa      	ldr	r2, [r7, #12]
 8007064:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2288      	movs	r2, #136	@ 0x88
 800706a:	2120      	movs	r1, #32
 800706c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2284      	movs	r2, #132	@ 0x84
 8007072:	2100      	movs	r1, #0
 8007074:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007076:	2300      	movs	r3, #0
}
 8007078:	0018      	movs	r0, r3
 800707a:	46bd      	mov	sp, r7
 800707c:	b004      	add	sp, #16
 800707e:	bd80      	pop	{r7, pc}
 8007080:	f1ffffff 	.word	0xf1ffffff

08007084 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007086:	b085      	sub	sp, #20
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007090:	2b00      	cmp	r3, #0
 8007092:	d108      	bne.n	80070a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	226a      	movs	r2, #106	@ 0x6a
 8007098:	2101      	movs	r1, #1
 800709a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2268      	movs	r2, #104	@ 0x68
 80070a0:	2101      	movs	r1, #1
 80070a2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80070a4:	e043      	b.n	800712e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80070a6:	260f      	movs	r6, #15
 80070a8:	19bb      	adds	r3, r7, r6
 80070aa:	2208      	movs	r2, #8
 80070ac:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80070ae:	200e      	movs	r0, #14
 80070b0:	183b      	adds	r3, r7, r0
 80070b2:	2208      	movs	r2, #8
 80070b4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	0e5b      	lsrs	r3, r3, #25
 80070be:	b2da      	uxtb	r2, r3
 80070c0:	240d      	movs	r4, #13
 80070c2:	193b      	adds	r3, r7, r4
 80070c4:	2107      	movs	r1, #7
 80070c6:	400a      	ands	r2, r1
 80070c8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	0f5b      	lsrs	r3, r3, #29
 80070d2:	b2da      	uxtb	r2, r3
 80070d4:	250c      	movs	r5, #12
 80070d6:	197b      	adds	r3, r7, r5
 80070d8:	2107      	movs	r1, #7
 80070da:	400a      	ands	r2, r1
 80070dc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80070de:	183b      	adds	r3, r7, r0
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	197a      	adds	r2, r7, r5
 80070e4:	7812      	ldrb	r2, [r2, #0]
 80070e6:	4914      	ldr	r1, [pc, #80]	@ (8007138 <UARTEx_SetNbDataToProcess+0xb4>)
 80070e8:	5c8a      	ldrb	r2, [r1, r2]
 80070ea:	435a      	muls	r2, r3
 80070ec:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80070ee:	197b      	adds	r3, r7, r5
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	4a12      	ldr	r2, [pc, #72]	@ (800713c <UARTEx_SetNbDataToProcess+0xb8>)
 80070f4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80070f6:	0019      	movs	r1, r3
 80070f8:	f7f9 f890 	bl	800021c <__divsi3>
 80070fc:	0003      	movs	r3, r0
 80070fe:	b299      	uxth	r1, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	226a      	movs	r2, #106	@ 0x6a
 8007104:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007106:	19bb      	adds	r3, r7, r6
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	193a      	adds	r2, r7, r4
 800710c:	7812      	ldrb	r2, [r2, #0]
 800710e:	490a      	ldr	r1, [pc, #40]	@ (8007138 <UARTEx_SetNbDataToProcess+0xb4>)
 8007110:	5c8a      	ldrb	r2, [r1, r2]
 8007112:	435a      	muls	r2, r3
 8007114:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8007116:	193b      	adds	r3, r7, r4
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	4a08      	ldr	r2, [pc, #32]	@ (800713c <UARTEx_SetNbDataToProcess+0xb8>)
 800711c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800711e:	0019      	movs	r1, r3
 8007120:	f7f9 f87c 	bl	800021c <__divsi3>
 8007124:	0003      	movs	r3, r0
 8007126:	b299      	uxth	r1, r3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2268      	movs	r2, #104	@ 0x68
 800712c:	5299      	strh	r1, [r3, r2]
}
 800712e:	46c0      	nop			@ (mov r8, r8)
 8007130:	46bd      	mov	sp, r7
 8007132:	b005      	add	sp, #20
 8007134:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007136:	46c0      	nop			@ (mov r8, r8)
 8007138:	08007814 	.word	0x08007814
 800713c:	0800781c 	.word	0x0800781c

08007140 <calloc>:
 8007140:	b510      	push	{r4, lr}
 8007142:	4b03      	ldr	r3, [pc, #12]	@ (8007150 <calloc+0x10>)
 8007144:	000a      	movs	r2, r1
 8007146:	0001      	movs	r1, r0
 8007148:	6818      	ldr	r0, [r3, #0]
 800714a:	f000 f803 	bl	8007154 <_calloc_r>
 800714e:	bd10      	pop	{r4, pc}
 8007150:	20000010 	.word	0x20000010

08007154 <_calloc_r>:
 8007154:	b570      	push	{r4, r5, r6, lr}
 8007156:	0c0b      	lsrs	r3, r1, #16
 8007158:	0c15      	lsrs	r5, r2, #16
 800715a:	2b00      	cmp	r3, #0
 800715c:	d11e      	bne.n	800719c <_calloc_r+0x48>
 800715e:	2d00      	cmp	r5, #0
 8007160:	d10c      	bne.n	800717c <_calloc_r+0x28>
 8007162:	b289      	uxth	r1, r1
 8007164:	b294      	uxth	r4, r2
 8007166:	434c      	muls	r4, r1
 8007168:	0021      	movs	r1, r4
 800716a:	f000 f857 	bl	800721c <_malloc_r>
 800716e:	1e05      	subs	r5, r0, #0
 8007170:	d01a      	beq.n	80071a8 <_calloc_r+0x54>
 8007172:	0022      	movs	r2, r4
 8007174:	2100      	movs	r1, #0
 8007176:	f000 f8e1 	bl	800733c <memset>
 800717a:	e016      	b.n	80071aa <_calloc_r+0x56>
 800717c:	1c2b      	adds	r3, r5, #0
 800717e:	1c0c      	adds	r4, r1, #0
 8007180:	b289      	uxth	r1, r1
 8007182:	b292      	uxth	r2, r2
 8007184:	434a      	muls	r2, r1
 8007186:	b29b      	uxth	r3, r3
 8007188:	b2a1      	uxth	r1, r4
 800718a:	4359      	muls	r1, r3
 800718c:	0c14      	lsrs	r4, r2, #16
 800718e:	190c      	adds	r4, r1, r4
 8007190:	0c23      	lsrs	r3, r4, #16
 8007192:	d107      	bne.n	80071a4 <_calloc_r+0x50>
 8007194:	0424      	lsls	r4, r4, #16
 8007196:	b292      	uxth	r2, r2
 8007198:	4314      	orrs	r4, r2
 800719a:	e7e5      	b.n	8007168 <_calloc_r+0x14>
 800719c:	2d00      	cmp	r5, #0
 800719e:	d101      	bne.n	80071a4 <_calloc_r+0x50>
 80071a0:	1c14      	adds	r4, r2, #0
 80071a2:	e7ed      	b.n	8007180 <_calloc_r+0x2c>
 80071a4:	230c      	movs	r3, #12
 80071a6:	6003      	str	r3, [r0, #0]
 80071a8:	2500      	movs	r5, #0
 80071aa:	0028      	movs	r0, r5
 80071ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080071b0 <malloc>:
 80071b0:	b510      	push	{r4, lr}
 80071b2:	4b03      	ldr	r3, [pc, #12]	@ (80071c0 <malloc+0x10>)
 80071b4:	0001      	movs	r1, r0
 80071b6:	6818      	ldr	r0, [r3, #0]
 80071b8:	f000 f830 	bl	800721c <_malloc_r>
 80071bc:	bd10      	pop	{r4, pc}
 80071be:	46c0      	nop			@ (mov r8, r8)
 80071c0:	20000010 	.word	0x20000010

080071c4 <free>:
 80071c4:	b510      	push	{r4, lr}
 80071c6:	4b03      	ldr	r3, [pc, #12]	@ (80071d4 <free+0x10>)
 80071c8:	0001      	movs	r1, r0
 80071ca:	6818      	ldr	r0, [r3, #0]
 80071cc:	f000 f906 	bl	80073dc <_free_r>
 80071d0:	bd10      	pop	{r4, pc}
 80071d2:	46c0      	nop			@ (mov r8, r8)
 80071d4:	20000010 	.word	0x20000010

080071d8 <sbrk_aligned>:
 80071d8:	b570      	push	{r4, r5, r6, lr}
 80071da:	4e0f      	ldr	r6, [pc, #60]	@ (8007218 <sbrk_aligned+0x40>)
 80071dc:	000d      	movs	r5, r1
 80071de:	6831      	ldr	r1, [r6, #0]
 80071e0:	0004      	movs	r4, r0
 80071e2:	2900      	cmp	r1, #0
 80071e4:	d102      	bne.n	80071ec <sbrk_aligned+0x14>
 80071e6:	f000 f8b1 	bl	800734c <_sbrk_r>
 80071ea:	6030      	str	r0, [r6, #0]
 80071ec:	0029      	movs	r1, r5
 80071ee:	0020      	movs	r0, r4
 80071f0:	f000 f8ac 	bl	800734c <_sbrk_r>
 80071f4:	1c43      	adds	r3, r0, #1
 80071f6:	d103      	bne.n	8007200 <sbrk_aligned+0x28>
 80071f8:	2501      	movs	r5, #1
 80071fa:	426d      	negs	r5, r5
 80071fc:	0028      	movs	r0, r5
 80071fe:	bd70      	pop	{r4, r5, r6, pc}
 8007200:	2303      	movs	r3, #3
 8007202:	1cc5      	adds	r5, r0, #3
 8007204:	439d      	bics	r5, r3
 8007206:	42a8      	cmp	r0, r5
 8007208:	d0f8      	beq.n	80071fc <sbrk_aligned+0x24>
 800720a:	1a29      	subs	r1, r5, r0
 800720c:	0020      	movs	r0, r4
 800720e:	f000 f89d 	bl	800734c <_sbrk_r>
 8007212:	3001      	adds	r0, #1
 8007214:	d1f2      	bne.n	80071fc <sbrk_aligned+0x24>
 8007216:	e7ef      	b.n	80071f8 <sbrk_aligned+0x20>
 8007218:	200001fc 	.word	0x200001fc

0800721c <_malloc_r>:
 800721c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800721e:	2203      	movs	r2, #3
 8007220:	1ccb      	adds	r3, r1, #3
 8007222:	4393      	bics	r3, r2
 8007224:	3308      	adds	r3, #8
 8007226:	0005      	movs	r5, r0
 8007228:	001f      	movs	r7, r3
 800722a:	2b0c      	cmp	r3, #12
 800722c:	d234      	bcs.n	8007298 <_malloc_r+0x7c>
 800722e:	270c      	movs	r7, #12
 8007230:	42b9      	cmp	r1, r7
 8007232:	d833      	bhi.n	800729c <_malloc_r+0x80>
 8007234:	0028      	movs	r0, r5
 8007236:	f000 f871 	bl	800731c <__malloc_lock>
 800723a:	4e37      	ldr	r6, [pc, #220]	@ (8007318 <_malloc_r+0xfc>)
 800723c:	6833      	ldr	r3, [r6, #0]
 800723e:	001c      	movs	r4, r3
 8007240:	2c00      	cmp	r4, #0
 8007242:	d12f      	bne.n	80072a4 <_malloc_r+0x88>
 8007244:	0039      	movs	r1, r7
 8007246:	0028      	movs	r0, r5
 8007248:	f7ff ffc6 	bl	80071d8 <sbrk_aligned>
 800724c:	0004      	movs	r4, r0
 800724e:	1c43      	adds	r3, r0, #1
 8007250:	d15f      	bne.n	8007312 <_malloc_r+0xf6>
 8007252:	6834      	ldr	r4, [r6, #0]
 8007254:	9400      	str	r4, [sp, #0]
 8007256:	9b00      	ldr	r3, [sp, #0]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d14a      	bne.n	80072f2 <_malloc_r+0xd6>
 800725c:	2c00      	cmp	r4, #0
 800725e:	d052      	beq.n	8007306 <_malloc_r+0xea>
 8007260:	6823      	ldr	r3, [r4, #0]
 8007262:	0028      	movs	r0, r5
 8007264:	18e3      	adds	r3, r4, r3
 8007266:	9900      	ldr	r1, [sp, #0]
 8007268:	9301      	str	r3, [sp, #4]
 800726a:	f000 f86f 	bl	800734c <_sbrk_r>
 800726e:	9b01      	ldr	r3, [sp, #4]
 8007270:	4283      	cmp	r3, r0
 8007272:	d148      	bne.n	8007306 <_malloc_r+0xea>
 8007274:	6823      	ldr	r3, [r4, #0]
 8007276:	0028      	movs	r0, r5
 8007278:	1aff      	subs	r7, r7, r3
 800727a:	0039      	movs	r1, r7
 800727c:	f7ff ffac 	bl	80071d8 <sbrk_aligned>
 8007280:	3001      	adds	r0, #1
 8007282:	d040      	beq.n	8007306 <_malloc_r+0xea>
 8007284:	6823      	ldr	r3, [r4, #0]
 8007286:	19db      	adds	r3, r3, r7
 8007288:	6023      	str	r3, [r4, #0]
 800728a:	6833      	ldr	r3, [r6, #0]
 800728c:	685a      	ldr	r2, [r3, #4]
 800728e:	2a00      	cmp	r2, #0
 8007290:	d133      	bne.n	80072fa <_malloc_r+0xde>
 8007292:	9b00      	ldr	r3, [sp, #0]
 8007294:	6033      	str	r3, [r6, #0]
 8007296:	e019      	b.n	80072cc <_malloc_r+0xb0>
 8007298:	2b00      	cmp	r3, #0
 800729a:	dac9      	bge.n	8007230 <_malloc_r+0x14>
 800729c:	230c      	movs	r3, #12
 800729e:	602b      	str	r3, [r5, #0]
 80072a0:	2000      	movs	r0, #0
 80072a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80072a4:	6821      	ldr	r1, [r4, #0]
 80072a6:	1bc9      	subs	r1, r1, r7
 80072a8:	d420      	bmi.n	80072ec <_malloc_r+0xd0>
 80072aa:	290b      	cmp	r1, #11
 80072ac:	d90a      	bls.n	80072c4 <_malloc_r+0xa8>
 80072ae:	19e2      	adds	r2, r4, r7
 80072b0:	6027      	str	r7, [r4, #0]
 80072b2:	42a3      	cmp	r3, r4
 80072b4:	d104      	bne.n	80072c0 <_malloc_r+0xa4>
 80072b6:	6032      	str	r2, [r6, #0]
 80072b8:	6863      	ldr	r3, [r4, #4]
 80072ba:	6011      	str	r1, [r2, #0]
 80072bc:	6053      	str	r3, [r2, #4]
 80072be:	e005      	b.n	80072cc <_malloc_r+0xb0>
 80072c0:	605a      	str	r2, [r3, #4]
 80072c2:	e7f9      	b.n	80072b8 <_malloc_r+0x9c>
 80072c4:	6862      	ldr	r2, [r4, #4]
 80072c6:	42a3      	cmp	r3, r4
 80072c8:	d10e      	bne.n	80072e8 <_malloc_r+0xcc>
 80072ca:	6032      	str	r2, [r6, #0]
 80072cc:	0028      	movs	r0, r5
 80072ce:	f000 f82d 	bl	800732c <__malloc_unlock>
 80072d2:	0020      	movs	r0, r4
 80072d4:	2207      	movs	r2, #7
 80072d6:	300b      	adds	r0, #11
 80072d8:	1d23      	adds	r3, r4, #4
 80072da:	4390      	bics	r0, r2
 80072dc:	1ac2      	subs	r2, r0, r3
 80072de:	4298      	cmp	r0, r3
 80072e0:	d0df      	beq.n	80072a2 <_malloc_r+0x86>
 80072e2:	1a1b      	subs	r3, r3, r0
 80072e4:	50a3      	str	r3, [r4, r2]
 80072e6:	e7dc      	b.n	80072a2 <_malloc_r+0x86>
 80072e8:	605a      	str	r2, [r3, #4]
 80072ea:	e7ef      	b.n	80072cc <_malloc_r+0xb0>
 80072ec:	0023      	movs	r3, r4
 80072ee:	6864      	ldr	r4, [r4, #4]
 80072f0:	e7a6      	b.n	8007240 <_malloc_r+0x24>
 80072f2:	9c00      	ldr	r4, [sp, #0]
 80072f4:	6863      	ldr	r3, [r4, #4]
 80072f6:	9300      	str	r3, [sp, #0]
 80072f8:	e7ad      	b.n	8007256 <_malloc_r+0x3a>
 80072fa:	001a      	movs	r2, r3
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	42a3      	cmp	r3, r4
 8007300:	d1fb      	bne.n	80072fa <_malloc_r+0xde>
 8007302:	2300      	movs	r3, #0
 8007304:	e7da      	b.n	80072bc <_malloc_r+0xa0>
 8007306:	230c      	movs	r3, #12
 8007308:	0028      	movs	r0, r5
 800730a:	602b      	str	r3, [r5, #0]
 800730c:	f000 f80e 	bl	800732c <__malloc_unlock>
 8007310:	e7c6      	b.n	80072a0 <_malloc_r+0x84>
 8007312:	6007      	str	r7, [r0, #0]
 8007314:	e7da      	b.n	80072cc <_malloc_r+0xb0>
 8007316:	46c0      	nop			@ (mov r8, r8)
 8007318:	20000200 	.word	0x20000200

0800731c <__malloc_lock>:
 800731c:	b510      	push	{r4, lr}
 800731e:	4802      	ldr	r0, [pc, #8]	@ (8007328 <__malloc_lock+0xc>)
 8007320:	f000 f850 	bl	80073c4 <__retarget_lock_acquire_recursive>
 8007324:	bd10      	pop	{r4, pc}
 8007326:	46c0      	nop			@ (mov r8, r8)
 8007328:	20000340 	.word	0x20000340

0800732c <__malloc_unlock>:
 800732c:	b510      	push	{r4, lr}
 800732e:	4802      	ldr	r0, [pc, #8]	@ (8007338 <__malloc_unlock+0xc>)
 8007330:	f000 f849 	bl	80073c6 <__retarget_lock_release_recursive>
 8007334:	bd10      	pop	{r4, pc}
 8007336:	46c0      	nop			@ (mov r8, r8)
 8007338:	20000340 	.word	0x20000340

0800733c <memset>:
 800733c:	0003      	movs	r3, r0
 800733e:	1882      	adds	r2, r0, r2
 8007340:	4293      	cmp	r3, r2
 8007342:	d100      	bne.n	8007346 <memset+0xa>
 8007344:	4770      	bx	lr
 8007346:	7019      	strb	r1, [r3, #0]
 8007348:	3301      	adds	r3, #1
 800734a:	e7f9      	b.n	8007340 <memset+0x4>

0800734c <_sbrk_r>:
 800734c:	2300      	movs	r3, #0
 800734e:	b570      	push	{r4, r5, r6, lr}
 8007350:	4d06      	ldr	r5, [pc, #24]	@ (800736c <_sbrk_r+0x20>)
 8007352:	0004      	movs	r4, r0
 8007354:	0008      	movs	r0, r1
 8007356:	602b      	str	r3, [r5, #0]
 8007358:	f7fa ffec 	bl	8002334 <_sbrk>
 800735c:	1c43      	adds	r3, r0, #1
 800735e:	d103      	bne.n	8007368 <_sbrk_r+0x1c>
 8007360:	682b      	ldr	r3, [r5, #0]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d000      	beq.n	8007368 <_sbrk_r+0x1c>
 8007366:	6023      	str	r3, [r4, #0]
 8007368:	bd70      	pop	{r4, r5, r6, pc}
 800736a:	46c0      	nop			@ (mov r8, r8)
 800736c:	2000033c 	.word	0x2000033c

08007370 <__errno>:
 8007370:	4b01      	ldr	r3, [pc, #4]	@ (8007378 <__errno+0x8>)
 8007372:	6818      	ldr	r0, [r3, #0]
 8007374:	4770      	bx	lr
 8007376:	46c0      	nop			@ (mov r8, r8)
 8007378:	20000010 	.word	0x20000010

0800737c <__libc_init_array>:
 800737c:	b570      	push	{r4, r5, r6, lr}
 800737e:	2600      	movs	r6, #0
 8007380:	4c0c      	ldr	r4, [pc, #48]	@ (80073b4 <__libc_init_array+0x38>)
 8007382:	4d0d      	ldr	r5, [pc, #52]	@ (80073b8 <__libc_init_array+0x3c>)
 8007384:	1b64      	subs	r4, r4, r5
 8007386:	10a4      	asrs	r4, r4, #2
 8007388:	42a6      	cmp	r6, r4
 800738a:	d109      	bne.n	80073a0 <__libc_init_array+0x24>
 800738c:	2600      	movs	r6, #0
 800738e:	f000 f86f 	bl	8007470 <_init>
 8007392:	4c0a      	ldr	r4, [pc, #40]	@ (80073bc <__libc_init_array+0x40>)
 8007394:	4d0a      	ldr	r5, [pc, #40]	@ (80073c0 <__libc_init_array+0x44>)
 8007396:	1b64      	subs	r4, r4, r5
 8007398:	10a4      	asrs	r4, r4, #2
 800739a:	42a6      	cmp	r6, r4
 800739c:	d105      	bne.n	80073aa <__libc_init_array+0x2e>
 800739e:	bd70      	pop	{r4, r5, r6, pc}
 80073a0:	00b3      	lsls	r3, r6, #2
 80073a2:	58eb      	ldr	r3, [r5, r3]
 80073a4:	4798      	blx	r3
 80073a6:	3601      	adds	r6, #1
 80073a8:	e7ee      	b.n	8007388 <__libc_init_array+0xc>
 80073aa:	00b3      	lsls	r3, r6, #2
 80073ac:	58eb      	ldr	r3, [r5, r3]
 80073ae:	4798      	blx	r3
 80073b0:	3601      	adds	r6, #1
 80073b2:	e7f2      	b.n	800739a <__libc_init_array+0x1e>
 80073b4:	08007824 	.word	0x08007824
 80073b8:	08007824 	.word	0x08007824
 80073bc:	08007828 	.word	0x08007828
 80073c0:	08007824 	.word	0x08007824

080073c4 <__retarget_lock_acquire_recursive>:
 80073c4:	4770      	bx	lr

080073c6 <__retarget_lock_release_recursive>:
 80073c6:	4770      	bx	lr

080073c8 <memcpy>:
 80073c8:	2300      	movs	r3, #0
 80073ca:	b510      	push	{r4, lr}
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d100      	bne.n	80073d2 <memcpy+0xa>
 80073d0:	bd10      	pop	{r4, pc}
 80073d2:	5ccc      	ldrb	r4, [r1, r3]
 80073d4:	54c4      	strb	r4, [r0, r3]
 80073d6:	3301      	adds	r3, #1
 80073d8:	e7f8      	b.n	80073cc <memcpy+0x4>
	...

080073dc <_free_r>:
 80073dc:	b570      	push	{r4, r5, r6, lr}
 80073de:	0005      	movs	r5, r0
 80073e0:	1e0c      	subs	r4, r1, #0
 80073e2:	d010      	beq.n	8007406 <_free_r+0x2a>
 80073e4:	3c04      	subs	r4, #4
 80073e6:	6823      	ldr	r3, [r4, #0]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	da00      	bge.n	80073ee <_free_r+0x12>
 80073ec:	18e4      	adds	r4, r4, r3
 80073ee:	0028      	movs	r0, r5
 80073f0:	f7ff ff94 	bl	800731c <__malloc_lock>
 80073f4:	4a1d      	ldr	r2, [pc, #116]	@ (800746c <_free_r+0x90>)
 80073f6:	6813      	ldr	r3, [r2, #0]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d105      	bne.n	8007408 <_free_r+0x2c>
 80073fc:	6063      	str	r3, [r4, #4]
 80073fe:	6014      	str	r4, [r2, #0]
 8007400:	0028      	movs	r0, r5
 8007402:	f7ff ff93 	bl	800732c <__malloc_unlock>
 8007406:	bd70      	pop	{r4, r5, r6, pc}
 8007408:	42a3      	cmp	r3, r4
 800740a:	d908      	bls.n	800741e <_free_r+0x42>
 800740c:	6820      	ldr	r0, [r4, #0]
 800740e:	1821      	adds	r1, r4, r0
 8007410:	428b      	cmp	r3, r1
 8007412:	d1f3      	bne.n	80073fc <_free_r+0x20>
 8007414:	6819      	ldr	r1, [r3, #0]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	1809      	adds	r1, r1, r0
 800741a:	6021      	str	r1, [r4, #0]
 800741c:	e7ee      	b.n	80073fc <_free_r+0x20>
 800741e:	001a      	movs	r2, r3
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d001      	beq.n	800742a <_free_r+0x4e>
 8007426:	42a3      	cmp	r3, r4
 8007428:	d9f9      	bls.n	800741e <_free_r+0x42>
 800742a:	6811      	ldr	r1, [r2, #0]
 800742c:	1850      	adds	r0, r2, r1
 800742e:	42a0      	cmp	r0, r4
 8007430:	d10b      	bne.n	800744a <_free_r+0x6e>
 8007432:	6820      	ldr	r0, [r4, #0]
 8007434:	1809      	adds	r1, r1, r0
 8007436:	1850      	adds	r0, r2, r1
 8007438:	6011      	str	r1, [r2, #0]
 800743a:	4283      	cmp	r3, r0
 800743c:	d1e0      	bne.n	8007400 <_free_r+0x24>
 800743e:	6818      	ldr	r0, [r3, #0]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	1841      	adds	r1, r0, r1
 8007444:	6011      	str	r1, [r2, #0]
 8007446:	6053      	str	r3, [r2, #4]
 8007448:	e7da      	b.n	8007400 <_free_r+0x24>
 800744a:	42a0      	cmp	r0, r4
 800744c:	d902      	bls.n	8007454 <_free_r+0x78>
 800744e:	230c      	movs	r3, #12
 8007450:	602b      	str	r3, [r5, #0]
 8007452:	e7d5      	b.n	8007400 <_free_r+0x24>
 8007454:	6820      	ldr	r0, [r4, #0]
 8007456:	1821      	adds	r1, r4, r0
 8007458:	428b      	cmp	r3, r1
 800745a:	d103      	bne.n	8007464 <_free_r+0x88>
 800745c:	6819      	ldr	r1, [r3, #0]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	1809      	adds	r1, r1, r0
 8007462:	6021      	str	r1, [r4, #0]
 8007464:	6063      	str	r3, [r4, #4]
 8007466:	6054      	str	r4, [r2, #4]
 8007468:	e7ca      	b.n	8007400 <_free_r+0x24>
 800746a:	46c0      	nop			@ (mov r8, r8)
 800746c:	20000200 	.word	0x20000200

08007470 <_init>:
 8007470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007472:	46c0      	nop			@ (mov r8, r8)
 8007474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007476:	bc08      	pop	{r3}
 8007478:	469e      	mov	lr, r3
 800747a:	4770      	bx	lr

0800747c <_fini>:
 800747c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800747e:	46c0      	nop			@ (mov r8, r8)
 8007480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007482:	bc08      	pop	{r3}
 8007484:	469e      	mov	lr, r3
 8007486:	4770      	bx	lr
