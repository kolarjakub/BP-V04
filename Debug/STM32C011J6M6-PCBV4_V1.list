
STM32C011J6M6-PCBV4_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a9c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  08007b5c  08007b5c  00008b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ef8  08007ef8  0000905c  2**0
                  CONTENTS
  4 .ARM          00000000  08007ef8  08007ef8  0000905c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007ef8  08007ef8  0000905c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ef8  08007ef8  00008ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007efc  08007efc  00008efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08007f00  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ec  2000005c  08007f5c  0000905c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  08007f5c  00009348  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000905c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011374  00000000  00000000  00009084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002702  00000000  00000000  0001a3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e78  00000000  00000000  0001cb00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b5e  00000000  00000000  0001d978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000147c9  00000000  00000000  0001e4d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012a38  00000000  00000000  00032c9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e9ae  00000000  00000000  000456d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c4085  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003988  00000000  00000000  000c40c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000c7a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007b44 	.word	0x08007b44

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08007b44 	.word	0x08007b44

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__aeabi_cfrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	0008      	movs	r0, r1
 80003f8:	4661      	mov	r1, ip
 80003fa:	e7ff      	b.n	80003fc <__aeabi_cfcmpeq>

080003fc <__aeabi_cfcmpeq>:
 80003fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fe:	f000 f9e3 	bl	80007c8 <__lesf2>
 8000402:	2800      	cmp	r0, #0
 8000404:	d401      	bmi.n	800040a <__aeabi_cfcmpeq+0xe>
 8000406:	2100      	movs	r1, #0
 8000408:	42c8      	cmn	r0, r1
 800040a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800040c <__aeabi_fcmpeq>:
 800040c:	b510      	push	{r4, lr}
 800040e:	f000 f963 	bl	80006d8 <__eqsf2>
 8000412:	4240      	negs	r0, r0
 8000414:	3001      	adds	r0, #1
 8000416:	bd10      	pop	{r4, pc}

08000418 <__aeabi_fcmplt>:
 8000418:	b510      	push	{r4, lr}
 800041a:	f000 f9d5 	bl	80007c8 <__lesf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	db01      	blt.n	8000426 <__aeabi_fcmplt+0xe>
 8000422:	2000      	movs	r0, #0
 8000424:	bd10      	pop	{r4, pc}
 8000426:	2001      	movs	r0, #1
 8000428:	bd10      	pop	{r4, pc}
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_fcmple>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 f9cb 	bl	80007c8 <__lesf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	dd01      	ble.n	800043a <__aeabi_fcmple+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			@ (mov r8, r8)

08000440 <__aeabi_fcmpgt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 f971 	bl	8000728 <__gesf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dc01      	bgt.n	800044e <__aeabi_fcmpgt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__aeabi_fcmpge>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 f967 	bl	8000728 <__gesf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	da01      	bge.n	8000462 <__aeabi_fcmpge+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)

08000468 <__aeabi_f2uiz>:
 8000468:	219e      	movs	r1, #158	@ 0x9e
 800046a:	b510      	push	{r4, lr}
 800046c:	05c9      	lsls	r1, r1, #23
 800046e:	1c04      	adds	r4, r0, #0
 8000470:	f7ff fff0 	bl	8000454 <__aeabi_fcmpge>
 8000474:	2800      	cmp	r0, #0
 8000476:	d103      	bne.n	8000480 <__aeabi_f2uiz+0x18>
 8000478:	1c20      	adds	r0, r4, #0
 800047a:	f000 fcd5 	bl	8000e28 <__aeabi_f2iz>
 800047e:	bd10      	pop	{r4, pc}
 8000480:	219e      	movs	r1, #158	@ 0x9e
 8000482:	1c20      	adds	r0, r4, #0
 8000484:	05c9      	lsls	r1, r1, #23
 8000486:	f000 fb2b 	bl	8000ae0 <__aeabi_fsub>
 800048a:	f000 fccd 	bl	8000e28 <__aeabi_f2iz>
 800048e:	2380      	movs	r3, #128	@ 0x80
 8000490:	061b      	lsls	r3, r3, #24
 8000492:	469c      	mov	ip, r3
 8000494:	4460      	add	r0, ip
 8000496:	e7f2      	b.n	800047e <__aeabi_f2uiz+0x16>

08000498 <__aeabi_fdiv>:
 8000498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800049a:	464f      	mov	r7, r9
 800049c:	4646      	mov	r6, r8
 800049e:	46d6      	mov	lr, sl
 80004a0:	0244      	lsls	r4, r0, #9
 80004a2:	b5c0      	push	{r6, r7, lr}
 80004a4:	0047      	lsls	r7, r0, #1
 80004a6:	1c0e      	adds	r6, r1, #0
 80004a8:	0a64      	lsrs	r4, r4, #9
 80004aa:	0e3f      	lsrs	r7, r7, #24
 80004ac:	0fc5      	lsrs	r5, r0, #31
 80004ae:	2f00      	cmp	r7, #0
 80004b0:	d03c      	beq.n	800052c <__aeabi_fdiv+0x94>
 80004b2:	2fff      	cmp	r7, #255	@ 0xff
 80004b4:	d042      	beq.n	800053c <__aeabi_fdiv+0xa4>
 80004b6:	2300      	movs	r3, #0
 80004b8:	2280      	movs	r2, #128	@ 0x80
 80004ba:	4699      	mov	r9, r3
 80004bc:	469a      	mov	sl, r3
 80004be:	00e4      	lsls	r4, r4, #3
 80004c0:	04d2      	lsls	r2, r2, #19
 80004c2:	4314      	orrs	r4, r2
 80004c4:	3f7f      	subs	r7, #127	@ 0x7f
 80004c6:	0273      	lsls	r3, r6, #9
 80004c8:	0a5b      	lsrs	r3, r3, #9
 80004ca:	4698      	mov	r8, r3
 80004cc:	0073      	lsls	r3, r6, #1
 80004ce:	0e1b      	lsrs	r3, r3, #24
 80004d0:	0ff6      	lsrs	r6, r6, #31
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d01b      	beq.n	800050e <__aeabi_fdiv+0x76>
 80004d6:	2bff      	cmp	r3, #255	@ 0xff
 80004d8:	d013      	beq.n	8000502 <__aeabi_fdiv+0x6a>
 80004da:	4642      	mov	r2, r8
 80004dc:	2180      	movs	r1, #128	@ 0x80
 80004de:	00d2      	lsls	r2, r2, #3
 80004e0:	04c9      	lsls	r1, r1, #19
 80004e2:	4311      	orrs	r1, r2
 80004e4:	4688      	mov	r8, r1
 80004e6:	2000      	movs	r0, #0
 80004e8:	3b7f      	subs	r3, #127	@ 0x7f
 80004ea:	0029      	movs	r1, r5
 80004ec:	1aff      	subs	r7, r7, r3
 80004ee:	464b      	mov	r3, r9
 80004f0:	4071      	eors	r1, r6
 80004f2:	b2c9      	uxtb	r1, r1
 80004f4:	2b0f      	cmp	r3, #15
 80004f6:	d900      	bls.n	80004fa <__aeabi_fdiv+0x62>
 80004f8:	e0b5      	b.n	8000666 <__aeabi_fdiv+0x1ce>
 80004fa:	4a74      	ldr	r2, [pc, #464]	@ (80006cc <__aeabi_fdiv+0x234>)
 80004fc:	009b      	lsls	r3, r3, #2
 80004fe:	58d3      	ldr	r3, [r2, r3]
 8000500:	469f      	mov	pc, r3
 8000502:	4643      	mov	r3, r8
 8000504:	2b00      	cmp	r3, #0
 8000506:	d13f      	bne.n	8000588 <__aeabi_fdiv+0xf0>
 8000508:	3fff      	subs	r7, #255	@ 0xff
 800050a:	3302      	adds	r3, #2
 800050c:	e003      	b.n	8000516 <__aeabi_fdiv+0x7e>
 800050e:	4643      	mov	r3, r8
 8000510:	2b00      	cmp	r3, #0
 8000512:	d12d      	bne.n	8000570 <__aeabi_fdiv+0xd8>
 8000514:	2301      	movs	r3, #1
 8000516:	0029      	movs	r1, r5
 8000518:	464a      	mov	r2, r9
 800051a:	4071      	eors	r1, r6
 800051c:	b2c9      	uxtb	r1, r1
 800051e:	431a      	orrs	r2, r3
 8000520:	2a0e      	cmp	r2, #14
 8000522:	d838      	bhi.n	8000596 <__aeabi_fdiv+0xfe>
 8000524:	486a      	ldr	r0, [pc, #424]	@ (80006d0 <__aeabi_fdiv+0x238>)
 8000526:	0092      	lsls	r2, r2, #2
 8000528:	5882      	ldr	r2, [r0, r2]
 800052a:	4697      	mov	pc, r2
 800052c:	2c00      	cmp	r4, #0
 800052e:	d113      	bne.n	8000558 <__aeabi_fdiv+0xc0>
 8000530:	2304      	movs	r3, #4
 8000532:	4699      	mov	r9, r3
 8000534:	3b03      	subs	r3, #3
 8000536:	2700      	movs	r7, #0
 8000538:	469a      	mov	sl, r3
 800053a:	e7c4      	b.n	80004c6 <__aeabi_fdiv+0x2e>
 800053c:	2c00      	cmp	r4, #0
 800053e:	d105      	bne.n	800054c <__aeabi_fdiv+0xb4>
 8000540:	2308      	movs	r3, #8
 8000542:	4699      	mov	r9, r3
 8000544:	3b06      	subs	r3, #6
 8000546:	27ff      	movs	r7, #255	@ 0xff
 8000548:	469a      	mov	sl, r3
 800054a:	e7bc      	b.n	80004c6 <__aeabi_fdiv+0x2e>
 800054c:	230c      	movs	r3, #12
 800054e:	4699      	mov	r9, r3
 8000550:	3b09      	subs	r3, #9
 8000552:	27ff      	movs	r7, #255	@ 0xff
 8000554:	469a      	mov	sl, r3
 8000556:	e7b6      	b.n	80004c6 <__aeabi_fdiv+0x2e>
 8000558:	0020      	movs	r0, r4
 800055a:	f000 fd13 	bl	8000f84 <__clzsi2>
 800055e:	2776      	movs	r7, #118	@ 0x76
 8000560:	1f43      	subs	r3, r0, #5
 8000562:	409c      	lsls	r4, r3
 8000564:	2300      	movs	r3, #0
 8000566:	427f      	negs	r7, r7
 8000568:	4699      	mov	r9, r3
 800056a:	469a      	mov	sl, r3
 800056c:	1a3f      	subs	r7, r7, r0
 800056e:	e7aa      	b.n	80004c6 <__aeabi_fdiv+0x2e>
 8000570:	4640      	mov	r0, r8
 8000572:	f000 fd07 	bl	8000f84 <__clzsi2>
 8000576:	4642      	mov	r2, r8
 8000578:	1f43      	subs	r3, r0, #5
 800057a:	409a      	lsls	r2, r3
 800057c:	2376      	movs	r3, #118	@ 0x76
 800057e:	425b      	negs	r3, r3
 8000580:	1a1b      	subs	r3, r3, r0
 8000582:	4690      	mov	r8, r2
 8000584:	2000      	movs	r0, #0
 8000586:	e7b0      	b.n	80004ea <__aeabi_fdiv+0x52>
 8000588:	2303      	movs	r3, #3
 800058a:	464a      	mov	r2, r9
 800058c:	431a      	orrs	r2, r3
 800058e:	4691      	mov	r9, r2
 8000590:	2003      	movs	r0, #3
 8000592:	33fc      	adds	r3, #252	@ 0xfc
 8000594:	e7a9      	b.n	80004ea <__aeabi_fdiv+0x52>
 8000596:	000d      	movs	r5, r1
 8000598:	20ff      	movs	r0, #255	@ 0xff
 800059a:	2200      	movs	r2, #0
 800059c:	05c0      	lsls	r0, r0, #23
 800059e:	07ed      	lsls	r5, r5, #31
 80005a0:	4310      	orrs	r0, r2
 80005a2:	4328      	orrs	r0, r5
 80005a4:	bce0      	pop	{r5, r6, r7}
 80005a6:	46ba      	mov	sl, r7
 80005a8:	46b1      	mov	r9, r6
 80005aa:	46a8      	mov	r8, r5
 80005ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005ae:	000d      	movs	r5, r1
 80005b0:	2000      	movs	r0, #0
 80005b2:	2200      	movs	r2, #0
 80005b4:	e7f2      	b.n	800059c <__aeabi_fdiv+0x104>
 80005b6:	4653      	mov	r3, sl
 80005b8:	2b02      	cmp	r3, #2
 80005ba:	d0ed      	beq.n	8000598 <__aeabi_fdiv+0x100>
 80005bc:	2b03      	cmp	r3, #3
 80005be:	d033      	beq.n	8000628 <__aeabi_fdiv+0x190>
 80005c0:	46a0      	mov	r8, r4
 80005c2:	2b01      	cmp	r3, #1
 80005c4:	d105      	bne.n	80005d2 <__aeabi_fdiv+0x13a>
 80005c6:	2000      	movs	r0, #0
 80005c8:	2200      	movs	r2, #0
 80005ca:	e7e7      	b.n	800059c <__aeabi_fdiv+0x104>
 80005cc:	0035      	movs	r5, r6
 80005ce:	2803      	cmp	r0, #3
 80005d0:	d07a      	beq.n	80006c8 <__aeabi_fdiv+0x230>
 80005d2:	003b      	movs	r3, r7
 80005d4:	337f      	adds	r3, #127	@ 0x7f
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	dd2d      	ble.n	8000636 <__aeabi_fdiv+0x19e>
 80005da:	4642      	mov	r2, r8
 80005dc:	0752      	lsls	r2, r2, #29
 80005de:	d007      	beq.n	80005f0 <__aeabi_fdiv+0x158>
 80005e0:	220f      	movs	r2, #15
 80005e2:	4641      	mov	r1, r8
 80005e4:	400a      	ands	r2, r1
 80005e6:	2a04      	cmp	r2, #4
 80005e8:	d002      	beq.n	80005f0 <__aeabi_fdiv+0x158>
 80005ea:	2204      	movs	r2, #4
 80005ec:	4694      	mov	ip, r2
 80005ee:	44e0      	add	r8, ip
 80005f0:	4642      	mov	r2, r8
 80005f2:	0112      	lsls	r2, r2, #4
 80005f4:	d505      	bpl.n	8000602 <__aeabi_fdiv+0x16a>
 80005f6:	4642      	mov	r2, r8
 80005f8:	4b36      	ldr	r3, [pc, #216]	@ (80006d4 <__aeabi_fdiv+0x23c>)
 80005fa:	401a      	ands	r2, r3
 80005fc:	003b      	movs	r3, r7
 80005fe:	4690      	mov	r8, r2
 8000600:	3380      	adds	r3, #128	@ 0x80
 8000602:	2bfe      	cmp	r3, #254	@ 0xfe
 8000604:	dcc8      	bgt.n	8000598 <__aeabi_fdiv+0x100>
 8000606:	4642      	mov	r2, r8
 8000608:	0192      	lsls	r2, r2, #6
 800060a:	0a52      	lsrs	r2, r2, #9
 800060c:	b2d8      	uxtb	r0, r3
 800060e:	e7c5      	b.n	800059c <__aeabi_fdiv+0x104>
 8000610:	2280      	movs	r2, #128	@ 0x80
 8000612:	2500      	movs	r5, #0
 8000614:	20ff      	movs	r0, #255	@ 0xff
 8000616:	03d2      	lsls	r2, r2, #15
 8000618:	e7c0      	b.n	800059c <__aeabi_fdiv+0x104>
 800061a:	2280      	movs	r2, #128	@ 0x80
 800061c:	03d2      	lsls	r2, r2, #15
 800061e:	4214      	tst	r4, r2
 8000620:	d002      	beq.n	8000628 <__aeabi_fdiv+0x190>
 8000622:	4643      	mov	r3, r8
 8000624:	4213      	tst	r3, r2
 8000626:	d049      	beq.n	80006bc <__aeabi_fdiv+0x224>
 8000628:	2280      	movs	r2, #128	@ 0x80
 800062a:	03d2      	lsls	r2, r2, #15
 800062c:	4322      	orrs	r2, r4
 800062e:	0252      	lsls	r2, r2, #9
 8000630:	20ff      	movs	r0, #255	@ 0xff
 8000632:	0a52      	lsrs	r2, r2, #9
 8000634:	e7b2      	b.n	800059c <__aeabi_fdiv+0x104>
 8000636:	2201      	movs	r2, #1
 8000638:	1ad3      	subs	r3, r2, r3
 800063a:	2b1b      	cmp	r3, #27
 800063c:	dcc3      	bgt.n	80005c6 <__aeabi_fdiv+0x12e>
 800063e:	4642      	mov	r2, r8
 8000640:	40da      	lsrs	r2, r3
 8000642:	4643      	mov	r3, r8
 8000644:	379e      	adds	r7, #158	@ 0x9e
 8000646:	40bb      	lsls	r3, r7
 8000648:	1e59      	subs	r1, r3, #1
 800064a:	418b      	sbcs	r3, r1
 800064c:	431a      	orrs	r2, r3
 800064e:	0753      	lsls	r3, r2, #29
 8000650:	d004      	beq.n	800065c <__aeabi_fdiv+0x1c4>
 8000652:	230f      	movs	r3, #15
 8000654:	4013      	ands	r3, r2
 8000656:	2b04      	cmp	r3, #4
 8000658:	d000      	beq.n	800065c <__aeabi_fdiv+0x1c4>
 800065a:	3204      	adds	r2, #4
 800065c:	0153      	lsls	r3, r2, #5
 800065e:	d529      	bpl.n	80006b4 <__aeabi_fdiv+0x21c>
 8000660:	2001      	movs	r0, #1
 8000662:	2200      	movs	r2, #0
 8000664:	e79a      	b.n	800059c <__aeabi_fdiv+0x104>
 8000666:	4642      	mov	r2, r8
 8000668:	0163      	lsls	r3, r4, #5
 800066a:	0155      	lsls	r5, r2, #5
 800066c:	42ab      	cmp	r3, r5
 800066e:	d215      	bcs.n	800069c <__aeabi_fdiv+0x204>
 8000670:	201b      	movs	r0, #27
 8000672:	2200      	movs	r2, #0
 8000674:	3f01      	subs	r7, #1
 8000676:	2601      	movs	r6, #1
 8000678:	001c      	movs	r4, r3
 800067a:	0052      	lsls	r2, r2, #1
 800067c:	005b      	lsls	r3, r3, #1
 800067e:	2c00      	cmp	r4, #0
 8000680:	db01      	blt.n	8000686 <__aeabi_fdiv+0x1ee>
 8000682:	429d      	cmp	r5, r3
 8000684:	d801      	bhi.n	800068a <__aeabi_fdiv+0x1f2>
 8000686:	1b5b      	subs	r3, r3, r5
 8000688:	4332      	orrs	r2, r6
 800068a:	3801      	subs	r0, #1
 800068c:	2800      	cmp	r0, #0
 800068e:	d1f3      	bne.n	8000678 <__aeabi_fdiv+0x1e0>
 8000690:	1e58      	subs	r0, r3, #1
 8000692:	4183      	sbcs	r3, r0
 8000694:	4313      	orrs	r3, r2
 8000696:	4698      	mov	r8, r3
 8000698:	000d      	movs	r5, r1
 800069a:	e79a      	b.n	80005d2 <__aeabi_fdiv+0x13a>
 800069c:	201a      	movs	r0, #26
 800069e:	2201      	movs	r2, #1
 80006a0:	1b5b      	subs	r3, r3, r5
 80006a2:	e7e8      	b.n	8000676 <__aeabi_fdiv+0x1de>
 80006a4:	3b02      	subs	r3, #2
 80006a6:	425a      	negs	r2, r3
 80006a8:	4153      	adcs	r3, r2
 80006aa:	425b      	negs	r3, r3
 80006ac:	0035      	movs	r5, r6
 80006ae:	2200      	movs	r2, #0
 80006b0:	b2d8      	uxtb	r0, r3
 80006b2:	e773      	b.n	800059c <__aeabi_fdiv+0x104>
 80006b4:	0192      	lsls	r2, r2, #6
 80006b6:	2000      	movs	r0, #0
 80006b8:	0a52      	lsrs	r2, r2, #9
 80006ba:	e76f      	b.n	800059c <__aeabi_fdiv+0x104>
 80006bc:	431a      	orrs	r2, r3
 80006be:	0252      	lsls	r2, r2, #9
 80006c0:	0035      	movs	r5, r6
 80006c2:	20ff      	movs	r0, #255	@ 0xff
 80006c4:	0a52      	lsrs	r2, r2, #9
 80006c6:	e769      	b.n	800059c <__aeabi_fdiv+0x104>
 80006c8:	4644      	mov	r4, r8
 80006ca:	e7ad      	b.n	8000628 <__aeabi_fdiv+0x190>
 80006cc:	08007b5c 	.word	0x08007b5c
 80006d0:	08007b9c 	.word	0x08007b9c
 80006d4:	f7ffffff 	.word	0xf7ffffff

080006d8 <__eqsf2>:
 80006d8:	b570      	push	{r4, r5, r6, lr}
 80006da:	0042      	lsls	r2, r0, #1
 80006dc:	024e      	lsls	r6, r1, #9
 80006de:	004c      	lsls	r4, r1, #1
 80006e0:	0245      	lsls	r5, r0, #9
 80006e2:	0a6d      	lsrs	r5, r5, #9
 80006e4:	0e12      	lsrs	r2, r2, #24
 80006e6:	0fc3      	lsrs	r3, r0, #31
 80006e8:	0a76      	lsrs	r6, r6, #9
 80006ea:	0e24      	lsrs	r4, r4, #24
 80006ec:	0fc9      	lsrs	r1, r1, #31
 80006ee:	2aff      	cmp	r2, #255	@ 0xff
 80006f0:	d010      	beq.n	8000714 <__eqsf2+0x3c>
 80006f2:	2cff      	cmp	r4, #255	@ 0xff
 80006f4:	d00c      	beq.n	8000710 <__eqsf2+0x38>
 80006f6:	2001      	movs	r0, #1
 80006f8:	42a2      	cmp	r2, r4
 80006fa:	d10a      	bne.n	8000712 <__eqsf2+0x3a>
 80006fc:	42b5      	cmp	r5, r6
 80006fe:	d108      	bne.n	8000712 <__eqsf2+0x3a>
 8000700:	428b      	cmp	r3, r1
 8000702:	d00f      	beq.n	8000724 <__eqsf2+0x4c>
 8000704:	2a00      	cmp	r2, #0
 8000706:	d104      	bne.n	8000712 <__eqsf2+0x3a>
 8000708:	0028      	movs	r0, r5
 800070a:	1e43      	subs	r3, r0, #1
 800070c:	4198      	sbcs	r0, r3
 800070e:	e000      	b.n	8000712 <__eqsf2+0x3a>
 8000710:	2001      	movs	r0, #1
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	2001      	movs	r0, #1
 8000716:	2cff      	cmp	r4, #255	@ 0xff
 8000718:	d1fb      	bne.n	8000712 <__eqsf2+0x3a>
 800071a:	4335      	orrs	r5, r6
 800071c:	d1f9      	bne.n	8000712 <__eqsf2+0x3a>
 800071e:	404b      	eors	r3, r1
 8000720:	0018      	movs	r0, r3
 8000722:	e7f6      	b.n	8000712 <__eqsf2+0x3a>
 8000724:	2000      	movs	r0, #0
 8000726:	e7f4      	b.n	8000712 <__eqsf2+0x3a>

08000728 <__gesf2>:
 8000728:	b530      	push	{r4, r5, lr}
 800072a:	0042      	lsls	r2, r0, #1
 800072c:	0244      	lsls	r4, r0, #9
 800072e:	024d      	lsls	r5, r1, #9
 8000730:	0fc3      	lsrs	r3, r0, #31
 8000732:	0048      	lsls	r0, r1, #1
 8000734:	0a64      	lsrs	r4, r4, #9
 8000736:	0e12      	lsrs	r2, r2, #24
 8000738:	0a6d      	lsrs	r5, r5, #9
 800073a:	0e00      	lsrs	r0, r0, #24
 800073c:	0fc9      	lsrs	r1, r1, #31
 800073e:	2aff      	cmp	r2, #255	@ 0xff
 8000740:	d019      	beq.n	8000776 <__gesf2+0x4e>
 8000742:	28ff      	cmp	r0, #255	@ 0xff
 8000744:	d00b      	beq.n	800075e <__gesf2+0x36>
 8000746:	2a00      	cmp	r2, #0
 8000748:	d11e      	bne.n	8000788 <__gesf2+0x60>
 800074a:	2800      	cmp	r0, #0
 800074c:	d10b      	bne.n	8000766 <__gesf2+0x3e>
 800074e:	2d00      	cmp	r5, #0
 8000750:	d027      	beq.n	80007a2 <__gesf2+0x7a>
 8000752:	2c00      	cmp	r4, #0
 8000754:	d134      	bne.n	80007c0 <__gesf2+0x98>
 8000756:	2900      	cmp	r1, #0
 8000758:	d02f      	beq.n	80007ba <__gesf2+0x92>
 800075a:	0008      	movs	r0, r1
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	2d00      	cmp	r5, #0
 8000760:	d128      	bne.n	80007b4 <__gesf2+0x8c>
 8000762:	2a00      	cmp	r2, #0
 8000764:	d101      	bne.n	800076a <__gesf2+0x42>
 8000766:	2c00      	cmp	r4, #0
 8000768:	d0f5      	beq.n	8000756 <__gesf2+0x2e>
 800076a:	428b      	cmp	r3, r1
 800076c:	d107      	bne.n	800077e <__gesf2+0x56>
 800076e:	2b00      	cmp	r3, #0
 8000770:	d023      	beq.n	80007ba <__gesf2+0x92>
 8000772:	0018      	movs	r0, r3
 8000774:	e7f2      	b.n	800075c <__gesf2+0x34>
 8000776:	2c00      	cmp	r4, #0
 8000778:	d11c      	bne.n	80007b4 <__gesf2+0x8c>
 800077a:	28ff      	cmp	r0, #255	@ 0xff
 800077c:	d014      	beq.n	80007a8 <__gesf2+0x80>
 800077e:	1e58      	subs	r0, r3, #1
 8000780:	2302      	movs	r3, #2
 8000782:	4018      	ands	r0, r3
 8000784:	3801      	subs	r0, #1
 8000786:	e7e9      	b.n	800075c <__gesf2+0x34>
 8000788:	2800      	cmp	r0, #0
 800078a:	d0f8      	beq.n	800077e <__gesf2+0x56>
 800078c:	428b      	cmp	r3, r1
 800078e:	d1f6      	bne.n	800077e <__gesf2+0x56>
 8000790:	4282      	cmp	r2, r0
 8000792:	dcf4      	bgt.n	800077e <__gesf2+0x56>
 8000794:	dbeb      	blt.n	800076e <__gesf2+0x46>
 8000796:	42ac      	cmp	r4, r5
 8000798:	d8f1      	bhi.n	800077e <__gesf2+0x56>
 800079a:	2000      	movs	r0, #0
 800079c:	42ac      	cmp	r4, r5
 800079e:	d2dd      	bcs.n	800075c <__gesf2+0x34>
 80007a0:	e7e5      	b.n	800076e <__gesf2+0x46>
 80007a2:	2c00      	cmp	r4, #0
 80007a4:	d0da      	beq.n	800075c <__gesf2+0x34>
 80007a6:	e7ea      	b.n	800077e <__gesf2+0x56>
 80007a8:	2d00      	cmp	r5, #0
 80007aa:	d103      	bne.n	80007b4 <__gesf2+0x8c>
 80007ac:	428b      	cmp	r3, r1
 80007ae:	d1e6      	bne.n	800077e <__gesf2+0x56>
 80007b0:	2000      	movs	r0, #0
 80007b2:	e7d3      	b.n	800075c <__gesf2+0x34>
 80007b4:	2002      	movs	r0, #2
 80007b6:	4240      	negs	r0, r0
 80007b8:	e7d0      	b.n	800075c <__gesf2+0x34>
 80007ba:	2001      	movs	r0, #1
 80007bc:	4240      	negs	r0, r0
 80007be:	e7cd      	b.n	800075c <__gesf2+0x34>
 80007c0:	428b      	cmp	r3, r1
 80007c2:	d0e8      	beq.n	8000796 <__gesf2+0x6e>
 80007c4:	e7db      	b.n	800077e <__gesf2+0x56>
 80007c6:	46c0      	nop			@ (mov r8, r8)

080007c8 <__lesf2>:
 80007c8:	b530      	push	{r4, r5, lr}
 80007ca:	0042      	lsls	r2, r0, #1
 80007cc:	0244      	lsls	r4, r0, #9
 80007ce:	024d      	lsls	r5, r1, #9
 80007d0:	0fc3      	lsrs	r3, r0, #31
 80007d2:	0048      	lsls	r0, r1, #1
 80007d4:	0a64      	lsrs	r4, r4, #9
 80007d6:	0e12      	lsrs	r2, r2, #24
 80007d8:	0a6d      	lsrs	r5, r5, #9
 80007da:	0e00      	lsrs	r0, r0, #24
 80007dc:	0fc9      	lsrs	r1, r1, #31
 80007de:	2aff      	cmp	r2, #255	@ 0xff
 80007e0:	d01a      	beq.n	8000818 <__lesf2+0x50>
 80007e2:	28ff      	cmp	r0, #255	@ 0xff
 80007e4:	d00e      	beq.n	8000804 <__lesf2+0x3c>
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	d11e      	bne.n	8000828 <__lesf2+0x60>
 80007ea:	2800      	cmp	r0, #0
 80007ec:	d10e      	bne.n	800080c <__lesf2+0x44>
 80007ee:	2d00      	cmp	r5, #0
 80007f0:	d02a      	beq.n	8000848 <__lesf2+0x80>
 80007f2:	2c00      	cmp	r4, #0
 80007f4:	d00c      	beq.n	8000810 <__lesf2+0x48>
 80007f6:	428b      	cmp	r3, r1
 80007f8:	d01d      	beq.n	8000836 <__lesf2+0x6e>
 80007fa:	1e58      	subs	r0, r3, #1
 80007fc:	2302      	movs	r3, #2
 80007fe:	4018      	ands	r0, r3
 8000800:	3801      	subs	r0, #1
 8000802:	e010      	b.n	8000826 <__lesf2+0x5e>
 8000804:	2d00      	cmp	r5, #0
 8000806:	d10d      	bne.n	8000824 <__lesf2+0x5c>
 8000808:	2a00      	cmp	r2, #0
 800080a:	d120      	bne.n	800084e <__lesf2+0x86>
 800080c:	2c00      	cmp	r4, #0
 800080e:	d11e      	bne.n	800084e <__lesf2+0x86>
 8000810:	2900      	cmp	r1, #0
 8000812:	d023      	beq.n	800085c <__lesf2+0x94>
 8000814:	0008      	movs	r0, r1
 8000816:	e006      	b.n	8000826 <__lesf2+0x5e>
 8000818:	2c00      	cmp	r4, #0
 800081a:	d103      	bne.n	8000824 <__lesf2+0x5c>
 800081c:	28ff      	cmp	r0, #255	@ 0xff
 800081e:	d1ec      	bne.n	80007fa <__lesf2+0x32>
 8000820:	2d00      	cmp	r5, #0
 8000822:	d017      	beq.n	8000854 <__lesf2+0x8c>
 8000824:	2002      	movs	r0, #2
 8000826:	bd30      	pop	{r4, r5, pc}
 8000828:	2800      	cmp	r0, #0
 800082a:	d0e6      	beq.n	80007fa <__lesf2+0x32>
 800082c:	428b      	cmp	r3, r1
 800082e:	d1e4      	bne.n	80007fa <__lesf2+0x32>
 8000830:	4282      	cmp	r2, r0
 8000832:	dce2      	bgt.n	80007fa <__lesf2+0x32>
 8000834:	db04      	blt.n	8000840 <__lesf2+0x78>
 8000836:	42ac      	cmp	r4, r5
 8000838:	d8df      	bhi.n	80007fa <__lesf2+0x32>
 800083a:	2000      	movs	r0, #0
 800083c:	42ac      	cmp	r4, r5
 800083e:	d2f2      	bcs.n	8000826 <__lesf2+0x5e>
 8000840:	2b00      	cmp	r3, #0
 8000842:	d00b      	beq.n	800085c <__lesf2+0x94>
 8000844:	0018      	movs	r0, r3
 8000846:	e7ee      	b.n	8000826 <__lesf2+0x5e>
 8000848:	2c00      	cmp	r4, #0
 800084a:	d0ec      	beq.n	8000826 <__lesf2+0x5e>
 800084c:	e7d5      	b.n	80007fa <__lesf2+0x32>
 800084e:	428b      	cmp	r3, r1
 8000850:	d1d3      	bne.n	80007fa <__lesf2+0x32>
 8000852:	e7f5      	b.n	8000840 <__lesf2+0x78>
 8000854:	2000      	movs	r0, #0
 8000856:	428b      	cmp	r3, r1
 8000858:	d0e5      	beq.n	8000826 <__lesf2+0x5e>
 800085a:	e7ce      	b.n	80007fa <__lesf2+0x32>
 800085c:	2001      	movs	r0, #1
 800085e:	4240      	negs	r0, r0
 8000860:	e7e1      	b.n	8000826 <__lesf2+0x5e>
 8000862:	46c0      	nop			@ (mov r8, r8)

08000864 <__aeabi_fmul>:
 8000864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000866:	464f      	mov	r7, r9
 8000868:	4646      	mov	r6, r8
 800086a:	46d6      	mov	lr, sl
 800086c:	0243      	lsls	r3, r0, #9
 800086e:	0a5b      	lsrs	r3, r3, #9
 8000870:	0045      	lsls	r5, r0, #1
 8000872:	b5c0      	push	{r6, r7, lr}
 8000874:	4699      	mov	r9, r3
 8000876:	1c0f      	adds	r7, r1, #0
 8000878:	0e2d      	lsrs	r5, r5, #24
 800087a:	0fc6      	lsrs	r6, r0, #31
 800087c:	2d00      	cmp	r5, #0
 800087e:	d100      	bne.n	8000882 <__aeabi_fmul+0x1e>
 8000880:	e088      	b.n	8000994 <__aeabi_fmul+0x130>
 8000882:	2dff      	cmp	r5, #255	@ 0xff
 8000884:	d100      	bne.n	8000888 <__aeabi_fmul+0x24>
 8000886:	e08d      	b.n	80009a4 <__aeabi_fmul+0x140>
 8000888:	2280      	movs	r2, #128	@ 0x80
 800088a:	00db      	lsls	r3, r3, #3
 800088c:	04d2      	lsls	r2, r2, #19
 800088e:	431a      	orrs	r2, r3
 8000890:	2300      	movs	r3, #0
 8000892:	4691      	mov	r9, r2
 8000894:	4698      	mov	r8, r3
 8000896:	469a      	mov	sl, r3
 8000898:	3d7f      	subs	r5, #127	@ 0x7f
 800089a:	027c      	lsls	r4, r7, #9
 800089c:	007b      	lsls	r3, r7, #1
 800089e:	0a64      	lsrs	r4, r4, #9
 80008a0:	0e1b      	lsrs	r3, r3, #24
 80008a2:	0fff      	lsrs	r7, r7, #31
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d068      	beq.n	800097a <__aeabi_fmul+0x116>
 80008a8:	2bff      	cmp	r3, #255	@ 0xff
 80008aa:	d021      	beq.n	80008f0 <__aeabi_fmul+0x8c>
 80008ac:	2280      	movs	r2, #128	@ 0x80
 80008ae:	00e4      	lsls	r4, r4, #3
 80008b0:	04d2      	lsls	r2, r2, #19
 80008b2:	4314      	orrs	r4, r2
 80008b4:	4642      	mov	r2, r8
 80008b6:	3b7f      	subs	r3, #127	@ 0x7f
 80008b8:	195b      	adds	r3, r3, r5
 80008ba:	2100      	movs	r1, #0
 80008bc:	1c5d      	adds	r5, r3, #1
 80008be:	2a0a      	cmp	r2, #10
 80008c0:	dc2e      	bgt.n	8000920 <__aeabi_fmul+0xbc>
 80008c2:	407e      	eors	r6, r7
 80008c4:	4642      	mov	r2, r8
 80008c6:	2a02      	cmp	r2, #2
 80008c8:	dc23      	bgt.n	8000912 <__aeabi_fmul+0xae>
 80008ca:	3a01      	subs	r2, #1
 80008cc:	2a01      	cmp	r2, #1
 80008ce:	d900      	bls.n	80008d2 <__aeabi_fmul+0x6e>
 80008d0:	e0bd      	b.n	8000a4e <__aeabi_fmul+0x1ea>
 80008d2:	2902      	cmp	r1, #2
 80008d4:	d06e      	beq.n	80009b4 <__aeabi_fmul+0x150>
 80008d6:	2901      	cmp	r1, #1
 80008d8:	d12c      	bne.n	8000934 <__aeabi_fmul+0xd0>
 80008da:	2000      	movs	r0, #0
 80008dc:	2200      	movs	r2, #0
 80008de:	05c0      	lsls	r0, r0, #23
 80008e0:	07f6      	lsls	r6, r6, #31
 80008e2:	4310      	orrs	r0, r2
 80008e4:	4330      	orrs	r0, r6
 80008e6:	bce0      	pop	{r5, r6, r7}
 80008e8:	46ba      	mov	sl, r7
 80008ea:	46b1      	mov	r9, r6
 80008ec:	46a8      	mov	r8, r5
 80008ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008f0:	002b      	movs	r3, r5
 80008f2:	33ff      	adds	r3, #255	@ 0xff
 80008f4:	2c00      	cmp	r4, #0
 80008f6:	d065      	beq.n	80009c4 <__aeabi_fmul+0x160>
 80008f8:	2203      	movs	r2, #3
 80008fa:	4641      	mov	r1, r8
 80008fc:	4311      	orrs	r1, r2
 80008fe:	0032      	movs	r2, r6
 8000900:	3501      	adds	r5, #1
 8000902:	4688      	mov	r8, r1
 8000904:	407a      	eors	r2, r7
 8000906:	35ff      	adds	r5, #255	@ 0xff
 8000908:	290a      	cmp	r1, #10
 800090a:	dd00      	ble.n	800090e <__aeabi_fmul+0xaa>
 800090c:	e0d8      	b.n	8000ac0 <__aeabi_fmul+0x25c>
 800090e:	0016      	movs	r6, r2
 8000910:	2103      	movs	r1, #3
 8000912:	4640      	mov	r0, r8
 8000914:	2201      	movs	r2, #1
 8000916:	4082      	lsls	r2, r0
 8000918:	20a6      	movs	r0, #166	@ 0xa6
 800091a:	00c0      	lsls	r0, r0, #3
 800091c:	4202      	tst	r2, r0
 800091e:	d020      	beq.n	8000962 <__aeabi_fmul+0xfe>
 8000920:	4653      	mov	r3, sl
 8000922:	2b02      	cmp	r3, #2
 8000924:	d046      	beq.n	80009b4 <__aeabi_fmul+0x150>
 8000926:	2b03      	cmp	r3, #3
 8000928:	d100      	bne.n	800092c <__aeabi_fmul+0xc8>
 800092a:	e0bb      	b.n	8000aa4 <__aeabi_fmul+0x240>
 800092c:	4651      	mov	r1, sl
 800092e:	464c      	mov	r4, r9
 8000930:	2901      	cmp	r1, #1
 8000932:	d0d2      	beq.n	80008da <__aeabi_fmul+0x76>
 8000934:	002b      	movs	r3, r5
 8000936:	337f      	adds	r3, #127	@ 0x7f
 8000938:	2b00      	cmp	r3, #0
 800093a:	dd70      	ble.n	8000a1e <__aeabi_fmul+0x1ba>
 800093c:	0762      	lsls	r2, r4, #29
 800093e:	d004      	beq.n	800094a <__aeabi_fmul+0xe6>
 8000940:	220f      	movs	r2, #15
 8000942:	4022      	ands	r2, r4
 8000944:	2a04      	cmp	r2, #4
 8000946:	d000      	beq.n	800094a <__aeabi_fmul+0xe6>
 8000948:	3404      	adds	r4, #4
 800094a:	0122      	lsls	r2, r4, #4
 800094c:	d503      	bpl.n	8000956 <__aeabi_fmul+0xf2>
 800094e:	4b63      	ldr	r3, [pc, #396]	@ (8000adc <__aeabi_fmul+0x278>)
 8000950:	401c      	ands	r4, r3
 8000952:	002b      	movs	r3, r5
 8000954:	3380      	adds	r3, #128	@ 0x80
 8000956:	2bfe      	cmp	r3, #254	@ 0xfe
 8000958:	dc2c      	bgt.n	80009b4 <__aeabi_fmul+0x150>
 800095a:	01a2      	lsls	r2, r4, #6
 800095c:	0a52      	lsrs	r2, r2, #9
 800095e:	b2d8      	uxtb	r0, r3
 8000960:	e7bd      	b.n	80008de <__aeabi_fmul+0x7a>
 8000962:	2090      	movs	r0, #144	@ 0x90
 8000964:	0080      	lsls	r0, r0, #2
 8000966:	4202      	tst	r2, r0
 8000968:	d127      	bne.n	80009ba <__aeabi_fmul+0x156>
 800096a:	38b9      	subs	r0, #185	@ 0xb9
 800096c:	38ff      	subs	r0, #255	@ 0xff
 800096e:	4210      	tst	r0, r2
 8000970:	d06d      	beq.n	8000a4e <__aeabi_fmul+0x1ea>
 8000972:	003e      	movs	r6, r7
 8000974:	46a1      	mov	r9, r4
 8000976:	468a      	mov	sl, r1
 8000978:	e7d2      	b.n	8000920 <__aeabi_fmul+0xbc>
 800097a:	2c00      	cmp	r4, #0
 800097c:	d141      	bne.n	8000a02 <__aeabi_fmul+0x19e>
 800097e:	2301      	movs	r3, #1
 8000980:	4642      	mov	r2, r8
 8000982:	431a      	orrs	r2, r3
 8000984:	4690      	mov	r8, r2
 8000986:	002b      	movs	r3, r5
 8000988:	4642      	mov	r2, r8
 800098a:	2101      	movs	r1, #1
 800098c:	1c5d      	adds	r5, r3, #1
 800098e:	2a0a      	cmp	r2, #10
 8000990:	dd97      	ble.n	80008c2 <__aeabi_fmul+0x5e>
 8000992:	e7c5      	b.n	8000920 <__aeabi_fmul+0xbc>
 8000994:	2b00      	cmp	r3, #0
 8000996:	d126      	bne.n	80009e6 <__aeabi_fmul+0x182>
 8000998:	2304      	movs	r3, #4
 800099a:	4698      	mov	r8, r3
 800099c:	3b03      	subs	r3, #3
 800099e:	2500      	movs	r5, #0
 80009a0:	469a      	mov	sl, r3
 80009a2:	e77a      	b.n	800089a <__aeabi_fmul+0x36>
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d118      	bne.n	80009da <__aeabi_fmul+0x176>
 80009a8:	2308      	movs	r3, #8
 80009aa:	4698      	mov	r8, r3
 80009ac:	3b06      	subs	r3, #6
 80009ae:	25ff      	movs	r5, #255	@ 0xff
 80009b0:	469a      	mov	sl, r3
 80009b2:	e772      	b.n	800089a <__aeabi_fmul+0x36>
 80009b4:	20ff      	movs	r0, #255	@ 0xff
 80009b6:	2200      	movs	r2, #0
 80009b8:	e791      	b.n	80008de <__aeabi_fmul+0x7a>
 80009ba:	2280      	movs	r2, #128	@ 0x80
 80009bc:	2600      	movs	r6, #0
 80009be:	20ff      	movs	r0, #255	@ 0xff
 80009c0:	03d2      	lsls	r2, r2, #15
 80009c2:	e78c      	b.n	80008de <__aeabi_fmul+0x7a>
 80009c4:	4641      	mov	r1, r8
 80009c6:	2202      	movs	r2, #2
 80009c8:	3501      	adds	r5, #1
 80009ca:	4311      	orrs	r1, r2
 80009cc:	4688      	mov	r8, r1
 80009ce:	35ff      	adds	r5, #255	@ 0xff
 80009d0:	290a      	cmp	r1, #10
 80009d2:	dca5      	bgt.n	8000920 <__aeabi_fmul+0xbc>
 80009d4:	2102      	movs	r1, #2
 80009d6:	407e      	eors	r6, r7
 80009d8:	e774      	b.n	80008c4 <__aeabi_fmul+0x60>
 80009da:	230c      	movs	r3, #12
 80009dc:	4698      	mov	r8, r3
 80009de:	3b09      	subs	r3, #9
 80009e0:	25ff      	movs	r5, #255	@ 0xff
 80009e2:	469a      	mov	sl, r3
 80009e4:	e759      	b.n	800089a <__aeabi_fmul+0x36>
 80009e6:	0018      	movs	r0, r3
 80009e8:	f000 facc 	bl	8000f84 <__clzsi2>
 80009ec:	464a      	mov	r2, r9
 80009ee:	1f43      	subs	r3, r0, #5
 80009f0:	2576      	movs	r5, #118	@ 0x76
 80009f2:	409a      	lsls	r2, r3
 80009f4:	2300      	movs	r3, #0
 80009f6:	426d      	negs	r5, r5
 80009f8:	4691      	mov	r9, r2
 80009fa:	4698      	mov	r8, r3
 80009fc:	469a      	mov	sl, r3
 80009fe:	1a2d      	subs	r5, r5, r0
 8000a00:	e74b      	b.n	800089a <__aeabi_fmul+0x36>
 8000a02:	0020      	movs	r0, r4
 8000a04:	f000 fabe 	bl	8000f84 <__clzsi2>
 8000a08:	4642      	mov	r2, r8
 8000a0a:	1f43      	subs	r3, r0, #5
 8000a0c:	409c      	lsls	r4, r3
 8000a0e:	1a2b      	subs	r3, r5, r0
 8000a10:	3b76      	subs	r3, #118	@ 0x76
 8000a12:	2100      	movs	r1, #0
 8000a14:	1c5d      	adds	r5, r3, #1
 8000a16:	2a0a      	cmp	r2, #10
 8000a18:	dc00      	bgt.n	8000a1c <__aeabi_fmul+0x1b8>
 8000a1a:	e752      	b.n	80008c2 <__aeabi_fmul+0x5e>
 8000a1c:	e780      	b.n	8000920 <__aeabi_fmul+0xbc>
 8000a1e:	2201      	movs	r2, #1
 8000a20:	1ad3      	subs	r3, r2, r3
 8000a22:	2b1b      	cmp	r3, #27
 8000a24:	dd00      	ble.n	8000a28 <__aeabi_fmul+0x1c4>
 8000a26:	e758      	b.n	80008da <__aeabi_fmul+0x76>
 8000a28:	359e      	adds	r5, #158	@ 0x9e
 8000a2a:	0022      	movs	r2, r4
 8000a2c:	40ac      	lsls	r4, r5
 8000a2e:	40da      	lsrs	r2, r3
 8000a30:	1e63      	subs	r3, r4, #1
 8000a32:	419c      	sbcs	r4, r3
 8000a34:	4322      	orrs	r2, r4
 8000a36:	0753      	lsls	r3, r2, #29
 8000a38:	d004      	beq.n	8000a44 <__aeabi_fmul+0x1e0>
 8000a3a:	230f      	movs	r3, #15
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	2b04      	cmp	r3, #4
 8000a40:	d000      	beq.n	8000a44 <__aeabi_fmul+0x1e0>
 8000a42:	3204      	adds	r2, #4
 8000a44:	0153      	lsls	r3, r2, #5
 8000a46:	d537      	bpl.n	8000ab8 <__aeabi_fmul+0x254>
 8000a48:	2001      	movs	r0, #1
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	e747      	b.n	80008de <__aeabi_fmul+0x7a>
 8000a4e:	0c21      	lsrs	r1, r4, #16
 8000a50:	464a      	mov	r2, r9
 8000a52:	0424      	lsls	r4, r4, #16
 8000a54:	0c24      	lsrs	r4, r4, #16
 8000a56:	0027      	movs	r7, r4
 8000a58:	0c10      	lsrs	r0, r2, #16
 8000a5a:	0412      	lsls	r2, r2, #16
 8000a5c:	0c12      	lsrs	r2, r2, #16
 8000a5e:	4344      	muls	r4, r0
 8000a60:	4357      	muls	r7, r2
 8000a62:	4348      	muls	r0, r1
 8000a64:	4351      	muls	r1, r2
 8000a66:	0c3a      	lsrs	r2, r7, #16
 8000a68:	1909      	adds	r1, r1, r4
 8000a6a:	1852      	adds	r2, r2, r1
 8000a6c:	4294      	cmp	r4, r2
 8000a6e:	d903      	bls.n	8000a78 <__aeabi_fmul+0x214>
 8000a70:	2180      	movs	r1, #128	@ 0x80
 8000a72:	0249      	lsls	r1, r1, #9
 8000a74:	468c      	mov	ip, r1
 8000a76:	4460      	add	r0, ip
 8000a78:	043f      	lsls	r7, r7, #16
 8000a7a:	0411      	lsls	r1, r2, #16
 8000a7c:	0c3f      	lsrs	r7, r7, #16
 8000a7e:	19c9      	adds	r1, r1, r7
 8000a80:	018c      	lsls	r4, r1, #6
 8000a82:	1e67      	subs	r7, r4, #1
 8000a84:	41bc      	sbcs	r4, r7
 8000a86:	0c12      	lsrs	r2, r2, #16
 8000a88:	0e89      	lsrs	r1, r1, #26
 8000a8a:	1812      	adds	r2, r2, r0
 8000a8c:	430c      	orrs	r4, r1
 8000a8e:	0192      	lsls	r2, r2, #6
 8000a90:	4314      	orrs	r4, r2
 8000a92:	0112      	lsls	r2, r2, #4
 8000a94:	d50e      	bpl.n	8000ab4 <__aeabi_fmul+0x250>
 8000a96:	2301      	movs	r3, #1
 8000a98:	0862      	lsrs	r2, r4, #1
 8000a9a:	401c      	ands	r4, r3
 8000a9c:	4314      	orrs	r4, r2
 8000a9e:	e749      	b.n	8000934 <__aeabi_fmul+0xd0>
 8000aa0:	003e      	movs	r6, r7
 8000aa2:	46a1      	mov	r9, r4
 8000aa4:	2280      	movs	r2, #128	@ 0x80
 8000aa6:	464b      	mov	r3, r9
 8000aa8:	03d2      	lsls	r2, r2, #15
 8000aaa:	431a      	orrs	r2, r3
 8000aac:	0252      	lsls	r2, r2, #9
 8000aae:	20ff      	movs	r0, #255	@ 0xff
 8000ab0:	0a52      	lsrs	r2, r2, #9
 8000ab2:	e714      	b.n	80008de <__aeabi_fmul+0x7a>
 8000ab4:	001d      	movs	r5, r3
 8000ab6:	e73d      	b.n	8000934 <__aeabi_fmul+0xd0>
 8000ab8:	0192      	lsls	r2, r2, #6
 8000aba:	2000      	movs	r0, #0
 8000abc:	0a52      	lsrs	r2, r2, #9
 8000abe:	e70e      	b.n	80008de <__aeabi_fmul+0x7a>
 8000ac0:	290f      	cmp	r1, #15
 8000ac2:	d1ed      	bne.n	8000aa0 <__aeabi_fmul+0x23c>
 8000ac4:	2280      	movs	r2, #128	@ 0x80
 8000ac6:	464b      	mov	r3, r9
 8000ac8:	03d2      	lsls	r2, r2, #15
 8000aca:	4213      	tst	r3, r2
 8000acc:	d0ea      	beq.n	8000aa4 <__aeabi_fmul+0x240>
 8000ace:	4214      	tst	r4, r2
 8000ad0:	d1e8      	bne.n	8000aa4 <__aeabi_fmul+0x240>
 8000ad2:	003e      	movs	r6, r7
 8000ad4:	20ff      	movs	r0, #255	@ 0xff
 8000ad6:	4322      	orrs	r2, r4
 8000ad8:	e701      	b.n	80008de <__aeabi_fmul+0x7a>
 8000ada:	46c0      	nop			@ (mov r8, r8)
 8000adc:	f7ffffff 	.word	0xf7ffffff

08000ae0 <__aeabi_fsub>:
 8000ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ae2:	4647      	mov	r7, r8
 8000ae4:	46ce      	mov	lr, r9
 8000ae6:	024e      	lsls	r6, r1, #9
 8000ae8:	0243      	lsls	r3, r0, #9
 8000aea:	0045      	lsls	r5, r0, #1
 8000aec:	0a72      	lsrs	r2, r6, #9
 8000aee:	0fc4      	lsrs	r4, r0, #31
 8000af0:	0048      	lsls	r0, r1, #1
 8000af2:	b580      	push	{r7, lr}
 8000af4:	4694      	mov	ip, r2
 8000af6:	0a5f      	lsrs	r7, r3, #9
 8000af8:	0e2d      	lsrs	r5, r5, #24
 8000afa:	099b      	lsrs	r3, r3, #6
 8000afc:	0e00      	lsrs	r0, r0, #24
 8000afe:	0fc9      	lsrs	r1, r1, #31
 8000b00:	09b6      	lsrs	r6, r6, #6
 8000b02:	28ff      	cmp	r0, #255	@ 0xff
 8000b04:	d024      	beq.n	8000b50 <__aeabi_fsub+0x70>
 8000b06:	2201      	movs	r2, #1
 8000b08:	4051      	eors	r1, r2
 8000b0a:	1a2a      	subs	r2, r5, r0
 8000b0c:	428c      	cmp	r4, r1
 8000b0e:	d00f      	beq.n	8000b30 <__aeabi_fsub+0x50>
 8000b10:	2a00      	cmp	r2, #0
 8000b12:	dc00      	bgt.n	8000b16 <__aeabi_fsub+0x36>
 8000b14:	e16a      	b.n	8000dec <__aeabi_fsub+0x30c>
 8000b16:	2800      	cmp	r0, #0
 8000b18:	d135      	bne.n	8000b86 <__aeabi_fsub+0xa6>
 8000b1a:	2e00      	cmp	r6, #0
 8000b1c:	d100      	bne.n	8000b20 <__aeabi_fsub+0x40>
 8000b1e:	e0a2      	b.n	8000c66 <__aeabi_fsub+0x186>
 8000b20:	1e51      	subs	r1, r2, #1
 8000b22:	2a01      	cmp	r2, #1
 8000b24:	d100      	bne.n	8000b28 <__aeabi_fsub+0x48>
 8000b26:	e124      	b.n	8000d72 <__aeabi_fsub+0x292>
 8000b28:	2aff      	cmp	r2, #255	@ 0xff
 8000b2a:	d021      	beq.n	8000b70 <__aeabi_fsub+0x90>
 8000b2c:	000a      	movs	r2, r1
 8000b2e:	e02f      	b.n	8000b90 <__aeabi_fsub+0xb0>
 8000b30:	2a00      	cmp	r2, #0
 8000b32:	dc00      	bgt.n	8000b36 <__aeabi_fsub+0x56>
 8000b34:	e167      	b.n	8000e06 <__aeabi_fsub+0x326>
 8000b36:	2800      	cmp	r0, #0
 8000b38:	d05e      	beq.n	8000bf8 <__aeabi_fsub+0x118>
 8000b3a:	2dff      	cmp	r5, #255	@ 0xff
 8000b3c:	d018      	beq.n	8000b70 <__aeabi_fsub+0x90>
 8000b3e:	2180      	movs	r1, #128	@ 0x80
 8000b40:	04c9      	lsls	r1, r1, #19
 8000b42:	430e      	orrs	r6, r1
 8000b44:	2a1b      	cmp	r2, #27
 8000b46:	dc00      	bgt.n	8000b4a <__aeabi_fsub+0x6a>
 8000b48:	e076      	b.n	8000c38 <__aeabi_fsub+0x158>
 8000b4a:	002a      	movs	r2, r5
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	e032      	b.n	8000bb6 <__aeabi_fsub+0xd6>
 8000b50:	002a      	movs	r2, r5
 8000b52:	3aff      	subs	r2, #255	@ 0xff
 8000b54:	4691      	mov	r9, r2
 8000b56:	2e00      	cmp	r6, #0
 8000b58:	d042      	beq.n	8000be0 <__aeabi_fsub+0x100>
 8000b5a:	428c      	cmp	r4, r1
 8000b5c:	d055      	beq.n	8000c0a <__aeabi_fsub+0x12a>
 8000b5e:	464a      	mov	r2, r9
 8000b60:	2a00      	cmp	r2, #0
 8000b62:	d100      	bne.n	8000b66 <__aeabi_fsub+0x86>
 8000b64:	e09c      	b.n	8000ca0 <__aeabi_fsub+0x1c0>
 8000b66:	2d00      	cmp	r5, #0
 8000b68:	d100      	bne.n	8000b6c <__aeabi_fsub+0x8c>
 8000b6a:	e077      	b.n	8000c5c <__aeabi_fsub+0x17c>
 8000b6c:	000c      	movs	r4, r1
 8000b6e:	0033      	movs	r3, r6
 8000b70:	08db      	lsrs	r3, r3, #3
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d100      	bne.n	8000b78 <__aeabi_fsub+0x98>
 8000b76:	e06e      	b.n	8000c56 <__aeabi_fsub+0x176>
 8000b78:	2280      	movs	r2, #128	@ 0x80
 8000b7a:	03d2      	lsls	r2, r2, #15
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	025b      	lsls	r3, r3, #9
 8000b80:	20ff      	movs	r0, #255	@ 0xff
 8000b82:	0a5b      	lsrs	r3, r3, #9
 8000b84:	e024      	b.n	8000bd0 <__aeabi_fsub+0xf0>
 8000b86:	2dff      	cmp	r5, #255	@ 0xff
 8000b88:	d0f2      	beq.n	8000b70 <__aeabi_fsub+0x90>
 8000b8a:	2180      	movs	r1, #128	@ 0x80
 8000b8c:	04c9      	lsls	r1, r1, #19
 8000b8e:	430e      	orrs	r6, r1
 8000b90:	2101      	movs	r1, #1
 8000b92:	2a1b      	cmp	r2, #27
 8000b94:	dc08      	bgt.n	8000ba8 <__aeabi_fsub+0xc8>
 8000b96:	0031      	movs	r1, r6
 8000b98:	2020      	movs	r0, #32
 8000b9a:	40d1      	lsrs	r1, r2
 8000b9c:	1a82      	subs	r2, r0, r2
 8000b9e:	4096      	lsls	r6, r2
 8000ba0:	0032      	movs	r2, r6
 8000ba2:	1e50      	subs	r0, r2, #1
 8000ba4:	4182      	sbcs	r2, r0
 8000ba6:	4311      	orrs	r1, r2
 8000ba8:	1a5b      	subs	r3, r3, r1
 8000baa:	015a      	lsls	r2, r3, #5
 8000bac:	d460      	bmi.n	8000c70 <__aeabi_fsub+0x190>
 8000bae:	2107      	movs	r1, #7
 8000bb0:	002a      	movs	r2, r5
 8000bb2:	4019      	ands	r1, r3
 8000bb4:	d057      	beq.n	8000c66 <__aeabi_fsub+0x186>
 8000bb6:	210f      	movs	r1, #15
 8000bb8:	4019      	ands	r1, r3
 8000bba:	2904      	cmp	r1, #4
 8000bbc:	d000      	beq.n	8000bc0 <__aeabi_fsub+0xe0>
 8000bbe:	3304      	adds	r3, #4
 8000bc0:	0159      	lsls	r1, r3, #5
 8000bc2:	d550      	bpl.n	8000c66 <__aeabi_fsub+0x186>
 8000bc4:	1c50      	adds	r0, r2, #1
 8000bc6:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc8:	d045      	beq.n	8000c56 <__aeabi_fsub+0x176>
 8000bca:	019b      	lsls	r3, r3, #6
 8000bcc:	b2c0      	uxtb	r0, r0
 8000bce:	0a5b      	lsrs	r3, r3, #9
 8000bd0:	05c0      	lsls	r0, r0, #23
 8000bd2:	4318      	orrs	r0, r3
 8000bd4:	07e4      	lsls	r4, r4, #31
 8000bd6:	4320      	orrs	r0, r4
 8000bd8:	bcc0      	pop	{r6, r7}
 8000bda:	46b9      	mov	r9, r7
 8000bdc:	46b0      	mov	r8, r6
 8000bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000be0:	2201      	movs	r2, #1
 8000be2:	4051      	eors	r1, r2
 8000be4:	428c      	cmp	r4, r1
 8000be6:	d1ba      	bne.n	8000b5e <__aeabi_fsub+0x7e>
 8000be8:	464a      	mov	r2, r9
 8000bea:	2a00      	cmp	r2, #0
 8000bec:	d010      	beq.n	8000c10 <__aeabi_fsub+0x130>
 8000bee:	2d00      	cmp	r5, #0
 8000bf0:	d100      	bne.n	8000bf4 <__aeabi_fsub+0x114>
 8000bf2:	e098      	b.n	8000d26 <__aeabi_fsub+0x246>
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	e7bb      	b.n	8000b70 <__aeabi_fsub+0x90>
 8000bf8:	2e00      	cmp	r6, #0
 8000bfa:	d034      	beq.n	8000c66 <__aeabi_fsub+0x186>
 8000bfc:	1e51      	subs	r1, r2, #1
 8000bfe:	2a01      	cmp	r2, #1
 8000c00:	d06e      	beq.n	8000ce0 <__aeabi_fsub+0x200>
 8000c02:	2aff      	cmp	r2, #255	@ 0xff
 8000c04:	d0b4      	beq.n	8000b70 <__aeabi_fsub+0x90>
 8000c06:	000a      	movs	r2, r1
 8000c08:	e79c      	b.n	8000b44 <__aeabi_fsub+0x64>
 8000c0a:	2a00      	cmp	r2, #0
 8000c0c:	d000      	beq.n	8000c10 <__aeabi_fsub+0x130>
 8000c0e:	e088      	b.n	8000d22 <__aeabi_fsub+0x242>
 8000c10:	20fe      	movs	r0, #254	@ 0xfe
 8000c12:	1c6a      	adds	r2, r5, #1
 8000c14:	4210      	tst	r0, r2
 8000c16:	d000      	beq.n	8000c1a <__aeabi_fsub+0x13a>
 8000c18:	e092      	b.n	8000d40 <__aeabi_fsub+0x260>
 8000c1a:	2d00      	cmp	r5, #0
 8000c1c:	d000      	beq.n	8000c20 <__aeabi_fsub+0x140>
 8000c1e:	e0a4      	b.n	8000d6a <__aeabi_fsub+0x28a>
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d100      	bne.n	8000c26 <__aeabi_fsub+0x146>
 8000c24:	e0cb      	b.n	8000dbe <__aeabi_fsub+0x2de>
 8000c26:	2e00      	cmp	r6, #0
 8000c28:	d000      	beq.n	8000c2c <__aeabi_fsub+0x14c>
 8000c2a:	e0ca      	b.n	8000dc2 <__aeabi_fsub+0x2e2>
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	08db      	lsrs	r3, r3, #3
 8000c30:	025b      	lsls	r3, r3, #9
 8000c32:	0a5b      	lsrs	r3, r3, #9
 8000c34:	b2d0      	uxtb	r0, r2
 8000c36:	e7cb      	b.n	8000bd0 <__aeabi_fsub+0xf0>
 8000c38:	0031      	movs	r1, r6
 8000c3a:	2020      	movs	r0, #32
 8000c3c:	40d1      	lsrs	r1, r2
 8000c3e:	1a82      	subs	r2, r0, r2
 8000c40:	4096      	lsls	r6, r2
 8000c42:	0032      	movs	r2, r6
 8000c44:	1e50      	subs	r0, r2, #1
 8000c46:	4182      	sbcs	r2, r0
 8000c48:	430a      	orrs	r2, r1
 8000c4a:	189b      	adds	r3, r3, r2
 8000c4c:	015a      	lsls	r2, r3, #5
 8000c4e:	d5ae      	bpl.n	8000bae <__aeabi_fsub+0xce>
 8000c50:	1c6a      	adds	r2, r5, #1
 8000c52:	2dfe      	cmp	r5, #254	@ 0xfe
 8000c54:	d14a      	bne.n	8000cec <__aeabi_fsub+0x20c>
 8000c56:	20ff      	movs	r0, #255	@ 0xff
 8000c58:	2300      	movs	r3, #0
 8000c5a:	e7b9      	b.n	8000bd0 <__aeabi_fsub+0xf0>
 8000c5c:	22ff      	movs	r2, #255	@ 0xff
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d14b      	bne.n	8000cfa <__aeabi_fsub+0x21a>
 8000c62:	000c      	movs	r4, r1
 8000c64:	0033      	movs	r3, r6
 8000c66:	08db      	lsrs	r3, r3, #3
 8000c68:	2aff      	cmp	r2, #255	@ 0xff
 8000c6a:	d100      	bne.n	8000c6e <__aeabi_fsub+0x18e>
 8000c6c:	e781      	b.n	8000b72 <__aeabi_fsub+0x92>
 8000c6e:	e7df      	b.n	8000c30 <__aeabi_fsub+0x150>
 8000c70:	019f      	lsls	r7, r3, #6
 8000c72:	09bf      	lsrs	r7, r7, #6
 8000c74:	0038      	movs	r0, r7
 8000c76:	f000 f985 	bl	8000f84 <__clzsi2>
 8000c7a:	3805      	subs	r0, #5
 8000c7c:	4087      	lsls	r7, r0
 8000c7e:	4285      	cmp	r5, r0
 8000c80:	dc21      	bgt.n	8000cc6 <__aeabi_fsub+0x1e6>
 8000c82:	003b      	movs	r3, r7
 8000c84:	2120      	movs	r1, #32
 8000c86:	1b42      	subs	r2, r0, r5
 8000c88:	3201      	adds	r2, #1
 8000c8a:	40d3      	lsrs	r3, r2
 8000c8c:	1a8a      	subs	r2, r1, r2
 8000c8e:	4097      	lsls	r7, r2
 8000c90:	1e7a      	subs	r2, r7, #1
 8000c92:	4197      	sbcs	r7, r2
 8000c94:	2200      	movs	r2, #0
 8000c96:	433b      	orrs	r3, r7
 8000c98:	0759      	lsls	r1, r3, #29
 8000c9a:	d000      	beq.n	8000c9e <__aeabi_fsub+0x1be>
 8000c9c:	e78b      	b.n	8000bb6 <__aeabi_fsub+0xd6>
 8000c9e:	e78f      	b.n	8000bc0 <__aeabi_fsub+0xe0>
 8000ca0:	20fe      	movs	r0, #254	@ 0xfe
 8000ca2:	1c6a      	adds	r2, r5, #1
 8000ca4:	4210      	tst	r0, r2
 8000ca6:	d112      	bne.n	8000cce <__aeabi_fsub+0x1ee>
 8000ca8:	2d00      	cmp	r5, #0
 8000caa:	d152      	bne.n	8000d52 <__aeabi_fsub+0x272>
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d07c      	beq.n	8000daa <__aeabi_fsub+0x2ca>
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0bb      	beq.n	8000c2c <__aeabi_fsub+0x14c>
 8000cb4:	1b9a      	subs	r2, r3, r6
 8000cb6:	0150      	lsls	r0, r2, #5
 8000cb8:	d400      	bmi.n	8000cbc <__aeabi_fsub+0x1dc>
 8000cba:	e08b      	b.n	8000dd4 <__aeabi_fsub+0x2f4>
 8000cbc:	2401      	movs	r4, #1
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	1af3      	subs	r3, r6, r3
 8000cc2:	400c      	ands	r4, r1
 8000cc4:	e7e8      	b.n	8000c98 <__aeabi_fsub+0x1b8>
 8000cc6:	4b56      	ldr	r3, [pc, #344]	@ (8000e20 <__aeabi_fsub+0x340>)
 8000cc8:	1a2a      	subs	r2, r5, r0
 8000cca:	403b      	ands	r3, r7
 8000ccc:	e7e4      	b.n	8000c98 <__aeabi_fsub+0x1b8>
 8000cce:	1b9f      	subs	r7, r3, r6
 8000cd0:	017a      	lsls	r2, r7, #5
 8000cd2:	d446      	bmi.n	8000d62 <__aeabi_fsub+0x282>
 8000cd4:	2f00      	cmp	r7, #0
 8000cd6:	d1cd      	bne.n	8000c74 <__aeabi_fsub+0x194>
 8000cd8:	2400      	movs	r4, #0
 8000cda:	2000      	movs	r0, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	e777      	b.n	8000bd0 <__aeabi_fsub+0xf0>
 8000ce0:	199b      	adds	r3, r3, r6
 8000ce2:	2501      	movs	r5, #1
 8000ce4:	3201      	adds	r2, #1
 8000ce6:	0159      	lsls	r1, r3, #5
 8000ce8:	d400      	bmi.n	8000cec <__aeabi_fsub+0x20c>
 8000cea:	e760      	b.n	8000bae <__aeabi_fsub+0xce>
 8000cec:	2101      	movs	r1, #1
 8000cee:	484d      	ldr	r0, [pc, #308]	@ (8000e24 <__aeabi_fsub+0x344>)
 8000cf0:	4019      	ands	r1, r3
 8000cf2:	085b      	lsrs	r3, r3, #1
 8000cf4:	4003      	ands	r3, r0
 8000cf6:	430b      	orrs	r3, r1
 8000cf8:	e7ce      	b.n	8000c98 <__aeabi_fsub+0x1b8>
 8000cfa:	1e57      	subs	r7, r2, #1
 8000cfc:	2a01      	cmp	r2, #1
 8000cfe:	d05a      	beq.n	8000db6 <__aeabi_fsub+0x2d6>
 8000d00:	000c      	movs	r4, r1
 8000d02:	2aff      	cmp	r2, #255	@ 0xff
 8000d04:	d033      	beq.n	8000d6e <__aeabi_fsub+0x28e>
 8000d06:	2201      	movs	r2, #1
 8000d08:	2f1b      	cmp	r7, #27
 8000d0a:	dc07      	bgt.n	8000d1c <__aeabi_fsub+0x23c>
 8000d0c:	2120      	movs	r1, #32
 8000d0e:	1bc9      	subs	r1, r1, r7
 8000d10:	001a      	movs	r2, r3
 8000d12:	408b      	lsls	r3, r1
 8000d14:	40fa      	lsrs	r2, r7
 8000d16:	1e59      	subs	r1, r3, #1
 8000d18:	418b      	sbcs	r3, r1
 8000d1a:	431a      	orrs	r2, r3
 8000d1c:	0005      	movs	r5, r0
 8000d1e:	1ab3      	subs	r3, r6, r2
 8000d20:	e743      	b.n	8000baa <__aeabi_fsub+0xca>
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d123      	bne.n	8000d6e <__aeabi_fsub+0x28e>
 8000d26:	22ff      	movs	r2, #255	@ 0xff
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d09b      	beq.n	8000c64 <__aeabi_fsub+0x184>
 8000d2c:	1e51      	subs	r1, r2, #1
 8000d2e:	2a01      	cmp	r2, #1
 8000d30:	d0d6      	beq.n	8000ce0 <__aeabi_fsub+0x200>
 8000d32:	2aff      	cmp	r2, #255	@ 0xff
 8000d34:	d01b      	beq.n	8000d6e <__aeabi_fsub+0x28e>
 8000d36:	291b      	cmp	r1, #27
 8000d38:	dd2c      	ble.n	8000d94 <__aeabi_fsub+0x2b4>
 8000d3a:	0002      	movs	r2, r0
 8000d3c:	1c73      	adds	r3, r6, #1
 8000d3e:	e73a      	b.n	8000bb6 <__aeabi_fsub+0xd6>
 8000d40:	2aff      	cmp	r2, #255	@ 0xff
 8000d42:	d088      	beq.n	8000c56 <__aeabi_fsub+0x176>
 8000d44:	199b      	adds	r3, r3, r6
 8000d46:	085b      	lsrs	r3, r3, #1
 8000d48:	0759      	lsls	r1, r3, #29
 8000d4a:	d000      	beq.n	8000d4e <__aeabi_fsub+0x26e>
 8000d4c:	e733      	b.n	8000bb6 <__aeabi_fsub+0xd6>
 8000d4e:	08db      	lsrs	r3, r3, #3
 8000d50:	e76e      	b.n	8000c30 <__aeabi_fsub+0x150>
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d110      	bne.n	8000d78 <__aeabi_fsub+0x298>
 8000d56:	2e00      	cmp	r6, #0
 8000d58:	d043      	beq.n	8000de2 <__aeabi_fsub+0x302>
 8000d5a:	2401      	movs	r4, #1
 8000d5c:	0033      	movs	r3, r6
 8000d5e:	400c      	ands	r4, r1
 8000d60:	e706      	b.n	8000b70 <__aeabi_fsub+0x90>
 8000d62:	2401      	movs	r4, #1
 8000d64:	1af7      	subs	r7, r6, r3
 8000d66:	400c      	ands	r4, r1
 8000d68:	e784      	b.n	8000c74 <__aeabi_fsub+0x194>
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d104      	bne.n	8000d78 <__aeabi_fsub+0x298>
 8000d6e:	0033      	movs	r3, r6
 8000d70:	e6fe      	b.n	8000b70 <__aeabi_fsub+0x90>
 8000d72:	2501      	movs	r5, #1
 8000d74:	1b9b      	subs	r3, r3, r6
 8000d76:	e718      	b.n	8000baa <__aeabi_fsub+0xca>
 8000d78:	2e00      	cmp	r6, #0
 8000d7a:	d100      	bne.n	8000d7e <__aeabi_fsub+0x29e>
 8000d7c:	e6f8      	b.n	8000b70 <__aeabi_fsub+0x90>
 8000d7e:	2280      	movs	r2, #128	@ 0x80
 8000d80:	03d2      	lsls	r2, r2, #15
 8000d82:	4297      	cmp	r7, r2
 8000d84:	d304      	bcc.n	8000d90 <__aeabi_fsub+0x2b0>
 8000d86:	4594      	cmp	ip, r2
 8000d88:	d202      	bcs.n	8000d90 <__aeabi_fsub+0x2b0>
 8000d8a:	2401      	movs	r4, #1
 8000d8c:	0033      	movs	r3, r6
 8000d8e:	400c      	ands	r4, r1
 8000d90:	08db      	lsrs	r3, r3, #3
 8000d92:	e6f1      	b.n	8000b78 <__aeabi_fsub+0x98>
 8000d94:	001a      	movs	r2, r3
 8000d96:	2520      	movs	r5, #32
 8000d98:	40ca      	lsrs	r2, r1
 8000d9a:	1a69      	subs	r1, r5, r1
 8000d9c:	408b      	lsls	r3, r1
 8000d9e:	1e59      	subs	r1, r3, #1
 8000da0:	418b      	sbcs	r3, r1
 8000da2:	4313      	orrs	r3, r2
 8000da4:	0005      	movs	r5, r0
 8000da6:	199b      	adds	r3, r3, r6
 8000da8:	e750      	b.n	8000c4c <__aeabi_fsub+0x16c>
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d094      	beq.n	8000cd8 <__aeabi_fsub+0x1f8>
 8000dae:	2401      	movs	r4, #1
 8000db0:	0033      	movs	r3, r6
 8000db2:	400c      	ands	r4, r1
 8000db4:	e73a      	b.n	8000c2c <__aeabi_fsub+0x14c>
 8000db6:	000c      	movs	r4, r1
 8000db8:	2501      	movs	r5, #1
 8000dba:	1af3      	subs	r3, r6, r3
 8000dbc:	e6f5      	b.n	8000baa <__aeabi_fsub+0xca>
 8000dbe:	0033      	movs	r3, r6
 8000dc0:	e734      	b.n	8000c2c <__aeabi_fsub+0x14c>
 8000dc2:	199b      	adds	r3, r3, r6
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	0159      	lsls	r1, r3, #5
 8000dc8:	d5c1      	bpl.n	8000d4e <__aeabi_fsub+0x26e>
 8000dca:	4a15      	ldr	r2, [pc, #84]	@ (8000e20 <__aeabi_fsub+0x340>)
 8000dcc:	4013      	ands	r3, r2
 8000dce:	08db      	lsrs	r3, r3, #3
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	e72d      	b.n	8000c30 <__aeabi_fsub+0x150>
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	d100      	bne.n	8000dda <__aeabi_fsub+0x2fa>
 8000dd8:	e77e      	b.n	8000cd8 <__aeabi_fsub+0x1f8>
 8000dda:	0013      	movs	r3, r2
 8000ddc:	2200      	movs	r2, #0
 8000dde:	08db      	lsrs	r3, r3, #3
 8000de0:	e726      	b.n	8000c30 <__aeabi_fsub+0x150>
 8000de2:	2380      	movs	r3, #128	@ 0x80
 8000de4:	2400      	movs	r4, #0
 8000de6:	20ff      	movs	r0, #255	@ 0xff
 8000de8:	03db      	lsls	r3, r3, #15
 8000dea:	e6f1      	b.n	8000bd0 <__aeabi_fsub+0xf0>
 8000dec:	2a00      	cmp	r2, #0
 8000dee:	d100      	bne.n	8000df2 <__aeabi_fsub+0x312>
 8000df0:	e756      	b.n	8000ca0 <__aeabi_fsub+0x1c0>
 8000df2:	1b47      	subs	r7, r0, r5
 8000df4:	003a      	movs	r2, r7
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d100      	bne.n	8000dfc <__aeabi_fsub+0x31c>
 8000dfa:	e730      	b.n	8000c5e <__aeabi_fsub+0x17e>
 8000dfc:	2280      	movs	r2, #128	@ 0x80
 8000dfe:	04d2      	lsls	r2, r2, #19
 8000e00:	000c      	movs	r4, r1
 8000e02:	4313      	orrs	r3, r2
 8000e04:	e77f      	b.n	8000d06 <__aeabi_fsub+0x226>
 8000e06:	2a00      	cmp	r2, #0
 8000e08:	d100      	bne.n	8000e0c <__aeabi_fsub+0x32c>
 8000e0a:	e701      	b.n	8000c10 <__aeabi_fsub+0x130>
 8000e0c:	1b41      	subs	r1, r0, r5
 8000e0e:	2d00      	cmp	r5, #0
 8000e10:	d101      	bne.n	8000e16 <__aeabi_fsub+0x336>
 8000e12:	000a      	movs	r2, r1
 8000e14:	e788      	b.n	8000d28 <__aeabi_fsub+0x248>
 8000e16:	2280      	movs	r2, #128	@ 0x80
 8000e18:	04d2      	lsls	r2, r2, #19
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	e78b      	b.n	8000d36 <__aeabi_fsub+0x256>
 8000e1e:	46c0      	nop			@ (mov r8, r8)
 8000e20:	fbffffff 	.word	0xfbffffff
 8000e24:	7dffffff 	.word	0x7dffffff

08000e28 <__aeabi_f2iz>:
 8000e28:	0241      	lsls	r1, r0, #9
 8000e2a:	0042      	lsls	r2, r0, #1
 8000e2c:	0fc3      	lsrs	r3, r0, #31
 8000e2e:	0a49      	lsrs	r1, r1, #9
 8000e30:	2000      	movs	r0, #0
 8000e32:	0e12      	lsrs	r2, r2, #24
 8000e34:	2a7e      	cmp	r2, #126	@ 0x7e
 8000e36:	dd03      	ble.n	8000e40 <__aeabi_f2iz+0x18>
 8000e38:	2a9d      	cmp	r2, #157	@ 0x9d
 8000e3a:	dd02      	ble.n	8000e42 <__aeabi_f2iz+0x1a>
 8000e3c:	4a09      	ldr	r2, [pc, #36]	@ (8000e64 <__aeabi_f2iz+0x3c>)
 8000e3e:	1898      	adds	r0, r3, r2
 8000e40:	4770      	bx	lr
 8000e42:	2080      	movs	r0, #128	@ 0x80
 8000e44:	0400      	lsls	r0, r0, #16
 8000e46:	4301      	orrs	r1, r0
 8000e48:	2a95      	cmp	r2, #149	@ 0x95
 8000e4a:	dc07      	bgt.n	8000e5c <__aeabi_f2iz+0x34>
 8000e4c:	2096      	movs	r0, #150	@ 0x96
 8000e4e:	1a82      	subs	r2, r0, r2
 8000e50:	40d1      	lsrs	r1, r2
 8000e52:	4248      	negs	r0, r1
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d1f3      	bne.n	8000e40 <__aeabi_f2iz+0x18>
 8000e58:	0008      	movs	r0, r1
 8000e5a:	e7f1      	b.n	8000e40 <__aeabi_f2iz+0x18>
 8000e5c:	3a96      	subs	r2, #150	@ 0x96
 8000e5e:	4091      	lsls	r1, r2
 8000e60:	e7f7      	b.n	8000e52 <__aeabi_f2iz+0x2a>
 8000e62:	46c0      	nop			@ (mov r8, r8)
 8000e64:	7fffffff 	.word	0x7fffffff

08000e68 <__aeabi_i2f>:
 8000e68:	b570      	push	{r4, r5, r6, lr}
 8000e6a:	2800      	cmp	r0, #0
 8000e6c:	d013      	beq.n	8000e96 <__aeabi_i2f+0x2e>
 8000e6e:	17c3      	asrs	r3, r0, #31
 8000e70:	18c5      	adds	r5, r0, r3
 8000e72:	405d      	eors	r5, r3
 8000e74:	0fc4      	lsrs	r4, r0, #31
 8000e76:	0028      	movs	r0, r5
 8000e78:	f000 f884 	bl	8000f84 <__clzsi2>
 8000e7c:	239e      	movs	r3, #158	@ 0x9e
 8000e7e:	0001      	movs	r1, r0
 8000e80:	1a1b      	subs	r3, r3, r0
 8000e82:	2b96      	cmp	r3, #150	@ 0x96
 8000e84:	dc0f      	bgt.n	8000ea6 <__aeabi_i2f+0x3e>
 8000e86:	2808      	cmp	r0, #8
 8000e88:	d034      	beq.n	8000ef4 <__aeabi_i2f+0x8c>
 8000e8a:	3908      	subs	r1, #8
 8000e8c:	408d      	lsls	r5, r1
 8000e8e:	026d      	lsls	r5, r5, #9
 8000e90:	0a6d      	lsrs	r5, r5, #9
 8000e92:	b2d8      	uxtb	r0, r3
 8000e94:	e002      	b.n	8000e9c <__aeabi_i2f+0x34>
 8000e96:	2400      	movs	r4, #0
 8000e98:	2000      	movs	r0, #0
 8000e9a:	2500      	movs	r5, #0
 8000e9c:	05c0      	lsls	r0, r0, #23
 8000e9e:	4328      	orrs	r0, r5
 8000ea0:	07e4      	lsls	r4, r4, #31
 8000ea2:	4320      	orrs	r0, r4
 8000ea4:	bd70      	pop	{r4, r5, r6, pc}
 8000ea6:	2b99      	cmp	r3, #153	@ 0x99
 8000ea8:	dc16      	bgt.n	8000ed8 <__aeabi_i2f+0x70>
 8000eaa:	1f42      	subs	r2, r0, #5
 8000eac:	2805      	cmp	r0, #5
 8000eae:	d000      	beq.n	8000eb2 <__aeabi_i2f+0x4a>
 8000eb0:	4095      	lsls	r5, r2
 8000eb2:	002a      	movs	r2, r5
 8000eb4:	4811      	ldr	r0, [pc, #68]	@ (8000efc <__aeabi_i2f+0x94>)
 8000eb6:	4002      	ands	r2, r0
 8000eb8:	076e      	lsls	r6, r5, #29
 8000eba:	d009      	beq.n	8000ed0 <__aeabi_i2f+0x68>
 8000ebc:	260f      	movs	r6, #15
 8000ebe:	4035      	ands	r5, r6
 8000ec0:	2d04      	cmp	r5, #4
 8000ec2:	d005      	beq.n	8000ed0 <__aeabi_i2f+0x68>
 8000ec4:	3204      	adds	r2, #4
 8000ec6:	0155      	lsls	r5, r2, #5
 8000ec8:	d502      	bpl.n	8000ed0 <__aeabi_i2f+0x68>
 8000eca:	239f      	movs	r3, #159	@ 0x9f
 8000ecc:	4002      	ands	r2, r0
 8000ece:	1a5b      	subs	r3, r3, r1
 8000ed0:	0192      	lsls	r2, r2, #6
 8000ed2:	0a55      	lsrs	r5, r2, #9
 8000ed4:	b2d8      	uxtb	r0, r3
 8000ed6:	e7e1      	b.n	8000e9c <__aeabi_i2f+0x34>
 8000ed8:	2205      	movs	r2, #5
 8000eda:	1a12      	subs	r2, r2, r0
 8000edc:	0028      	movs	r0, r5
 8000ede:	40d0      	lsrs	r0, r2
 8000ee0:	0002      	movs	r2, r0
 8000ee2:	0008      	movs	r0, r1
 8000ee4:	301b      	adds	r0, #27
 8000ee6:	4085      	lsls	r5, r0
 8000ee8:	0028      	movs	r0, r5
 8000eea:	1e45      	subs	r5, r0, #1
 8000eec:	41a8      	sbcs	r0, r5
 8000eee:	4302      	orrs	r2, r0
 8000ef0:	0015      	movs	r5, r2
 8000ef2:	e7de      	b.n	8000eb2 <__aeabi_i2f+0x4a>
 8000ef4:	026d      	lsls	r5, r5, #9
 8000ef6:	2096      	movs	r0, #150	@ 0x96
 8000ef8:	0a6d      	lsrs	r5, r5, #9
 8000efa:	e7cf      	b.n	8000e9c <__aeabi_i2f+0x34>
 8000efc:	fbffffff 	.word	0xfbffffff

08000f00 <__aeabi_ui2f>:
 8000f00:	b570      	push	{r4, r5, r6, lr}
 8000f02:	1e04      	subs	r4, r0, #0
 8000f04:	d00e      	beq.n	8000f24 <__aeabi_ui2f+0x24>
 8000f06:	f000 f83d 	bl	8000f84 <__clzsi2>
 8000f0a:	239e      	movs	r3, #158	@ 0x9e
 8000f0c:	0001      	movs	r1, r0
 8000f0e:	1a1b      	subs	r3, r3, r0
 8000f10:	2b96      	cmp	r3, #150	@ 0x96
 8000f12:	dc0c      	bgt.n	8000f2e <__aeabi_ui2f+0x2e>
 8000f14:	2808      	cmp	r0, #8
 8000f16:	d02f      	beq.n	8000f78 <__aeabi_ui2f+0x78>
 8000f18:	3908      	subs	r1, #8
 8000f1a:	408c      	lsls	r4, r1
 8000f1c:	0264      	lsls	r4, r4, #9
 8000f1e:	0a64      	lsrs	r4, r4, #9
 8000f20:	b2d8      	uxtb	r0, r3
 8000f22:	e001      	b.n	8000f28 <__aeabi_ui2f+0x28>
 8000f24:	2000      	movs	r0, #0
 8000f26:	2400      	movs	r4, #0
 8000f28:	05c0      	lsls	r0, r0, #23
 8000f2a:	4320      	orrs	r0, r4
 8000f2c:	bd70      	pop	{r4, r5, r6, pc}
 8000f2e:	2b99      	cmp	r3, #153	@ 0x99
 8000f30:	dc16      	bgt.n	8000f60 <__aeabi_ui2f+0x60>
 8000f32:	1f42      	subs	r2, r0, #5
 8000f34:	2805      	cmp	r0, #5
 8000f36:	d000      	beq.n	8000f3a <__aeabi_ui2f+0x3a>
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	0022      	movs	r2, r4
 8000f3c:	4810      	ldr	r0, [pc, #64]	@ (8000f80 <__aeabi_ui2f+0x80>)
 8000f3e:	4002      	ands	r2, r0
 8000f40:	0765      	lsls	r5, r4, #29
 8000f42:	d009      	beq.n	8000f58 <__aeabi_ui2f+0x58>
 8000f44:	250f      	movs	r5, #15
 8000f46:	402c      	ands	r4, r5
 8000f48:	2c04      	cmp	r4, #4
 8000f4a:	d005      	beq.n	8000f58 <__aeabi_ui2f+0x58>
 8000f4c:	3204      	adds	r2, #4
 8000f4e:	0154      	lsls	r4, r2, #5
 8000f50:	d502      	bpl.n	8000f58 <__aeabi_ui2f+0x58>
 8000f52:	239f      	movs	r3, #159	@ 0x9f
 8000f54:	4002      	ands	r2, r0
 8000f56:	1a5b      	subs	r3, r3, r1
 8000f58:	0192      	lsls	r2, r2, #6
 8000f5a:	0a54      	lsrs	r4, r2, #9
 8000f5c:	b2d8      	uxtb	r0, r3
 8000f5e:	e7e3      	b.n	8000f28 <__aeabi_ui2f+0x28>
 8000f60:	0002      	movs	r2, r0
 8000f62:	0020      	movs	r0, r4
 8000f64:	321b      	adds	r2, #27
 8000f66:	4090      	lsls	r0, r2
 8000f68:	0002      	movs	r2, r0
 8000f6a:	1e50      	subs	r0, r2, #1
 8000f6c:	4182      	sbcs	r2, r0
 8000f6e:	2005      	movs	r0, #5
 8000f70:	1a40      	subs	r0, r0, r1
 8000f72:	40c4      	lsrs	r4, r0
 8000f74:	4314      	orrs	r4, r2
 8000f76:	e7e0      	b.n	8000f3a <__aeabi_ui2f+0x3a>
 8000f78:	0264      	lsls	r4, r4, #9
 8000f7a:	2096      	movs	r0, #150	@ 0x96
 8000f7c:	0a64      	lsrs	r4, r4, #9
 8000f7e:	e7d3      	b.n	8000f28 <__aeabi_ui2f+0x28>
 8000f80:	fbffffff 	.word	0xfbffffff

08000f84 <__clzsi2>:
 8000f84:	211c      	movs	r1, #28
 8000f86:	2301      	movs	r3, #1
 8000f88:	041b      	lsls	r3, r3, #16
 8000f8a:	4298      	cmp	r0, r3
 8000f8c:	d301      	bcc.n	8000f92 <__clzsi2+0xe>
 8000f8e:	0c00      	lsrs	r0, r0, #16
 8000f90:	3910      	subs	r1, #16
 8000f92:	0a1b      	lsrs	r3, r3, #8
 8000f94:	4298      	cmp	r0, r3
 8000f96:	d301      	bcc.n	8000f9c <__clzsi2+0x18>
 8000f98:	0a00      	lsrs	r0, r0, #8
 8000f9a:	3908      	subs	r1, #8
 8000f9c:	091b      	lsrs	r3, r3, #4
 8000f9e:	4298      	cmp	r0, r3
 8000fa0:	d301      	bcc.n	8000fa6 <__clzsi2+0x22>
 8000fa2:	0900      	lsrs	r0, r0, #4
 8000fa4:	3904      	subs	r1, #4
 8000fa6:	a202      	add	r2, pc, #8	@ (adr r2, 8000fb0 <__clzsi2+0x2c>)
 8000fa8:	5c10      	ldrb	r0, [r2, r0]
 8000faa:	1840      	adds	r0, r0, r1
 8000fac:	4770      	bx	lr
 8000fae:	46c0      	nop			@ (mov r8, r8)
 8000fb0:	02020304 	.word	0x02020304
 8000fb4:	01010101 	.word	0x01010101
	...

08000fc0 <main>:

void SystemClock_Config(void);
static void MX_GPIO_Init(void);

int main(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af02      	add	r7, sp, #8
  HAL_Init();
 8000fc6:	f001 fb85 	bl	80026d4 <HAL_Init>
  SystemClock_Config();
 8000fca:	f000 f843 	bl	8001054 <SystemClock_Config>
  MX_GPIO_Init();
 8000fce:	f000 f88d 	bl	80010ec <MX_GPIO_Init>

  if (RPM_Init()){Error_Handler();}
 8000fd2:	f000 fe33 	bl	8001c3c <RPM_Init>
 8000fd6:	1e03      	subs	r3, r0, #0
 8000fd8:	d001      	beq.n	8000fde <main+0x1e>
 8000fda:	f000 f8a9 	bl	8001130 <Error_Handler>
  if (MBUS_Init()){Error_Handler();}
 8000fde:	f000 fab9 	bl	8001554 <MBUS_Init>
 8000fe2:	1e03      	subs	r3, r0, #0
 8000fe4:	d001      	beq.n	8000fea <main+0x2a>
 8000fe6:	f000 f8a3 	bl	8001130 <Error_Handler>

  struct FrameBuffer *ReceivedFrameBuffer=calloc(1,sizeof(struct FrameBuffer));
 8000fea:	2128      	movs	r1, #40	@ 0x28
 8000fec:	2001      	movs	r0, #1
 8000fee:	f006 fc11 	bl	8007814 <calloc>
 8000ff2:	0003      	movs	r3, r0
 8000ff4:	607b      	str	r3, [r7, #4]
  if(ReceivedFrameBuffer==NULL){Error_Handler();}
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d101      	bne.n	8001000 <main+0x40>
 8000ffc:	f000 f898 	bl	8001130 <Error_Handler>

  uint8_t *RPMMessage=calloc(RPM_MESSAGE_SIZE,sizeof(uint8_t));
 8001000:	2101      	movs	r1, #1
 8001002:	2005      	movs	r0, #5
 8001004:	f006 fc06 	bl	8007814 <calloc>
 8001008:	0003      	movs	r3, r0
 800100a:	603b      	str	r3, [r7, #0]
  if(RPMMessage==NULL){Error_Handler();}
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d101      	bne.n	8001016 <main+0x56>
 8001012:	f000 f88d 	bl	8001130 <Error_Handler>

  while (1)
  {
	  if(!RPM_GetData(RPMMessage))
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	0018      	movs	r0, r3
 800101a:	f000 feff 	bl	8001e1c <RPM_GetData>
 800101e:	1e03      	subs	r3, r0, #0
 8001020:	d10a      	bne.n	8001038 <main+0x78>
	  {
		  if(!MBUS_SetTransmittedData(MBUSBridgeID,CHIDrpm,RPM_MESSAGE_SIZE,RPMMessage,true))
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	2201      	movs	r2, #1
 8001026:	9200      	str	r2, [sp, #0]
 8001028:	2205      	movs	r2, #5
 800102a:	21bb      	movs	r1, #187	@ 0xbb
 800102c:	2003      	movs	r0, #3
 800102e:	f000 f917 	bl	8001260 <MBUS_SetTransmittedData>
 8001032:	1e03      	subs	r3, r0, #0
 8001034:	d100      	bne.n	8001038 <main+0x78>
		  {
			  __NOP();
 8001036:	46c0      	nop			@ (mov r8, r8)
		  }
	  }

	  if(MBUS_GetProcessedFrame(ReceivedFrameBuffer)==SYNC_BYTE){
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	0018      	movs	r0, r3
 800103c:	f000 f97e 	bl	800133c <MBUS_GetProcessedFrame>
 8001040:	0003      	movs	r3, r0
 8001042:	2b08      	cmp	r3, #8
 8001044:	d1e7      	bne.n	8001016 <main+0x56>
		  RPM_UpdateFrequencyRatio(MBUS_GetFrequencySYNCRatio());
 8001046:	f000 f99b 	bl	8001380 <MBUS_GetFrequencySYNCRatio>
 800104a:	1c03      	adds	r3, r0, #0
 800104c:	1c18      	adds	r0, r3, #0
 800104e:	f000 ff17 	bl	8001e80 <RPM_UpdateFrequencyRatio>
	  if(!RPM_GetData(RPMMessage))
 8001052:	e7e0      	b.n	8001016 <main+0x56>

08001054 <SystemClock_Config>:


// RC oscilator HSI48
// – Internal 48 MHz RC oscillator (±1 %)
void SystemClock_Config(void)
{
 8001054:	b590      	push	{r4, r7, lr}
 8001056:	b08d      	sub	sp, #52	@ 0x34
 8001058:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800105a:	2414      	movs	r4, #20
 800105c:	193b      	adds	r3, r7, r4
 800105e:	0018      	movs	r0, r3
 8001060:	231c      	movs	r3, #28
 8001062:	001a      	movs	r2, r3
 8001064:	2100      	movs	r1, #0
 8001066:	f006 fcd3 	bl	8007a10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800106a:	003b      	movs	r3, r7
 800106c:	0018      	movs	r0, r3
 800106e:	2314      	movs	r3, #20
 8001070:	001a      	movs	r2, r3
 8001072:	2100      	movs	r1, #0
 8001074:	f006 fccc 	bl	8007a10 <memset>

  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8001078:	4b1b      	ldr	r3, [pc, #108]	@ (80010e8 <SystemClock_Config+0x94>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	4b1a      	ldr	r3, [pc, #104]	@ (80010e8 <SystemClock_Config+0x94>)
 800107e:	2107      	movs	r1, #7
 8001080:	438a      	bics	r2, r1
 8001082:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001084:	193b      	adds	r3, r7, r4
 8001086:	2202      	movs	r2, #2
 8001088:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800108a:	193b      	adds	r3, r7, r4
 800108c:	2280      	movs	r2, #128	@ 0x80
 800108e:	0052      	lsls	r2, r2, #1
 8001090:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001092:	193b      	adds	r3, r7, r4
 8001094:	2200      	movs	r2, #0
 8001096:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001098:	193b      	adds	r3, r7, r4
 800109a:	2240      	movs	r2, #64	@ 0x40
 800109c:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800109e:	193b      	adds	r3, r7, r4
 80010a0:	0018      	movs	r0, r3
 80010a2:	f001 ff2b 	bl	8002efc <HAL_RCC_OscConfig>
 80010a6:	1e03      	subs	r3, r0, #0
 80010a8:	d001      	beq.n	80010ae <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80010aa:	f000 f841 	bl	8001130 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ae:	003b      	movs	r3, r7
 80010b0:	2207      	movs	r2, #7
 80010b2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010b4:	003b      	movs	r3, r7
 80010b6:	2200      	movs	r2, #0
 80010b8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80010ba:	003b      	movs	r3, r7
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80010c0:	003b      	movs	r3, r7
 80010c2:	2200      	movs	r2, #0
 80010c4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80010c6:	003b      	movs	r3, r7
 80010c8:	2200      	movs	r2, #0
 80010ca:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010cc:	003b      	movs	r3, r7
 80010ce:	2100      	movs	r1, #0
 80010d0:	0018      	movs	r0, r3
 80010d2:	f002 f8f7 	bl	80032c4 <HAL_RCC_ClockConfig>
 80010d6:	1e03      	subs	r3, r0, #0
 80010d8:	d001      	beq.n	80010de <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80010da:	f000 f829 	bl	8001130 <Error_Handler>
  }
}
 80010de:	46c0      	nop			@ (mov r8, r8)
 80010e0:	46bd      	mov	sp, r7
 80010e2:	b00d      	add	sp, #52	@ 0x34
 80010e4:	bd90      	pop	{r4, r7, pc}
 80010e6:	46c0      	nop			@ (mov r8, r8)
 80010e8:	40022000 	.word	0x40022000

080010ec <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f2:	4b0e      	ldr	r3, [pc, #56]	@ (800112c <MX_GPIO_Init+0x40>)
 80010f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80010f6:	4b0d      	ldr	r3, [pc, #52]	@ (800112c <MX_GPIO_Init+0x40>)
 80010f8:	2102      	movs	r1, #2
 80010fa:	430a      	orrs	r2, r1
 80010fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80010fe:	4b0b      	ldr	r3, [pc, #44]	@ (800112c <MX_GPIO_Init+0x40>)
 8001100:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001102:	2202      	movs	r2, #2
 8001104:	4013      	ands	r3, r2
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800110a:	4b08      	ldr	r3, [pc, #32]	@ (800112c <MX_GPIO_Init+0x40>)
 800110c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800110e:	4b07      	ldr	r3, [pc, #28]	@ (800112c <MX_GPIO_Init+0x40>)
 8001110:	2101      	movs	r1, #1
 8001112:	430a      	orrs	r2, r1
 8001114:	635a      	str	r2, [r3, #52]	@ 0x34
 8001116:	4b05      	ldr	r3, [pc, #20]	@ (800112c <MX_GPIO_Init+0x40>)
 8001118:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800111a:	2201      	movs	r2, #1
 800111c:	4013      	ands	r3, r2
 800111e:	603b      	str	r3, [r7, #0]
 8001120:	683b      	ldr	r3, [r7, #0]
}
 8001122:	46c0      	nop			@ (mov r8, r8)
 8001124:	46bd      	mov	sp, r7
 8001126:	b002      	add	sp, #8
 8001128:	bd80      	pop	{r7, pc}
 800112a:	46c0      	nop			@ (mov r8, r8)
 800112c:	40021000 	.word	0x40021000

08001130 <Error_Handler>:

void Error_Handler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001134:	b672      	cpsid	i
}
 8001136:	46c0      	nop			@ (mov r8, r8)
 __disable_irq();
  while (1)
  {
	  __NOP();
 8001138:	46c0      	nop			@ (mov r8, r8)
 800113a:	e7fd      	b.n	8001138 <Error_Handler+0x8>

0800113c <CalculateFCS>:
volatile static uint8_t UART_EdgeCounter=0;
volatile static uint32_t UART_Error;


// INTERNAL: FRAME CHECKSUM CALCULATION
void static CalculateFCS(uint8_t aFCS[2],struct FrameBuffer *aFrameBuffer){
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
	uint16_t CurrentFrameSize=4*sizeof(uint8_t)+MBUS_FrameBuffer->PS[0];
 8001146:	4b44      	ldr	r3, [pc, #272]	@ (8001258 <CalculateFCS+0x11c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	791b      	ldrb	r3, [r3, #4]
 800114c:	001a      	movs	r2, r3
 800114e:	2110      	movs	r1, #16
 8001150:	187b      	adds	r3, r7, r1
 8001152:	3204      	adds	r2, #4
 8001154:	801a      	strh	r2, [r3, #0]
	uint8_t *tmpFrameBuffer;
	tmpFrameBuffer=malloc(CurrentFrameSize*sizeof(uint8_t));
 8001156:	187b      	adds	r3, r7, r1
 8001158:	881b      	ldrh	r3, [r3, #0]
 800115a:	0018      	movs	r0, r3
 800115c:	f006 fb92 	bl	8007884 <malloc>
 8001160:	0003      	movs	r3, r0
 8001162:	60fb      	str	r3, [r7, #12]
	tmpFrameBuffer[0]=aFrameBuffer->TXID[0];
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	785a      	ldrb	r2, [r3, #1]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	701a      	strb	r2, [r3, #0]
	tmpFrameBuffer[1]=aFrameBuffer->RXID[0];
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	3301      	adds	r3, #1
 8001170:	683a      	ldr	r2, [r7, #0]
 8001172:	7892      	ldrb	r2, [r2, #2]
 8001174:	701a      	strb	r2, [r3, #0]
	tmpFrameBuffer[2]=aFrameBuffer->CHID[0];
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	3302      	adds	r3, #2
 800117a:	683a      	ldr	r2, [r7, #0]
 800117c:	78d2      	ldrb	r2, [r2, #3]
 800117e:	701a      	strb	r2, [r3, #0]
	tmpFrameBuffer[3]=aFrameBuffer->PS[0];
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	3303      	adds	r3, #3
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	7912      	ldrb	r2, [r2, #4]
 8001188:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0 ; i < aFrameBuffer->PS[0]; i++ ){
 800118a:	2316      	movs	r3, #22
 800118c:	18fb      	adds	r3, r7, r3
 800118e:	2200      	movs	r2, #0
 8001190:	801a      	strh	r2, [r3, #0]
 8001192:	e011      	b.n	80011b8 <CalculateFCS+0x7c>
		tmpFrameBuffer[4+i]=aFrameBuffer->Payload[i];	// copy data from Payload to tmpFrameBuffer
 8001194:	2016      	movs	r0, #22
 8001196:	183b      	adds	r3, r7, r0
 8001198:	881a      	ldrh	r2, [r3, #0]
 800119a:	183b      	adds	r3, r7, r0
 800119c:	881b      	ldrh	r3, [r3, #0]
 800119e:	3304      	adds	r3, #4
 80011a0:	0019      	movs	r1, r3
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	185b      	adds	r3, r3, r1
 80011a6:	6839      	ldr	r1, [r7, #0]
 80011a8:	188a      	adds	r2, r1, r2
 80011aa:	7952      	ldrb	r2, [r2, #5]
 80011ac:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0 ; i < aFrameBuffer->PS[0]; i++ ){
 80011ae:	183b      	adds	r3, r7, r0
 80011b0:	881a      	ldrh	r2, [r3, #0]
 80011b2:	183b      	adds	r3, r7, r0
 80011b4:	3201      	adds	r2, #1
 80011b6:	801a      	strh	r2, [r3, #0]
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	791b      	ldrb	r3, [r3, #4]
 80011bc:	001a      	movs	r2, r3
 80011be:	2316      	movs	r3, #22
 80011c0:	18fb      	adds	r3, r7, r3
 80011c2:	881b      	ldrh	r3, [r3, #0]
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d3e5      	bcc.n	8001194 <CalculateFCS+0x58>
	}

	//HALCPU_CRC_CRC16CCITT(tmpFrameBuffer,CurrentFrameSize,aFCS,0xFFFF);

	uint16_t tmpCRC=0xFFFF;
 80011c8:	2314      	movs	r3, #20
 80011ca:	18fb      	adds	r3, r7, r3
 80011cc:	2201      	movs	r2, #1
 80011ce:	4252      	negs	r2, r2
 80011d0:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < CurrentFrameSize; i++) {
 80011d2:	2312      	movs	r3, #18
 80011d4:	18fb      	adds	r3, r7, r3
 80011d6:	2200      	movs	r2, #0
 80011d8:	801a      	strh	r2, [r3, #0]
 80011da:	e01f      	b.n	800121c <CalculateFCS+0xe0>
    	tmpCRC = HALCPU_CRC_CRC16CCITT_LUT8B_au16[(uint8_t)(tmpFrameBuffer[i] ^ (tmpCRC >> 8))] ^ (tmpCRC << 8);
 80011dc:	2112      	movs	r1, #18
 80011de:	187b      	adds	r3, r7, r1
 80011e0:	881b      	ldrh	r3, [r3, #0]
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	18d3      	adds	r3, r2, r3
 80011e6:	781a      	ldrb	r2, [r3, #0]
 80011e8:	2014      	movs	r0, #20
 80011ea:	183b      	adds	r3, r7, r0
 80011ec:	881b      	ldrh	r3, [r3, #0]
 80011ee:	0a1b      	lsrs	r3, r3, #8
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	4053      	eors	r3, r2
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	001a      	movs	r2, r3
 80011fa:	4b18      	ldr	r3, [pc, #96]	@ (800125c <CalculateFCS+0x120>)
 80011fc:	0052      	lsls	r2, r2, #1
 80011fe:	5ad3      	ldrh	r3, [r2, r3]
 8001200:	b21a      	sxth	r2, r3
 8001202:	183b      	adds	r3, r7, r0
 8001204:	881b      	ldrh	r3, [r3, #0]
 8001206:	021b      	lsls	r3, r3, #8
 8001208:	b21b      	sxth	r3, r3
 800120a:	4053      	eors	r3, r2
 800120c:	b21a      	sxth	r2, r3
 800120e:	183b      	adds	r3, r7, r0
 8001210:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < CurrentFrameSize; i++) {
 8001212:	187b      	adds	r3, r7, r1
 8001214:	881a      	ldrh	r2, [r3, #0]
 8001216:	187b      	adds	r3, r7, r1
 8001218:	3201      	adds	r2, #1
 800121a:	801a      	strh	r2, [r3, #0]
 800121c:	2312      	movs	r3, #18
 800121e:	18fa      	adds	r2, r7, r3
 8001220:	2310      	movs	r3, #16
 8001222:	18fb      	adds	r3, r7, r3
 8001224:	8812      	ldrh	r2, [r2, #0]
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	429a      	cmp	r2, r3
 800122a:	d3d7      	bcc.n	80011dc <CalculateFCS+0xa0>
    }
    aFCS[0] = (uint8_t)(tmpCRC & 0xFF);
 800122c:	2114      	movs	r1, #20
 800122e:	187b      	adds	r3, r7, r1
 8001230:	881b      	ldrh	r3, [r3, #0]
 8001232:	b2da      	uxtb	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	701a      	strb	r2, [r3, #0]
    aFCS[1] = (uint8_t)((tmpCRC >> 8) & 0xFF);
 8001238:	187b      	adds	r3, r7, r1
 800123a:	881b      	ldrh	r3, [r3, #0]
 800123c:	0a1b      	lsrs	r3, r3, #8
 800123e:	b29a      	uxth	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3301      	adds	r3, #1
 8001244:	b2d2      	uxtb	r2, r2
 8001246:	701a      	strb	r2, [r3, #0]

	free(tmpFrameBuffer);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	0018      	movs	r0, r3
 800124c:	f006 fb24 	bl	8007898 <free>
}
 8001250:	46c0      	nop			@ (mov r8, r8)
 8001252:	46bd      	mov	sp, r7
 8001254:	b006      	add	sp, #24
 8001256:	bd80      	pop	{r7, pc}
 8001258:	2000015c 	.word	0x2000015c
 800125c:	08007bd8 	.word	0x08007bd8

08001260 <MBUS_SetTransmittedData>:

// API: UPDATE DATA TO TRANSMIT
unsigned MBUS_SetTransmittedData(const uint8_t aRXID,const uint8_t aCHID,const uint8_t aPayloadSize,const uint8_t aPayload[PAYLOAD_MAX_SIZE],const bool aAlowOverwrite){
 8001260:	b590      	push	{r4, r7, lr}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	0004      	movs	r4, r0
 8001268:	0008      	movs	r0, r1
 800126a:	0011      	movs	r1, r2
 800126c:	603b      	str	r3, [r7, #0]
 800126e:	1dfb      	adds	r3, r7, #7
 8001270:	1c22      	adds	r2, r4, #0
 8001272:	701a      	strb	r2, [r3, #0]
 8001274:	1dbb      	adds	r3, r7, #6
 8001276:	1c02      	adds	r2, r0, #0
 8001278:	701a      	strb	r2, [r3, #0]
 800127a:	1d7b      	adds	r3, r7, #5
 800127c:	1c0a      	adds	r2, r1, #0
 800127e:	701a      	strb	r2, [r3, #0]
	if(	bNewDataToTransmit && !aAlowOverwrite){return 1;}	// last data not processed && overwrite is not allowed
 8001280:	4b2c      	ldr	r3, [pc, #176]	@ (8001334 <MBUS_SetTransmittedData+0xd4>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	b2db      	uxtb	r3, r3
 8001286:	2b00      	cmp	r3, #0
 8001288:	d009      	beq.n	800129e <MBUS_SetTransmittedData+0x3e>
 800128a:	2318      	movs	r3, #24
 800128c:	18fb      	adds	r3, r7, r3
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2201      	movs	r2, #1
 8001292:	4053      	eors	r3, r2
 8001294:	b2db      	uxtb	r3, r3
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MBUS_SetTransmittedData+0x3e>
 800129a:	2301      	movs	r3, #1
 800129c:	e046      	b.n	800132c <MBUS_SetTransmittedData+0xcc>

	MBUS_FrameBuffer_ToTransmit->TXID[0]=myID;
 800129e:	4b26      	ldr	r3, [pc, #152]	@ (8001338 <MBUS_SetTransmittedData+0xd8>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	220c      	movs	r2, #12
 80012a4:	705a      	strb	r2, [r3, #1]
	if(aRXID>=0x00 && aRXID<=0x0F && aRXID!=myID){MBUS_FrameBuffer_ToTransmit->RXID[0]=aRXID;}	// check argument validity
 80012a6:	1dfb      	adds	r3, r7, #7
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b0f      	cmp	r3, #15
 80012ac:	d812      	bhi.n	80012d4 <MBUS_SetTransmittedData+0x74>
 80012ae:	1dfb      	adds	r3, r7, #7
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b0c      	cmp	r3, #12
 80012b4:	d00e      	beq.n	80012d4 <MBUS_SetTransmittedData+0x74>
 80012b6:	4b20      	ldr	r3, [pc, #128]	@ (8001338 <MBUS_SetTransmittedData+0xd8>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	1dfa      	adds	r2, r7, #7
 80012bc:	7812      	ldrb	r2, [r2, #0]
 80012be:	709a      	strb	r2, [r3, #2]
	else{return 2;}

	MBUS_FrameBuffer_ToTransmit->CHID[0]=aCHID;
 80012c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001338 <MBUS_SetTransmittedData+0xd8>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	1dba      	adds	r2, r7, #6
 80012c6:	7812      	ldrb	r2, [r2, #0]
 80012c8:	70da      	strb	r2, [r3, #3]

	if(aPayloadSize>0 && aPayloadSize<=PAYLOAD_MAX_SIZE && aPayload){	// check argument validity
 80012ca:	1d7b      	adds	r3, r7, #5
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d102      	bne.n	80012d8 <MBUS_SetTransmittedData+0x78>
 80012d2:	e02a      	b.n	800132a <MBUS_SetTransmittedData+0xca>
	else{return 2;}
 80012d4:	2302      	movs	r3, #2
 80012d6:	e029      	b.n	800132c <MBUS_SetTransmittedData+0xcc>
	if(aPayloadSize>0 && aPayloadSize<=PAYLOAD_MAX_SIZE && aPayload){	// check argument validity
 80012d8:	1d7b      	adds	r3, r7, #5
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b20      	cmp	r3, #32
 80012de:	d824      	bhi.n	800132a <MBUS_SetTransmittedData+0xca>
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d021      	beq.n	800132a <MBUS_SetTransmittedData+0xca>
		MBUS_FrameBuffer_ToTransmit->PS[0]=aPayloadSize;
 80012e6:	4b14      	ldr	r3, [pc, #80]	@ (8001338 <MBUS_SetTransmittedData+0xd8>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	1d7a      	adds	r2, r7, #5
 80012ec:	7812      	ldrb	r2, [r2, #0]
 80012ee:	711a      	strb	r2, [r3, #4]
		memcpy(MBUS_FrameBuffer_ToTransmit->Payload,aPayload,aPayloadSize);
 80012f0:	4b11      	ldr	r3, [pc, #68]	@ (8001338 <MBUS_SetTransmittedData+0xd8>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	1d58      	adds	r0, r3, #5
 80012f6:	1d7b      	adds	r3, r7, #5
 80012f8:	781a      	ldrb	r2, [r3, #0]
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	0019      	movs	r1, r3
 80012fe:	f006 fbcd 	bl	8007a9c <memcpy>
	}
	else{return 3;}

	CalculateFCS(MBUS_FrameBuffer_ToTransmit->FCS,MBUS_FrameBuffer_ToTransmit);
 8001302:	4b0d      	ldr	r3, [pc, #52]	@ (8001338 <MBUS_SetTransmittedData+0xd8>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	3325      	adds	r3, #37	@ 0x25
 8001308:	001a      	movs	r2, r3
 800130a:	4b0b      	ldr	r3, [pc, #44]	@ (8001338 <MBUS_SetTransmittedData+0xd8>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	0019      	movs	r1, r3
 8001310:	0010      	movs	r0, r2
 8001312:	f7ff ff13 	bl	800113c <CalculateFCS>
	MBUS_FrameBuffer_ToTransmit->ACK[0]=0xFF;
 8001316:	4b08      	ldr	r3, [pc, #32]	@ (8001338 <MBUS_SetTransmittedData+0xd8>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2227      	movs	r2, #39	@ 0x27
 800131c:	21ff      	movs	r1, #255	@ 0xff
 800131e:	5499      	strb	r1, [r3, r2]
	bNewDataToTransmit=true;
 8001320:	4b04      	ldr	r3, [pc, #16]	@ (8001334 <MBUS_SetTransmittedData+0xd4>)
 8001322:	2201      	movs	r2, #1
 8001324:	701a      	strb	r2, [r3, #0]
	return 0;
 8001326:	2300      	movs	r3, #0
 8001328:	e000      	b.n	800132c <MBUS_SetTransmittedData+0xcc>
	else{return 3;}
 800132a:	2303      	movs	r3, #3
}
 800132c:	0018      	movs	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	b003      	add	sp, #12
 8001332:	bd90      	pop	{r4, r7, pc}
 8001334:	2000016a 	.word	0x2000016a
 8001338:	20000160 	.word	0x20000160

0800133c <MBUS_GetProcessedFrame>:

// API: FOR MAIN
enum ProcessedFrameStatus MBUS_GetProcessedFrame(struct FrameBuffer *aFrameBuffer){
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
	if(bNewProcessedData){
 8001344:	4b0b      	ldr	r3, [pc, #44]	@ (8001374 <MBUS_GetProcessedFrame+0x38>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	d00d      	beq.n	800136a <MBUS_GetProcessedFrame+0x2e>
		if(aFrameBuffer== NULL){return ERROR_INVALID_POINTER;}	// invalid pointer
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d101      	bne.n	8001358 <MBUS_GetProcessedFrame+0x1c>
 8001354:	2307      	movs	r3, #7
 8001356:	e009      	b.n	800136c <MBUS_GetProcessedFrame+0x30>
		aFrameBuffer=MBUS_FrameBuffer_Processed;
 8001358:	4b07      	ldr	r3, [pc, #28]	@ (8001378 <MBUS_GetProcessedFrame+0x3c>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	607b      	str	r3, [r7, #4]
		bNewProcessedData=false;
 800135e:	4b05      	ldr	r3, [pc, #20]	@ (8001374 <MBUS_GetProcessedFrame+0x38>)
 8001360:	2200      	movs	r2, #0
 8001362:	701a      	strb	r2, [r3, #0]
		return MBUS_ProcessedFrameStatus;
 8001364:	4b05      	ldr	r3, [pc, #20]	@ (800137c <MBUS_GetProcessedFrame+0x40>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	e000      	b.n	800136c <MBUS_GetProcessedFrame+0x30>
	}
	else{return NO_NEW_DATA;}
 800136a:	2309      	movs	r3, #9
}
 800136c:	0018      	movs	r0, r3
 800136e:	46bd      	mov	sp, r7
 8001370:	b002      	add	sp, #8
 8001372:	bd80      	pop	{r7, pc}
 8001374:	2000016b 	.word	0x2000016b
 8001378:	20000164 	.word	0x20000164
 800137c:	20000159 	.word	0x20000159

08001380 <MBUS_GetFrequencySYNCRatio>:

// API: RETURNS FREQUENCY CALIBRATION RATIO *100
float MBUS_GetFrequencySYNCRatio(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
	//SYNCFrequencyRatio=(100.0f*SYNCbyteDefaultPeriod)/SYNCbytePeriod;//(float)
	SYNCFrequencyRatio=(100.0f*SYNCbytePeriod)/SYNCbyteDefaultPeriod;//(float)
 8001384:	4b14      	ldr	r3, [pc, #80]	@ (80013d8 <MBUS_GetFrequencySYNCRatio+0x58>)
 8001386:	881b      	ldrh	r3, [r3, #0]
 8001388:	0018      	movs	r0, r3
 800138a:	f7ff fd6d 	bl	8000e68 <__aeabi_i2f>
 800138e:	1c03      	adds	r3, r0, #0
 8001390:	4912      	ldr	r1, [pc, #72]	@ (80013dc <MBUS_GetFrequencySYNCRatio+0x5c>)
 8001392:	1c18      	adds	r0, r3, #0
 8001394:	f7ff fa66 	bl	8000864 <__aeabi_fmul>
 8001398:	1c03      	adds	r3, r0, #0
 800139a:	4911      	ldr	r1, [pc, #68]	@ (80013e0 <MBUS_GetFrequencySYNCRatio+0x60>)
 800139c:	1c18      	adds	r0, r3, #0
 800139e:	f7ff f87b 	bl	8000498 <__aeabi_fdiv>
 80013a2:	1c03      	adds	r3, r0, #0
 80013a4:	1c1a      	adds	r2, r3, #0
 80013a6:	4b0f      	ldr	r3, [pc, #60]	@ (80013e4 <MBUS_GetFrequencySYNCRatio+0x64>)
 80013a8:	601a      	str	r2, [r3, #0]
	if(SYNCFrequencyRatio<=SYNCFrequencyRatioMax && SYNCFrequencyRatio>=SYNCFrequencyRatioMin){return SYNCFrequencyRatio;}
 80013aa:	4b0e      	ldr	r3, [pc, #56]	@ (80013e4 <MBUS_GetFrequencySYNCRatio+0x64>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	490e      	ldr	r1, [pc, #56]	@ (80013e8 <MBUS_GetFrequencySYNCRatio+0x68>)
 80013b0:	1c18      	adds	r0, r3, #0
 80013b2:	f7ff f83b 	bl	800042c <__aeabi_fcmple>
 80013b6:	1e03      	subs	r3, r0, #0
 80013b8:	d00a      	beq.n	80013d0 <MBUS_GetFrequencySYNCRatio+0x50>
 80013ba:	4b0a      	ldr	r3, [pc, #40]	@ (80013e4 <MBUS_GetFrequencySYNCRatio+0x64>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	490b      	ldr	r1, [pc, #44]	@ (80013ec <MBUS_GetFrequencySYNCRatio+0x6c>)
 80013c0:	1c18      	adds	r0, r3, #0
 80013c2:	f7ff f847 	bl	8000454 <__aeabi_fcmpge>
 80013c6:	1e03      	subs	r3, r0, #0
 80013c8:	d002      	beq.n	80013d0 <MBUS_GetFrequencySYNCRatio+0x50>
 80013ca:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <MBUS_GetFrequencySYNCRatio+0x64>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	e000      	b.n	80013d2 <MBUS_GetFrequencySYNCRatio+0x52>
	else{return 0.00;}
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	1c18      	adds	r0, r3, #0
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	2000016e 	.word	0x2000016e
 80013dc:	42c80000 	.word	0x42c80000
 80013e0:	44d06000 	.word	0x44d06000
 80013e4:	20000170 	.word	0x20000170
 80013e8:	42ca0000 	.word	0x42ca0000
 80013ec:	42c60000 	.word	0x42c60000

080013f0 <MBUS_UpdateTransmittedBuffer>:

// INTERNAL: INPUT DATA TO TRANSMIT
void static MBUS_UpdateTransmittedBuffer(void){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
	if(bNewDataToTransmit){	// no new data -> transmit IDLE frame
 80013f4:	4b09      	ldr	r3, [pc, #36]	@ (800141c <MBUS_UpdateTransmittedBuffer+0x2c>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d007      	beq.n	800140e <MBUS_UpdateTransmittedBuffer+0x1e>
		MBUS_FrameBuffer=MBUS_FrameBuffer_ToTransmit;
 80013fe:	4b08      	ldr	r3, [pc, #32]	@ (8001420 <MBUS_UpdateTransmittedBuffer+0x30>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	4b08      	ldr	r3, [pc, #32]	@ (8001424 <MBUS_UpdateTransmittedBuffer+0x34>)
 8001404:	601a      	str	r2, [r3, #0]
		bNewDataToTransmit=false;
 8001406:	4b05      	ldr	r3, [pc, #20]	@ (800141c <MBUS_UpdateTransmittedBuffer+0x2c>)
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]
	}
	else{MBUS_FrameBuffer->RXID[0]=IDLEframe;}
}
 800140c:	e003      	b.n	8001416 <MBUS_UpdateTransmittedBuffer+0x26>
	else{MBUS_FrameBuffer->RXID[0]=IDLEframe;}
 800140e:	4b05      	ldr	r3, [pc, #20]	@ (8001424 <MBUS_UpdateTransmittedBuffer+0x34>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	22a5      	movs	r2, #165	@ 0xa5
 8001414:	709a      	strb	r2, [r3, #2]
}
 8001416:	46c0      	nop			@ (mov r8, r8)
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	2000016a 	.word	0x2000016a
 8001420:	20000160 	.word	0x20000160
 8001424:	2000015c 	.word	0x2000015c

08001428 <MBUS_UpdateProcessedBuffer>:

// INTERNAL: RECEIVED DATA TO OUTPUT BUFFER
void static MBUS_UpdateProcessedBuffer(enum ProcessedFrameStatus aProcessedFrameStatus){
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	0002      	movs	r2, r0
 8001430:	1dfb      	adds	r3, r7, #7
 8001432:	701a      	strb	r2, [r3, #0]
	MBUS_FrameBuffer_Processed=MBUS_FrameBuffer;
 8001434:	4b07      	ldr	r3, [pc, #28]	@ (8001454 <MBUS_UpdateProcessedBuffer+0x2c>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	4b07      	ldr	r3, [pc, #28]	@ (8001458 <MBUS_UpdateProcessedBuffer+0x30>)
 800143a:	601a      	str	r2, [r3, #0]
	MBUS_ProcessedFrameStatus = aProcessedFrameStatus;
 800143c:	4b07      	ldr	r3, [pc, #28]	@ (800145c <MBUS_UpdateProcessedBuffer+0x34>)
 800143e:	1dfa      	adds	r2, r7, #7
 8001440:	7812      	ldrb	r2, [r2, #0]
 8001442:	701a      	strb	r2, [r3, #0]
	bNewProcessedData=true;
 8001444:	4b06      	ldr	r3, [pc, #24]	@ (8001460 <MBUS_UpdateProcessedBuffer+0x38>)
 8001446:	2201      	movs	r2, #1
 8001448:	701a      	strb	r2, [r3, #0]
}
 800144a:	46c0      	nop			@ (mov r8, r8)
 800144c:	46bd      	mov	sp, r7
 800144e:	b002      	add	sp, #8
 8001450:	bd80      	pop	{r7, pc}
 8001452:	46c0      	nop			@ (mov r8, r8)
 8001454:	2000015c 	.word	0x2000015c
 8001458:	20000164 	.word	0x20000164
 800145c:	20000159 	.word	0x20000159
 8001460:	2000016b 	.word	0x2000016b

08001464 <MBUS_StartTimeoutTimer>:

void MBUS_StartTimeoutTimer(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim3,0);
 8001468:	4b0a      	ldr	r3, [pc, #40]	@ (8001494 <MBUS_StartTimeoutTimer+0x30>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2200      	movs	r2, #0
 800146e:	625a      	str	r2, [r3, #36]	@ 0x24

	//HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);		// START TIMEOUT TIMER
	HAL_TIM_Base_Start(&htim3);
 8001470:	4b08      	ldr	r3, [pc, #32]	@ (8001494 <MBUS_StartTimeoutTimer+0x30>)
 8001472:	0018      	movs	r0, r3
 8001474:	f002 f9e2 	bl	800383c <HAL_TIM_Base_Start>

	if(MBUS_FrameStatus==TXID)
 8001478:	4b07      	ldr	r3, [pc, #28]	@ (8001498 <MBUS_StartTimeoutTimer+0x34>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d105      	bne.n	800148c <MBUS_StartTimeoutTimer+0x28>
	{
		HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001480:	2007      	movs	r0, #7
 8001482:	f001 fa94 	bl	80029ae <HAL_NVIC_EnableIRQ>
		UART_EdgeCounter=0;
 8001486:	4b05      	ldr	r3, [pc, #20]	@ (800149c <MBUS_StartTimeoutTimer+0x38>)
 8001488:	2200      	movs	r2, #0
 800148a:	701a      	strb	r2, [r3, #0]
	}
}
 800148c:	46c0      	nop			@ (mov r8, r8)
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	46c0      	nop			@ (mov r8, r8)
 8001494:	20000078 	.word	0x20000078
 8001498:	20000158 	.word	0x20000158
 800149c:	2000017a 	.word	0x2000017a

080014a0 <MBUS_StopTimeoutTimer>:

void MBUS_StopTimeoutTimer(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0

	//HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_1);		// STOP TIMEOUT TIMER
	HAL_TIM_Base_Stop(&htim3);
 80014a4:	4b0e      	ldr	r3, [pc, #56]	@ (80014e0 <MBUS_StopTimeoutTimer+0x40>)
 80014a6:	0018      	movs	r0, r3
 80014a8:	f002 fa0e 	bl	80038c8 <HAL_TIM_Base_Stop>
	if(MBUS_FrameStatus==TXID && MBUS_FrameBuffer->TXID[0]==SYNCbyte)
 80014ac:	4b0d      	ldr	r3, [pc, #52]	@ (80014e4 <MBUS_StopTimeoutTimer+0x44>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d111      	bne.n	80014d8 <MBUS_StopTimeoutTimer+0x38>
 80014b4:	4b0c      	ldr	r3, [pc, #48]	@ (80014e8 <MBUS_StopTimeoutTimer+0x48>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	785b      	ldrb	r3, [r3, #1]
 80014ba:	2b05      	cmp	r3, #5
 80014bc:	d10c      	bne.n	80014d8 <MBUS_StopTimeoutTimer+0x38>
	{
		HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 80014be:	2007      	movs	r0, #7
 80014c0:	f001 fa85 	bl	80029ce <HAL_NVIC_DisableIRQ>
		SYNCbytePeriod=UART_EdgePeriodStopTime-UART_EdgePeriodStartTime;
 80014c4:	4b09      	ldr	r3, [pc, #36]	@ (80014ec <MBUS_StopTimeoutTimer+0x4c>)
 80014c6:	881b      	ldrh	r3, [r3, #0]
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	4b09      	ldr	r3, [pc, #36]	@ (80014f0 <MBUS_StopTimeoutTimer+0x50>)
 80014cc:	881b      	ldrh	r3, [r3, #0]
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	b29a      	uxth	r2, r3
 80014d4:	4b07      	ldr	r3, [pc, #28]	@ (80014f4 <MBUS_StopTimeoutTimer+0x54>)
 80014d6:	801a      	strh	r2, [r3, #0]
	}
}
 80014d8:	46c0      	nop			@ (mov r8, r8)
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	46c0      	nop			@ (mov r8, r8)
 80014e0:	20000078 	.word	0x20000078
 80014e4:	20000158 	.word	0x20000158
 80014e8:	2000015c 	.word	0x2000015c
 80014ec:	20000178 	.word	0x20000178
 80014f0:	20000176 	.word	0x20000176
 80014f4:	2000016e 	.word	0x2000016e

080014f8 <MBUS_Reset>:


// INTERNAL: RESET COMMUNICATION
void static MBUS_Reset(void){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
	//HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_1);
	MBUS_StopTimeoutTimer();
 80014fc:	f7ff ffd0 	bl	80014a0 <MBUS_StopTimeoutTimer>

	HAL_UART_AbortTransmit_IT(&huart);	// not tested yet
 8001500:	4b0f      	ldr	r3, [pc, #60]	@ (8001540 <MBUS_Reset+0x48>)
 8001502:	0018      	movs	r0, r3
 8001504:	f003 ffac 	bl	8005460 <HAL_UART_AbortTransmit_IT>
	HAL_UART_AbortReceive_IT(&huart);	// not tested yet
 8001508:	4b0d      	ldr	r3, [pc, #52]	@ (8001540 <MBUS_Reset+0x48>)
 800150a:	0018      	movs	r0, r3
 800150c:	f004 f84c 	bl	80055a8 <HAL_UART_AbortReceive_IT>

	Payload_UARTCount=0;
 8001510:	4b0c      	ldr	r3, [pc, #48]	@ (8001544 <MBUS_Reset+0x4c>)
 8001512:	2200      	movs	r2, #0
 8001514:	701a      	strb	r2, [r3, #0]
	FCS_UARTCount=0;
 8001516:	4b0c      	ldr	r3, [pc, #48]	@ (8001548 <MBUS_Reset+0x50>)
 8001518:	2200      	movs	r2, #0
 800151a:	701a      	strb	r2, [r3, #0]

	MBUS_FrameBuffer->TXID[0]=0xFF;
 800151c:	4b0b      	ldr	r3, [pc, #44]	@ (800154c <MBUS_Reset+0x54>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	22ff      	movs	r2, #255	@ 0xff
 8001522:	705a      	strb	r2, [r3, #1]
	HAL_UART_Receive_IT(&huart,MBUS_FrameBuffer->BREAK, sizeof(MBUS_FrameBuffer->BREAK));
 8001524:	4b09      	ldr	r3, [pc, #36]	@ (800154c <MBUS_Reset+0x54>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	0019      	movs	r1, r3
 800152a:	4b05      	ldr	r3, [pc, #20]	@ (8001540 <MBUS_Reset+0x48>)
 800152c:	2201      	movs	r2, #1
 800152e:	0018      	movs	r0, r3
 8001530:	f003 ff3e 	bl	80053b0 <HAL_UART_Receive_IT>
	MBUS_FrameStatus=IDLE;
 8001534:	4b06      	ldr	r3, [pc, #24]	@ (8001550 <MBUS_Reset+0x58>)
 8001536:	2200      	movs	r2, #0
 8001538:	701a      	strb	r2, [r3, #0]
}
 800153a:	46c0      	nop			@ (mov r8, r8)
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	200000c4 	.word	0x200000c4
 8001544:	2000016c 	.word	0x2000016c
 8001548:	2000016d 	.word	0x2000016d
 800154c:	2000015c 	.word	0x2000015c
 8001550:	20000158 	.word	0x20000158

08001554 <MBUS_Init>:

// API: INIT FUNCTION FOR UART AND TIMEOUT TIMER
unsigned MBUS_Init(void) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b094      	sub	sp, #80	@ 0x50
 8001558:	af00      	add	r7, sp, #0
	// MBUS UART INIT
	huart.Instance = USART1;
 800155a:	4b81      	ldr	r3, [pc, #516]	@ (8001760 <MBUS_Init+0x20c>)
 800155c:	4a81      	ldr	r2, [pc, #516]	@ (8001764 <MBUS_Init+0x210>)
 800155e:	601a      	str	r2, [r3, #0]
	huart.Init.BaudRate = 57600;
 8001560:	4b7f      	ldr	r3, [pc, #508]	@ (8001760 <MBUS_Init+0x20c>)
 8001562:	22e1      	movs	r2, #225	@ 0xe1
 8001564:	0212      	lsls	r2, r2, #8
 8001566:	605a      	str	r2, [r3, #4]
	huart.Init.WordLength = UART_WORDLENGTH_8B;
 8001568:	4b7d      	ldr	r3, [pc, #500]	@ (8001760 <MBUS_Init+0x20c>)
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
	huart.Init.StopBits = UART_STOPBITS_1;
 800156e:	4b7c      	ldr	r3, [pc, #496]	@ (8001760 <MBUS_Init+0x20c>)
 8001570:	2200      	movs	r2, #0
 8001572:	60da      	str	r2, [r3, #12]
	huart.Init.Parity = UART_PARITY_NONE;
 8001574:	4b7a      	ldr	r3, [pc, #488]	@ (8001760 <MBUS_Init+0x20c>)
 8001576:	2200      	movs	r2, #0
 8001578:	611a      	str	r2, [r3, #16]
	huart.Init.Mode = UART_MODE_TX_RX;
 800157a:	4b79      	ldr	r3, [pc, #484]	@ (8001760 <MBUS_Init+0x20c>)
 800157c:	220c      	movs	r2, #12
 800157e:	615a      	str	r2, [r3, #20]
	huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001580:	4b77      	ldr	r3, [pc, #476]	@ (8001760 <MBUS_Init+0x20c>)
 8001582:	2200      	movs	r2, #0
 8001584:	619a      	str	r2, [r3, #24]
	huart.Init.OverSampling = UART_OVERSAMPLING_16;
 8001586:	4b76      	ldr	r3, [pc, #472]	@ (8001760 <MBUS_Init+0x20c>)
 8001588:	2200      	movs	r2, #0
 800158a:	61da      	str	r2, [r3, #28]
	huart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800158c:	4b74      	ldr	r3, [pc, #464]	@ (8001760 <MBUS_Init+0x20c>)
 800158e:	2200      	movs	r2, #0
 8001590:	621a      	str	r2, [r3, #32]
	huart.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001592:	4b73      	ldr	r3, [pc, #460]	@ (8001760 <MBUS_Init+0x20c>)
 8001594:	2200      	movs	r2, #0
 8001596:	625a      	str	r2, [r3, #36]	@ 0x24
	huart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001598:	4b71      	ldr	r3, [pc, #452]	@ (8001760 <MBUS_Init+0x20c>)
 800159a:	2200      	movs	r2, #0
 800159c:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart) != HAL_OK) {return 1;}
 800159e:	4b70      	ldr	r3, [pc, #448]	@ (8001760 <MBUS_Init+0x20c>)
 80015a0:	0018      	movs	r0, r3
 80015a2:	f003 fd8d 	bl	80050c0 <HAL_UART_Init>
 80015a6:	1e03      	subs	r3, r0, #0
 80015a8:	d001      	beq.n	80015ae <MBUS_Init+0x5a>
 80015aa:	2301      	movs	r3, #1
 80015ac:	e0d3      	b.n	8001756 <MBUS_Init+0x202>
	if (HAL_UARTEx_SetTxFifoThreshold(&huart, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK) {return 2;}
 80015ae:	4b6c      	ldr	r3, [pc, #432]	@ (8001760 <MBUS_Init+0x20c>)
 80015b0:	2100      	movs	r1, #0
 80015b2:	0018      	movs	r0, r3
 80015b4:	f006 f84e 	bl	8007654 <HAL_UARTEx_SetTxFifoThreshold>
 80015b8:	1e03      	subs	r3, r0, #0
 80015ba:	d001      	beq.n	80015c0 <MBUS_Init+0x6c>
 80015bc:	2302      	movs	r3, #2
 80015be:	e0ca      	b.n	8001756 <MBUS_Init+0x202>
	if (HAL_UARTEx_SetRxFifoThreshold(&huart, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK) {return 3;}
 80015c0:	4b67      	ldr	r3, [pc, #412]	@ (8001760 <MBUS_Init+0x20c>)
 80015c2:	2100      	movs	r1, #0
 80015c4:	0018      	movs	r0, r3
 80015c6:	f006 f885 	bl	80076d4 <HAL_UARTEx_SetRxFifoThreshold>
 80015ca:	1e03      	subs	r3, r0, #0
 80015cc:	d001      	beq.n	80015d2 <MBUS_Init+0x7e>
 80015ce:	2303      	movs	r3, #3
 80015d0:	e0c1      	b.n	8001756 <MBUS_Init+0x202>
	//if (HAL_UARTEx_DisableFifoMode(&huart) != HAL_OK) {return 4;}

	if (HAL_LIN_Init(&huart,UART_LINBREAKDETECTLENGTH_11B)) {return 11;}	// BREAK DETECT LENGTH
 80015d2:	4b63      	ldr	r3, [pc, #396]	@ (8001760 <MBUS_Init+0x20c>)
 80015d4:	2120      	movs	r1, #32
 80015d6:	0018      	movs	r0, r3
 80015d8:	f003 fdc8 	bl	800516c <HAL_LIN_Init>
 80015dc:	1e03      	subs	r3, r0, #0
 80015de:	d001      	beq.n	80015e4 <MBUS_Init+0x90>
 80015e0:	230b      	movs	r3, #11
 80015e2:	e0b8      	b.n	8001756 <MBUS_Init+0x202>
	//HAL_UART_ReceiverTimeout_Config(&huart,5);

	MBUS_FrameBuffer=calloc(1,sizeof(struct FrameBuffer));
 80015e4:	2128      	movs	r1, #40	@ 0x28
 80015e6:	2001      	movs	r0, #1
 80015e8:	f006 f914 	bl	8007814 <calloc>
 80015ec:	0003      	movs	r3, r0
 80015ee:	001a      	movs	r2, r3
 80015f0:	4b5d      	ldr	r3, [pc, #372]	@ (8001768 <MBUS_Init+0x214>)
 80015f2:	601a      	str	r2, [r3, #0]
	MBUS_FrameBuffer_ToTransmit=calloc(1,sizeof(struct FrameBuffer));
 80015f4:	2128      	movs	r1, #40	@ 0x28
 80015f6:	2001      	movs	r0, #1
 80015f8:	f006 f90c 	bl	8007814 <calloc>
 80015fc:	0003      	movs	r3, r0
 80015fe:	001a      	movs	r2, r3
 8001600:	4b5a      	ldr	r3, [pc, #360]	@ (800176c <MBUS_Init+0x218>)
 8001602:	601a      	str	r2, [r3, #0]
	MBUS_FrameBuffer_Processed=calloc(1,sizeof(struct FrameBuffer));
 8001604:	2128      	movs	r1, #40	@ 0x28
 8001606:	2001      	movs	r0, #1
 8001608:	f006 f904 	bl	8007814 <calloc>
 800160c:	0003      	movs	r3, r0
 800160e:	001a      	movs	r2, r3
 8001610:	4b57      	ldr	r3, [pc, #348]	@ (8001770 <MBUS_Init+0x21c>)
 8001612:	601a      	str	r2, [r3, #0]
	if (MBUS_FrameBuffer== NULL || MBUS_FrameBuffer_ToTransmit== NULL || MBUS_FrameBuffer_Processed== NULL) {return 5;}
 8001614:	4b54      	ldr	r3, [pc, #336]	@ (8001768 <MBUS_Init+0x214>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d007      	beq.n	800162c <MBUS_Init+0xd8>
 800161c:	4b53      	ldr	r3, [pc, #332]	@ (800176c <MBUS_Init+0x218>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d003      	beq.n	800162c <MBUS_Init+0xd8>
 8001624:	4b52      	ldr	r3, [pc, #328]	@ (8001770 <MBUS_Init+0x21c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d101      	bne.n	8001630 <MBUS_Init+0xdc>
 800162c:	2305      	movs	r3, #5
 800162e:	e092      	b.n	8001756 <MBUS_Init+0x202>

	// MBUS TIMEOUT TIMER INIT
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001630:	2344      	movs	r3, #68	@ 0x44
 8001632:	18fb      	adds	r3, r7, r3
 8001634:	0018      	movs	r0, r3
 8001636:	230c      	movs	r3, #12
 8001638:	001a      	movs	r2, r3
 800163a:	2100      	movs	r1, #0
 800163c:	f006 f9e8 	bl	8007a10 <memset>
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001640:	2334      	movs	r3, #52	@ 0x34
 8001642:	18fb      	adds	r3, r7, r3
 8001644:	0018      	movs	r0, r3
 8001646:	2310      	movs	r3, #16
 8001648:	001a      	movs	r2, r3
 800164a:	2100      	movs	r1, #0
 800164c:	f006 f9e0 	bl	8007a10 <memset>
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001650:	2318      	movs	r3, #24
 8001652:	18fb      	adds	r3, r7, r3
 8001654:	0018      	movs	r0, r3
 8001656:	231c      	movs	r3, #28
 8001658:	001a      	movs	r2, r3
 800165a:	2100      	movs	r1, #0
 800165c:	f006 f9d8 	bl	8007a10 <memset>
	htim3.Instance = TIM3;
 8001660:	4b44      	ldr	r3, [pc, #272]	@ (8001774 <MBUS_Init+0x220>)
 8001662:	4a45      	ldr	r2, [pc, #276]	@ (8001778 <MBUS_Init+0x224>)
 8001664:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;	// 0 pro 48 MHz
 8001666:	4b43      	ldr	r3, [pc, #268]	@ (8001774 <MBUS_Init+0x220>)
 8001668:	2200      	movs	r2, #0
 800166a:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800166c:	4b41      	ldr	r3, [pc, #260]	@ (8001774 <MBUS_Init+0x220>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8001672:	4b40      	ldr	r3, [pc, #256]	@ (8001774 <MBUS_Init+0x220>)
 8001674:	4a41      	ldr	r2, [pc, #260]	@ (800177c <MBUS_Init+0x228>)
 8001676:	60da      	str	r2, [r3, #12]
	//htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001678:	4b3e      	ldr	r3, [pc, #248]	@ (8001774 <MBUS_Init+0x220>)
 800167a:	2200      	movs	r2, #0
 800167c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK){return 6;}
 800167e:	4b3d      	ldr	r3, [pc, #244]	@ (8001774 <MBUS_Init+0x220>)
 8001680:	0018      	movs	r0, r3
 8001682:	f002 f883 	bl	800378c <HAL_TIM_Base_Init>
 8001686:	1e03      	subs	r3, r0, #0
 8001688:	d001      	beq.n	800168e <MBUS_Init+0x13a>
 800168a:	2306      	movs	r3, #6
 800168c:	e063      	b.n	8001756 <MBUS_Init+0x202>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800168e:	2134      	movs	r1, #52	@ 0x34
 8001690:	187b      	adds	r3, r7, r1
 8001692:	2280      	movs	r2, #128	@ 0x80
 8001694:	0152      	lsls	r2, r2, #5
 8001696:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK){return 7;}
 8001698:	187a      	adds	r2, r7, r1
 800169a:	4b36      	ldr	r3, [pc, #216]	@ (8001774 <MBUS_Init+0x220>)
 800169c:	0011      	movs	r1, r2
 800169e:	0018      	movs	r0, r3
 80016a0:	f002 fe8a 	bl	80043b8 <HAL_TIM_ConfigClockSource>
 80016a4:	1e03      	subs	r3, r0, #0
 80016a6:	d001      	beq.n	80016ac <MBUS_Init+0x158>
 80016a8:	2307      	movs	r3, #7
 80016aa:	e054      	b.n	8001756 <MBUS_Init+0x202>
	if (HAL_TIM_OC_Init(&htim3) != HAL_OK){return 8;}
 80016ac:	4b31      	ldr	r3, [pc, #196]	@ (8001774 <MBUS_Init+0x220>)
 80016ae:	0018      	movs	r0, r3
 80016b0:	f002 f97e 	bl	80039b0 <HAL_TIM_OC_Init>
 80016b4:	1e03      	subs	r3, r0, #0
 80016b6:	d001      	beq.n	80016bc <MBUS_Init+0x168>
 80016b8:	2308      	movs	r3, #8
 80016ba:	e04c      	b.n	8001756 <MBUS_Init+0x202>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016bc:	2144      	movs	r1, #68	@ 0x44
 80016be:	187b      	adds	r3, r7, r1
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c4:	187b      	adds	r3, r7, r1
 80016c6:	2200      	movs	r2, #0
 80016c8:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK){return 9;}
 80016ca:	187a      	adds	r2, r7, r1
 80016cc:	4b29      	ldr	r3, [pc, #164]	@ (8001774 <MBUS_Init+0x220>)
 80016ce:	0011      	movs	r1, r2
 80016d0:	0018      	movs	r0, r3
 80016d2:	f003 fc7b 	bl	8004fcc <HAL_TIMEx_MasterConfigSynchronization>
 80016d6:	1e03      	subs	r3, r0, #0
 80016d8:	d001      	beq.n	80016de <MBUS_Init+0x18a>
 80016da:	2309      	movs	r3, #9
 80016dc:	e03b      	b.n	8001756 <MBUS_Init+0x202>
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80016de:	2118      	movs	r1, #24
 80016e0:	187b      	adds	r3, r7, r1
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = MBUS_MAX_FRAME_TIME;
 80016e6:	187b      	adds	r3, r7, r1
 80016e8:	4a25      	ldr	r2, [pc, #148]	@ (8001780 <MBUS_Init+0x22c>)
 80016ea:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016ec:	187b      	adds	r3, r7, r1
 80016ee:	2200      	movs	r2, #0
 80016f0:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016f2:	187b      	adds	r3, r7, r1
 80016f4:	2200      	movs	r2, #0
 80016f6:	611a      	str	r2, [r3, #16]
	if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK){return 10;}
 80016f8:	1879      	adds	r1, r7, r1
 80016fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001774 <MBUS_Init+0x220>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	0018      	movs	r0, r3
 8001700:	f002 fd56 	bl	80041b0 <HAL_TIM_OC_ConfigChannel>
 8001704:	1e03      	subs	r3, r0, #0
 8001706:	d001      	beq.n	800170c <MBUS_Init+0x1b8>
 8001708:	230a      	movs	r3, #10
 800170a:	e024      	b.n	8001756 <MBUS_Init+0x202>
	HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);		// INTERRUPT ON TIMER 3
 800170c:	4b19      	ldr	r3, [pc, #100]	@ (8001774 <MBUS_Init+0x220>)
 800170e:	2100      	movs	r1, #0
 8001710:	0018      	movs	r0, r3
 8001712:	f002 f9a5 	bl	8003a60 <HAL_TIM_OC_Start_IT>

	// EXTERNAL INTERRUPT FOR FRAME TIMING
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001716:	1d3b      	adds	r3, r7, #4
 8001718:	0018      	movs	r0, r3
 800171a:	2314      	movs	r3, #20
 800171c:	001a      	movs	r2, r3
 800171e:	2100      	movs	r1, #0
 8001720:	f006 f976 	bl	8007a10 <memset>
	GPIO_InitStruct.Pin = UARTtiming_Pin;
 8001724:	1d3b      	adds	r3, r7, #4
 8001726:	2280      	movs	r2, #128	@ 0x80
 8001728:	0152      	lsls	r2, r2, #5
 800172a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800172c:	1d3b      	adds	r3, r7, #4
 800172e:	4a15      	ldr	r2, [pc, #84]	@ (8001784 <MBUS_Init+0x230>)
 8001730:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	1d3b      	adds	r3, r7, #4
 8001734:	2200      	movs	r2, #0
 8001736:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(UARTtiming_GPIO_Port, &GPIO_InitStruct);
 8001738:	1d3a      	adds	r2, r7, #4
 800173a:	23a0      	movs	r3, #160	@ 0xa0
 800173c:	05db      	lsls	r3, r3, #23
 800173e:	0011      	movs	r1, r2
 8001740:	0018      	movs	r0, r3
 8001742:	f001 fa3d 	bl	8002bc0 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001746:	2200      	movs	r2, #0
 8001748:	2100      	movs	r1, #0
 800174a:	2007      	movs	r0, #7
 800174c:	f001 f91a 	bl	8002984 <HAL_NVIC_SetPriority>
	//HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);

	// START COMMUNICATION
	MBUS_Reset();
 8001750:	f7ff fed2 	bl	80014f8 <MBUS_Reset>
	return 0;
 8001754:	2300      	movs	r3, #0
}
 8001756:	0018      	movs	r0, r3
 8001758:	46bd      	mov	sp, r7
 800175a:	b014      	add	sp, #80	@ 0x50
 800175c:	bd80      	pop	{r7, pc}
 800175e:	46c0      	nop			@ (mov r8, r8)
 8001760:	200000c4 	.word	0x200000c4
 8001764:	40013800 	.word	0x40013800
 8001768:	2000015c 	.word	0x2000015c
 800176c:	20000160 	.word	0x20000160
 8001770:	20000164 	.word	0x20000164
 8001774:	20000078 	.word	0x20000078
 8001778:	40000400 	.word	0x40000400
 800177c:	0000ffff 	.word	0x0000ffff
 8001780:	00003a98 	.word	0x00003a98
 8001784:	10210000 	.word	0x10210000

08001788 <HAL_UART_TxCpltCallback>:

// INTERNAL: INTERRUPT - UART FINISHED TRANSMITTING
 void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1){
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a53      	ldr	r2, [pc, #332]	@ (80018e4 <HAL_UART_TxCpltCallback+0x15c>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d000      	beq.n	800179c <HAL_UART_TxCpltCallback+0x14>
 800179a:	e09f      	b.n	80018dc <HAL_UART_TxCpltCallback+0x154>
    	//__disable_irq();
    	MBUS_StopTimeoutTimer();
 800179c:	f7ff fe80 	bl	80014a0 <MBUS_StopTimeoutTimer>
    	switch (MBUS_FrameStatus) {
 80017a0:	4b51      	ldr	r3, [pc, #324]	@ (80018e8 <HAL_UART_TxCpltCallback+0x160>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b07      	cmp	r3, #7
 80017a6:	d900      	bls.n	80017aa <HAL_UART_TxCpltCallback+0x22>
 80017a8:	e08e      	b.n	80018c8 <HAL_UART_TxCpltCallback+0x140>
 80017aa:	009a      	lsls	r2, r3, #2
 80017ac:	4b4f      	ldr	r3, [pc, #316]	@ (80018ec <HAL_UART_TxCpltCallback+0x164>)
 80017ae:	18d3      	adds	r3, r2, r3
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	469f      	mov	pc, r3
    	    case IDLE:
    	    	break;

    	    case TXID:
    	    	// FAULT:
    	    	MBUS_Reset();
 80017b4:	f7ff fea0 	bl	80014f8 <MBUS_Reset>
    	    	break;
 80017b8:	e08e      	b.n	80018d8 <HAL_UART_TxCpltCallback+0x150>

    	    case RXID:
    	    	// MASTER:
    	    	if(MBUS_FrameBuffer->RXID[0]==IDLEframe){
 80017ba:	4b4d      	ldr	r3, [pc, #308]	@ (80018f0 <HAL_UART_TxCpltCallback+0x168>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	789b      	ldrb	r3, [r3, #2]
 80017c0:	2ba5      	cmp	r3, #165	@ 0xa5
 80017c2:	d105      	bne.n	80017d0 <HAL_UART_TxCpltCallback+0x48>
	    			MBUS_UpdateProcessedBuffer(TX_IDLE_FRAME);
 80017c4:	2000      	movs	r0, #0
 80017c6:	f7ff fe2f 	bl	8001428 <MBUS_UpdateProcessedBuffer>
    	    		MBUS_Reset();	// transmitted IDLE frame -> wait for new communication
 80017ca:	f7ff fe95 	bl	80014f8 <MBUS_Reset>
    	    		break;
 80017ce:	e083      	b.n	80018d8 <HAL_UART_TxCpltCallback+0x150>
    	    	}
    	    	else{
    	    		HAL_UART_Transmit_IT(huart,MBUS_FrameBuffer->CHID, sizeof(MBUS_FrameBuffer->CHID));
 80017d0:	4b47      	ldr	r3, [pc, #284]	@ (80018f0 <HAL_UART_TxCpltCallback+0x168>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	1cd9      	adds	r1, r3, #3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2201      	movs	r2, #1
 80017da:	0018      	movs	r0, r3
 80017dc:	f003 fd40 	bl	8005260 <HAL_UART_Transmit_IT>
    	    		MBUS_FrameStatus=CHID;
 80017e0:	4b41      	ldr	r3, [pc, #260]	@ (80018e8 <HAL_UART_TxCpltCallback+0x160>)
 80017e2:	2203      	movs	r2, #3
 80017e4:	701a      	strb	r2, [r3, #0]
    	    		break;
 80017e6:	e077      	b.n	80018d8 <HAL_UART_TxCpltCallback+0x150>
    	    	}

    	    case CHID:
    	        // MASTER:
        		HAL_UART_Transmit_IT(huart,MBUS_FrameBuffer->PS, sizeof(MBUS_FrameBuffer->PS));
 80017e8:	4b41      	ldr	r3, [pc, #260]	@ (80018f0 <HAL_UART_TxCpltCallback+0x168>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	1d19      	adds	r1, r3, #4
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2201      	movs	r2, #1
 80017f2:	0018      	movs	r0, r3
 80017f4:	f003 fd34 	bl	8005260 <HAL_UART_Transmit_IT>
	        	MBUS_FrameStatus=PS;
 80017f8:	4b3b      	ldr	r3, [pc, #236]	@ (80018e8 <HAL_UART_TxCpltCallback+0x160>)
 80017fa:	2204      	movs	r2, #4
 80017fc:	701a      	strb	r2, [r3, #0]
        		break;
 80017fe:	e06b      	b.n	80018d8 <HAL_UART_TxCpltCallback+0x150>

    	    case PS:
    	    	// MASTER:
    	    	HAL_UART_Transmit_IT(huart,MBUS_FrameBuffer->Payload+Payload_UARTCount,sizeof(uint8_t));
 8001800:	4b3b      	ldr	r3, [pc, #236]	@ (80018f0 <HAL_UART_TxCpltCallback+0x168>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	3305      	adds	r3, #5
 8001806:	4a3b      	ldr	r2, [pc, #236]	@ (80018f4 <HAL_UART_TxCpltCallback+0x16c>)
 8001808:	7812      	ldrb	r2, [r2, #0]
 800180a:	b2d2      	uxtb	r2, r2
 800180c:	1899      	adds	r1, r3, r2
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2201      	movs	r2, #1
 8001812:	0018      	movs	r0, r3
 8001814:	f003 fd24 	bl	8005260 <HAL_UART_Transmit_IT>
	    		Payload_UARTCount++;
 8001818:	4b36      	ldr	r3, [pc, #216]	@ (80018f4 <HAL_UART_TxCpltCallback+0x16c>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	b2db      	uxtb	r3, r3
 800181e:	3301      	adds	r3, #1
 8001820:	b2da      	uxtb	r2, r3
 8001822:	4b34      	ldr	r3, [pc, #208]	@ (80018f4 <HAL_UART_TxCpltCallback+0x16c>)
 8001824:	701a      	strb	r2, [r3, #0]
    	    	if(Payload_UARTCount>=MBUS_FrameBuffer->PS[0])
 8001826:	4b32      	ldr	r3, [pc, #200]	@ (80018f0 <HAL_UART_TxCpltCallback+0x168>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	791a      	ldrb	r2, [r3, #4]
 800182c:	4b31      	ldr	r3, [pc, #196]	@ (80018f4 <HAL_UART_TxCpltCallback+0x16c>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	b2db      	uxtb	r3, r3
 8001832:	429a      	cmp	r2, r3
 8001834:	d84d      	bhi.n	80018d2 <HAL_UART_TxCpltCallback+0x14a>
    	    	{
        	    	Payload_UARTCount=0;
 8001836:	4b2f      	ldr	r3, [pc, #188]	@ (80018f4 <HAL_UART_TxCpltCallback+0x16c>)
 8001838:	2200      	movs	r2, #0
 800183a:	701a      	strb	r2, [r3, #0]
        	    	MBUS_FrameStatus=Payload;
 800183c:	4b2a      	ldr	r3, [pc, #168]	@ (80018e8 <HAL_UART_TxCpltCallback+0x160>)
 800183e:	2205      	movs	r2, #5
 8001840:	701a      	strb	r2, [r3, #0]
    	    	}
    	        break;
 8001842:	e046      	b.n	80018d2 <HAL_UART_TxCpltCallback+0x14a>

    	    case Payload:
    	    	// MASTER:
    	    	HAL_UART_Transmit_IT(huart,MBUS_FrameBuffer->FCS+FCS_UARTCount, sizeof(uint8_t));
 8001844:	4b2a      	ldr	r3, [pc, #168]	@ (80018f0 <HAL_UART_TxCpltCallback+0x168>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	3325      	adds	r3, #37	@ 0x25
 800184a:	4a2b      	ldr	r2, [pc, #172]	@ (80018f8 <HAL_UART_TxCpltCallback+0x170>)
 800184c:	7812      	ldrb	r2, [r2, #0]
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	1899      	adds	r1, r3, r2
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2201      	movs	r2, #1
 8001856:	0018      	movs	r0, r3
 8001858:	f003 fd02 	bl	8005260 <HAL_UART_Transmit_IT>
	    		FCS_UARTCount++;
 800185c:	4b26      	ldr	r3, [pc, #152]	@ (80018f8 <HAL_UART_TxCpltCallback+0x170>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	b2db      	uxtb	r3, r3
 8001862:	3301      	adds	r3, #1
 8001864:	b2da      	uxtb	r2, r3
 8001866:	4b24      	ldr	r3, [pc, #144]	@ (80018f8 <HAL_UART_TxCpltCallback+0x170>)
 8001868:	701a      	strb	r2, [r3, #0]
    	    	if(FCS_UARTCount>=2)
 800186a:	4b23      	ldr	r3, [pc, #140]	@ (80018f8 <HAL_UART_TxCpltCallback+0x170>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	b2db      	uxtb	r3, r3
 8001870:	2b01      	cmp	r3, #1
 8001872:	d930      	bls.n	80018d6 <HAL_UART_TxCpltCallback+0x14e>
    	    	{
        	    	FCS_UARTCount=0;
 8001874:	4b20      	ldr	r3, [pc, #128]	@ (80018f8 <HAL_UART_TxCpltCallback+0x170>)
 8001876:	2200      	movs	r2, #0
 8001878:	701a      	strb	r2, [r3, #0]
        	    	MBUS_FrameStatus=FCS;
 800187a:	4b1b      	ldr	r3, [pc, #108]	@ (80018e8 <HAL_UART_TxCpltCallback+0x160>)
 800187c:	2206      	movs	r2, #6
 800187e:	701a      	strb	r2, [r3, #0]
    	    	}
    	    	break;
 8001880:	e029      	b.n	80018d6 <HAL_UART_TxCpltCallback+0x14e>

    	    case FCS:
    	    	// MASTER:
    	    	if(myID==MBUS_FrameBuffer->TXID[0] && MBUS_FrameBuffer->RXID[0]!=RXIDbroadcast){	// after frame transmission I expect ACK byte
 8001882:	4b1b      	ldr	r3, [pc, #108]	@ (80018f0 <HAL_UART_TxCpltCallback+0x168>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	785b      	ldrb	r3, [r3, #1]
 8001888:	2b0c      	cmp	r3, #12
 800188a:	d111      	bne.n	80018b0 <HAL_UART_TxCpltCallback+0x128>
 800188c:	4b18      	ldr	r3, [pc, #96]	@ (80018f0 <HAL_UART_TxCpltCallback+0x168>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	789b      	ldrb	r3, [r3, #2]
 8001892:	2b0f      	cmp	r3, #15
 8001894:	d00c      	beq.n	80018b0 <HAL_UART_TxCpltCallback+0x128>
    	        	HAL_UART_Receive_IT(huart,MBUS_FrameBuffer->ACK, sizeof(MBUS_FrameBuffer->ACK));
 8001896:	4b16      	ldr	r3, [pc, #88]	@ (80018f0 <HAL_UART_TxCpltCallback+0x168>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	3327      	adds	r3, #39	@ 0x27
 800189c:	0019      	movs	r1, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2201      	movs	r2, #1
 80018a2:	0018      	movs	r0, r3
 80018a4:	f003 fd84 	bl	80053b0 <HAL_UART_Receive_IT>
    	        	MBUS_FrameStatus=ACK;
 80018a8:	4b0f      	ldr	r3, [pc, #60]	@ (80018e8 <HAL_UART_TxCpltCallback+0x160>)
 80018aa:	2207      	movs	r2, #7
 80018ac:	701a      	strb	r2, [r3, #0]
    	    	}
    	    	else{	// fault or RXID is broadcast
	    			MBUS_UpdateProcessedBuffer(TX_OK);
    	    		MBUS_Reset();
    	    	}
    	        break;
 80018ae:	e013      	b.n	80018d8 <HAL_UART_TxCpltCallback+0x150>
	    			MBUS_UpdateProcessedBuffer(TX_OK);
 80018b0:	2002      	movs	r0, #2
 80018b2:	f7ff fdb9 	bl	8001428 <MBUS_UpdateProcessedBuffer>
    	    		MBUS_Reset();
 80018b6:	f7ff fe1f 	bl	80014f8 <MBUS_Reset>
    	        break;
 80018ba:	e00d      	b.n	80018d8 <HAL_UART_TxCpltCallback+0x150>

    	    case ACK:
    	    	// SLAVE:
    			MBUS_UpdateProcessedBuffer(RX_OK);
 80018bc:	2004      	movs	r0, #4
 80018be:	f7ff fdb3 	bl	8001428 <MBUS_UpdateProcessedBuffer>
    	    	MBUS_Reset();
 80018c2:	f7ff fe19 	bl	80014f8 <MBUS_Reset>
    	        break;
 80018c6:	e007      	b.n	80018d8 <HAL_UART_TxCpltCallback+0x150>

    	    default:
    	    	MBUS_Reset();
 80018c8:	f7ff fe16 	bl	80014f8 <MBUS_Reset>
    	    	break;
 80018cc:	e004      	b.n	80018d8 <HAL_UART_TxCpltCallback+0x150>
    	    	break;
 80018ce:	46c0      	nop			@ (mov r8, r8)
 80018d0:	e002      	b.n	80018d8 <HAL_UART_TxCpltCallback+0x150>
    	        break;
 80018d2:	46c0      	nop			@ (mov r8, r8)
 80018d4:	e000      	b.n	80018d8 <HAL_UART_TxCpltCallback+0x150>
    	    	break;
 80018d6:	46c0      	nop			@ (mov r8, r8)
    	}
    	MBUS_StartTimeoutTimer();
 80018d8:	f7ff fdc4 	bl	8001464 <MBUS_StartTimeoutTimer>
    	//__enable_irq();
    }
}
 80018dc:	46c0      	nop			@ (mov r8, r8)
 80018de:	46bd      	mov	sp, r7
 80018e0:	b002      	add	sp, #8
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40013800 	.word	0x40013800
 80018e8:	20000158 	.word	0x20000158
 80018ec:	08007ddc 	.word	0x08007ddc
 80018f0:	2000015c 	.word	0x2000015c
 80018f4:	2000016c 	.word	0x2000016c
 80018f8:	2000016d 	.word	0x2000016d

080018fc <HAL_UART_RxCpltCallback>:



// INTERNAL: INTERRUPT - UART FINISHED RECEIVING
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1){
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a82      	ldr	r2, [pc, #520]	@ (8001b14 <HAL_UART_RxCpltCallback+0x218>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d000      	beq.n	8001910 <HAL_UART_RxCpltCallback+0x14>
 800190e:	e0fd      	b.n	8001b0c <HAL_UART_RxCpltCallback+0x210>
    	//__disable_irq();
    	MBUS_StopTimeoutTimer();
 8001910:	f7ff fdc6 	bl	80014a0 <MBUS_StopTimeoutTimer>
		switch (MBUS_FrameStatus) {
 8001914:	4b80      	ldr	r3, [pc, #512]	@ (8001b18 <HAL_UART_RxCpltCallback+0x21c>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b07      	cmp	r3, #7
 800191a:	d900      	bls.n	800191e <HAL_UART_RxCpltCallback+0x22>
 800191c:	e0ec      	b.n	8001af8 <HAL_UART_RxCpltCallback+0x1fc>
 800191e:	009a      	lsls	r2, r3, #2
 8001920:	4b7e      	ldr	r3, [pc, #504]	@ (8001b1c <HAL_UART_RxCpltCallback+0x220>)
 8001922:	18d3      	adds	r3, r2, r3
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	469f      	mov	pc, r3
		    case IDLE:
				break;

		    case TXID:
		    	// MASTER:
		        if(MBUS_FrameBuffer->TXID[0]==myID){
 8001928:	4b7d      	ldr	r3, [pc, #500]	@ (8001b20 <HAL_UART_RxCpltCallback+0x224>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	785b      	ldrb	r3, [r3, #1]
 800192e:	2b0c      	cmp	r3, #12
 8001930:	d10d      	bne.n	800194e <HAL_UART_RxCpltCallback+0x52>
		        	MBUS_UpdateTransmittedBuffer();
 8001932:	f7ff fd5d 	bl	80013f0 <MBUS_UpdateTransmittedBuffer>
	        		HAL_UART_Transmit_IT(huart,MBUS_FrameBuffer->RXID, sizeof(MBUS_FrameBuffer->RXID));
 8001936:	4b7a      	ldr	r3, [pc, #488]	@ (8001b20 <HAL_UART_RxCpltCallback+0x224>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	1c99      	adds	r1, r3, #2
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2201      	movs	r2, #1
 8001940:	0018      	movs	r0, r3
 8001942:	f003 fc8d 	bl	8005260 <HAL_UART_Transmit_IT>
		        	MBUS_FrameStatus=RXID;
 8001946:	4b74      	ldr	r3, [pc, #464]	@ (8001b18 <HAL_UART_RxCpltCallback+0x21c>)
 8001948:	2202      	movs	r2, #2
 800194a:	701a      	strb	r2, [r3, #0]
		        }
		        else{	// invalid TXID
		        	MBUS_UpdateProcessedBuffer(RX_ERROR);
		        	MBUS_Reset();
		        }
		        break;
 800194c:	e0dc      	b.n	8001b08 <HAL_UART_RxCpltCallback+0x20c>
	        	else if(MBUS_FrameBuffer->TXID[0]==SYNCbyte){	// SYNC Byte
 800194e:	4b74      	ldr	r3, [pc, #464]	@ (8001b20 <HAL_UART_RxCpltCallback+0x224>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	785b      	ldrb	r3, [r3, #1]
 8001954:	2b05      	cmp	r3, #5
 8001956:	d105      	bne.n	8001964 <HAL_UART_RxCpltCallback+0x68>
		        		MBUS_UpdateProcessedBuffer(SYNC_BYTE);
 8001958:	2008      	movs	r0, #8
 800195a:	f7ff fd65 	bl	8001428 <MBUS_UpdateProcessedBuffer>
			        	MBUS_Reset();
 800195e:	f7ff fdcb 	bl	80014f8 <MBUS_Reset>
		        break;
 8001962:	e0d1      	b.n	8001b08 <HAL_UART_RxCpltCallback+0x20c>
		        else if (MBUS_FrameBuffer->TXID[0]>=0x00 && MBUS_FrameBuffer->TXID[0]<=0x0E){	// check validity of TXID
 8001964:	4b6e      	ldr	r3, [pc, #440]	@ (8001b20 <HAL_UART_RxCpltCallback+0x224>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	785b      	ldrb	r3, [r3, #1]
 800196a:	2b0e      	cmp	r3, #14
 800196c:	d80b      	bhi.n	8001986 <HAL_UART_RxCpltCallback+0x8a>
		        	HAL_UART_Receive_IT(huart,MBUS_FrameBuffer->RXID, sizeof(MBUS_FrameBuffer->RXID));
 800196e:	4b6c      	ldr	r3, [pc, #432]	@ (8001b20 <HAL_UART_RxCpltCallback+0x224>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	1c99      	adds	r1, r3, #2
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	0018      	movs	r0, r3
 800197a:	f003 fd19 	bl	80053b0 <HAL_UART_Receive_IT>
		        	MBUS_FrameStatus=RXID;
 800197e:	4b66      	ldr	r3, [pc, #408]	@ (8001b18 <HAL_UART_RxCpltCallback+0x21c>)
 8001980:	2202      	movs	r2, #2
 8001982:	701a      	strb	r2, [r3, #0]
		        break;
 8001984:	e0c0      	b.n	8001b08 <HAL_UART_RxCpltCallback+0x20c>
		        	MBUS_UpdateProcessedBuffer(RX_ERROR);
 8001986:	2005      	movs	r0, #5
 8001988:	f7ff fd4e 	bl	8001428 <MBUS_UpdateProcessedBuffer>
		        	MBUS_Reset();
 800198c:	f7ff fdb4 	bl	80014f8 <MBUS_Reset>
		        break;
 8001990:	e0ba      	b.n	8001b08 <HAL_UART_RxCpltCallback+0x20c>

		    case RXID:
		    	// SLAVE:
		        if(myID==MBUS_FrameBuffer->RXID[0] || RXIDbroadcast ==MBUS_FrameBuffer->RXID[0]){	// received RXID is equal to myID or broadcast
 8001992:	4b63      	ldr	r3, [pc, #396]	@ (8001b20 <HAL_UART_RxCpltCallback+0x224>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	789b      	ldrb	r3, [r3, #2]
 8001998:	2b0c      	cmp	r3, #12
 800199a:	d004      	beq.n	80019a6 <HAL_UART_RxCpltCallback+0xaa>
 800199c:	4b60      	ldr	r3, [pc, #384]	@ (8001b20 <HAL_UART_RxCpltCallback+0x224>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	789b      	ldrb	r3, [r3, #2]
 80019a2:	2b0f      	cmp	r3, #15
 80019a4:	d10b      	bne.n	80019be <HAL_UART_RxCpltCallback+0xc2>
		        	HAL_UART_Receive_IT(huart,MBUS_FrameBuffer->CHID, sizeof(MBUS_FrameBuffer->CHID));
 80019a6:	4b5e      	ldr	r3, [pc, #376]	@ (8001b20 <HAL_UART_RxCpltCallback+0x224>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	1cd9      	adds	r1, r3, #3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	0018      	movs	r0, r3
 80019b2:	f003 fcfd 	bl	80053b0 <HAL_UART_Receive_IT>
		        	MBUS_FrameStatus=CHID;
 80019b6:	4b58      	ldr	r3, [pc, #352]	@ (8001b18 <HAL_UART_RxCpltCallback+0x21c>)
 80019b8:	2203      	movs	r2, #3
 80019ba:	701a      	strb	r2, [r3, #0]
		        }
		        else{	// frame is not for me
		        	MBUS_UpdateProcessedBuffer(RX_NOT_MY_ADDRESS);
		        	MBUS_Reset();
		        }
		        break;
 80019bc:	e0a4      	b.n	8001b08 <HAL_UART_RxCpltCallback+0x20c>
		        	MBUS_UpdateProcessedBuffer(RX_NOT_MY_ADDRESS);
 80019be:	2006      	movs	r0, #6
 80019c0:	f7ff fd32 	bl	8001428 <MBUS_UpdateProcessedBuffer>
		        	MBUS_Reset();
 80019c4:	f7ff fd98 	bl	80014f8 <MBUS_Reset>
		        break;
 80019c8:	e09e      	b.n	8001b08 <HAL_UART_RxCpltCallback+0x20c>

		    case CHID:
		    	// SLAVE:
	        	HAL_UART_Receive_IT(huart,MBUS_FrameBuffer->PS, sizeof(MBUS_FrameBuffer->PS));
 80019ca:	4b55      	ldr	r3, [pc, #340]	@ (8001b20 <HAL_UART_RxCpltCallback+0x224>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	1d19      	adds	r1, r3, #4
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2201      	movs	r2, #1
 80019d4:	0018      	movs	r0, r3
 80019d6:	f003 fceb 	bl	80053b0 <HAL_UART_Receive_IT>
	        	MBUS_FrameStatus=PS;
 80019da:	4b4f      	ldr	r3, [pc, #316]	@ (8001b18 <HAL_UART_RxCpltCallback+0x21c>)
 80019dc:	2204      	movs	r2, #4
 80019de:	701a      	strb	r2, [r3, #0]
		        break;
 80019e0:	e092      	b.n	8001b08 <HAL_UART_RxCpltCallback+0x20c>

		    case PS:
		    	// SLAVE:
	        	HAL_UART_Receive_IT(huart,MBUS_FrameBuffer->Payload+Payload_UARTCount,sizeof(uint8_t));
 80019e2:	4b4f      	ldr	r3, [pc, #316]	@ (8001b20 <HAL_UART_RxCpltCallback+0x224>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	3305      	adds	r3, #5
 80019e8:	4a4e      	ldr	r2, [pc, #312]	@ (8001b24 <HAL_UART_RxCpltCallback+0x228>)
 80019ea:	7812      	ldrb	r2, [r2, #0]
 80019ec:	b2d2      	uxtb	r2, r2
 80019ee:	1899      	adds	r1, r3, r2
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	0018      	movs	r0, r3
 80019f6:	f003 fcdb 	bl	80053b0 <HAL_UART_Receive_IT>
	    		Payload_UARTCount++;
 80019fa:	4b4a      	ldr	r3, [pc, #296]	@ (8001b24 <HAL_UART_RxCpltCallback+0x228>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	3301      	adds	r3, #1
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	4b47      	ldr	r3, [pc, #284]	@ (8001b24 <HAL_UART_RxCpltCallback+0x228>)
 8001a06:	701a      	strb	r2, [r3, #0]
    	    	if(Payload_UARTCount>=MBUS_FrameBuffer->PS[0])
 8001a08:	4b45      	ldr	r3, [pc, #276]	@ (8001b20 <HAL_UART_RxCpltCallback+0x224>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	791a      	ldrb	r2, [r3, #4]
 8001a0e:	4b45      	ldr	r3, [pc, #276]	@ (8001b24 <HAL_UART_RxCpltCallback+0x228>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d900      	bls.n	8001a1a <HAL_UART_RxCpltCallback+0x11e>
 8001a18:	e073      	b.n	8001b02 <HAL_UART_RxCpltCallback+0x206>
    	    	{
        	    	Payload_UARTCount=0;
 8001a1a:	4b42      	ldr	r3, [pc, #264]	@ (8001b24 <HAL_UART_RxCpltCallback+0x228>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	701a      	strb	r2, [r3, #0]
    	    		MBUS_FrameStatus=Payload;
 8001a20:	4b3d      	ldr	r3, [pc, #244]	@ (8001b18 <HAL_UART_RxCpltCallback+0x21c>)
 8001a22:	2205      	movs	r2, #5
 8001a24:	701a      	strb	r2, [r3, #0]
    	    	}
		        break;
 8001a26:	e06c      	b.n	8001b02 <HAL_UART_RxCpltCallback+0x206>

		    case Payload:
		    	// SLAVE:
    	    	HAL_UART_Receive_IT(huart,MBUS_FrameBuffer->FCS+FCS_UARTCount, sizeof(uint8_t));
 8001a28:	4b3d      	ldr	r3, [pc, #244]	@ (8001b20 <HAL_UART_RxCpltCallback+0x224>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	3325      	adds	r3, #37	@ 0x25
 8001a2e:	4a3e      	ldr	r2, [pc, #248]	@ (8001b28 <HAL_UART_RxCpltCallback+0x22c>)
 8001a30:	7812      	ldrb	r2, [r2, #0]
 8001a32:	b2d2      	uxtb	r2, r2
 8001a34:	1899      	adds	r1, r3, r2
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	0018      	movs	r0, r3
 8001a3c:	f003 fcb8 	bl	80053b0 <HAL_UART_Receive_IT>
	    		FCS_UARTCount++;
 8001a40:	4b39      	ldr	r3, [pc, #228]	@ (8001b28 <HAL_UART_RxCpltCallback+0x22c>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	3301      	adds	r3, #1
 8001a48:	b2da      	uxtb	r2, r3
 8001a4a:	4b37      	ldr	r3, [pc, #220]	@ (8001b28 <HAL_UART_RxCpltCallback+0x22c>)
 8001a4c:	701a      	strb	r2, [r3, #0]
    	    	if(FCS_UARTCount>=2)
 8001a4e:	4b36      	ldr	r3, [pc, #216]	@ (8001b28 <HAL_UART_RxCpltCallback+0x22c>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d956      	bls.n	8001b06 <HAL_UART_RxCpltCallback+0x20a>
    	    	{
        	    	FCS_UARTCount=0;
 8001a58:	4b33      	ldr	r3, [pc, #204]	@ (8001b28 <HAL_UART_RxCpltCallback+0x22c>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	701a      	strb	r2, [r3, #0]
        	    	MBUS_FrameStatus=FCS;
 8001a5e:	4b2e      	ldr	r3, [pc, #184]	@ (8001b18 <HAL_UART_RxCpltCallback+0x21c>)
 8001a60:	2206      	movs	r2, #6
 8001a62:	701a      	strb	r2, [r3, #0]
    	    	}
	    		break;
 8001a64:	e04f      	b.n	8001b06 <HAL_UART_RxCpltCallback+0x20a>

		    case FCS:
		    	// SLAVE:
	        	CalculateFCS(tmpFCSbuffer,MBUS_FrameBuffer);
 8001a66:	4b2e      	ldr	r3, [pc, #184]	@ (8001b20 <HAL_UART_RxCpltCallback+0x224>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	4b30      	ldr	r3, [pc, #192]	@ (8001b2c <HAL_UART_RxCpltCallback+0x230>)
 8001a6c:	0011      	movs	r1, r2
 8001a6e:	0018      	movs	r0, r3
 8001a70:	f7ff fb64 	bl	800113c <CalculateFCS>
		    	if(MBUS_FrameBuffer->FCS[0]==tmpFCSbuffer[0] && MBUS_FrameBuffer->FCS[1]==tmpFCSbuffer[1]){	// compare FCS
 8001a74:	4b2a      	ldr	r3, [pc, #168]	@ (8001b20 <HAL_UART_RxCpltCallback+0x224>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2225      	movs	r2, #37	@ 0x25
 8001a7a:	5c9a      	ldrb	r2, [r3, r2]
 8001a7c:	4b2b      	ldr	r3, [pc, #172]	@ (8001b2c <HAL_UART_RxCpltCallback+0x230>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d11d      	bne.n	8001ac0 <HAL_UART_RxCpltCallback+0x1c4>
 8001a84:	4b26      	ldr	r3, [pc, #152]	@ (8001b20 <HAL_UART_RxCpltCallback+0x224>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2226      	movs	r2, #38	@ 0x26
 8001a8a:	5c9a      	ldrb	r2, [r3, r2]
 8001a8c:	4b27      	ldr	r3, [pc, #156]	@ (8001b2c <HAL_UART_RxCpltCallback+0x230>)
 8001a8e:	785b      	ldrb	r3, [r3, #1]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d115      	bne.n	8001ac0 <HAL_UART_RxCpltCallback+0x1c4>
		    		if(MBUS_FrameBuffer->RXID[0]==RXIDbroadcast){	// if RXID is BROADCAST -> do not ACK
 8001a94:	4b22      	ldr	r3, [pc, #136]	@ (8001b20 <HAL_UART_RxCpltCallback+0x224>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	789b      	ldrb	r3, [r3, #2]
 8001a9a:	2b0f      	cmp	r3, #15
 8001a9c:	d105      	bne.n	8001aaa <HAL_UART_RxCpltCallback+0x1ae>
		    			MBUS_UpdateProcessedBuffer(RX_OK);
 8001a9e:	2004      	movs	r0, #4
 8001aa0:	f7ff fcc2 	bl	8001428 <MBUS_UpdateProcessedBuffer>
		    			MBUS_Reset();
 8001aa4:	f7ff fd28 	bl	80014f8 <MBUS_Reset>
		    	        break;
 8001aa8:	e02e      	b.n	8001b08 <HAL_UART_RxCpltCallback+0x20c>
		    		}
		    		else{
		    			HAL_UART_Transmit_IT(huart, &ACKbyte, sizeof(ACKbyte));	// transmit ACK
 8001aaa:	4921      	ldr	r1, [pc, #132]	@ (8001b30 <HAL_UART_RxCpltCallback+0x234>)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	f003 fbd5 	bl	8005260 <HAL_UART_Transmit_IT>
		    		if(MBUS_FrameBuffer->RXID[0]==RXIDbroadcast){	// if RXID is BROADCAST -> do not ACK
 8001ab6:	46c0      	nop			@ (mov r8, r8)
		    	else{	// invalid FCS
	    			MBUS_UpdateProcessedBuffer(RX_ERROR);
		    		MBUS_Reset();
		    		break;
		    	}
	        	MBUS_FrameStatus=ACK;
 8001ab8:	4b17      	ldr	r3, [pc, #92]	@ (8001b18 <HAL_UART_RxCpltCallback+0x21c>)
 8001aba:	2207      	movs	r2, #7
 8001abc:	701a      	strb	r2, [r3, #0]
		        break;
 8001abe:	e023      	b.n	8001b08 <HAL_UART_RxCpltCallback+0x20c>
	    			MBUS_UpdateProcessedBuffer(RX_ERROR);
 8001ac0:	2005      	movs	r0, #5
 8001ac2:	f7ff fcb1 	bl	8001428 <MBUS_UpdateProcessedBuffer>
		    		MBUS_Reset();
 8001ac6:	f7ff fd17 	bl	80014f8 <MBUS_Reset>
		    		break;
 8001aca:	e01d      	b.n	8001b08 <HAL_UART_RxCpltCallback+0x20c>

		    case ACK:
		    	// MASTER:
		    	if(myID==MBUS_FrameBuffer->TXID[0]){
 8001acc:	4b14      	ldr	r3, [pc, #80]	@ (8001b20 <HAL_UART_RxCpltCallback+0x224>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	785b      	ldrb	r3, [r3, #1]
 8001ad2:	2b0c      	cmp	r3, #12
 8001ad4:	d10d      	bne.n	8001af2 <HAL_UART_RxCpltCallback+0x1f6>
		    		if(MBUS_FrameBuffer->ACK[0]==ACKbyte){
 8001ad6:	4b12      	ldr	r3, [pc, #72]	@ (8001b20 <HAL_UART_RxCpltCallback+0x224>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2227      	movs	r2, #39	@ 0x27
 8001adc:	5c9b      	ldrb	r3, [r3, r2]
 8001ade:	22a5      	movs	r2, #165	@ 0xa5
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d103      	bne.n	8001aec <HAL_UART_RxCpltCallback+0x1f0>
		    			MBUS_UpdateProcessedBuffer(TX_OK);
 8001ae4:	2002      	movs	r0, #2
 8001ae6:	f7ff fc9f 	bl	8001428 <MBUS_UpdateProcessedBuffer>
 8001aea:	e002      	b.n	8001af2 <HAL_UART_RxCpltCallback+0x1f6>
		    		}
		    		else{
		    			MBUS_UpdateProcessedBuffer(TX_NO_ACK);	// communication error: no ACK
 8001aec:	2001      	movs	r0, #1
 8001aee:	f7ff fc9b 	bl	8001428 <MBUS_UpdateProcessedBuffer>
		    		}
		    	}
		    	MBUS_Reset();
 8001af2:	f7ff fd01 	bl	80014f8 <MBUS_Reset>
    	    	break;
 8001af6:	e007      	b.n	8001b08 <HAL_UART_RxCpltCallback+0x20c>

		    default:
		    	MBUS_Reset();
 8001af8:	f7ff fcfe 	bl	80014f8 <MBUS_Reset>
		    	break;
 8001afc:	e004      	b.n	8001b08 <HAL_UART_RxCpltCallback+0x20c>
				break;
 8001afe:	46c0      	nop			@ (mov r8, r8)
 8001b00:	e002      	b.n	8001b08 <HAL_UART_RxCpltCallback+0x20c>
		        break;
 8001b02:	46c0      	nop			@ (mov r8, r8)
 8001b04:	e000      	b.n	8001b08 <HAL_UART_RxCpltCallback+0x20c>
	    		break;
 8001b06:	46c0      	nop			@ (mov r8, r8)
		    }
    	MBUS_StartTimeoutTimer();
 8001b08:	f7ff fcac 	bl	8001464 <MBUS_StartTimeoutTimer>
    	//__enable_irq();
	}
}
 8001b0c:	46c0      	nop			@ (mov r8, r8)
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	b002      	add	sp, #8
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40013800 	.word	0x40013800
 8001b18:	20000158 	.word	0x20000158
 8001b1c:	08007dfc 	.word	0x08007dfc
 8001b20:	2000015c 	.word	0x2000015c
 8001b24:	2000016c 	.word	0x2000016c
 8001b28:	2000016d 	.word	0x2000016d
 8001b2c:	20000168 	.word	0x20000168
 8001b30:	08007dd8 	.word	0x08007dd8

08001b34 <HAL_UART_ErrorCallback>:


// INTERNAL: BREAK EVENT
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
	UART_Error = HAL_UART_GetError(huart);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	0018      	movs	r0, r3
 8001b40:	f004 f963 	bl	8005e0a <HAL_UART_GetError>
 8001b44:	0002      	movs	r2, r0
 8001b46:	4b0d      	ldr	r3, [pc, #52]	@ (8001b7c <HAL_UART_ErrorCallback+0x48>)
 8001b48:	601a      	str	r2, [r3, #0]

	if (UART_Error==HAL_UART_ERROR_FE)
 8001b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b7c <HAL_UART_ErrorCallback+0x48>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	d10d      	bne.n	8001b6e <HAL_UART_ErrorCallback+0x3a>
	{
    	//__disable_irq();
    	HAL_UART_Receive_IT(huart,MBUS_FrameBuffer->TXID, sizeof(MBUS_FrameBuffer->TXID));
 8001b52:	4b0b      	ldr	r3, [pc, #44]	@ (8001b80 <HAL_UART_ErrorCallback+0x4c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	1c59      	adds	r1, r3, #1
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	f003 fc27 	bl	80053b0 <HAL_UART_Receive_IT>
    	MBUS_FrameStatus=TXID;
 8001b62:	4b08      	ldr	r3, [pc, #32]	@ (8001b84 <HAL_UART_ErrorCallback+0x50>)
 8001b64:	2201      	movs	r2, #1
 8001b66:	701a      	strb	r2, [r3, #0]
		MBUS_StartTimeoutTimer();
 8001b68:	f7ff fc7c 	bl	8001464 <MBUS_StartTimeoutTimer>
	}*/
	else
	{
		MBUS_Reset();
	}
}
 8001b6c:	e001      	b.n	8001b72 <HAL_UART_ErrorCallback+0x3e>
		MBUS_Reset();
 8001b6e:	f7ff fcc3 	bl	80014f8 <MBUS_Reset>
}
 8001b72:	46c0      	nop			@ (mov r8, r8)
 8001b74:	46bd      	mov	sp, r7
 8001b76:	b002      	add	sp, #8
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	46c0      	nop			@ (mov r8, r8)
 8001b7c:	2000017c 	.word	0x2000017c
 8001b80:	2000015c 	.word	0x2000015c
 8001b84:	20000158 	.word	0x20000158

08001b88 <HAL_TIM_OC_DelayElapsedCallback>:


// TIMER TIMEOUT
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a0c      	ldr	r2, [pc, #48]	@ (8001bc8 <HAL_TIM_OC_DelayElapsedCallback+0x40>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d111      	bne.n	8001bbe <HAL_TIM_OC_DelayElapsedCallback+0x36>
		__HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	4252      	negs	r2, r2
 8001ba2:	611a      	str	r2, [r3, #16]
		if(MBUS_FrameStatus==ACK){
 8001ba4:	4b09      	ldr	r3, [pc, #36]	@ (8001bcc <HAL_TIM_OC_DelayElapsedCallback+0x44>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	2b07      	cmp	r3, #7
 8001baa:	d103      	bne.n	8001bb4 <HAL_TIM_OC_DelayElapsedCallback+0x2c>
			MBUS_UpdateProcessedBuffer(TX_NO_ACK);
 8001bac:	2001      	movs	r0, #1
 8001bae:	f7ff fc3b 	bl	8001428 <MBUS_UpdateProcessedBuffer>
 8001bb2:	e002      	b.n	8001bba <HAL_TIM_OC_DelayElapsedCallback+0x32>
		}
		else{MBUS_UpdateProcessedBuffer(ERROR_TIMEOUT);}
 8001bb4:	2003      	movs	r0, #3
 8001bb6:	f7ff fc37 	bl	8001428 <MBUS_UpdateProcessedBuffer>
		MBUS_Reset();
 8001bba:	f7ff fc9d 	bl	80014f8 <MBUS_Reset>
	}
}
 8001bbe:	46c0      	nop			@ (mov r8, r8)
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	b002      	add	sp, #8
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	46c0      	nop			@ (mov r8, r8)
 8001bc8:	40000400 	.word	0x40000400
 8001bcc:	20000158 	.word	0x20000158

08001bd0 <HAL_GPIO_EXTI_Falling_Callback>:

// UART TIMING
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	0002      	movs	r2, r0
 8001bd8:	1dbb      	adds	r3, r7, #6
 8001bda:	801a      	strh	r2, [r3, #0]
	UART_EdgeTime=__HAL_TIM_GET_COUNTER(&htim3);
 8001bdc:	4b12      	ldr	r3, [pc, #72]	@ (8001c28 <HAL_GPIO_EXTI_Falling_Callback+0x58>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	4b11      	ldr	r3, [pc, #68]	@ (8001c2c <HAL_GPIO_EXTI_Falling_Callback+0x5c>)
 8001be6:	801a      	strh	r2, [r3, #0]

	if(UART_EdgeCounter==1){
 8001be8:	4b11      	ldr	r3, [pc, #68]	@ (8001c30 <HAL_GPIO_EXTI_Falling_Callback+0x60>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d105      	bne.n	8001bfe <HAL_GPIO_EXTI_Falling_Callback+0x2e>
		UART_EdgePeriodStartTime=UART_EdgeTime;
 8001bf2:	4b0e      	ldr	r3, [pc, #56]	@ (8001c2c <HAL_GPIO_EXTI_Falling_Callback+0x5c>)
 8001bf4:	881b      	ldrh	r3, [r3, #0]
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	4b0e      	ldr	r3, [pc, #56]	@ (8001c34 <HAL_GPIO_EXTI_Falling_Callback+0x64>)
 8001bfa:	801a      	strh	r2, [r3, #0]
 8001bfc:	e009      	b.n	8001c12 <HAL_GPIO_EXTI_Falling_Callback+0x42>
	}
	else if(UART_EdgeCounter==2){	// 1 perioda signalu
 8001bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8001c30 <HAL_GPIO_EXTI_Falling_Callback+0x60>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d104      	bne.n	8001c12 <HAL_GPIO_EXTI_Falling_Callback+0x42>
		UART_EdgePeriodStopTime=UART_EdgeTime;
 8001c08:	4b08      	ldr	r3, [pc, #32]	@ (8001c2c <HAL_GPIO_EXTI_Falling_Callback+0x5c>)
 8001c0a:	881b      	ldrh	r3, [r3, #0]
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c38 <HAL_GPIO_EXTI_Falling_Callback+0x68>)
 8001c10:	801a      	strh	r2, [r3, #0]
	}

	UART_EdgeCounter++;
 8001c12:	4b07      	ldr	r3, [pc, #28]	@ (8001c30 <HAL_GPIO_EXTI_Falling_Callback+0x60>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	3301      	adds	r3, #1
 8001c1a:	b2da      	uxtb	r2, r3
 8001c1c:	4b04      	ldr	r3, [pc, #16]	@ (8001c30 <HAL_GPIO_EXTI_Falling_Callback+0x60>)
 8001c1e:	701a      	strb	r2, [r3, #0]
}
 8001c20:	46c0      	nop			@ (mov r8, r8)
 8001c22:	46bd      	mov	sp, r7
 8001c24:	b002      	add	sp, #8
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	20000078 	.word	0x20000078
 8001c2c:	20000174 	.word	0x20000174
 8001c30:	2000017a 	.word	0x2000017a
 8001c34:	20000176 	.word	0x20000176
 8001c38:	20000178 	.word	0x20000178

08001c3c <RPM_Init>:
volatile static uint32_t OVFcounter=0;
static volatile uint8_t measureCounter=0;



unsigned RPM_Init(void){
 8001c3c:	b590      	push	{r4, r7, lr}
 8001c3e:	b089      	sub	sp, #36	@ 0x24
 8001c40:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c42:	2314      	movs	r3, #20
 8001c44:	18fb      	adds	r3, r7, r3
 8001c46:	0018      	movs	r0, r3
 8001c48:	230c      	movs	r3, #12
 8001c4a:	001a      	movs	r2, r3
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	f005 fedf 	bl	8007a10 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001c52:	1d3b      	adds	r3, r7, #4
 8001c54:	0018      	movs	r0, r3
 8001c56:	2310      	movs	r3, #16
 8001c58:	001a      	movs	r2, r3
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	f005 fed8 	bl	8007a10 <memset>
  htim1.Instance = TIM1;
 8001c60:	4b57      	ldr	r3, [pc, #348]	@ (8001dc0 <RPM_Init+0x184>)
 8001c62:	4a58      	ldr	r2, [pc, #352]	@ (8001dc4 <RPM_Init+0x188>)
 8001c64:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001c66:	4b56      	ldr	r3, [pc, #344]	@ (8001dc0 <RPM_Init+0x184>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c6c:	4b54      	ldr	r3, [pc, #336]	@ (8001dc0 <RPM_Init+0x184>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001c72:	4b53      	ldr	r3, [pc, #332]	@ (8001dc0 <RPM_Init+0x184>)
 8001c74:	4a54      	ldr	r2, [pc, #336]	@ (8001dc8 <RPM_Init+0x18c>)
 8001c76:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c78:	4b51      	ldr	r3, [pc, #324]	@ (8001dc0 <RPM_Init+0x184>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c7e:	4b50      	ldr	r3, [pc, #320]	@ (8001dc0 <RPM_Init+0x184>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c84:	4b4e      	ldr	r3, [pc, #312]	@ (8001dc0 <RPM_Init+0x184>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK){return 1;}
 8001c8a:	4b4d      	ldr	r3, [pc, #308]	@ (8001dc0 <RPM_Init+0x184>)
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	f002 f805 	bl	8003c9c <HAL_TIM_IC_Init>
 8001c92:	1e03      	subs	r3, r0, #0
 8001c94:	d001      	beq.n	8001c9a <RPM_Init+0x5e>
 8001c96:	2301      	movs	r3, #1
 8001c98:	e08d      	b.n	8001db6 <RPM_Init+0x17a>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c9a:	2114      	movs	r1, #20
 8001c9c:	187b      	adds	r3, r7, r1
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ca2:	187b      	adds	r3, r7, r1
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ca8:	187b      	adds	r3, r7, r1
 8001caa:	2200      	movs	r2, #0
 8001cac:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK){return 2;}
 8001cae:	187a      	adds	r2, r7, r1
 8001cb0:	4b43      	ldr	r3, [pc, #268]	@ (8001dc0 <RPM_Init+0x184>)
 8001cb2:	0011      	movs	r1, r2
 8001cb4:	0018      	movs	r0, r3
 8001cb6:	f003 f989 	bl	8004fcc <HAL_TIMEx_MasterConfigSynchronization>
 8001cba:	1e03      	subs	r3, r0, #0
 8001cbc:	d001      	beq.n	8001cc2 <RPM_Init+0x86>
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	e079      	b.n	8001db6 <RPM_Init+0x17a>

  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001cc2:	1d3b      	adds	r3, r7, #4
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001cc8:	1d3b      	adds	r3, r7, #4
 8001cca:	2201      	movs	r2, #1
 8001ccc:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001cce:	1d3b      	adds	r3, r7, #4
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8001cd4:	1d3b      	adds	r3, r7, #4
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK){return 3;}
 8001cda:	1d39      	adds	r1, r7, #4
 8001cdc:	4b38      	ldr	r3, [pc, #224]	@ (8001dc0 <RPM_Init+0x184>)
 8001cde:	220c      	movs	r2, #12
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	f002 fac5 	bl	8004270 <HAL_TIM_IC_ConfigChannel>
 8001ce6:	1e03      	subs	r3, r0, #0
 8001ce8:	d001      	beq.n	8001cee <RPM_Init+0xb2>
 8001cea:	2303      	movs	r3, #3
 8001cec:	e063      	b.n	8001db6 <RPM_Init+0x17a>

  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_4);
 8001cee:	4b34      	ldr	r3, [pc, #208]	@ (8001dc0 <RPM_Init+0x184>)
 8001cf0:	210c      	movs	r1, #12
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	f002 f82a 	bl	8003d4c <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8001cf8:	4b31      	ldr	r3, [pc, #196]	@ (8001dc0 <RPM_Init+0x184>)
 8001cfa:	0018      	movs	r0, r3
 8001cfc:	f001 fe0a 	bl	8003914 <HAL_TIM_Base_Start_IT>

  CLK_default=HAL_RCC_GetPCLK1Freq();
 8001d00:	f001 fc40 	bl	8003584 <HAL_RCC_GetPCLK1Freq>
 8001d04:	0002      	movs	r2, r0
 8001d06:	4b31      	ldr	r3, [pc, #196]	@ (8001dcc <RPM_Init+0x190>)
 8001d08:	601a      	str	r2, [r3, #0]
  CLK=CLK_default;
 8001d0a:	4b30      	ldr	r3, [pc, #192]	@ (8001dcc <RPM_Init+0x190>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	4b30      	ldr	r3, [pc, #192]	@ (8001dd0 <RPM_Init+0x194>)
 8001d10:	601a      	str	r2, [r3, #0]
  OVFlimit=(CLK*60)/(RPM_THRESHOLD*65536*RPM_PULSES);
 8001d12:	4b2f      	ldr	r3, [pc, #188]	@ (8001dd0 <RPM_Init+0x194>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	0013      	movs	r3, r2
 8001d18:	011b      	lsls	r3, r3, #4
 8001d1a:	1a9b      	subs	r3, r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	001a      	movs	r2, r3
 8001d20:	23fa      	movs	r3, #250	@ 0xfa
 8001d22:	04d9      	lsls	r1, r3, #19
 8001d24:	0010      	movs	r0, r2
 8001d26:	f7fe f9ef 	bl	8000108 <__udivsi3>
 8001d2a:	0003      	movs	r3, r0
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	4b29      	ldr	r3, [pc, #164]	@ (8001dd4 <RPM_Init+0x198>)
 8001d30:	801a      	strh	r2, [r3, #0]
  minMeasureTime=((uint32_t)((float)(OVFlimit/3)*65536))/(CLK/1000);
 8001d32:	4b28      	ldr	r3, [pc, #160]	@ (8001dd4 <RPM_Init+0x198>)
 8001d34:	881b      	ldrh	r3, [r3, #0]
 8001d36:	2103      	movs	r1, #3
 8001d38:	0018      	movs	r0, r3
 8001d3a:	f7fe f9e5 	bl	8000108 <__udivsi3>
 8001d3e:	0003      	movs	r3, r0
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	0018      	movs	r0, r3
 8001d44:	f7ff f890 	bl	8000e68 <__aeabi_i2f>
 8001d48:	1c03      	adds	r3, r0, #0
 8001d4a:	218f      	movs	r1, #143	@ 0x8f
 8001d4c:	05c9      	lsls	r1, r1, #23
 8001d4e:	1c18      	adds	r0, r3, #0
 8001d50:	f7fe fd88 	bl	8000864 <__aeabi_fmul>
 8001d54:	1c03      	adds	r3, r0, #0
 8001d56:	1c18      	adds	r0, r3, #0
 8001d58:	f7fe fb86 	bl	8000468 <__aeabi_f2uiz>
 8001d5c:	0004      	movs	r4, r0
 8001d5e:	4b1c      	ldr	r3, [pc, #112]	@ (8001dd0 <RPM_Init+0x194>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	22fa      	movs	r2, #250	@ 0xfa
 8001d64:	0091      	lsls	r1, r2, #2
 8001d66:	0018      	movs	r0, r3
 8001d68:	f7fe f9ce 	bl	8000108 <__udivsi3>
 8001d6c:	0003      	movs	r3, r0
 8001d6e:	0019      	movs	r1, r3
 8001d70:	0020      	movs	r0, r4
 8001d72:	f7fe f9c9 	bl	8000108 <__udivsi3>
 8001d76:	0003      	movs	r3, r0
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	4b17      	ldr	r3, [pc, #92]	@ (8001dd8 <RPM_Init+0x19c>)
 8001d7c:	701a      	strb	r2, [r3, #0]
  maxMeasureTime=((uint32_t)(float)OVFlimit*65536)/(CLK/1000);
 8001d7e:	4b15      	ldr	r3, [pc, #84]	@ (8001dd4 <RPM_Init+0x198>)
 8001d80:	881b      	ldrh	r3, [r3, #0]
 8001d82:	0018      	movs	r0, r3
 8001d84:	f7ff f8bc 	bl	8000f00 <__aeabi_ui2f>
 8001d88:	1c03      	adds	r3, r0, #0
 8001d8a:	1c18      	adds	r0, r3, #0
 8001d8c:	f7fe fb6c 	bl	8000468 <__aeabi_f2uiz>
 8001d90:	0003      	movs	r3, r0
 8001d92:	041c      	lsls	r4, r3, #16
 8001d94:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd0 <RPM_Init+0x194>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	22fa      	movs	r2, #250	@ 0xfa
 8001d9a:	0091      	lsls	r1, r2, #2
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	f7fe f9b3 	bl	8000108 <__udivsi3>
 8001da2:	0003      	movs	r3, r0
 8001da4:	0019      	movs	r1, r3
 8001da6:	0020      	movs	r0, r4
 8001da8:	f7fe f9ae 	bl	8000108 <__udivsi3>
 8001dac:	0003      	movs	r3, r0
 8001dae:	b2da      	uxtb	r2, r3
 8001db0:	4b0a      	ldr	r3, [pc, #40]	@ (8001ddc <RPM_Init+0x1a0>)
 8001db2:	701a      	strb	r2, [r3, #0]
  return 0;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	0018      	movs	r0, r3
 8001db8:	46bd      	mov	sp, r7
 8001dba:	b009      	add	sp, #36	@ 0x24
 8001dbc:	bd90      	pop	{r4, r7, pc}
 8001dbe:	46c0      	nop			@ (mov r8, r8)
 8001dc0:	20000180 	.word	0x20000180
 8001dc4:	40012c00 	.word	0x40012c00
 8001dc8:	0000ffff 	.word	0x0000ffff
 8001dcc:	200001d0 	.word	0x200001d0
 8001dd0:	200001d4 	.word	0x200001d4
 8001dd4:	200001da 	.word	0x200001da
 8001dd8:	200001ec 	.word	0x200001ec
 8001ddc:	200001ed 	.word	0x200001ed

08001de0 <RPM_ResetMeasurement>:

void RPM_ResetMeasurement(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
	previousCaptureValue = captureValue;
 8001de4:	4b08      	ldr	r3, [pc, #32]	@ (8001e08 <RPM_ResetMeasurement+0x28>)
 8001de6:	881b      	ldrh	r3, [r3, #0]
 8001de8:	b29a      	uxth	r2, r3
 8001dea:	4b08      	ldr	r3, [pc, #32]	@ (8001e0c <RPM_ResetMeasurement+0x2c>)
 8001dec:	801a      	strh	r2, [r3, #0]
	OVFcounter=0;
 8001dee:	4b08      	ldr	r3, [pc, #32]	@ (8001e10 <RPM_ResetMeasurement+0x30>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
	measureCounter=0;
 8001df4:	4b07      	ldr	r3, [pc, #28]	@ (8001e14 <RPM_ResetMeasurement+0x34>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	701a      	strb	r2, [r3, #0]
	bNewRPM=true;
 8001dfa:	4b07      	ldr	r3, [pc, #28]	@ (8001e18 <RPM_ResetMeasurement+0x38>)
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	701a      	strb	r2, [r3, #0]
}
 8001e00:	46c0      	nop			@ (mov r8, r8)
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	46c0      	nop			@ (mov r8, r8)
 8001e08:	200001dc 	.word	0x200001dc
 8001e0c:	200001de 	.word	0x200001de
 8001e10:	200001f0 	.word	0x200001f0
 8001e14:	200001f4 	.word	0x200001f4
 8001e18:	200001cc 	.word	0x200001cc

08001e1c <RPM_GetData>:

unsigned RPM_GetData(uint8_t aRPMMessage[5])
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
	if(!bNewRPM){return 1;}					// no new data
 8001e24:	4b12      	ldr	r3, [pc, #72]	@ (8001e70 <RPM_GetData+0x54>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	4053      	eors	r3, r2
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <RPM_GetData+0x1c>
 8001e34:	2301      	movs	r3, #1
 8001e36:	e017      	b.n	8001e68 <RPM_GetData+0x4c>
	if(aRPMMessage == NULL){return 2;}		// invalid pointer
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <RPM_GetData+0x26>
 8001e3e:	2302      	movs	r3, #2
 8001e40:	e012      	b.n	8001e68 <RPM_GetData+0x4c>
	RPMtoRPMMessage(aRPMMessage,&RPM,&measureTime,RPM_ID);
 8001e42:	4b0c      	ldr	r3, [pc, #48]	@ (8001e74 <RPM_GetData+0x58>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	4a0b      	ldr	r2, [pc, #44]	@ (8001e78 <RPM_GetData+0x5c>)
 8001e4a:	490c      	ldr	r1, [pc, #48]	@ (8001e7c <RPM_GetData+0x60>)
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f000 f89b 	bl	8001f88 <RPMtoRPMMessage>
	RPM_ID++;
 8001e52:	4b08      	ldr	r3, [pc, #32]	@ (8001e74 <RPM_GetData+0x58>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	3301      	adds	r3, #1
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	4b05      	ldr	r3, [pc, #20]	@ (8001e74 <RPM_GetData+0x58>)
 8001e5e:	701a      	strb	r2, [r3, #0]
	bNewRPM=false;
 8001e60:	4b03      	ldr	r3, [pc, #12]	@ (8001e70 <RPM_GetData+0x54>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	701a      	strb	r2, [r3, #0]
	return 0;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	0018      	movs	r0, r3
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	b002      	add	sp, #8
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	200001cc 	.word	0x200001cc
 8001e74:	200001d8 	.word	0x200001d8
 8001e78:	200001e0 	.word	0x200001e0
 8001e7c:	200001e8 	.word	0x200001e8

08001e80 <RPM_UpdateFrequencyRatio>:

unsigned RPM_UpdateFrequencyRatio(float aSYNCFrequencyRatio)
{
 8001e80:	b590      	push	{r4, r7, lr}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
	if(!aSYNCFrequencyRatio){return 1;}
 8001e88:	2100      	movs	r1, #0
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7fe fabe 	bl	800040c <__aeabi_fcmpeq>
 8001e90:	1e03      	subs	r3, r0, #0
 8001e92:	d001      	beq.n	8001e98 <RPM_UpdateFrequencyRatio+0x18>
 8001e94:	2301      	movs	r3, #1
 8001e96:	e067      	b.n	8001f68 <RPM_UpdateFrequencyRatio+0xe8>
	CLK = (float)CLK_default * (aSYNCFrequencyRatio / 100.0f);
 8001e98:	4b35      	ldr	r3, [pc, #212]	@ (8001f70 <RPM_UpdateFrequencyRatio+0xf0>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	0018      	movs	r0, r3
 8001e9e:	f7ff f82f 	bl	8000f00 <__aeabi_ui2f>
 8001ea2:	1c04      	adds	r4, r0, #0
 8001ea4:	4933      	ldr	r1, [pc, #204]	@ (8001f74 <RPM_UpdateFrequencyRatio+0xf4>)
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7fe faf6 	bl	8000498 <__aeabi_fdiv>
 8001eac:	1c03      	adds	r3, r0, #0
 8001eae:	1c19      	adds	r1, r3, #0
 8001eb0:	1c20      	adds	r0, r4, #0
 8001eb2:	f7fe fcd7 	bl	8000864 <__aeabi_fmul>
 8001eb6:	1c03      	adds	r3, r0, #0
 8001eb8:	1c18      	adds	r0, r3, #0
 8001eba:	f7fe fad5 	bl	8000468 <__aeabi_f2uiz>
 8001ebe:	0002      	movs	r2, r0
 8001ec0:	4b2d      	ldr	r3, [pc, #180]	@ (8001f78 <RPM_UpdateFrequencyRatio+0xf8>)
 8001ec2:	601a      	str	r2, [r3, #0]
	OVFlimit=(CLK*60)/(RPM_THRESHOLD*65536*RPM_PULSES);
 8001ec4:	4b2c      	ldr	r3, [pc, #176]	@ (8001f78 <RPM_UpdateFrequencyRatio+0xf8>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	0013      	movs	r3, r2
 8001eca:	011b      	lsls	r3, r3, #4
 8001ecc:	1a9b      	subs	r3, r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	001a      	movs	r2, r3
 8001ed2:	23fa      	movs	r3, #250	@ 0xfa
 8001ed4:	04d9      	lsls	r1, r3, #19
 8001ed6:	0010      	movs	r0, r2
 8001ed8:	f7fe f916 	bl	8000108 <__udivsi3>
 8001edc:	0003      	movs	r3, r0
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	4b26      	ldr	r3, [pc, #152]	@ (8001f7c <RPM_UpdateFrequencyRatio+0xfc>)
 8001ee2:	801a      	strh	r2, [r3, #0]
	minMeasureTime=((uint32_t)((float)(OVFlimit/3)*65536))/(CLK/1000);
 8001ee4:	4b25      	ldr	r3, [pc, #148]	@ (8001f7c <RPM_UpdateFrequencyRatio+0xfc>)
 8001ee6:	881b      	ldrh	r3, [r3, #0]
 8001ee8:	2103      	movs	r1, #3
 8001eea:	0018      	movs	r0, r3
 8001eec:	f7fe f90c 	bl	8000108 <__udivsi3>
 8001ef0:	0003      	movs	r3, r0
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	f7fe ffb7 	bl	8000e68 <__aeabi_i2f>
 8001efa:	1c03      	adds	r3, r0, #0
 8001efc:	218f      	movs	r1, #143	@ 0x8f
 8001efe:	05c9      	lsls	r1, r1, #23
 8001f00:	1c18      	adds	r0, r3, #0
 8001f02:	f7fe fcaf 	bl	8000864 <__aeabi_fmul>
 8001f06:	1c03      	adds	r3, r0, #0
 8001f08:	1c18      	adds	r0, r3, #0
 8001f0a:	f7fe faad 	bl	8000468 <__aeabi_f2uiz>
 8001f0e:	0004      	movs	r4, r0
 8001f10:	4b19      	ldr	r3, [pc, #100]	@ (8001f78 <RPM_UpdateFrequencyRatio+0xf8>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	22fa      	movs	r2, #250	@ 0xfa
 8001f16:	0091      	lsls	r1, r2, #2
 8001f18:	0018      	movs	r0, r3
 8001f1a:	f7fe f8f5 	bl	8000108 <__udivsi3>
 8001f1e:	0003      	movs	r3, r0
 8001f20:	0019      	movs	r1, r3
 8001f22:	0020      	movs	r0, r4
 8001f24:	f7fe f8f0 	bl	8000108 <__udivsi3>
 8001f28:	0003      	movs	r3, r0
 8001f2a:	b2da      	uxtb	r2, r3
 8001f2c:	4b14      	ldr	r3, [pc, #80]	@ (8001f80 <RPM_UpdateFrequencyRatio+0x100>)
 8001f2e:	701a      	strb	r2, [r3, #0]
	maxMeasureTime=((uint32_t)(float)OVFlimit*65536)/(CLK/1000);
 8001f30:	4b12      	ldr	r3, [pc, #72]	@ (8001f7c <RPM_UpdateFrequencyRatio+0xfc>)
 8001f32:	881b      	ldrh	r3, [r3, #0]
 8001f34:	0018      	movs	r0, r3
 8001f36:	f7fe ffe3 	bl	8000f00 <__aeabi_ui2f>
 8001f3a:	1c03      	adds	r3, r0, #0
 8001f3c:	1c18      	adds	r0, r3, #0
 8001f3e:	f7fe fa93 	bl	8000468 <__aeabi_f2uiz>
 8001f42:	0003      	movs	r3, r0
 8001f44:	041c      	lsls	r4, r3, #16
 8001f46:	4b0c      	ldr	r3, [pc, #48]	@ (8001f78 <RPM_UpdateFrequencyRatio+0xf8>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	22fa      	movs	r2, #250	@ 0xfa
 8001f4c:	0091      	lsls	r1, r2, #2
 8001f4e:	0018      	movs	r0, r3
 8001f50:	f7fe f8da 	bl	8000108 <__udivsi3>
 8001f54:	0003      	movs	r3, r0
 8001f56:	0019      	movs	r1, r3
 8001f58:	0020      	movs	r0, r4
 8001f5a:	f7fe f8d5 	bl	8000108 <__udivsi3>
 8001f5e:	0003      	movs	r3, r0
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	4b08      	ldr	r3, [pc, #32]	@ (8001f84 <RPM_UpdateFrequencyRatio+0x104>)
 8001f64:	701a      	strb	r2, [r3, #0]

	return 0;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	0018      	movs	r0, r3
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	b003      	add	sp, #12
 8001f6e:	bd90      	pop	{r4, r7, pc}
 8001f70:	200001d0 	.word	0x200001d0
 8001f74:	42c80000 	.word	0x42c80000
 8001f78:	200001d4 	.word	0x200001d4
 8001f7c:	200001da 	.word	0x200001da
 8001f80:	200001ec 	.word	0x200001ec
 8001f84:	200001ed 	.word	0x200001ed

08001f88 <RPMtoRPMMessage>:

unsigned RPMtoRPMMessage(uint8_t aRPMMessage[RPM_MESSAGE_SIZE], float *aRPM, uint16_t *aTime, uint8_t aID)
{
 8001f88:	b590      	push	{r4, r7, lr}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
 8001f94:	001a      	movs	r2, r3
 8001f96:	1cfb      	adds	r3, r7, #3
 8001f98:	701a      	strb	r2, [r3, #0]
	if(*aRPM>255){return 1;}	// invalid data
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4924      	ldr	r1, [pc, #144]	@ (8002030 <RPMtoRPMMessage+0xa8>)
 8001fa0:	1c18      	adds	r0, r3, #0
 8001fa2:	f7fe fa4d 	bl	8000440 <__aeabi_fcmpgt>
 8001fa6:	1e03      	subs	r3, r0, #0
 8001fa8:	d001      	beq.n	8001fae <RPMtoRPMMessage+0x26>
 8001faa:	2301      	movs	r3, #1
 8001fac:	e03c      	b.n	8002028 <RPMtoRPMMessage+0xa0>
		[2] time_h - GG = T/256
		[3] time_l - HH = T%256
		[4] settings: 0-optical, 1-Hall
	**/
	if(aID>255){return 3;}	// invalid data
	if(aRPMMessage == NULL){return 4;}
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d101      	bne.n	8001fb8 <RPMtoRPMMessage+0x30>
 8001fb4:	2304      	movs	r3, #4
 8001fb6:	e037      	b.n	8002028 <RPMtoRPMMessage+0xa0>
	aRPMMessage[0]=(uint8_t)*aRPM;
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	1c18      	adds	r0, r3, #0
 8001fbe:	f7fe fa53 	bl	8000468 <__aeabi_f2uiz>
 8001fc2:	0003      	movs	r3, r0
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	701a      	strb	r2, [r3, #0]
	aRPMMessage[1]=(uint8_t)(float)((*aRPM-aRPMMessage[0])*100);
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	681c      	ldr	r4, [r3, #0]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	0018      	movs	r0, r3
 8001fd4:	f7fe ff48 	bl	8000e68 <__aeabi_i2f>
 8001fd8:	1c03      	adds	r3, r0, #0
 8001fda:	1c19      	adds	r1, r3, #0
 8001fdc:	1c20      	adds	r0, r4, #0
 8001fde:	f7fe fd7f 	bl	8000ae0 <__aeabi_fsub>
 8001fe2:	1c03      	adds	r3, r0, #0
 8001fe4:	4913      	ldr	r1, [pc, #76]	@ (8002034 <RPMtoRPMMessage+0xac>)
 8001fe6:	1c18      	adds	r0, r3, #0
 8001fe8:	f7fe fc3c 	bl	8000864 <__aeabi_fmul>
 8001fec:	1c03      	adds	r3, r0, #0
 8001fee:	1c1a      	adds	r2, r3, #0
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	1c5c      	adds	r4, r3, #1
 8001ff4:	1c10      	adds	r0, r2, #0
 8001ff6:	f7fe fa37 	bl	8000468 <__aeabi_f2uiz>
 8001ffa:	0003      	movs	r3, r0
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	7023      	strb	r3, [r4, #0]
	aRPMMessage[2]=(uint8_t)(*aTime >> 8);		// H Byte
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	881b      	ldrh	r3, [r3, #0]
 8002004:	0a1b      	lsrs	r3, r3, #8
 8002006:	b29a      	uxth	r2, r3
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	3302      	adds	r3, #2
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	701a      	strb	r2, [r3, #0]
	aRPMMessage[3]=(uint8_t)(*aTime & 0xFF);	// L Byte
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	881a      	ldrh	r2, [r3, #0]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	3303      	adds	r3, #3
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	701a      	strb	r2, [r3, #0]
	aRPMMessage[4]=aID;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	3304      	adds	r3, #4
 8002020:	1cfa      	adds	r2, r7, #3
 8002022:	7812      	ldrb	r2, [r2, #0]
 8002024:	701a      	strb	r2, [r3, #0]
	return 0;
 8002026:	2300      	movs	r3, #0
}
 8002028:	0018      	movs	r0, r3
 800202a:	46bd      	mov	sp, r7
 800202c:	b005      	add	sp, #20
 800202e:	bd90      	pop	{r4, r7, pc}
 8002030:	437f0000 	.word	0x437f0000
 8002034:	42c80000 	.word	0x42c80000

08002038 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002038:	b590      	push	{r4, r7, lr}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) //
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a59      	ldr	r2, [pc, #356]	@ (80021ac <HAL_TIM_IC_CaptureCallback+0x174>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d000      	beq.n	800204c <HAL_TIM_IC_CaptureCallback+0x14>
 800204a:	e0ab      	b.n	80021a4 <HAL_TIM_IC_CaptureCallback+0x16c>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	7f1b      	ldrb	r3, [r3, #28]
 8002050:	2b08      	cmp	r3, #8
 8002052:	d000      	beq.n	8002056 <HAL_TIM_IC_CaptureCallback+0x1e>
 8002054:	e0a6      	b.n	80021a4 <HAL_TIM_IC_CaptureCallback+0x16c>
    {
		//__disable_irq();
		captureValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	210c      	movs	r1, #12
 800205a:	0018      	movs	r0, r3
 800205c:	f002 fa82 	bl	8004564 <HAL_TIM_ReadCapturedValue>
 8002060:	0003      	movs	r3, r0
 8002062:	b29a      	uxth	r2, r3
 8002064:	4b52      	ldr	r3, [pc, #328]	@ (80021b0 <HAL_TIM_IC_CaptureCallback+0x178>)
 8002066:	801a      	strh	r2, [r3, #0]
		if(OVFcounter>0){ticks=65536*OVFcounter + captureValue - previousCaptureValue;}
 8002068:	4b52      	ldr	r3, [pc, #328]	@ (80021b4 <HAL_TIM_IC_CaptureCallback+0x17c>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00d      	beq.n	800208c <HAL_TIM_IC_CaptureCallback+0x54>
 8002070:	4b50      	ldr	r3, [pc, #320]	@ (80021b4 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	041b      	lsls	r3, r3, #16
 8002076:	4a4e      	ldr	r2, [pc, #312]	@ (80021b0 <HAL_TIM_IC_CaptureCallback+0x178>)
 8002078:	8812      	ldrh	r2, [r2, #0]
 800207a:	b292      	uxth	r2, r2
 800207c:	189b      	adds	r3, r3, r2
 800207e:	4a4e      	ldr	r2, [pc, #312]	@ (80021b8 <HAL_TIM_IC_CaptureCallback+0x180>)
 8002080:	8812      	ldrh	r2, [r2, #0]
 8002082:	b292      	uxth	r2, r2
 8002084:	1a9a      	subs	r2, r3, r2
 8002086:	4b4d      	ldr	r3, [pc, #308]	@ (80021bc <HAL_TIM_IC_CaptureCallback+0x184>)
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	e00a      	b.n	80020a2 <HAL_TIM_IC_CaptureCallback+0x6a>
		else{ticks=captureValue - previousCaptureValue;}
 800208c:	4b48      	ldr	r3, [pc, #288]	@ (80021b0 <HAL_TIM_IC_CaptureCallback+0x178>)
 800208e:	881b      	ldrh	r3, [r3, #0]
 8002090:	b29b      	uxth	r3, r3
 8002092:	001a      	movs	r2, r3
 8002094:	4b48      	ldr	r3, [pc, #288]	@ (80021b8 <HAL_TIM_IC_CaptureCallback+0x180>)
 8002096:	881b      	ldrh	r3, [r3, #0]
 8002098:	b29b      	uxth	r3, r3
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	001a      	movs	r2, r3
 800209e:	4b47      	ldr	r3, [pc, #284]	@ (80021bc <HAL_TIM_IC_CaptureCallback+0x184>)
 80020a0:	601a      	str	r2, [r3, #0]
		measureTime=((float)ticks/(float)(CLK/1000));	// measureTime in ms
 80020a2:	4b46      	ldr	r3, [pc, #280]	@ (80021bc <HAL_TIM_IC_CaptureCallback+0x184>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	0018      	movs	r0, r3
 80020a8:	f7fe ff2a 	bl	8000f00 <__aeabi_ui2f>
 80020ac:	1c04      	adds	r4, r0, #0
 80020ae:	4b44      	ldr	r3, [pc, #272]	@ (80021c0 <HAL_TIM_IC_CaptureCallback+0x188>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	22fa      	movs	r2, #250	@ 0xfa
 80020b4:	0091      	lsls	r1, r2, #2
 80020b6:	0018      	movs	r0, r3
 80020b8:	f7fe f826 	bl	8000108 <__udivsi3>
 80020bc:	0003      	movs	r3, r0
 80020be:	0018      	movs	r0, r3
 80020c0:	f7fe ff1e 	bl	8000f00 <__aeabi_ui2f>
 80020c4:	1c03      	adds	r3, r0, #0
 80020c6:	1c19      	adds	r1, r3, #0
 80020c8:	1c20      	adds	r0, r4, #0
 80020ca:	f7fe f9e5 	bl	8000498 <__aeabi_fdiv>
 80020ce:	1c03      	adds	r3, r0, #0
 80020d0:	1c18      	adds	r0, r3, #0
 80020d2:	f7fe f9c9 	bl	8000468 <__aeabi_f2uiz>
 80020d6:	0003      	movs	r3, r0
 80020d8:	b29a      	uxth	r2, r3
 80020da:	4b3a      	ldr	r3, [pc, #232]	@ (80021c4 <HAL_TIM_IC_CaptureCallback+0x18c>)
 80020dc:	801a      	strh	r2, [r3, #0]
		measureCounter++;
 80020de:	4b3a      	ldr	r3, [pc, #232]	@ (80021c8 <HAL_TIM_IC_CaptureCallback+0x190>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	3301      	adds	r3, #1
 80020e6:	b2da      	uxtb	r2, r3
 80020e8:	4b37      	ldr	r3, [pc, #220]	@ (80021c8 <HAL_TIM_IC_CaptureCallback+0x190>)
 80020ea:	701a      	strb	r2, [r3, #0]
		if(bMaxMeasureTimeExceeded)
 80020ec:	4b37      	ldr	r3, [pc, #220]	@ (80021cc <HAL_TIM_IC_CaptureCallback+0x194>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d008      	beq.n	8002108 <HAL_TIM_IC_CaptureCallback+0xd0>
		{
			RPM=0;
 80020f6:	4b36      	ldr	r3, [pc, #216]	@ (80021d0 <HAL_TIM_IC_CaptureCallback+0x198>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
			RPM_ResetMeasurement();
 80020fc:	f7ff fe70 	bl	8001de0 <RPM_ResetMeasurement>
			bMaxMeasureTimeExceeded=false;
 8002100:	4b32      	ldr	r3, [pc, #200]	@ (80021cc <HAL_TIM_IC_CaptureCallback+0x194>)
 8002102:	2200      	movs	r2, #0
 8002104:	701a      	strb	r2, [r3, #0]
			}
			RPM_ResetMeasurement();
		}
		//__enable_irq();
    }
}
 8002106:	e04d      	b.n	80021a4 <HAL_TIM_IC_CaptureCallback+0x16c>
		else if(measureTime>minMeasureTime)
 8002108:	4b32      	ldr	r3, [pc, #200]	@ (80021d4 <HAL_TIM_IC_CaptureCallback+0x19c>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	b2db      	uxtb	r3, r3
 800210e:	001a      	movs	r2, r3
 8002110:	4b2c      	ldr	r3, [pc, #176]	@ (80021c4 <HAL_TIM_IC_CaptureCallback+0x18c>)
 8002112:	881b      	ldrh	r3, [r3, #0]
 8002114:	b29b      	uxth	r3, r3
 8002116:	429a      	cmp	r2, r3
 8002118:	d244      	bcs.n	80021a4 <HAL_TIM_IC_CaptureCallback+0x16c>
			RPM=((float)(CLK/1000)*60*measureCounter)/((float)(ticks/1000)*RPM_PULSES);
 800211a:	4b29      	ldr	r3, [pc, #164]	@ (80021c0 <HAL_TIM_IC_CaptureCallback+0x188>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	22fa      	movs	r2, #250	@ 0xfa
 8002120:	0091      	lsls	r1, r2, #2
 8002122:	0018      	movs	r0, r3
 8002124:	f7fd fff0 	bl	8000108 <__udivsi3>
 8002128:	0003      	movs	r3, r0
 800212a:	0018      	movs	r0, r3
 800212c:	f7fe fee8 	bl	8000f00 <__aeabi_ui2f>
 8002130:	1c03      	adds	r3, r0, #0
 8002132:	4929      	ldr	r1, [pc, #164]	@ (80021d8 <HAL_TIM_IC_CaptureCallback+0x1a0>)
 8002134:	1c18      	adds	r0, r3, #0
 8002136:	f7fe fb95 	bl	8000864 <__aeabi_fmul>
 800213a:	1c03      	adds	r3, r0, #0
 800213c:	1c1c      	adds	r4, r3, #0
 800213e:	4b22      	ldr	r3, [pc, #136]	@ (80021c8 <HAL_TIM_IC_CaptureCallback+0x190>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	b2db      	uxtb	r3, r3
 8002144:	0018      	movs	r0, r3
 8002146:	f7fe fe8f 	bl	8000e68 <__aeabi_i2f>
 800214a:	1c03      	adds	r3, r0, #0
 800214c:	1c19      	adds	r1, r3, #0
 800214e:	1c20      	adds	r0, r4, #0
 8002150:	f7fe fb88 	bl	8000864 <__aeabi_fmul>
 8002154:	1c03      	adds	r3, r0, #0
 8002156:	1c1c      	adds	r4, r3, #0
 8002158:	4b18      	ldr	r3, [pc, #96]	@ (80021bc <HAL_TIM_IC_CaptureCallback+0x184>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	22fa      	movs	r2, #250	@ 0xfa
 800215e:	0091      	lsls	r1, r2, #2
 8002160:	0018      	movs	r0, r3
 8002162:	f7fd ffd1 	bl	8000108 <__udivsi3>
 8002166:	0003      	movs	r3, r0
 8002168:	0018      	movs	r0, r3
 800216a:	f7fe fec9 	bl	8000f00 <__aeabi_ui2f>
 800216e:	1c03      	adds	r3, r0, #0
 8002170:	491a      	ldr	r1, [pc, #104]	@ (80021dc <HAL_TIM_IC_CaptureCallback+0x1a4>)
 8002172:	1c18      	adds	r0, r3, #0
 8002174:	f7fe fb76 	bl	8000864 <__aeabi_fmul>
 8002178:	1c03      	adds	r3, r0, #0
 800217a:	1c19      	adds	r1, r3, #0
 800217c:	1c20      	adds	r0, r4, #0
 800217e:	f7fe f98b 	bl	8000498 <__aeabi_fdiv>
 8002182:	1c03      	adds	r3, r0, #0
 8002184:	1c1a      	adds	r2, r3, #0
 8002186:	4b12      	ldr	r3, [pc, #72]	@ (80021d0 <HAL_TIM_IC_CaptureCallback+0x198>)
 8002188:	601a      	str	r2, [r3, #0]
			if(RPM > RPM_LIMIT){	// invalid value
 800218a:	4b11      	ldr	r3, [pc, #68]	@ (80021d0 <HAL_TIM_IC_CaptureCallback+0x198>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4914      	ldr	r1, [pc, #80]	@ (80021e0 <HAL_TIM_IC_CaptureCallback+0x1a8>)
 8002190:	1c18      	adds	r0, r3, #0
 8002192:	f7fe f955 	bl	8000440 <__aeabi_fcmpgt>
 8002196:	1e03      	subs	r3, r0, #0
 8002198:	d002      	beq.n	80021a0 <HAL_TIM_IC_CaptureCallback+0x168>
				RPM=255.255;
 800219a:	4b0d      	ldr	r3, [pc, #52]	@ (80021d0 <HAL_TIM_IC_CaptureCallback+0x198>)
 800219c:	4a11      	ldr	r2, [pc, #68]	@ (80021e4 <HAL_TIM_IC_CaptureCallback+0x1ac>)
 800219e:	601a      	str	r2, [r3, #0]
			RPM_ResetMeasurement();
 80021a0:	f7ff fe1e 	bl	8001de0 <RPM_ResetMeasurement>
}
 80021a4:	46c0      	nop			@ (mov r8, r8)
 80021a6:	46bd      	mov	sp, r7
 80021a8:	b003      	add	sp, #12
 80021aa:	bd90      	pop	{r4, r7, pc}
 80021ac:	40012c00 	.word	0x40012c00
 80021b0:	200001dc 	.word	0x200001dc
 80021b4:	200001f0 	.word	0x200001f0
 80021b8:	200001de 	.word	0x200001de
 80021bc:	200001e4 	.word	0x200001e4
 80021c0:	200001d4 	.word	0x200001d4
 80021c4:	200001e0 	.word	0x200001e0
 80021c8:	200001f4 	.word	0x200001f4
 80021cc:	200001cd 	.word	0x200001cd
 80021d0:	200001e8 	.word	0x200001e8
 80021d4:	200001ec 	.word	0x200001ec
 80021d8:	42700000 	.word	0x42700000
 80021dc:	43480000 	.word	0x43480000
 80021e0:	428c0000 	.word	0x428c0000
 80021e4:	437f4148 	.word	0x437f4148

080021e8 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1){
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a18      	ldr	r2, [pc, #96]	@ (8002258 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d12a      	bne.n	8002250 <HAL_TIM_PeriodElapsedCallback+0x68>
		//__disable_irq();
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	2201      	movs	r2, #1
 8002202:	4013      	ands	r3, r2
 8002204:	2b01      	cmp	r3, #1
 8002206:	d123      	bne.n	8002250 <HAL_TIM_PeriodElapsedCallback+0x68>
		{
			if(OVFcounter>=OVFlimit)
 8002208:	4b14      	ldr	r3, [pc, #80]	@ (800225c <HAL_TIM_PeriodElapsedCallback+0x74>)
 800220a:	881b      	ldrh	r3, [r3, #0]
 800220c:	001a      	movs	r2, r3
 800220e:	4b14      	ldr	r3, [pc, #80]	@ (8002260 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	429a      	cmp	r2, r3
 8002214:	d817      	bhi.n	8002246 <HAL_TIM_PeriodElapsedCallback+0x5e>
			{
				captureValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	210c      	movs	r1, #12
 800221a:	0018      	movs	r0, r3
 800221c:	f002 f9a2 	bl	8004564 <HAL_TIM_ReadCapturedValue>
 8002220:	0003      	movs	r3, r0
 8002222:	b29a      	uxth	r2, r3
 8002224:	4b0f      	ldr	r3, [pc, #60]	@ (8002264 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002226:	801a      	strh	r2, [r3, #0]
				measureTime=maxMeasureTime;
 8002228:	4b0f      	ldr	r3, [pc, #60]	@ (8002268 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	b2db      	uxtb	r3, r3
 800222e:	001a      	movs	r2, r3
 8002230:	4b0e      	ldr	r3, [pc, #56]	@ (800226c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002232:	801a      	strh	r2, [r3, #0]
				RPM=0;	// value below threshold
 8002234:	4b0e      	ldr	r3, [pc, #56]	@ (8002270 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]
				RPM_ResetMeasurement();
 800223a:	f7ff fdd1 	bl	8001de0 <RPM_ResetMeasurement>
				bMaxMeasureTimeExceeded=true;
 800223e:	4b0d      	ldr	r3, [pc, #52]	@ (8002274 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002240:	2201      	movs	r2, #1
 8002242:	701a      	strb	r2, [r3, #0]
			}
			else{OVFcounter++;}
		}
		//__enable_irq();
	}
}
 8002244:	e004      	b.n	8002250 <HAL_TIM_PeriodElapsedCallback+0x68>
			else{OVFcounter++;}
 8002246:	4b06      	ldr	r3, [pc, #24]	@ (8002260 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	1c5a      	adds	r2, r3, #1
 800224c:	4b04      	ldr	r3, [pc, #16]	@ (8002260 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800224e:	601a      	str	r2, [r3, #0]
}
 8002250:	46c0      	nop			@ (mov r8, r8)
 8002252:	46bd      	mov	sp, r7
 8002254:	b002      	add	sp, #8
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40012c00 	.word	0x40012c00
 800225c:	200001da 	.word	0x200001da
 8002260:	200001f0 	.word	0x200001f0
 8002264:	200001dc 	.word	0x200001dc
 8002268:	200001ed 	.word	0x200001ed
 800226c:	200001e0 	.word	0x200001e0
 8002270:	200001e8 	.word	0x200001e8
 8002274:	200001cd 	.word	0x200001cd

08002278 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800227e:	4b0f      	ldr	r3, [pc, #60]	@ (80022bc <HAL_MspInit+0x44>)
 8002280:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002282:	4b0e      	ldr	r3, [pc, #56]	@ (80022bc <HAL_MspInit+0x44>)
 8002284:	2101      	movs	r1, #1
 8002286:	430a      	orrs	r2, r1
 8002288:	641a      	str	r2, [r3, #64]	@ 0x40
 800228a:	4b0c      	ldr	r3, [pc, #48]	@ (80022bc <HAL_MspInit+0x44>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228e:	2201      	movs	r2, #1
 8002290:	4013      	ands	r3, r2
 8002292:	607b      	str	r3, [r7, #4]
 8002294:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002296:	4b09      	ldr	r3, [pc, #36]	@ (80022bc <HAL_MspInit+0x44>)
 8002298:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800229a:	4b08      	ldr	r3, [pc, #32]	@ (80022bc <HAL_MspInit+0x44>)
 800229c:	2180      	movs	r1, #128	@ 0x80
 800229e:	0549      	lsls	r1, r1, #21
 80022a0:	430a      	orrs	r2, r1
 80022a2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80022a4:	4b05      	ldr	r3, [pc, #20]	@ (80022bc <HAL_MspInit+0x44>)
 80022a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80022a8:	2380      	movs	r3, #128	@ 0x80
 80022aa:	055b      	lsls	r3, r3, #21
 80022ac:	4013      	ands	r3, r2
 80022ae:	603b      	str	r3, [r7, #0]
 80022b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022b2:	46c0      	nop			@ (mov r8, r8)
 80022b4:	46bd      	mov	sp, r7
 80022b6:	b002      	add	sp, #8
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	46c0      	nop			@ (mov r8, r8)
 80022bc:	40021000 	.word	0x40021000

080022c0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80022c0:	b590      	push	{r4, r7, lr}
 80022c2:	b08b      	sub	sp, #44	@ 0x2c
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c8:	2414      	movs	r4, #20
 80022ca:	193b      	adds	r3, r7, r4
 80022cc:	0018      	movs	r0, r3
 80022ce:	2314      	movs	r3, #20
 80022d0:	001a      	movs	r2, r3
 80022d2:	2100      	movs	r1, #0
 80022d4:	f005 fb9c 	bl	8007a10 <memset>
  if(htim_ic->Instance==TIM1)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a25      	ldr	r2, [pc, #148]	@ (8002374 <HAL_TIM_IC_MspInit+0xb4>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d144      	bne.n	800236c <HAL_TIM_IC_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022e2:	4b25      	ldr	r3, [pc, #148]	@ (8002378 <HAL_TIM_IC_MspInit+0xb8>)
 80022e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80022e6:	4b24      	ldr	r3, [pc, #144]	@ (8002378 <HAL_TIM_IC_MspInit+0xb8>)
 80022e8:	2180      	movs	r1, #128	@ 0x80
 80022ea:	0109      	lsls	r1, r1, #4
 80022ec:	430a      	orrs	r2, r1
 80022ee:	641a      	str	r2, [r3, #64]	@ 0x40
 80022f0:	4b21      	ldr	r3, [pc, #132]	@ (8002378 <HAL_TIM_IC_MspInit+0xb8>)
 80022f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80022f4:	2380      	movs	r3, #128	@ 0x80
 80022f6:	011b      	lsls	r3, r3, #4
 80022f8:	4013      	ands	r3, r2
 80022fa:	613b      	str	r3, [r7, #16]
 80022fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002378 <HAL_TIM_IC_MspInit+0xb8>)
 8002300:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002302:	4b1d      	ldr	r3, [pc, #116]	@ (8002378 <HAL_TIM_IC_MspInit+0xb8>)
 8002304:	2102      	movs	r1, #2
 8002306:	430a      	orrs	r2, r1
 8002308:	635a      	str	r2, [r3, #52]	@ 0x34
 800230a:	4b1b      	ldr	r3, [pc, #108]	@ (8002378 <HAL_TIM_IC_MspInit+0xb8>)
 800230c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800230e:	2202      	movs	r2, #2
 8002310:	4013      	ands	r3, r2
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PB7     ------> TIM1_CH4
    */

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002316:	0021      	movs	r1, r4
 8002318:	187b      	adds	r3, r7, r1
 800231a:	2280      	movs	r2, #128	@ 0x80
 800231c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231e:	187b      	adds	r3, r7, r1
 8002320:	2202      	movs	r2, #2
 8002322:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002324:	187b      	adds	r3, r7, r1
 8002326:	2200      	movs	r2, #0
 8002328:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232a:	187b      	adds	r3, r7, r1
 800232c:	2200      	movs	r2, #0
 800232e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002330:	187b      	adds	r3, r7, r1
 8002332:	2201      	movs	r2, #1
 8002334:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002336:	187b      	adds	r3, r7, r1
 8002338:	4a10      	ldr	r2, [pc, #64]	@ (800237c <HAL_TIM_IC_MspInit+0xbc>)
 800233a:	0019      	movs	r1, r3
 800233c:	0010      	movs	r0, r2
 800233e:	f000 fc3f 	bl	8002bc0 <HAL_GPIO_Init>

    HAL_SYSCFG_SetPinBinding(HAL_BIND_SO8_PIN1_PB7);
 8002342:	23c0      	movs	r3, #192	@ 0xc0
 8002344:	029b      	lsls	r3, r3, #10
 8002346:	0018      	movs	r0, r3
 8002348:	f000 fa42 	bl	80027d0 <HAL_SYSCFG_SetPinBinding>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 800234c:	2200      	movs	r2, #0
 800234e:	2100      	movs	r1, #0
 8002350:	200d      	movs	r0, #13
 8002352:	f000 fb17 	bl	8002984 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8002356:	200d      	movs	r0, #13
 8002358:	f000 fb29 	bl	80029ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800235c:	2200      	movs	r2, #0
 800235e:	2100      	movs	r1, #0
 8002360:	200e      	movs	r0, #14
 8002362:	f000 fb0f 	bl	8002984 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002366:	200e      	movs	r0, #14
 8002368:	f000 fb21 	bl	80029ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */

  }
}
 800236c:	46c0      	nop			@ (mov r8, r8)
 800236e:	46bd      	mov	sp, r7
 8002370:	b00b      	add	sp, #44	@ 0x2c
 8002372:	bd90      	pop	{r4, r7, pc}
 8002374:	40012c00 	.word	0x40012c00
 8002378:	40021000 	.word	0x40021000
 800237c:	50000400 	.word	0x50000400

08002380 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a0d      	ldr	r2, [pc, #52]	@ (80023c4 <HAL_TIM_OC_MspInit+0x44>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d113      	bne.n	80023ba <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002392:	4b0d      	ldr	r3, [pc, #52]	@ (80023c8 <HAL_TIM_OC_MspInit+0x48>)
 8002394:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002396:	4b0c      	ldr	r3, [pc, #48]	@ (80023c8 <HAL_TIM_OC_MspInit+0x48>)
 8002398:	2102      	movs	r1, #2
 800239a:	430a      	orrs	r2, r1
 800239c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800239e:	4b0a      	ldr	r3, [pc, #40]	@ (80023c8 <HAL_TIM_OC_MspInit+0x48>)
 80023a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023a2:	2202      	movs	r2, #2
 80023a4:	4013      	ands	r3, r2
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80023aa:	2200      	movs	r2, #0
 80023ac:	2100      	movs	r1, #0
 80023ae:	2010      	movs	r0, #16
 80023b0:	f000 fae8 	bl	8002984 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80023b4:	2010      	movs	r0, #16
 80023b6:	f000 fafa 	bl	80029ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */

  }
}
 80023ba:	46c0      	nop			@ (mov r8, r8)
 80023bc:	46bd      	mov	sp, r7
 80023be:	b004      	add	sp, #16
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	46c0      	nop			@ (mov r8, r8)
 80023c4:	40000400 	.word	0x40000400
 80023c8:	40021000 	.word	0x40021000

080023cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002410 <HAL_TIM_Base_MspInit+0x44>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d113      	bne.n	8002406 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023de:	4b0d      	ldr	r3, [pc, #52]	@ (8002414 <HAL_TIM_Base_MspInit+0x48>)
 80023e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002414 <HAL_TIM_Base_MspInit+0x48>)
 80023e4:	2102      	movs	r1, #2
 80023e6:	430a      	orrs	r2, r1
 80023e8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80023ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002414 <HAL_TIM_Base_MspInit+0x48>)
 80023ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ee:	2202      	movs	r2, #2
 80023f0:	4013      	ands	r3, r2
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80023f6:	2200      	movs	r2, #0
 80023f8:	2100      	movs	r1, #0
 80023fa:	2010      	movs	r0, #16
 80023fc:	f000 fac2 	bl	8002984 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002400:	2010      	movs	r0, #16
 8002402:	f000 fad4 	bl	80029ae <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002406:	46c0      	nop			@ (mov r8, r8)
 8002408:	46bd      	mov	sp, r7
 800240a:	b004      	add	sp, #16
 800240c:	bd80      	pop	{r7, pc}
 800240e:	46c0      	nop			@ (mov r8, r8)
 8002410:	40000400 	.word	0x40000400
 8002414:	40021000 	.word	0x40021000

08002418 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002418:	b590      	push	{r4, r7, lr}
 800241a:	b091      	sub	sp, #68	@ 0x44
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002420:	232c      	movs	r3, #44	@ 0x2c
 8002422:	18fb      	adds	r3, r7, r3
 8002424:	0018      	movs	r0, r3
 8002426:	2314      	movs	r3, #20
 8002428:	001a      	movs	r2, r3
 800242a:	2100      	movs	r1, #0
 800242c:	f005 faf0 	bl	8007a10 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002430:	2410      	movs	r4, #16
 8002432:	193b      	adds	r3, r7, r4
 8002434:	0018      	movs	r0, r3
 8002436:	231c      	movs	r3, #28
 8002438:	001a      	movs	r2, r3
 800243a:	2100      	movs	r1, #0
 800243c:	f005 fae8 	bl	8007a10 <memset>
  if(huart->Instance==USART1)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a34      	ldr	r2, [pc, #208]	@ (8002518 <HAL_UART_MspInit+0x100>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d162      	bne.n	8002510 <HAL_UART_MspInit+0xf8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800244a:	193b      	adds	r3, r7, r4
 800244c:	2201      	movs	r2, #1
 800244e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002450:	193b      	adds	r3, r7, r4
 8002452:	2200      	movs	r2, #0
 8002454:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002456:	193b      	adds	r3, r7, r4
 8002458:	0018      	movs	r0, r3
 800245a:	f001 f8ab 	bl	80035b4 <HAL_RCCEx_PeriphCLKConfig>
 800245e:	1e03      	subs	r3, r0, #0
 8002460:	d001      	beq.n	8002466 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002462:	f7fe fe65 	bl	8001130 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002466:	4b2d      	ldr	r3, [pc, #180]	@ (800251c <HAL_UART_MspInit+0x104>)
 8002468:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800246a:	4b2c      	ldr	r3, [pc, #176]	@ (800251c <HAL_UART_MspInit+0x104>)
 800246c:	2180      	movs	r1, #128	@ 0x80
 800246e:	01c9      	lsls	r1, r1, #7
 8002470:	430a      	orrs	r2, r1
 8002472:	641a      	str	r2, [r3, #64]	@ 0x40
 8002474:	4b29      	ldr	r3, [pc, #164]	@ (800251c <HAL_UART_MspInit+0x104>)
 8002476:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002478:	2380      	movs	r3, #128	@ 0x80
 800247a:	01db      	lsls	r3, r3, #7
 800247c:	4013      	ands	r3, r2
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002482:	4b26      	ldr	r3, [pc, #152]	@ (800251c <HAL_UART_MspInit+0x104>)
 8002484:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002486:	4b25      	ldr	r3, [pc, #148]	@ (800251c <HAL_UART_MspInit+0x104>)
 8002488:	2101      	movs	r1, #1
 800248a:	430a      	orrs	r2, r1
 800248c:	635a      	str	r2, [r3, #52]	@ 0x34
 800248e:	4b23      	ldr	r3, [pc, #140]	@ (800251c <HAL_UART_MspInit+0x104>)
 8002490:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002492:	2201      	movs	r2, #1
 8002494:	4013      	ands	r3, r2
 8002496:	60bb      	str	r3, [r7, #8]
 8002498:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA0     ------> USART1_TX
    PA8     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin;
 800249a:	242c      	movs	r4, #44	@ 0x2c
 800249c:	193b      	adds	r3, r7, r4
 800249e:	2201      	movs	r2, #1
 80024a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a2:	193b      	adds	r3, r7, r4
 80024a4:	2202      	movs	r2, #2
 80024a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a8:	193b      	adds	r3, r7, r4
 80024aa:	2200      	movs	r2, #0
 80024ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ae:	193b      	adds	r3, r7, r4
 80024b0:	2200      	movs	r2, #0
 80024b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80024b4:	193b      	adds	r3, r7, r4
 80024b6:	2204      	movs	r2, #4
 80024b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 80024ba:	193a      	adds	r2, r7, r4
 80024bc:	23a0      	movs	r3, #160	@ 0xa0
 80024be:	05db      	lsls	r3, r3, #23
 80024c0:	0011      	movs	r1, r2
 80024c2:	0018      	movs	r0, r3
 80024c4:	f000 fb7c 	bl	8002bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART1_RX_Pin;
 80024c8:	0021      	movs	r1, r4
 80024ca:	187b      	adds	r3, r7, r1
 80024cc:	2280      	movs	r2, #128	@ 0x80
 80024ce:	0052      	lsls	r2, r2, #1
 80024d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d2:	187b      	adds	r3, r7, r1
 80024d4:	2202      	movs	r2, #2
 80024d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d8:	187b      	adds	r3, r7, r1
 80024da:	2200      	movs	r2, #0
 80024dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024de:	187b      	adds	r3, r7, r1
 80024e0:	2200      	movs	r2, #0
 80024e2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF14_USART1;
 80024e4:	187b      	adds	r3, r7, r1
 80024e6:	220e      	movs	r2, #14
 80024e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(USART1_RX_GPIO_Port, &GPIO_InitStruct);
 80024ea:	187a      	adds	r2, r7, r1
 80024ec:	23a0      	movs	r3, #160	@ 0xa0
 80024ee:	05db      	lsls	r3, r3, #23
 80024f0:	0011      	movs	r1, r2
 80024f2:	0018      	movs	r0, r3
 80024f4:	f000 fb64 	bl	8002bc0 <HAL_GPIO_Init>

    HAL_SYSCFG_SetPinBinding(HAL_BIND_SO8_PIN4_PA0|HAL_BIND_SO8_PIN5_PA8);
 80024f8:	4b09      	ldr	r3, [pc, #36]	@ (8002520 <HAL_UART_MspInit+0x108>)
 80024fa:	0018      	movs	r0, r3
 80024fc:	f000 f968 	bl	80027d0 <HAL_SYSCFG_SetPinBinding>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002500:	2200      	movs	r2, #0
 8002502:	2100      	movs	r1, #0
 8002504:	201b      	movs	r0, #27
 8002506:	f000 fa3d 	bl	8002984 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800250a:	201b      	movs	r0, #27
 800250c:	f000 fa4f 	bl	80029ae <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002510:	46c0      	nop			@ (mov r8, r8)
 8002512:	46bd      	mov	sp, r7
 8002514:	b011      	add	sp, #68	@ 0x44
 8002516:	bd90      	pop	{r4, r7, pc}
 8002518:	40013800 	.word	0x40013800
 800251c:	40021000 	.word	0x40021000
 8002520:	003c0004 	.word	0x003c0004

08002524 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002528:	46c0      	nop			@ (mov r8, r8)
 800252a:	e7fd      	b.n	8002528 <NMI_Handler+0x4>

0800252c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002530:	46c0      	nop			@ (mov r8, r8)
 8002532:	e7fd      	b.n	8002530 <HardFault_Handler+0x4>

08002534 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002538:	46c0      	nop			@ (mov r8, r8)
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002542:	46c0      	nop			@ (mov r8, r8)
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800254c:	f000 f924 	bl	8002798 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002550:	46c0      	nop			@ (mov r8, r8)
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UARTtiming_Pin);
 800255a:	2380      	movs	r3, #128	@ 0x80
 800255c:	015b      	lsls	r3, r3, #5
 800255e:	0018      	movs	r0, r3
 8002560:	f000 fc98 	bl	8002e94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002564:	46c0      	nop			@ (mov r8, r8)
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
	...

0800256c <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002570:	4b03      	ldr	r3, [pc, #12]	@ (8002580 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8002572:	0018      	movs	r0, r3
 8002574:	f001 fd14 	bl	8003fa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8002578:	46c0      	nop			@ (mov r8, r8)
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	46c0      	nop			@ (mov r8, r8)
 8002580:	20000180 	.word	0x20000180

08002584 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002588:	4b03      	ldr	r3, [pc, #12]	@ (8002598 <TIM1_CC_IRQHandler+0x14>)
 800258a:	0018      	movs	r0, r3
 800258c:	f001 fd08 	bl	8003fa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002590:	46c0      	nop			@ (mov r8, r8)
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	46c0      	nop			@ (mov r8, r8)
 8002598:	20000180 	.word	0x20000180

0800259c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80025a0:	4b03      	ldr	r3, [pc, #12]	@ (80025b0 <TIM3_IRQHandler+0x14>)
 80025a2:	0018      	movs	r0, r3
 80025a4:	f001 fcfc 	bl	8003fa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80025a8:	46c0      	nop			@ (mov r8, r8)
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	46c0      	nop			@ (mov r8, r8)
 80025b0:	20000078 	.word	0x20000078

080025b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 interrupt.
  */
void USART1_IRQHandler(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart);
 80025b8:	4b03      	ldr	r3, [pc, #12]	@ (80025c8 <USART1_IRQHandler+0x14>)
 80025ba:	0018      	movs	r0, r3
 80025bc:	f003 f8c4 	bl	8005748 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80025c0:	46c0      	nop			@ (mov r8, r8)
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	46c0      	nop			@ (mov r8, r8)
 80025c8:	200000c4 	.word	0x200000c4

080025cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025d4:	4a14      	ldr	r2, [pc, #80]	@ (8002628 <_sbrk+0x5c>)
 80025d6:	4b15      	ldr	r3, [pc, #84]	@ (800262c <_sbrk+0x60>)
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025e0:	4b13      	ldr	r3, [pc, #76]	@ (8002630 <_sbrk+0x64>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d102      	bne.n	80025ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025e8:	4b11      	ldr	r3, [pc, #68]	@ (8002630 <_sbrk+0x64>)
 80025ea:	4a12      	ldr	r2, [pc, #72]	@ (8002634 <_sbrk+0x68>)
 80025ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025ee:	4b10      	ldr	r3, [pc, #64]	@ (8002630 <_sbrk+0x64>)
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	18d3      	adds	r3, r2, r3
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d207      	bcs.n	800260c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025fc:	f005 fa22 	bl	8007a44 <__errno>
 8002600:	0003      	movs	r3, r0
 8002602:	220c      	movs	r2, #12
 8002604:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002606:	2301      	movs	r3, #1
 8002608:	425b      	negs	r3, r3
 800260a:	e009      	b.n	8002620 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800260c:	4b08      	ldr	r3, [pc, #32]	@ (8002630 <_sbrk+0x64>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002612:	4b07      	ldr	r3, [pc, #28]	@ (8002630 <_sbrk+0x64>)
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	18d2      	adds	r2, r2, r3
 800261a:	4b05      	ldr	r3, [pc, #20]	@ (8002630 <_sbrk+0x64>)
 800261c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800261e:	68fb      	ldr	r3, [r7, #12]
}
 8002620:	0018      	movs	r0, r3
 8002622:	46bd      	mov	sp, r7
 8002624:	b006      	add	sp, #24
 8002626:	bd80      	pop	{r7, pc}
 8002628:	20001800 	.word	0x20001800
 800262c:	00000400 	.word	0x00000400
 8002630:	200001f8 	.word	0x200001f8
 8002634:	20000348 	.word	0x20000348

08002638 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800263c:	4b03      	ldr	r3, [pc, #12]	@ (800264c <SystemInit+0x14>)
 800263e:	2280      	movs	r2, #128	@ 0x80
 8002640:	0512      	lsls	r2, r2, #20
 8002642:	609a      	str	r2, [r3, #8]
#endif
}
 8002644:	46c0      	nop			@ (mov r8, r8)
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	46c0      	nop			@ (mov r8, r8)
 800264c:	e000ed00 	.word	0xe000ed00

08002650 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002650:	480d      	ldr	r0, [pc, #52]	@ (8002688 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002652:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002654:	f7ff fff0 	bl	8002638 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002658:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800265a:	e003      	b.n	8002664 <LoopCopyDataInit>

0800265c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800265c:	4b0b      	ldr	r3, [pc, #44]	@ (800268c <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800265e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002660:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002662:	3104      	adds	r1, #4

08002664 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002664:	480a      	ldr	r0, [pc, #40]	@ (8002690 <LoopForever+0xa>)
  ldr r3, =_edata
 8002666:	4b0b      	ldr	r3, [pc, #44]	@ (8002694 <LoopForever+0xe>)
  adds r2, r0, r1
 8002668:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800266a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800266c:	d3f6      	bcc.n	800265c <CopyDataInit>
  ldr r2, =_sbss
 800266e:	4a0a      	ldr	r2, [pc, #40]	@ (8002698 <LoopForever+0x12>)
  b LoopFillZerobss
 8002670:	e002      	b.n	8002678 <LoopFillZerobss>

08002672 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002672:	2300      	movs	r3, #0
  str  r3, [r2]
 8002674:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002676:	3204      	adds	r2, #4

08002678 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8002678:	4b08      	ldr	r3, [pc, #32]	@ (800269c <LoopForever+0x16>)
  cmp r2, r3
 800267a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800267c:	d3f9      	bcc.n	8002672 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800267e:	f005 f9e7 	bl	8007a50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002682:	f7fe fc9d 	bl	8000fc0 <main>

08002686 <LoopForever>:

LoopForever:
    b LoopForever
 8002686:	e7fe      	b.n	8002686 <LoopForever>
  ldr   r0, =_estack
 8002688:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 800268c:	08007f00 	.word	0x08007f00
  ldr r0, =_sdata
 8002690:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002694:	2000005c 	.word	0x2000005c
  ldr r2, =_sbss
 8002698:	2000005c 	.word	0x2000005c
  ldr r3, = _ebss
 800269c:	20000348 	.word	0x20000348

080026a0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026a0:	e7fe      	b.n	80026a0 <ADC1_IRQHandler>
	...

080026a4 <LL_SYSCFG_ConfigPinMux>:
  * @rmtoll SYSCFG_CFGR3 CLL   LL_SYSCFG_ConfigPinMux\n
  * @param  mux_cfg This parameter can be a value of @ref SYSTEM_LL_PINMUX_CFG
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_ConfigPinMux(uint32_t mux_cfg)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(SYSCFG->CFGR3, (mux_cfg >> 16U), (mux_cfg & 0x0000FFFFU));
 80026ac:	4b08      	ldr	r3, [pc, #32]	@ (80026d0 <LL_SYSCFG_ConfigPinMux+0x2c>)
 80026ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	0c12      	lsrs	r2, r2, #16
 80026b4:	43d2      	mvns	r2, r2
 80026b6:	401a      	ands	r2, r3
 80026b8:	0011      	movs	r1, r2
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	041b      	lsls	r3, r3, #16
 80026be:	0c1a      	lsrs	r2, r3, #16
 80026c0:	4b03      	ldr	r3, [pc, #12]	@ (80026d0 <LL_SYSCFG_ConfigPinMux+0x2c>)
 80026c2:	430a      	orrs	r2, r1
 80026c4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80026c6:	46c0      	nop			@ (mov r8, r8)
 80026c8:	46bd      	mov	sp, r7
 80026ca:	b002      	add	sp, #8
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	46c0      	nop			@ (mov r8, r8)
 80026d0:	40010000 	.word	0x40010000

080026d4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80026da:	1dfb      	adds	r3, r7, #7
 80026dc:	2200      	movs	r2, #0
 80026de:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026e0:	2003      	movs	r0, #3
 80026e2:	f000 f80f 	bl	8002704 <HAL_InitTick>
 80026e6:	1e03      	subs	r3, r0, #0
 80026e8:	d003      	beq.n	80026f2 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 80026ea:	1dfb      	adds	r3, r7, #7
 80026ec:	2201      	movs	r2, #1
 80026ee:	701a      	strb	r2, [r3, #0]
 80026f0:	e001      	b.n	80026f6 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80026f2:	f7ff fdc1 	bl	8002278 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80026f6:	1dfb      	adds	r3, r7, #7
 80026f8:	781b      	ldrb	r3, [r3, #0]
}
 80026fa:	0018      	movs	r0, r3
 80026fc:	46bd      	mov	sp, r7
 80026fe:	b002      	add	sp, #8
 8002700:	bd80      	pop	{r7, pc}
	...

08002704 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002704:	b590      	push	{r4, r7, lr}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800270c:	230f      	movs	r3, #15
 800270e:	18fb      	adds	r3, r7, r3
 8002710:	2200      	movs	r2, #0
 8002712:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8002714:	4b1d      	ldr	r3, [pc, #116]	@ (800278c <HAL_InitTick+0x88>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d02b      	beq.n	8002774 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 800271c:	4b1c      	ldr	r3, [pc, #112]	@ (8002790 <HAL_InitTick+0x8c>)
 800271e:	681c      	ldr	r4, [r3, #0]
 8002720:	4b1a      	ldr	r3, [pc, #104]	@ (800278c <HAL_InitTick+0x88>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	0019      	movs	r1, r3
 8002726:	23fa      	movs	r3, #250	@ 0xfa
 8002728:	0098      	lsls	r0, r3, #2
 800272a:	f7fd fced 	bl	8000108 <__udivsi3>
 800272e:	0003      	movs	r3, r0
 8002730:	0019      	movs	r1, r3
 8002732:	0020      	movs	r0, r4
 8002734:	f7fd fce8 	bl	8000108 <__udivsi3>
 8002738:	0003      	movs	r3, r0
 800273a:	0018      	movs	r0, r3
 800273c:	f000 f957 	bl	80029ee <HAL_SYSTICK_Config>
 8002740:	1e03      	subs	r3, r0, #0
 8002742:	d112      	bne.n	800276a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b03      	cmp	r3, #3
 8002748:	d80a      	bhi.n	8002760 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800274a:	6879      	ldr	r1, [r7, #4]
 800274c:	2301      	movs	r3, #1
 800274e:	425b      	negs	r3, r3
 8002750:	2200      	movs	r2, #0
 8002752:	0018      	movs	r0, r3
 8002754:	f000 f916 	bl	8002984 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002758:	4b0e      	ldr	r3, [pc, #56]	@ (8002794 <HAL_InitTick+0x90>)
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	e00d      	b.n	800277c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002760:	230f      	movs	r3, #15
 8002762:	18fb      	adds	r3, r7, r3
 8002764:	2201      	movs	r2, #1
 8002766:	701a      	strb	r2, [r3, #0]
 8002768:	e008      	b.n	800277c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800276a:	230f      	movs	r3, #15
 800276c:	18fb      	adds	r3, r7, r3
 800276e:	2201      	movs	r2, #1
 8002770:	701a      	strb	r2, [r3, #0]
 8002772:	e003      	b.n	800277c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002774:	230f      	movs	r3, #15
 8002776:	18fb      	adds	r3, r7, r3
 8002778:	2201      	movs	r2, #1
 800277a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800277c:	230f      	movs	r3, #15
 800277e:	18fb      	adds	r3, r7, r3
 8002780:	781b      	ldrb	r3, [r3, #0]
}
 8002782:	0018      	movs	r0, r3
 8002784:	46bd      	mov	sp, r7
 8002786:	b005      	add	sp, #20
 8002788:	bd90      	pop	{r4, r7, pc}
 800278a:	46c0      	nop			@ (mov r8, r8)
 800278c:	20000008 	.word	0x20000008
 8002790:	20000000 	.word	0x20000000
 8002794:	20000004 	.word	0x20000004

08002798 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800279c:	4b05      	ldr	r3, [pc, #20]	@ (80027b4 <HAL_IncTick+0x1c>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	001a      	movs	r2, r3
 80027a2:	4b05      	ldr	r3, [pc, #20]	@ (80027b8 <HAL_IncTick+0x20>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	18d2      	adds	r2, r2, r3
 80027a8:	4b03      	ldr	r3, [pc, #12]	@ (80027b8 <HAL_IncTick+0x20>)
 80027aa:	601a      	str	r2, [r3, #0]
}
 80027ac:	46c0      	nop			@ (mov r8, r8)
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	46c0      	nop			@ (mov r8, r8)
 80027b4:	20000008 	.word	0x20000008
 80027b8:	200001fc 	.word	0x200001fc

080027bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  return uwTick;
 80027c0:	4b02      	ldr	r3, [pc, #8]	@ (80027cc <HAL_GetTick+0x10>)
 80027c2:	681b      	ldr	r3, [r3, #0]
}
 80027c4:	0018      	movs	r0, r3
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	46c0      	nop			@ (mov r8, r8)
 80027cc:	200001fc 	.word	0x200001fc

080027d0 <HAL_SYSCFG_SetPinBinding>:
  *         for each die package
  *         This parameter can be a value of @ref HAL_BIND_CFG
  * @retval None
  */
void HAL_SYSCFG_SetPinBinding(uint32_t pin_binding)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_HAL_SYSCFG_PINBINDING(pin_binding));
  LL_SYSCFG_ConfigPinMux(pin_binding);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	0018      	movs	r0, r3
 80027dc:	f7ff ff62 	bl	80026a4 <LL_SYSCFG_ConfigPinMux>
}
 80027e0:	46c0      	nop			@ (mov r8, r8)
 80027e2:	46bd      	mov	sp, r7
 80027e4:	b002      	add	sp, #8
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	0002      	movs	r2, r0
 80027f0:	1dfb      	adds	r3, r7, #7
 80027f2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80027f4:	1dfb      	adds	r3, r7, #7
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80027fa:	d809      	bhi.n	8002810 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027fc:	1dfb      	adds	r3, r7, #7
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	001a      	movs	r2, r3
 8002802:	231f      	movs	r3, #31
 8002804:	401a      	ands	r2, r3
 8002806:	4b04      	ldr	r3, [pc, #16]	@ (8002818 <__NVIC_EnableIRQ+0x30>)
 8002808:	2101      	movs	r1, #1
 800280a:	4091      	lsls	r1, r2
 800280c:	000a      	movs	r2, r1
 800280e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002810:	46c0      	nop			@ (mov r8, r8)
 8002812:	46bd      	mov	sp, r7
 8002814:	b002      	add	sp, #8
 8002816:	bd80      	pop	{r7, pc}
 8002818:	e000e100 	.word	0xe000e100

0800281c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	0002      	movs	r2, r0
 8002824:	1dfb      	adds	r3, r7, #7
 8002826:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002828:	1dfb      	adds	r3, r7, #7
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	2b7f      	cmp	r3, #127	@ 0x7f
 800282e:	d810      	bhi.n	8002852 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002830:	1dfb      	adds	r3, r7, #7
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	001a      	movs	r2, r3
 8002836:	231f      	movs	r3, #31
 8002838:	4013      	ands	r3, r2
 800283a:	4908      	ldr	r1, [pc, #32]	@ (800285c <__NVIC_DisableIRQ+0x40>)
 800283c:	2201      	movs	r2, #1
 800283e:	409a      	lsls	r2, r3
 8002840:	0013      	movs	r3, r2
 8002842:	2280      	movs	r2, #128	@ 0x80
 8002844:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002846:	f3bf 8f4f 	dsb	sy
}
 800284a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800284c:	f3bf 8f6f 	isb	sy
}
 8002850:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8002852:	46c0      	nop			@ (mov r8, r8)
 8002854:	46bd      	mov	sp, r7
 8002856:	b002      	add	sp, #8
 8002858:	bd80      	pop	{r7, pc}
 800285a:	46c0      	nop			@ (mov r8, r8)
 800285c:	e000e100 	.word	0xe000e100

08002860 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002860:	b590      	push	{r4, r7, lr}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	0002      	movs	r2, r0
 8002868:	6039      	str	r1, [r7, #0]
 800286a:	1dfb      	adds	r3, r7, #7
 800286c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800286e:	1dfb      	adds	r3, r7, #7
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2b7f      	cmp	r3, #127	@ 0x7f
 8002874:	d828      	bhi.n	80028c8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002876:	4a2f      	ldr	r2, [pc, #188]	@ (8002934 <__NVIC_SetPriority+0xd4>)
 8002878:	1dfb      	adds	r3, r7, #7
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	b25b      	sxtb	r3, r3
 800287e:	089b      	lsrs	r3, r3, #2
 8002880:	33c0      	adds	r3, #192	@ 0xc0
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	589b      	ldr	r3, [r3, r2]
 8002886:	1dfa      	adds	r2, r7, #7
 8002888:	7812      	ldrb	r2, [r2, #0]
 800288a:	0011      	movs	r1, r2
 800288c:	2203      	movs	r2, #3
 800288e:	400a      	ands	r2, r1
 8002890:	00d2      	lsls	r2, r2, #3
 8002892:	21ff      	movs	r1, #255	@ 0xff
 8002894:	4091      	lsls	r1, r2
 8002896:	000a      	movs	r2, r1
 8002898:	43d2      	mvns	r2, r2
 800289a:	401a      	ands	r2, r3
 800289c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	019b      	lsls	r3, r3, #6
 80028a2:	22ff      	movs	r2, #255	@ 0xff
 80028a4:	401a      	ands	r2, r3
 80028a6:	1dfb      	adds	r3, r7, #7
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	0018      	movs	r0, r3
 80028ac:	2303      	movs	r3, #3
 80028ae:	4003      	ands	r3, r0
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028b4:	481f      	ldr	r0, [pc, #124]	@ (8002934 <__NVIC_SetPriority+0xd4>)
 80028b6:	1dfb      	adds	r3, r7, #7
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	b25b      	sxtb	r3, r3
 80028bc:	089b      	lsrs	r3, r3, #2
 80028be:	430a      	orrs	r2, r1
 80028c0:	33c0      	adds	r3, #192	@ 0xc0
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80028c6:	e031      	b.n	800292c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028c8:	4a1b      	ldr	r2, [pc, #108]	@ (8002938 <__NVIC_SetPriority+0xd8>)
 80028ca:	1dfb      	adds	r3, r7, #7
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	0019      	movs	r1, r3
 80028d0:	230f      	movs	r3, #15
 80028d2:	400b      	ands	r3, r1
 80028d4:	3b08      	subs	r3, #8
 80028d6:	089b      	lsrs	r3, r3, #2
 80028d8:	3306      	adds	r3, #6
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	18d3      	adds	r3, r2, r3
 80028de:	3304      	adds	r3, #4
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	1dfa      	adds	r2, r7, #7
 80028e4:	7812      	ldrb	r2, [r2, #0]
 80028e6:	0011      	movs	r1, r2
 80028e8:	2203      	movs	r2, #3
 80028ea:	400a      	ands	r2, r1
 80028ec:	00d2      	lsls	r2, r2, #3
 80028ee:	21ff      	movs	r1, #255	@ 0xff
 80028f0:	4091      	lsls	r1, r2
 80028f2:	000a      	movs	r2, r1
 80028f4:	43d2      	mvns	r2, r2
 80028f6:	401a      	ands	r2, r3
 80028f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	019b      	lsls	r3, r3, #6
 80028fe:	22ff      	movs	r2, #255	@ 0xff
 8002900:	401a      	ands	r2, r3
 8002902:	1dfb      	adds	r3, r7, #7
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	0018      	movs	r0, r3
 8002908:	2303      	movs	r3, #3
 800290a:	4003      	ands	r3, r0
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002910:	4809      	ldr	r0, [pc, #36]	@ (8002938 <__NVIC_SetPriority+0xd8>)
 8002912:	1dfb      	adds	r3, r7, #7
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	001c      	movs	r4, r3
 8002918:	230f      	movs	r3, #15
 800291a:	4023      	ands	r3, r4
 800291c:	3b08      	subs	r3, #8
 800291e:	089b      	lsrs	r3, r3, #2
 8002920:	430a      	orrs	r2, r1
 8002922:	3306      	adds	r3, #6
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	18c3      	adds	r3, r0, r3
 8002928:	3304      	adds	r3, #4
 800292a:	601a      	str	r2, [r3, #0]
}
 800292c:	46c0      	nop			@ (mov r8, r8)
 800292e:	46bd      	mov	sp, r7
 8002930:	b003      	add	sp, #12
 8002932:	bd90      	pop	{r4, r7, pc}
 8002934:	e000e100 	.word	0xe000e100
 8002938:	e000ed00 	.word	0xe000ed00

0800293c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	1e5a      	subs	r2, r3, #1
 8002948:	2380      	movs	r3, #128	@ 0x80
 800294a:	045b      	lsls	r3, r3, #17
 800294c:	429a      	cmp	r2, r3
 800294e:	d301      	bcc.n	8002954 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002950:	2301      	movs	r3, #1
 8002952:	e010      	b.n	8002976 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002954:	4b0a      	ldr	r3, [pc, #40]	@ (8002980 <SysTick_Config+0x44>)
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	3a01      	subs	r2, #1
 800295a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800295c:	2301      	movs	r3, #1
 800295e:	425b      	negs	r3, r3
 8002960:	2103      	movs	r1, #3
 8002962:	0018      	movs	r0, r3
 8002964:	f7ff ff7c 	bl	8002860 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002968:	4b05      	ldr	r3, [pc, #20]	@ (8002980 <SysTick_Config+0x44>)
 800296a:	2200      	movs	r2, #0
 800296c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800296e:	4b04      	ldr	r3, [pc, #16]	@ (8002980 <SysTick_Config+0x44>)
 8002970:	2207      	movs	r2, #7
 8002972:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002974:	2300      	movs	r3, #0
}
 8002976:	0018      	movs	r0, r3
 8002978:	46bd      	mov	sp, r7
 800297a:	b002      	add	sp, #8
 800297c:	bd80      	pop	{r7, pc}
 800297e:	46c0      	nop			@ (mov r8, r8)
 8002980:	e000e010 	.word	0xe000e010

08002984 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	60b9      	str	r1, [r7, #8]
 800298c:	607a      	str	r2, [r7, #4]
 800298e:	210f      	movs	r1, #15
 8002990:	187b      	adds	r3, r7, r1
 8002992:	1c02      	adds	r2, r0, #0
 8002994:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	187b      	adds	r3, r7, r1
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	b25b      	sxtb	r3, r3
 800299e:	0011      	movs	r1, r2
 80029a0:	0018      	movs	r0, r3
 80029a2:	f7ff ff5d 	bl	8002860 <__NVIC_SetPriority>
}
 80029a6:	46c0      	nop			@ (mov r8, r8)
 80029a8:	46bd      	mov	sp, r7
 80029aa:	b004      	add	sp, #16
 80029ac:	bd80      	pop	{r7, pc}

080029ae <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b082      	sub	sp, #8
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	0002      	movs	r2, r0
 80029b6:	1dfb      	adds	r3, r7, #7
 80029b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029ba:	1dfb      	adds	r3, r7, #7
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	b25b      	sxtb	r3, r3
 80029c0:	0018      	movs	r0, r3
 80029c2:	f7ff ff11 	bl	80027e8 <__NVIC_EnableIRQ>
}
 80029c6:	46c0      	nop			@ (mov r8, r8)
 80029c8:	46bd      	mov	sp, r7
 80029ca:	b002      	add	sp, #8
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b082      	sub	sp, #8
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	0002      	movs	r2, r0
 80029d6:	1dfb      	adds	r3, r7, #7
 80029d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80029da:	1dfb      	adds	r3, r7, #7
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	b25b      	sxtb	r3, r3
 80029e0:	0018      	movs	r0, r3
 80029e2:	f7ff ff1b 	bl	800281c <__NVIC_DisableIRQ>
}
 80029e6:	46c0      	nop			@ (mov r8, r8)
 80029e8:	46bd      	mov	sp, r7
 80029ea:	b002      	add	sp, #8
 80029ec:	bd80      	pop	{r7, pc}

080029ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b082      	sub	sp, #8
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	0018      	movs	r0, r3
 80029fa:	f7ff ff9f 	bl	800293c <SysTick_Config>
 80029fe:	0003      	movs	r3, r0
}
 8002a00:	0018      	movs	r0, r3
 8002a02:	46bd      	mov	sp, r7
 8002a04:	b002      	add	sp, #8
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e050      	b.n	8002abc <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2225      	movs	r2, #37	@ 0x25
 8002a1e:	5c9b      	ldrb	r3, [r3, r2]
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d008      	beq.n	8002a38 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2204      	movs	r2, #4
 8002a2a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2224      	movs	r2, #36	@ 0x24
 8002a30:	2100      	movs	r1, #0
 8002a32:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e041      	b.n	8002abc <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	210e      	movs	r1, #14
 8002a44:	438a      	bics	r2, r1
 8002a46:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a52:	491c      	ldr	r1, [pc, #112]	@ (8002ac4 <HAL_DMA_Abort+0xbc>)
 8002a54:	400a      	ands	r2, r1
 8002a56:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2101      	movs	r1, #1
 8002a64:	438a      	bics	r2, r1
 8002a66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 8002a68:	4b17      	ldr	r3, [pc, #92]	@ (8002ac8 <HAL_DMA_Abort+0xc0>)
 8002a6a:	6859      	ldr	r1, [r3, #4]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a70:	221c      	movs	r2, #28
 8002a72:	4013      	ands	r3, r2
 8002a74:	2201      	movs	r2, #1
 8002a76:	409a      	lsls	r2, r3
 8002a78:	4b13      	ldr	r3, [pc, #76]	@ (8002ac8 <HAL_DMA_Abort+0xc0>)
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002a86:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00c      	beq.n	8002aaa <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a9a:	490a      	ldr	r1, [pc, #40]	@ (8002ac4 <HAL_DMA_Abort+0xbc>)
 8002a9c:	400a      	ands	r2, r1
 8002a9e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002aa8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2225      	movs	r2, #37	@ 0x25
 8002aae:	2101      	movs	r1, #1
 8002ab0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2224      	movs	r2, #36	@ 0x24
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	0018      	movs	r0, r3
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	b002      	add	sp, #8
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	fffffeff 	.word	0xfffffeff
 8002ac8:	40020000 	.word	0x40020000

08002acc <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ad4:	230f      	movs	r3, #15
 8002ad6:	18fb      	adds	r3, r7, r3
 8002ad8:	2200      	movs	r2, #0
 8002ada:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2224      	movs	r2, #36	@ 0x24
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2224      	movs	r2, #36	@ 0x24
 8002ae8:	5c9b      	ldrb	r3, [r3, r2]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d101      	bne.n	8002af2 <HAL_DMA_Abort_IT+0x26>
 8002aee:	2302      	movs	r3, #2
 8002af0:	e05e      	b.n	8002bb0 <HAL_DMA_Abort_IT+0xe4>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2224      	movs	r2, #36	@ 0x24
 8002af6:	2101      	movs	r1, #1
 8002af8:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2225      	movs	r2, #37	@ 0x25
 8002afe:	5c9b      	ldrb	r3, [r3, r2]
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d007      	beq.n	8002b16 <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2204      	movs	r2, #4
 8002b0a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002b0c:	230f      	movs	r3, #15
 8002b0e:	18fb      	adds	r3, r7, r3
 8002b10:	2201      	movs	r2, #1
 8002b12:	701a      	strb	r2, [r3, #0]
 8002b14:	e049      	b.n	8002baa <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	210e      	movs	r1, #14
 8002b22:	438a      	bics	r2, r1
 8002b24:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2101      	movs	r1, #1
 8002b32:	438a      	bics	r2, r1
 8002b34:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b40:	491d      	ldr	r1, [pc, #116]	@ (8002bb8 <HAL_DMA_Abort_IT+0xec>)
 8002b42:	400a      	ands	r2, r1
 8002b44:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8002b46:	4b1d      	ldr	r3, [pc, #116]	@ (8002bbc <HAL_DMA_Abort_IT+0xf0>)
 8002b48:	6859      	ldr	r1, [r3, #4]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4e:	221c      	movs	r2, #28
 8002b50:	4013      	ands	r3, r2
 8002b52:	2201      	movs	r2, #1
 8002b54:	409a      	lsls	r2, r3
 8002b56:	4b19      	ldr	r3, [pc, #100]	@ (8002bbc <HAL_DMA_Abort_IT+0xf0>)
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002b64:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00c      	beq.n	8002b88 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b78:	490f      	ldr	r1, [pc, #60]	@ (8002bb8 <HAL_DMA_Abort_IT+0xec>)
 8002b7a:	400a      	ands	r2, r1
 8002b7c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002b86:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2225      	movs	r2, #37	@ 0x25
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2224      	movs	r2, #36	@ 0x24
 8002b94:	2100      	movs	r1, #0
 8002b96:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d004      	beq.n	8002baa <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	0010      	movs	r0, r2
 8002ba8:	4798      	blx	r3
    }
  }
  return status;
 8002baa:	230f      	movs	r3, #15
 8002bac:	18fb      	adds	r3, r7, r3
 8002bae:	781b      	ldrb	r3, [r3, #0]
}
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	b004      	add	sp, #16
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	fffffeff 	.word	0xfffffeff
 8002bbc:	40020000 	.word	0x40020000

08002bc0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002bce:	e14d      	b.n	8002e6c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	4091      	lsls	r1, r2
 8002bda:	000a      	movs	r2, r1
 8002bdc:	4013      	ands	r3, r2
 8002bde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d100      	bne.n	8002be8 <HAL_GPIO_Init+0x28>
 8002be6:	e13e      	b.n	8002e66 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d003      	beq.n	8002bf8 <HAL_GPIO_Init+0x38>
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	2b12      	cmp	r3, #18
 8002bf6:	d125      	bne.n	8002c44 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	08da      	lsrs	r2, r3, #3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3208      	adds	r2, #8
 8002c00:	0092      	lsls	r2, r2, #2
 8002c02:	58d3      	ldr	r3, [r2, r3]
 8002c04:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	2207      	movs	r2, #7
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	220f      	movs	r2, #15
 8002c10:	409a      	lsls	r2, r3
 8002c12:	0013      	movs	r3, r2
 8002c14:	43da      	mvns	r2, r3
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	220f      	movs	r2, #15
 8002c22:	401a      	ands	r2, r3
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	2107      	movs	r1, #7
 8002c28:	400b      	ands	r3, r1
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	409a      	lsls	r2, r3
 8002c2e:	0013      	movs	r3, r2
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	08da      	lsrs	r2, r3, #3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	3208      	adds	r2, #8
 8002c3e:	0092      	lsls	r2, r2, #2
 8002c40:	6979      	ldr	r1, [r7, #20]
 8002c42:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	2203      	movs	r2, #3
 8002c50:	409a      	lsls	r2, r3
 8002c52:	0013      	movs	r3, r2
 8002c54:	43da      	mvns	r2, r3
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	2203      	movs	r2, #3
 8002c62:	401a      	ands	r2, r3
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	409a      	lsls	r2, r3
 8002c6a:	0013      	movs	r3, r2
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d00b      	beq.n	8002c98 <HAL_GPIO_Init+0xd8>
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d007      	beq.n	8002c98 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c8c:	2b11      	cmp	r3, #17
 8002c8e:	d003      	beq.n	8002c98 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2b12      	cmp	r3, #18
 8002c96:	d130      	bne.n	8002cfa <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	2203      	movs	r2, #3
 8002ca4:	409a      	lsls	r2, r3
 8002ca6:	0013      	movs	r3, r2
 8002ca8:	43da      	mvns	r2, r3
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	4013      	ands	r3, r2
 8002cae:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	68da      	ldr	r2, [r3, #12]
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	409a      	lsls	r2, r3
 8002cba:	0013      	movs	r3, r2
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	697a      	ldr	r2, [r7, #20]
 8002cc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cce:	2201      	movs	r2, #1
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	409a      	lsls	r2, r3
 8002cd4:	0013      	movs	r3, r2
 8002cd6:	43da      	mvns	r2, r3
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	091b      	lsrs	r3, r3, #4
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	401a      	ands	r2, r3
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	409a      	lsls	r2, r3
 8002cec:	0013      	movs	r3, r2
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2b03      	cmp	r3, #3
 8002d00:	d017      	beq.n	8002d32 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	2203      	movs	r2, #3
 8002d0e:	409a      	lsls	r2, r3
 8002d10:	0013      	movs	r3, r2
 8002d12:	43da      	mvns	r2, r3
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	4013      	ands	r3, r2
 8002d18:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	689a      	ldr	r2, [r3, #8]
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	409a      	lsls	r2, r3
 8002d24:	0013      	movs	r3, r2
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685a      	ldr	r2, [r3, #4]
 8002d36:	2380      	movs	r3, #128	@ 0x80
 8002d38:	055b      	lsls	r3, r3, #21
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	d100      	bne.n	8002d40 <HAL_GPIO_Init+0x180>
 8002d3e:	e092      	b.n	8002e66 <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002d40:	4a50      	ldr	r2, [pc, #320]	@ (8002e84 <HAL_GPIO_Init+0x2c4>)
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	089b      	lsrs	r3, r3, #2
 8002d46:	3318      	adds	r3, #24
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	589b      	ldr	r3, [r3, r2]
 8002d4c:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	2203      	movs	r2, #3
 8002d52:	4013      	ands	r3, r2
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	220f      	movs	r2, #15
 8002d58:	409a      	lsls	r2, r3
 8002d5a:	0013      	movs	r3, r2
 8002d5c:	43da      	mvns	r2, r3
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	4013      	ands	r3, r2
 8002d62:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	23a0      	movs	r3, #160	@ 0xa0
 8002d68:	05db      	lsls	r3, r3, #23
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d013      	beq.n	8002d96 <HAL_GPIO_Init+0x1d6>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a45      	ldr	r2, [pc, #276]	@ (8002e88 <HAL_GPIO_Init+0x2c8>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d00d      	beq.n	8002d92 <HAL_GPIO_Init+0x1d2>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a44      	ldr	r2, [pc, #272]	@ (8002e8c <HAL_GPIO_Init+0x2cc>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d007      	beq.n	8002d8e <HAL_GPIO_Init+0x1ce>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a43      	ldr	r2, [pc, #268]	@ (8002e90 <HAL_GPIO_Init+0x2d0>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d101      	bne.n	8002d8a <HAL_GPIO_Init+0x1ca>
 8002d86:	2305      	movs	r3, #5
 8002d88:	e006      	b.n	8002d98 <HAL_GPIO_Init+0x1d8>
 8002d8a:	2306      	movs	r3, #6
 8002d8c:	e004      	b.n	8002d98 <HAL_GPIO_Init+0x1d8>
 8002d8e:	2302      	movs	r3, #2
 8002d90:	e002      	b.n	8002d98 <HAL_GPIO_Init+0x1d8>
 8002d92:	2301      	movs	r3, #1
 8002d94:	e000      	b.n	8002d98 <HAL_GPIO_Init+0x1d8>
 8002d96:	2300      	movs	r3, #0
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	2103      	movs	r1, #3
 8002d9c:	400a      	ands	r2, r1
 8002d9e:	00d2      	lsls	r2, r2, #3
 8002da0:	4093      	lsls	r3, r2
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002da8:	4936      	ldr	r1, [pc, #216]	@ (8002e84 <HAL_GPIO_Init+0x2c4>)
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	089b      	lsrs	r3, r3, #2
 8002dae:	3318      	adds	r3, #24
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8002db6:	4a33      	ldr	r2, [pc, #204]	@ (8002e84 <HAL_GPIO_Init+0x2c4>)
 8002db8:	2380      	movs	r3, #128	@ 0x80
 8002dba:	58d3      	ldr	r3, [r2, r3]
 8002dbc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	43da      	mvns	r2, r3
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685a      	ldr	r2, [r3, #4]
 8002dcc:	2380      	movs	r3, #128	@ 0x80
 8002dce:	025b      	lsls	r3, r3, #9
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	d003      	beq.n	8002ddc <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8002dd4:	697a      	ldr	r2, [r7, #20]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002ddc:	4929      	ldr	r1, [pc, #164]	@ (8002e84 <HAL_GPIO_Init+0x2c4>)
 8002dde:	2280      	movs	r2, #128	@ 0x80
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8002de4:	4a27      	ldr	r2, [pc, #156]	@ (8002e84 <HAL_GPIO_Init+0x2c4>)
 8002de6:	2384      	movs	r3, #132	@ 0x84
 8002de8:	58d3      	ldr	r3, [r2, r3]
 8002dea:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	43da      	mvns	r2, r3
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	4013      	ands	r3, r2
 8002df4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	2380      	movs	r3, #128	@ 0x80
 8002dfc:	029b      	lsls	r3, r3, #10
 8002dfe:	4013      	ands	r3, r2
 8002e00:	d003      	beq.n	8002e0a <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002e0a:	491e      	ldr	r1, [pc, #120]	@ (8002e84 <HAL_GPIO_Init+0x2c4>)
 8002e0c:	2284      	movs	r2, #132	@ 0x84
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002e12:	4b1c      	ldr	r3, [pc, #112]	@ (8002e84 <HAL_GPIO_Init+0x2c4>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	43da      	mvns	r2, r3
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	2380      	movs	r3, #128	@ 0x80
 8002e28:	035b      	lsls	r3, r3, #13
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	d003      	beq.n	8002e36 <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002e36:	4b13      	ldr	r3, [pc, #76]	@ (8002e84 <HAL_GPIO_Init+0x2c4>)
 8002e38:	697a      	ldr	r2, [r7, #20]
 8002e3a:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8002e3c:	4b11      	ldr	r3, [pc, #68]	@ (8002e84 <HAL_GPIO_Init+0x2c4>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	43da      	mvns	r2, r3
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	2380      	movs	r3, #128	@ 0x80
 8002e52:	039b      	lsls	r3, r3, #14
 8002e54:	4013      	ands	r3, r2
 8002e56:	d003      	beq.n	8002e60 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002e60:	4b08      	ldr	r3, [pc, #32]	@ (8002e84 <HAL_GPIO_Init+0x2c4>)
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	40da      	lsrs	r2, r3
 8002e74:	1e13      	subs	r3, r2, #0
 8002e76:	d000      	beq.n	8002e7a <HAL_GPIO_Init+0x2ba>
 8002e78:	e6aa      	b.n	8002bd0 <HAL_GPIO_Init+0x10>
  }
}
 8002e7a:	46c0      	nop			@ (mov r8, r8)
 8002e7c:	46c0      	nop			@ (mov r8, r8)
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	b006      	add	sp, #24
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	40021800 	.word	0x40021800
 8002e88:	50000400 	.word	0x50000400
 8002e8c:	50000800 	.word	0x50000800
 8002e90:	50001400 	.word	0x50001400

08002e94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	0002      	movs	r2, r0
 8002e9c:	1dbb      	adds	r3, r7, #6
 8002e9e:	801a      	strh	r2, [r3, #0]
	/* EXTI line interrupt detected */

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8002ea0:	4b10      	ldr	r3, [pc, #64]	@ (8002ee4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	1dba      	adds	r2, r7, #6
 8002ea6:	8812      	ldrh	r2, [r2, #0]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	d008      	beq.n	8002ebe <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
	__HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002eac:	4b0d      	ldr	r3, [pc, #52]	@ (8002ee4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002eae:	1dba      	adds	r2, r7, #6
 8002eb0:	8812      	ldrh	r2, [r2, #0]
 8002eb2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002eb4:	1dbb      	adds	r3, r7, #6
 8002eb6:	881b      	ldrh	r3, [r3, #0]
 8002eb8:	0018      	movs	r0, r3
 8002eba:	f7fe fe89 	bl	8001bd0 <HAL_GPIO_EXTI_Falling_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8002ebe:	4b09      	ldr	r3, [pc, #36]	@ (8002ee4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	1dba      	adds	r2, r7, #6
 8002ec4:	8812      	ldrh	r2, [r2, #0]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	d008      	beq.n	8002edc <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002eca:	4b06      	ldr	r3, [pc, #24]	@ (8002ee4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002ecc:	1dba      	adds	r2, r7, #6
 8002ece:	8812      	ldrh	r2, [r2, #0]
 8002ed0:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002ed2:	1dbb      	adds	r3, r7, #6
 8002ed4:	881b      	ldrh	r3, [r3, #0]
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	f000 f806 	bl	8002ee8 <HAL_GPIO_EXTI_Rising_Callback>
  }
}
 8002edc:	46c0      	nop			@ (mov r8, r8)
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	b002      	add	sp, #8
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	40021800 	.word	0x40021800

08002ee8 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	0002      	movs	r2, r0
 8002ef0:	1dbb      	adds	r3, r7, #6
 8002ef2:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8002ef4:	46c0      	nop			@ (mov r8, r8)
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	b002      	add	sp, #8
 8002efa:	bd80      	pop	{r7, pc}

08002efc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e1d0      	b.n	80032b0 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2201      	movs	r2, #1
 8002f14:	4013      	ands	r3, r2
 8002f16:	d100      	bne.n	8002f1a <HAL_RCC_OscConfig+0x1e>
 8002f18:	e069      	b.n	8002fee <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f1a:	4bc8      	ldr	r3, [pc, #800]	@ (800323c <HAL_RCC_OscConfig+0x340>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	2238      	movs	r2, #56	@ 0x38
 8002f20:	4013      	ands	r3, r2
 8002f22:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	2b08      	cmp	r3, #8
 8002f28:	d105      	bne.n	8002f36 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d15d      	bne.n	8002fee <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e1bc      	b.n	80032b0 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	2380      	movs	r3, #128	@ 0x80
 8002f3c:	025b      	lsls	r3, r3, #9
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d107      	bne.n	8002f52 <HAL_RCC_OscConfig+0x56>
 8002f42:	4bbe      	ldr	r3, [pc, #760]	@ (800323c <HAL_RCC_OscConfig+0x340>)
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	4bbd      	ldr	r3, [pc, #756]	@ (800323c <HAL_RCC_OscConfig+0x340>)
 8002f48:	2180      	movs	r1, #128	@ 0x80
 8002f4a:	0249      	lsls	r1, r1, #9
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	e020      	b.n	8002f94 <HAL_RCC_OscConfig+0x98>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	23a0      	movs	r3, #160	@ 0xa0
 8002f58:	02db      	lsls	r3, r3, #11
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d10e      	bne.n	8002f7c <HAL_RCC_OscConfig+0x80>
 8002f5e:	4bb7      	ldr	r3, [pc, #732]	@ (800323c <HAL_RCC_OscConfig+0x340>)
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	4bb6      	ldr	r3, [pc, #728]	@ (800323c <HAL_RCC_OscConfig+0x340>)
 8002f64:	2180      	movs	r1, #128	@ 0x80
 8002f66:	02c9      	lsls	r1, r1, #11
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	4bb3      	ldr	r3, [pc, #716]	@ (800323c <HAL_RCC_OscConfig+0x340>)
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	4bb2      	ldr	r3, [pc, #712]	@ (800323c <HAL_RCC_OscConfig+0x340>)
 8002f72:	2180      	movs	r1, #128	@ 0x80
 8002f74:	0249      	lsls	r1, r1, #9
 8002f76:	430a      	orrs	r2, r1
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	e00b      	b.n	8002f94 <HAL_RCC_OscConfig+0x98>
 8002f7c:	4baf      	ldr	r3, [pc, #700]	@ (800323c <HAL_RCC_OscConfig+0x340>)
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	4bae      	ldr	r3, [pc, #696]	@ (800323c <HAL_RCC_OscConfig+0x340>)
 8002f82:	49af      	ldr	r1, [pc, #700]	@ (8003240 <HAL_RCC_OscConfig+0x344>)
 8002f84:	400a      	ands	r2, r1
 8002f86:	601a      	str	r2, [r3, #0]
 8002f88:	4bac      	ldr	r3, [pc, #688]	@ (800323c <HAL_RCC_OscConfig+0x340>)
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	4bab      	ldr	r3, [pc, #684]	@ (800323c <HAL_RCC_OscConfig+0x340>)
 8002f8e:	49ad      	ldr	r1, [pc, #692]	@ (8003244 <HAL_RCC_OscConfig+0x348>)
 8002f90:	400a      	ands	r2, r1
 8002f92:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d014      	beq.n	8002fc6 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9c:	f7ff fc0e 	bl	80027bc <HAL_GetTick>
 8002fa0:	0003      	movs	r3, r0
 8002fa2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002fa6:	f7ff fc09 	bl	80027bc <HAL_GetTick>
 8002faa:	0002      	movs	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b64      	cmp	r3, #100	@ 0x64
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e17b      	b.n	80032b0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fb8:	4ba0      	ldr	r3, [pc, #640]	@ (800323c <HAL_RCC_OscConfig+0x340>)
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	2380      	movs	r3, #128	@ 0x80
 8002fbe:	029b      	lsls	r3, r3, #10
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	d0f0      	beq.n	8002fa6 <HAL_RCC_OscConfig+0xaa>
 8002fc4:	e013      	b.n	8002fee <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc6:	f7ff fbf9 	bl	80027bc <HAL_GetTick>
 8002fca:	0003      	movs	r3, r0
 8002fcc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002fd0:	f7ff fbf4 	bl	80027bc <HAL_GetTick>
 8002fd4:	0002      	movs	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b64      	cmp	r3, #100	@ 0x64
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e166      	b.n	80032b0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fe2:	4b96      	ldr	r3, [pc, #600]	@ (800323c <HAL_RCC_OscConfig+0x340>)
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	2380      	movs	r3, #128	@ 0x80
 8002fe8:	029b      	lsls	r3, r3, #10
 8002fea:	4013      	ands	r3, r2
 8002fec:	d1f0      	bne.n	8002fd0 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	d100      	bne.n	8002ffa <HAL_RCC_OscConfig+0xfe>
 8002ff8:	e086      	b.n	8003108 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ffa:	4b90      	ldr	r3, [pc, #576]	@ (800323c <HAL_RCC_OscConfig+0x340>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	2238      	movs	r2, #56	@ 0x38
 8003000:	4013      	ands	r3, r2
 8003002:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d12f      	bne.n	800306a <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e14c      	b.n	80032b0 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003016:	4b89      	ldr	r3, [pc, #548]	@ (800323c <HAL_RCC_OscConfig+0x340>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	4a8b      	ldr	r2, [pc, #556]	@ (8003248 <HAL_RCC_OscConfig+0x34c>)
 800301c:	4013      	ands	r3, r2
 800301e:	0019      	movs	r1, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	021a      	lsls	r2, r3, #8
 8003026:	4b85      	ldr	r3, [pc, #532]	@ (800323c <HAL_RCC_OscConfig+0x340>)
 8003028:	430a      	orrs	r2, r1
 800302a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d112      	bne.n	8003058 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003032:	4b82      	ldr	r3, [pc, #520]	@ (800323c <HAL_RCC_OscConfig+0x340>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a85      	ldr	r2, [pc, #532]	@ (800324c <HAL_RCC_OscConfig+0x350>)
 8003038:	4013      	ands	r3, r2
 800303a:	0019      	movs	r1, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	691a      	ldr	r2, [r3, #16]
 8003040:	4b7e      	ldr	r3, [pc, #504]	@ (800323c <HAL_RCC_OscConfig+0x340>)
 8003042:	430a      	orrs	r2, r1
 8003044:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003046:	4b7d      	ldr	r3, [pc, #500]	@ (800323c <HAL_RCC_OscConfig+0x340>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	0adb      	lsrs	r3, r3, #11
 800304c:	2207      	movs	r2, #7
 800304e:	4013      	ands	r3, r2
 8003050:	4a7f      	ldr	r2, [pc, #508]	@ (8003250 <HAL_RCC_OscConfig+0x354>)
 8003052:	40da      	lsrs	r2, r3
 8003054:	4b7f      	ldr	r3, [pc, #508]	@ (8003254 <HAL_RCC_OscConfig+0x358>)
 8003056:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003058:	4b7f      	ldr	r3, [pc, #508]	@ (8003258 <HAL_RCC_OscConfig+0x35c>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	0018      	movs	r0, r3
 800305e:	f7ff fb51 	bl	8002704 <HAL_InitTick>
 8003062:	1e03      	subs	r3, r0, #0
 8003064:	d050      	beq.n	8003108 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e122      	b.n	80032b0 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d030      	beq.n	80030d4 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003072:	4b72      	ldr	r3, [pc, #456]	@ (800323c <HAL_RCC_OscConfig+0x340>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a75      	ldr	r2, [pc, #468]	@ (800324c <HAL_RCC_OscConfig+0x350>)
 8003078:	4013      	ands	r3, r2
 800307a:	0019      	movs	r1, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	691a      	ldr	r2, [r3, #16]
 8003080:	4b6e      	ldr	r3, [pc, #440]	@ (800323c <HAL_RCC_OscConfig+0x340>)
 8003082:	430a      	orrs	r2, r1
 8003084:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8003086:	4b6d      	ldr	r3, [pc, #436]	@ (800323c <HAL_RCC_OscConfig+0x340>)
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	4b6c      	ldr	r3, [pc, #432]	@ (800323c <HAL_RCC_OscConfig+0x340>)
 800308c:	2180      	movs	r1, #128	@ 0x80
 800308e:	0049      	lsls	r1, r1, #1
 8003090:	430a      	orrs	r2, r1
 8003092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003094:	f7ff fb92 	bl	80027bc <HAL_GetTick>
 8003098:	0003      	movs	r3, r0
 800309a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800309c:	e008      	b.n	80030b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800309e:	f7ff fb8d 	bl	80027bc <HAL_GetTick>
 80030a2:	0002      	movs	r2, r0
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e0ff      	b.n	80032b0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030b0:	4b62      	ldr	r3, [pc, #392]	@ (800323c <HAL_RCC_OscConfig+0x340>)
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	2380      	movs	r3, #128	@ 0x80
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	4013      	ands	r3, r2
 80030ba:	d0f0      	beq.n	800309e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030bc:	4b5f      	ldr	r3, [pc, #380]	@ (800323c <HAL_RCC_OscConfig+0x340>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	4a61      	ldr	r2, [pc, #388]	@ (8003248 <HAL_RCC_OscConfig+0x34c>)
 80030c2:	4013      	ands	r3, r2
 80030c4:	0019      	movs	r1, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	021a      	lsls	r2, r3, #8
 80030cc:	4b5b      	ldr	r3, [pc, #364]	@ (800323c <HAL_RCC_OscConfig+0x340>)
 80030ce:	430a      	orrs	r2, r1
 80030d0:	605a      	str	r2, [r3, #4]
 80030d2:	e019      	b.n	8003108 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80030d4:	4b59      	ldr	r3, [pc, #356]	@ (800323c <HAL_RCC_OscConfig+0x340>)
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	4b58      	ldr	r3, [pc, #352]	@ (800323c <HAL_RCC_OscConfig+0x340>)
 80030da:	4960      	ldr	r1, [pc, #384]	@ (800325c <HAL_RCC_OscConfig+0x360>)
 80030dc:	400a      	ands	r2, r1
 80030de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e0:	f7ff fb6c 	bl	80027bc <HAL_GetTick>
 80030e4:	0003      	movs	r3, r0
 80030e6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030e8:	e008      	b.n	80030fc <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80030ea:	f7ff fb67 	bl	80027bc <HAL_GetTick>
 80030ee:	0002      	movs	r2, r0
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e0d9      	b.n	80032b0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030fc:	4b4f      	ldr	r3, [pc, #316]	@ (800323c <HAL_RCC_OscConfig+0x340>)
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	2380      	movs	r3, #128	@ 0x80
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	4013      	ands	r3, r2
 8003106:	d1f0      	bne.n	80030ea <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2208      	movs	r2, #8
 800310e:	4013      	ands	r3, r2
 8003110:	d042      	beq.n	8003198 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8003112:	4b4a      	ldr	r3, [pc, #296]	@ (800323c <HAL_RCC_OscConfig+0x340>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	2238      	movs	r2, #56	@ 0x38
 8003118:	4013      	ands	r3, r2
 800311a:	2b18      	cmp	r3, #24
 800311c:	d105      	bne.n	800312a <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d138      	bne.n	8003198 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e0c2      	b.n	80032b0 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d019      	beq.n	8003166 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003132:	4b42      	ldr	r3, [pc, #264]	@ (800323c <HAL_RCC_OscConfig+0x340>)
 8003134:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003136:	4b41      	ldr	r3, [pc, #260]	@ (800323c <HAL_RCC_OscConfig+0x340>)
 8003138:	2101      	movs	r1, #1
 800313a:	430a      	orrs	r2, r1
 800313c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313e:	f7ff fb3d 	bl	80027bc <HAL_GetTick>
 8003142:	0003      	movs	r3, r0
 8003144:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003148:	f7ff fb38 	bl	80027bc <HAL_GetTick>
 800314c:	0002      	movs	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e0aa      	b.n	80032b0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800315a:	4b38      	ldr	r3, [pc, #224]	@ (800323c <HAL_RCC_OscConfig+0x340>)
 800315c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800315e:	2202      	movs	r2, #2
 8003160:	4013      	ands	r3, r2
 8003162:	d0f1      	beq.n	8003148 <HAL_RCC_OscConfig+0x24c>
 8003164:	e018      	b.n	8003198 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003166:	4b35      	ldr	r3, [pc, #212]	@ (800323c <HAL_RCC_OscConfig+0x340>)
 8003168:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800316a:	4b34      	ldr	r3, [pc, #208]	@ (800323c <HAL_RCC_OscConfig+0x340>)
 800316c:	2101      	movs	r1, #1
 800316e:	438a      	bics	r2, r1
 8003170:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003172:	f7ff fb23 	bl	80027bc <HAL_GetTick>
 8003176:	0003      	movs	r3, r0
 8003178:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800317c:	f7ff fb1e 	bl	80027bc <HAL_GetTick>
 8003180:	0002      	movs	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e090      	b.n	80032b0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800318e:	4b2b      	ldr	r3, [pc, #172]	@ (800323c <HAL_RCC_OscConfig+0x340>)
 8003190:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003192:	2202      	movs	r2, #2
 8003194:	4013      	ands	r3, r2
 8003196:	d1f1      	bne.n	800317c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2204      	movs	r2, #4
 800319e:	4013      	ands	r3, r2
 80031a0:	d100      	bne.n	80031a4 <HAL_RCC_OscConfig+0x2a8>
 80031a2:	e084      	b.n	80032ae <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031a4:	230f      	movs	r3, #15
 80031a6:	18fb      	adds	r3, r7, r3
 80031a8:	2200      	movs	r2, #0
 80031aa:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80031ac:	4b23      	ldr	r3, [pc, #140]	@ (800323c <HAL_RCC_OscConfig+0x340>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	2238      	movs	r2, #56	@ 0x38
 80031b2:	4013      	ands	r3, r2
 80031b4:	2b20      	cmp	r3, #32
 80031b6:	d106      	bne.n	80031c6 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d000      	beq.n	80031c2 <HAL_RCC_OscConfig+0x2c6>
 80031c0:	e075      	b.n	80032ae <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e074      	b.n	80032b0 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d106      	bne.n	80031dc <HAL_RCC_OscConfig+0x2e0>
 80031ce:	4b1b      	ldr	r3, [pc, #108]	@ (800323c <HAL_RCC_OscConfig+0x340>)
 80031d0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80031d2:	4b1a      	ldr	r3, [pc, #104]	@ (800323c <HAL_RCC_OscConfig+0x340>)
 80031d4:	2101      	movs	r1, #1
 80031d6:	430a      	orrs	r2, r1
 80031d8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80031da:	e01c      	b.n	8003216 <HAL_RCC_OscConfig+0x31a>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	2b05      	cmp	r3, #5
 80031e2:	d10c      	bne.n	80031fe <HAL_RCC_OscConfig+0x302>
 80031e4:	4b15      	ldr	r3, [pc, #84]	@ (800323c <HAL_RCC_OscConfig+0x340>)
 80031e6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80031e8:	4b14      	ldr	r3, [pc, #80]	@ (800323c <HAL_RCC_OscConfig+0x340>)
 80031ea:	2104      	movs	r1, #4
 80031ec:	430a      	orrs	r2, r1
 80031ee:	65da      	str	r2, [r3, #92]	@ 0x5c
 80031f0:	4b12      	ldr	r3, [pc, #72]	@ (800323c <HAL_RCC_OscConfig+0x340>)
 80031f2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80031f4:	4b11      	ldr	r3, [pc, #68]	@ (800323c <HAL_RCC_OscConfig+0x340>)
 80031f6:	2101      	movs	r1, #1
 80031f8:	430a      	orrs	r2, r1
 80031fa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80031fc:	e00b      	b.n	8003216 <HAL_RCC_OscConfig+0x31a>
 80031fe:	4b0f      	ldr	r3, [pc, #60]	@ (800323c <HAL_RCC_OscConfig+0x340>)
 8003200:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003202:	4b0e      	ldr	r3, [pc, #56]	@ (800323c <HAL_RCC_OscConfig+0x340>)
 8003204:	2101      	movs	r1, #1
 8003206:	438a      	bics	r2, r1
 8003208:	65da      	str	r2, [r3, #92]	@ 0x5c
 800320a:	4b0c      	ldr	r3, [pc, #48]	@ (800323c <HAL_RCC_OscConfig+0x340>)
 800320c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800320e:	4b0b      	ldr	r3, [pc, #44]	@ (800323c <HAL_RCC_OscConfig+0x340>)
 8003210:	2104      	movs	r1, #4
 8003212:	438a      	bics	r2, r1
 8003214:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d028      	beq.n	8003270 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321e:	f7ff facd 	bl	80027bc <HAL_GetTick>
 8003222:	0003      	movs	r3, r0
 8003224:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003226:	e01d      	b.n	8003264 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003228:	f7ff fac8 	bl	80027bc <HAL_GetTick>
 800322c:	0002      	movs	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	4a0b      	ldr	r2, [pc, #44]	@ (8003260 <HAL_RCC_OscConfig+0x364>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d915      	bls.n	8003264 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e039      	b.n	80032b0 <HAL_RCC_OscConfig+0x3b4>
 800323c:	40021000 	.word	0x40021000
 8003240:	fffeffff 	.word	0xfffeffff
 8003244:	fffbffff 	.word	0xfffbffff
 8003248:	ffff80ff 	.word	0xffff80ff
 800324c:	ffffc7ff 	.word	0xffffc7ff
 8003250:	02dc6c00 	.word	0x02dc6c00
 8003254:	20000000 	.word	0x20000000
 8003258:	20000004 	.word	0x20000004
 800325c:	fffffeff 	.word	0xfffffeff
 8003260:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003264:	4b14      	ldr	r3, [pc, #80]	@ (80032b8 <HAL_RCC_OscConfig+0x3bc>)
 8003266:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003268:	2202      	movs	r2, #2
 800326a:	4013      	ands	r3, r2
 800326c:	d0dc      	beq.n	8003228 <HAL_RCC_OscConfig+0x32c>
 800326e:	e013      	b.n	8003298 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003270:	f7ff faa4 	bl	80027bc <HAL_GetTick>
 8003274:	0003      	movs	r3, r0
 8003276:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8003278:	e009      	b.n	800328e <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800327a:	f7ff fa9f 	bl	80027bc <HAL_GetTick>
 800327e:	0002      	movs	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	4a0d      	ldr	r2, [pc, #52]	@ (80032bc <HAL_RCC_OscConfig+0x3c0>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e010      	b.n	80032b0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800328e:	4b0a      	ldr	r3, [pc, #40]	@ (80032b8 <HAL_RCC_OscConfig+0x3bc>)
 8003290:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003292:	2202      	movs	r2, #2
 8003294:	4013      	ands	r3, r2
 8003296:	d1f0      	bne.n	800327a <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003298:	230f      	movs	r3, #15
 800329a:	18fb      	adds	r3, r7, r3
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d105      	bne.n	80032ae <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80032a2:	4b05      	ldr	r3, [pc, #20]	@ (80032b8 <HAL_RCC_OscConfig+0x3bc>)
 80032a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80032a6:	4b04      	ldr	r3, [pc, #16]	@ (80032b8 <HAL_RCC_OscConfig+0x3bc>)
 80032a8:	4905      	ldr	r1, [pc, #20]	@ (80032c0 <HAL_RCC_OscConfig+0x3c4>)
 80032aa:	400a      	ands	r2, r1
 80032ac:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	0018      	movs	r0, r3
 80032b2:	46bd      	mov	sp, r7
 80032b4:	b006      	add	sp, #24
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	40021000 	.word	0x40021000
 80032bc:	00001388 	.word	0x00001388
 80032c0:	efffffff 	.word	0xefffffff

080032c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d101      	bne.n	80032d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e0df      	b.n	8003498 <HAL_RCC_ClockConfig+0x1d4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032d8:	4b71      	ldr	r3, [pc, #452]	@ (80034a0 <HAL_RCC_ClockConfig+0x1dc>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2207      	movs	r2, #7
 80032de:	4013      	ands	r3, r2
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d91e      	bls.n	8003324 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032e6:	4b6e      	ldr	r3, [pc, #440]	@ (80034a0 <HAL_RCC_ClockConfig+0x1dc>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2207      	movs	r2, #7
 80032ec:	4393      	bics	r3, r2
 80032ee:	0019      	movs	r1, r3
 80032f0:	4b6b      	ldr	r3, [pc, #428]	@ (80034a0 <HAL_RCC_ClockConfig+0x1dc>)
 80032f2:	683a      	ldr	r2, [r7, #0]
 80032f4:	430a      	orrs	r2, r1
 80032f6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80032f8:	f7ff fa60 	bl	80027bc <HAL_GetTick>
 80032fc:	0003      	movs	r3, r0
 80032fe:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003300:	e009      	b.n	8003316 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003302:	f7ff fa5b 	bl	80027bc <HAL_GetTick>
 8003306:	0002      	movs	r2, r0
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	4a65      	ldr	r2, [pc, #404]	@ (80034a4 <HAL_RCC_ClockConfig+0x1e0>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e0c0      	b.n	8003498 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003316:	4b62      	ldr	r3, [pc, #392]	@ (80034a0 <HAL_RCC_ClockConfig+0x1dc>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2207      	movs	r2, #7
 800331c:	4013      	ands	r3, r2
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	429a      	cmp	r2, r3
 8003322:	d1ee      	bne.n	8003302 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2202      	movs	r2, #2
 800332a:	4013      	ands	r3, r2
 800332c:	d017      	beq.n	800335e <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2204      	movs	r2, #4
 8003334:	4013      	ands	r3, r2
 8003336:	d008      	beq.n	800334a <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003338:	4b5b      	ldr	r3, [pc, #364]	@ (80034a8 <HAL_RCC_ClockConfig+0x1e4>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	4a5b      	ldr	r2, [pc, #364]	@ (80034ac <HAL_RCC_ClockConfig+0x1e8>)
 800333e:	401a      	ands	r2, r3
 8003340:	4b59      	ldr	r3, [pc, #356]	@ (80034a8 <HAL_RCC_ClockConfig+0x1e4>)
 8003342:	21b0      	movs	r1, #176	@ 0xb0
 8003344:	0109      	lsls	r1, r1, #4
 8003346:	430a      	orrs	r2, r1
 8003348:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800334a:	4b57      	ldr	r3, [pc, #348]	@ (80034a8 <HAL_RCC_ClockConfig+0x1e4>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	4a58      	ldr	r2, [pc, #352]	@ (80034b0 <HAL_RCC_ClockConfig+0x1ec>)
 8003350:	4013      	ands	r3, r2
 8003352:	0019      	movs	r1, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68da      	ldr	r2, [r3, #12]
 8003358:	4b53      	ldr	r3, [pc, #332]	@ (80034a8 <HAL_RCC_ClockConfig+0x1e4>)
 800335a:	430a      	orrs	r2, r1
 800335c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2201      	movs	r2, #1
 8003364:	4013      	ands	r3, r2
 8003366:	d04b      	beq.n	8003400 <HAL_RCC_ClockConfig+0x13c>
#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d107      	bne.n	8003380 <HAL_RCC_ClockConfig+0xbc>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003370:	4b4d      	ldr	r3, [pc, #308]	@ (80034a8 <HAL_RCC_ClockConfig+0x1e4>)
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	2380      	movs	r3, #128	@ 0x80
 8003376:	029b      	lsls	r3, r3, #10
 8003378:	4013      	ands	r3, r2
 800337a:	d11f      	bne.n	80033bc <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e08b      	b.n	8003498 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d107      	bne.n	8003398 <HAL_RCC_ClockConfig+0xd4>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003388:	4b47      	ldr	r3, [pc, #284]	@ (80034a8 <HAL_RCC_ClockConfig+0x1e4>)
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	2380      	movs	r3, #128	@ 0x80
 800338e:	00db      	lsls	r3, r3, #3
 8003390:	4013      	ands	r3, r2
 8003392:	d113      	bne.n	80033bc <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e07f      	b.n	8003498 <HAL_RCC_ClockConfig+0x1d4>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	2b03      	cmp	r3, #3
 800339e:	d106      	bne.n	80033ae <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80033a0:	4b41      	ldr	r3, [pc, #260]	@ (80034a8 <HAL_RCC_ClockConfig+0x1e4>)
 80033a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033a4:	2202      	movs	r2, #2
 80033a6:	4013      	ands	r3, r2
 80033a8:	d108      	bne.n	80033bc <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e074      	b.n	8003498 <HAL_RCC_ClockConfig+0x1d4>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80033ae:	4b3e      	ldr	r3, [pc, #248]	@ (80034a8 <HAL_RCC_ClockConfig+0x1e4>)
 80033b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033b2:	2202      	movs	r2, #2
 80033b4:	4013      	ands	r3, r2
 80033b6:	d101      	bne.n	80033bc <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e06d      	b.n	8003498 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033bc:	4b3a      	ldr	r3, [pc, #232]	@ (80034a8 <HAL_RCC_ClockConfig+0x1e4>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	2207      	movs	r2, #7
 80033c2:	4393      	bics	r3, r2
 80033c4:	0019      	movs	r1, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685a      	ldr	r2, [r3, #4]
 80033ca:	4b37      	ldr	r3, [pc, #220]	@ (80034a8 <HAL_RCC_ClockConfig+0x1e4>)
 80033cc:	430a      	orrs	r2, r1
 80033ce:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033d0:	f7ff f9f4 	bl	80027bc <HAL_GetTick>
 80033d4:	0003      	movs	r3, r0
 80033d6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033d8:	e009      	b.n	80033ee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80033da:	f7ff f9ef 	bl	80027bc <HAL_GetTick>
 80033de:	0002      	movs	r2, r0
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	4a2f      	ldr	r2, [pc, #188]	@ (80034a4 <HAL_RCC_ClockConfig+0x1e0>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e054      	b.n	8003498 <HAL_RCC_ClockConfig+0x1d4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ee:	4b2e      	ldr	r3, [pc, #184]	@ (80034a8 <HAL_RCC_ClockConfig+0x1e4>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	2238      	movs	r2, #56	@ 0x38
 80033f4:	401a      	ands	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d1ec      	bne.n	80033da <HAL_RCC_ClockConfig+0x116>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003400:	4b27      	ldr	r3, [pc, #156]	@ (80034a0 <HAL_RCC_ClockConfig+0x1dc>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2207      	movs	r2, #7
 8003406:	4013      	ands	r3, r2
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	429a      	cmp	r2, r3
 800340c:	d21e      	bcs.n	800344c <HAL_RCC_ClockConfig+0x188>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800340e:	4b24      	ldr	r3, [pc, #144]	@ (80034a0 <HAL_RCC_ClockConfig+0x1dc>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2207      	movs	r2, #7
 8003414:	4393      	bics	r3, r2
 8003416:	0019      	movs	r1, r3
 8003418:	4b21      	ldr	r3, [pc, #132]	@ (80034a0 <HAL_RCC_ClockConfig+0x1dc>)
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003420:	f7ff f9cc 	bl	80027bc <HAL_GetTick>
 8003424:	0003      	movs	r3, r0
 8003426:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003428:	e009      	b.n	800343e <HAL_RCC_ClockConfig+0x17a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800342a:	f7ff f9c7 	bl	80027bc <HAL_GetTick>
 800342e:	0002      	movs	r2, r0
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	4a1b      	ldr	r2, [pc, #108]	@ (80034a4 <HAL_RCC_ClockConfig+0x1e0>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d901      	bls.n	800343e <HAL_RCC_ClockConfig+0x17a>
      {
        return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e02c      	b.n	8003498 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800343e:	4b18      	ldr	r3, [pc, #96]	@ (80034a0 <HAL_RCC_ClockConfig+0x1dc>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2207      	movs	r2, #7
 8003444:	4013      	ands	r3, r2
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	429a      	cmp	r2, r3
 800344a:	d1ee      	bne.n	800342a <HAL_RCC_ClockConfig+0x166>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2204      	movs	r2, #4
 8003452:	4013      	ands	r3, r2
 8003454:	d009      	beq.n	800346a <HAL_RCC_ClockConfig+0x1a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003456:	4b14      	ldr	r3, [pc, #80]	@ (80034a8 <HAL_RCC_ClockConfig+0x1e4>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	4a16      	ldr	r2, [pc, #88]	@ (80034b4 <HAL_RCC_ClockConfig+0x1f0>)
 800345c:	4013      	ands	r3, r2
 800345e:	0019      	movs	r1, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	691a      	ldr	r2, [r3, #16]
 8003464:	4b10      	ldr	r3, [pc, #64]	@ (80034a8 <HAL_RCC_ClockConfig+0x1e4>)
 8003466:	430a      	orrs	r2, r1
 8003468:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800346a:	f000 f82b 	bl	80034c4 <HAL_RCC_GetSysClockFreq>
 800346e:	0001      	movs	r1, r0
 8003470:	4b0d      	ldr	r3, [pc, #52]	@ (80034a8 <HAL_RCC_ClockConfig+0x1e4>)
 8003472:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003474:	0a1b      	lsrs	r3, r3, #8
 8003476:	220f      	movs	r2, #15
 8003478:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800347a:	4b0f      	ldr	r3, [pc, #60]	@ (80034b8 <HAL_RCC_ClockConfig+0x1f4>)
 800347c:	0092      	lsls	r2, r2, #2
 800347e:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003480:	221f      	movs	r2, #31
 8003482:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003484:	000a      	movs	r2, r1
 8003486:	40da      	lsrs	r2, r3
 8003488:	4b0c      	ldr	r3, [pc, #48]	@ (80034bc <HAL_RCC_ClockConfig+0x1f8>)
 800348a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800348c:	4b0c      	ldr	r3, [pc, #48]	@ (80034c0 <HAL_RCC_ClockConfig+0x1fc>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	0018      	movs	r0, r3
 8003492:	f7ff f937 	bl	8002704 <HAL_InitTick>
 8003496:	0003      	movs	r3, r0
}
 8003498:	0018      	movs	r0, r3
 800349a:	46bd      	mov	sp, r7
 800349c:	b004      	add	sp, #16
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	40022000 	.word	0x40022000
 80034a4:	00001388 	.word	0x00001388
 80034a8:	40021000 	.word	0x40021000
 80034ac:	ffff84ff 	.word	0xffff84ff
 80034b0:	fffff0ff 	.word	0xfffff0ff
 80034b4:	ffff8fff 	.word	0xffff8fff
 80034b8:	08007e1c 	.word	0x08007e1c
 80034bc:	20000000 	.word	0x20000000
 80034c0:	20000004 	.word	0x20000004

080034c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80034ca:	4b1c      	ldr	r3, [pc, #112]	@ (800353c <HAL_RCC_GetSysClockFreq+0x78>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	2238      	movs	r2, #56	@ 0x38
 80034d0:	4013      	ands	r3, r2
 80034d2:	d10f      	bne.n	80034f4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80034d4:	4b19      	ldr	r3, [pc, #100]	@ (800353c <HAL_RCC_GetSysClockFreq+0x78>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	0adb      	lsrs	r3, r3, #11
 80034da:	2207      	movs	r2, #7
 80034dc:	4013      	ands	r3, r2
 80034de:	2201      	movs	r2, #1
 80034e0:	409a      	lsls	r2, r3
 80034e2:	0013      	movs	r3, r2
 80034e4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80034e6:	6839      	ldr	r1, [r7, #0]
 80034e8:	4815      	ldr	r0, [pc, #84]	@ (8003540 <HAL_RCC_GetSysClockFreq+0x7c>)
 80034ea:	f7fc fe0d 	bl	8000108 <__udivsi3>
 80034ee:	0003      	movs	r3, r0
 80034f0:	607b      	str	r3, [r7, #4]
 80034f2:	e01e      	b.n	8003532 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80034f4:	4b11      	ldr	r3, [pc, #68]	@ (800353c <HAL_RCC_GetSysClockFreq+0x78>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	2238      	movs	r2, #56	@ 0x38
 80034fa:	4013      	ands	r3, r2
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	d102      	bne.n	8003506 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003500:	4b10      	ldr	r3, [pc, #64]	@ (8003544 <HAL_RCC_GetSysClockFreq+0x80>)
 8003502:	607b      	str	r3, [r7, #4]
 8003504:	e015      	b.n	8003532 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8003506:	4b0d      	ldr	r3, [pc, #52]	@ (800353c <HAL_RCC_GetSysClockFreq+0x78>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	2238      	movs	r2, #56	@ 0x38
 800350c:	4013      	ands	r3, r2
 800350e:	2b20      	cmp	r3, #32
 8003510:	d103      	bne.n	800351a <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003512:	2380      	movs	r3, #128	@ 0x80
 8003514:	021b      	lsls	r3, r3, #8
 8003516:	607b      	str	r3, [r7, #4]
 8003518:	e00b      	b.n	8003532 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800351a:	4b08      	ldr	r3, [pc, #32]	@ (800353c <HAL_RCC_GetSysClockFreq+0x78>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	2238      	movs	r2, #56	@ 0x38
 8003520:	4013      	ands	r3, r2
 8003522:	2b18      	cmp	r3, #24
 8003524:	d103      	bne.n	800352e <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003526:	23fa      	movs	r3, #250	@ 0xfa
 8003528:	01db      	lsls	r3, r3, #7
 800352a:	607b      	str	r3, [r7, #4]
 800352c:	e001      	b.n	8003532 <HAL_RCC_GetSysClockFreq+0x6e>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 800352e:	2300      	movs	r3, #0
 8003530:	607b      	str	r3, [r7, #4]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8003532:	687b      	ldr	r3, [r7, #4]
}
 8003534:	0018      	movs	r0, r3
 8003536:	46bd      	mov	sp, r7
 8003538:	b002      	add	sp, #8
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40021000 	.word	0x40021000
 8003540:	02dc6c00 	.word	0x02dc6c00
 8003544:	007a1200 	.word	0x007a1200

08003548 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800354c:	f7ff ffba 	bl	80034c4 <HAL_RCC_GetSysClockFreq>
 8003550:	0001      	movs	r1, r0
 8003552:	4b09      	ldr	r3, [pc, #36]	@ (8003578 <HAL_RCC_GetHCLKFreq+0x30>)
 8003554:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003556:	0a1b      	lsrs	r3, r3, #8
 8003558:	220f      	movs	r2, #15
 800355a:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800355c:	4b07      	ldr	r3, [pc, #28]	@ (800357c <HAL_RCC_GetHCLKFreq+0x34>)
 800355e:	0092      	lsls	r2, r2, #2
 8003560:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003562:	221f      	movs	r2, #31
 8003564:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003566:	000a      	movs	r2, r1
 8003568:	40da      	lsrs	r2, r3
 800356a:	4b05      	ldr	r3, [pc, #20]	@ (8003580 <HAL_RCC_GetHCLKFreq+0x38>)
 800356c:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 800356e:	4b04      	ldr	r3, [pc, #16]	@ (8003580 <HAL_RCC_GetHCLKFreq+0x38>)
 8003570:	681b      	ldr	r3, [r3, #0]
}
 8003572:	0018      	movs	r0, r3
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	40021000 	.word	0x40021000
 800357c:	08007e1c 	.word	0x08007e1c
 8003580:	20000000 	.word	0x20000000

08003584 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8003588:	f7ff ffde 	bl	8003548 <HAL_RCC_GetHCLKFreq>
 800358c:	0001      	movs	r1, r0
 800358e:	4b07      	ldr	r3, [pc, #28]	@ (80035ac <HAL_RCC_GetPCLK1Freq+0x28>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	0b1b      	lsrs	r3, r3, #12
 8003594:	2207      	movs	r2, #7
 8003596:	401a      	ands	r2, r3
 8003598:	4b05      	ldr	r3, [pc, #20]	@ (80035b0 <HAL_RCC_GetPCLK1Freq+0x2c>)
 800359a:	0092      	lsls	r2, r2, #2
 800359c:	58d3      	ldr	r3, [r2, r3]
 800359e:	221f      	movs	r2, #31
 80035a0:	4013      	ands	r3, r2
 80035a2:	40d9      	lsrs	r1, r3
 80035a4:	000b      	movs	r3, r1
}
 80035a6:	0018      	movs	r0, r3
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	40021000 	.word	0x40021000
 80035b0:	08007e5c 	.word	0x08007e5c

080035b4 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80035bc:	2313      	movs	r3, #19
 80035be:	18fb      	adds	r3, r7, r3
 80035c0:	2200      	movs	r2, #0
 80035c2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035c4:	2312      	movs	r3, #18
 80035c6:	18fb      	adds	r3, r7, r3
 80035c8:	2200      	movs	r2, #0
 80035ca:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2240      	movs	r2, #64	@ 0x40
 80035d2:	4013      	ands	r3, r2
 80035d4:	d100      	bne.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x24>
 80035d6:	e079      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035d8:	2011      	movs	r0, #17
 80035da:	183b      	adds	r3, r7, r0
 80035dc:	2200      	movs	r2, #0
 80035de:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035e0:	4b63      	ldr	r3, [pc, #396]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80035e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035e4:	2380      	movs	r3, #128	@ 0x80
 80035e6:	055b      	lsls	r3, r3, #21
 80035e8:	4013      	ands	r3, r2
 80035ea:	d110      	bne.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ec:	4b60      	ldr	r3, [pc, #384]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80035ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035f0:	4b5f      	ldr	r3, [pc, #380]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80035f2:	2180      	movs	r1, #128	@ 0x80
 80035f4:	0549      	lsls	r1, r1, #21
 80035f6:	430a      	orrs	r2, r1
 80035f8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80035fa:	4b5d      	ldr	r3, [pc, #372]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80035fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035fe:	2380      	movs	r3, #128	@ 0x80
 8003600:	055b      	lsls	r3, r3, #21
 8003602:	4013      	ands	r3, r2
 8003604:	60bb      	str	r3, [r7, #8]
 8003606:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003608:	183b      	adds	r3, r7, r0
 800360a:	2201      	movs	r2, #1
 800360c:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 800360e:	4b58      	ldr	r3, [pc, #352]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003610:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003612:	23c0      	movs	r3, #192	@ 0xc0
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	4013      	ands	r3, r2
 8003618:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d019      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	429a      	cmp	r2, r3
 8003628:	d014      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 800362a:	4b51      	ldr	r3, [pc, #324]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800362c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800362e:	4a51      	ldr	r2, [pc, #324]	@ (8003774 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003630:	4013      	ands	r3, r2
 8003632:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003634:	4b4e      	ldr	r3, [pc, #312]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003636:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003638:	4b4d      	ldr	r3, [pc, #308]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800363a:	2180      	movs	r1, #128	@ 0x80
 800363c:	0249      	lsls	r1, r1, #9
 800363e:	430a      	orrs	r2, r1
 8003640:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003642:	4b4b      	ldr	r3, [pc, #300]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003644:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003646:	4b4a      	ldr	r3, [pc, #296]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003648:	494b      	ldr	r1, [pc, #300]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800364a:	400a      	ands	r2, r1
 800364c:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 800364e:	4b48      	ldr	r3, [pc, #288]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003650:	697a      	ldr	r2, [r7, #20]
 8003652:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	2201      	movs	r2, #1
 8003658:	4013      	ands	r3, r2
 800365a:	d016      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800365c:	f7ff f8ae 	bl	80027bc <HAL_GetTick>
 8003660:	0003      	movs	r3, r0
 8003662:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003664:	e00c      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003666:	f7ff f8a9 	bl	80027bc <HAL_GetTick>
 800366a:	0002      	movs	r2, r0
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	4a42      	ldr	r2, [pc, #264]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d904      	bls.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8003676:	2313      	movs	r3, #19
 8003678:	18fb      	adds	r3, r7, r3
 800367a:	2203      	movs	r2, #3
 800367c:	701a      	strb	r2, [r3, #0]
          break;
 800367e:	e004      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003680:	4b3b      	ldr	r3, [pc, #236]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003682:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003684:	2202      	movs	r2, #2
 8003686:	4013      	ands	r3, r2
 8003688:	d0ed      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 800368a:	2313      	movs	r3, #19
 800368c:	18fb      	adds	r3, r7, r3
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d10a      	bne.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003694:	4b36      	ldr	r3, [pc, #216]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003696:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003698:	4a36      	ldr	r2, [pc, #216]	@ (8003774 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800369a:	4013      	ands	r3, r2
 800369c:	0019      	movs	r1, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	699a      	ldr	r2, [r3, #24]
 80036a2:	4b33      	ldr	r3, [pc, #204]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80036a4:	430a      	orrs	r2, r1
 80036a6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80036a8:	e005      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036aa:	2312      	movs	r3, #18
 80036ac:	18fb      	adds	r3, r7, r3
 80036ae:	2213      	movs	r2, #19
 80036b0:	18ba      	adds	r2, r7, r2
 80036b2:	7812      	ldrb	r2, [r2, #0]
 80036b4:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036b6:	2311      	movs	r3, #17
 80036b8:	18fb      	adds	r3, r7, r3
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d105      	bne.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036c0:	4b2b      	ldr	r3, [pc, #172]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80036c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80036c4:	4b2a      	ldr	r3, [pc, #168]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80036c6:	492e      	ldr	r1, [pc, #184]	@ (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80036c8:	400a      	ands	r2, r1
 80036ca:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2201      	movs	r2, #1
 80036d2:	4013      	ands	r3, r2
 80036d4:	d009      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036d6:	4b26      	ldr	r3, [pc, #152]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80036d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036da:	2203      	movs	r2, #3
 80036dc:	4393      	bics	r3, r2
 80036de:	0019      	movs	r1, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689a      	ldr	r2, [r3, #8]
 80036e4:	4b22      	ldr	r3, [pc, #136]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80036e6:	430a      	orrs	r2, r1
 80036e8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2202      	movs	r2, #2
 80036f0:	4013      	ands	r3, r2
 80036f2:	d009      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036f4:	4b1e      	ldr	r3, [pc, #120]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80036f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036f8:	4a22      	ldr	r2, [pc, #136]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036fa:	4013      	ands	r3, r2
 80036fc:	0019      	movs	r1, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68da      	ldr	r2, [r3, #12]
 8003702:	4b1b      	ldr	r3, [pc, #108]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003704:	430a      	orrs	r2, r1
 8003706:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2220      	movs	r2, #32
 800370e:	4013      	ands	r3, r2
 8003710:	d008      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003712:	4b17      	ldr	r3, [pc, #92]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003714:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	0899      	lsrs	r1, r3, #2
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	695a      	ldr	r2, [r3, #20]
 800371e:	4b14      	ldr	r3, [pc, #80]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003720:	430a      	orrs	r2, r1
 8003722:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_FDCAN1_CONFIG(PeriphClkInit->Fdcan1ClockSelection);

  }
#endif /* FDCAN1 */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2204      	movs	r2, #4
 800372a:	4013      	ands	r3, r2
 800372c:	d009      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800372e:	4b10      	ldr	r3, [pc, #64]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003730:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003732:	4a15      	ldr	r2, [pc, #84]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003734:	4013      	ands	r3, r2
 8003736:	0019      	movs	r1, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	691a      	ldr	r2, [r3, #16]
 800373c:	4b0c      	ldr	r3, [pc, #48]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800373e:	430a      	orrs	r2, r1
 8003740:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2280      	movs	r2, #128	@ 0x80
 8003748:	4013      	ands	r3, r2
 800374a:	d009      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 800374c:	4b08      	ldr	r3, [pc, #32]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	22e0      	movs	r2, #224	@ 0xe0
 8003752:	4393      	bics	r3, r2
 8003754:	0019      	movs	r1, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685a      	ldr	r2, [r3, #4]
 800375a:	4b05      	ldr	r3, [pc, #20]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800375c:	430a      	orrs	r2, r1
 800375e:	601a      	str	r2, [r3, #0]
  }
  return status;
 8003760:	2312      	movs	r3, #18
 8003762:	18fb      	adds	r3, r7, r3
 8003764:	781b      	ldrb	r3, [r3, #0]
}
 8003766:	0018      	movs	r0, r3
 8003768:	46bd      	mov	sp, r7
 800376a:	b006      	add	sp, #24
 800376c:	bd80      	pop	{r7, pc}
 800376e:	46c0      	nop			@ (mov r8, r8)
 8003770:	40021000 	.word	0x40021000
 8003774:	fffffcff 	.word	0xfffffcff
 8003778:	fffeffff 	.word	0xfffeffff
 800377c:	00001388 	.word	0x00001388
 8003780:	efffffff 	.word	0xefffffff
 8003784:	ffffcfff 	.word	0xffffcfff
 8003788:	ffff3fff 	.word	0xffff3fff

0800378c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e04a      	b.n	8003834 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	223d      	movs	r2, #61	@ 0x3d
 80037a2:	5c9b      	ldrb	r3, [r3, r2]
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d107      	bne.n	80037ba <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	223c      	movs	r2, #60	@ 0x3c
 80037ae:	2100      	movs	r1, #0
 80037b0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	0018      	movs	r0, r3
 80037b6:	f7fe fe09 	bl	80023cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	223d      	movs	r2, #61	@ 0x3d
 80037be:	2102      	movs	r1, #2
 80037c0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	3304      	adds	r3, #4
 80037ca:	0019      	movs	r1, r3
 80037cc:	0010      	movs	r0, r2
 80037ce:	f000 ff0d 	bl	80045ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2248      	movs	r2, #72	@ 0x48
 80037d6:	2101      	movs	r1, #1
 80037d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	223e      	movs	r2, #62	@ 0x3e
 80037de:	2101      	movs	r1, #1
 80037e0:	5499      	strb	r1, [r3, r2]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	223f      	movs	r2, #63	@ 0x3f
 80037e6:	2101      	movs	r1, #1
 80037e8:	5499      	strb	r1, [r3, r2]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2240      	movs	r2, #64	@ 0x40
 80037ee:	2101      	movs	r1, #1
 80037f0:	5499      	strb	r1, [r3, r2]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2241      	movs	r2, #65	@ 0x41
 80037f6:	2101      	movs	r1, #1
 80037f8:	5499      	strb	r1, [r3, r2]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2242      	movs	r2, #66	@ 0x42
 80037fe:	2101      	movs	r1, #1
 8003800:	5499      	strb	r1, [r3, r2]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2243      	movs	r2, #67	@ 0x43
 8003806:	2101      	movs	r1, #1
 8003808:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2244      	movs	r2, #68	@ 0x44
 800380e:	2101      	movs	r1, #1
 8003810:	5499      	strb	r1, [r3, r2]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2245      	movs	r2, #69	@ 0x45
 8003816:	2101      	movs	r1, #1
 8003818:	5499      	strb	r1, [r3, r2]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2246      	movs	r2, #70	@ 0x46
 800381e:	2101      	movs	r1, #1
 8003820:	5499      	strb	r1, [r3, r2]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2247      	movs	r2, #71	@ 0x47
 8003826:	2101      	movs	r1, #1
 8003828:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	223d      	movs	r2, #61	@ 0x3d
 800382e:	2101      	movs	r1, #1
 8003830:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	0018      	movs	r0, r3
 8003836:	46bd      	mov	sp, r7
 8003838:	b002      	add	sp, #8
 800383a:	bd80      	pop	{r7, pc}

0800383c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	223d      	movs	r2, #61	@ 0x3d
 8003848:	5c9b      	ldrb	r3, [r3, r2]
 800384a:	b2db      	uxtb	r3, r3
 800384c:	2b01      	cmp	r3, #1
 800384e:	d001      	beq.n	8003854 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e02f      	b.n	80038b4 <HAL_TIM_Base_Start+0x78>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	223d      	movs	r2, #61	@ 0x3d
 8003858:	2102      	movs	r1, #2
 800385a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a16      	ldr	r2, [pc, #88]	@ (80038bc <HAL_TIM_Base_Start+0x80>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d004      	beq.n	8003870 <HAL_TIM_Base_Start+0x34>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a15      	ldr	r2, [pc, #84]	@ (80038c0 <HAL_TIM_Base_Start+0x84>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d116      	bne.n	800389e <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	4a13      	ldr	r2, [pc, #76]	@ (80038c4 <HAL_TIM_Base_Start+0x88>)
 8003878:	4013      	ands	r3, r2
 800387a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2b06      	cmp	r3, #6
 8003880:	d016      	beq.n	80038b0 <HAL_TIM_Base_Start+0x74>
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	2380      	movs	r3, #128	@ 0x80
 8003886:	025b      	lsls	r3, r3, #9
 8003888:	429a      	cmp	r2, r3
 800388a:	d011      	beq.n	80038b0 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2101      	movs	r1, #1
 8003898:	430a      	orrs	r2, r1
 800389a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800389c:	e008      	b.n	80038b0 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2101      	movs	r1, #1
 80038aa:	430a      	orrs	r2, r1
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	e000      	b.n	80038b2 <HAL_TIM_Base_Start+0x76>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038b0:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	0018      	movs	r0, r3
 80038b6:	46bd      	mov	sp, r7
 80038b8:	b004      	add	sp, #16
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	40012c00 	.word	0x40012c00
 80038c0:	40000400 	.word	0x40000400
 80038c4:	00010007 	.word	0x00010007

080038c8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	4a0d      	ldr	r2, [pc, #52]	@ (800390c <HAL_TIM_Base_Stop+0x44>)
 80038d8:	4013      	ands	r3, r2
 80038da:	d10d      	bne.n	80038f8 <HAL_TIM_Base_Stop+0x30>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	4a0b      	ldr	r2, [pc, #44]	@ (8003910 <HAL_TIM_Base_Stop+0x48>)
 80038e4:	4013      	ands	r3, r2
 80038e6:	d107      	bne.n	80038f8 <HAL_TIM_Base_Stop+0x30>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2101      	movs	r1, #1
 80038f4:	438a      	bics	r2, r1
 80038f6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	223d      	movs	r2, #61	@ 0x3d
 80038fc:	2101      	movs	r1, #1
 80038fe:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	0018      	movs	r0, r3
 8003904:	46bd      	mov	sp, r7
 8003906:	b002      	add	sp, #8
 8003908:	bd80      	pop	{r7, pc}
 800390a:	46c0      	nop			@ (mov r8, r8)
 800390c:	00001111 	.word	0x00001111
 8003910:	00000444 	.word	0x00000444

08003914 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	223d      	movs	r2, #61	@ 0x3d
 8003920:	5c9b      	ldrb	r3, [r3, r2]
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b01      	cmp	r3, #1
 8003926:	d001      	beq.n	800392c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e037      	b.n	800399c <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	223d      	movs	r2, #61	@ 0x3d
 8003930:	2102      	movs	r1, #2
 8003932:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68da      	ldr	r2, [r3, #12]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2101      	movs	r1, #1
 8003940:	430a      	orrs	r2, r1
 8003942:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a16      	ldr	r2, [pc, #88]	@ (80039a4 <HAL_TIM_Base_Start_IT+0x90>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d004      	beq.n	8003958 <HAL_TIM_Base_Start_IT+0x44>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a15      	ldr	r2, [pc, #84]	@ (80039a8 <HAL_TIM_Base_Start_IT+0x94>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d116      	bne.n	8003986 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	4a13      	ldr	r2, [pc, #76]	@ (80039ac <HAL_TIM_Base_Start_IT+0x98>)
 8003960:	4013      	ands	r3, r2
 8003962:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2b06      	cmp	r3, #6
 8003968:	d016      	beq.n	8003998 <HAL_TIM_Base_Start_IT+0x84>
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	2380      	movs	r3, #128	@ 0x80
 800396e:	025b      	lsls	r3, r3, #9
 8003970:	429a      	cmp	r2, r3
 8003972:	d011      	beq.n	8003998 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2101      	movs	r1, #1
 8003980:	430a      	orrs	r2, r1
 8003982:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003984:	e008      	b.n	8003998 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2101      	movs	r1, #1
 8003992:	430a      	orrs	r2, r1
 8003994:	601a      	str	r2, [r3, #0]
 8003996:	e000      	b.n	800399a <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003998:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	0018      	movs	r0, r3
 800399e:	46bd      	mov	sp, r7
 80039a0:	b004      	add	sp, #16
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	40012c00 	.word	0x40012c00
 80039a8:	40000400 	.word	0x40000400
 80039ac:	00010007 	.word	0x00010007

080039b0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e04a      	b.n	8003a58 <HAL_TIM_OC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	223d      	movs	r2, #61	@ 0x3d
 80039c6:	5c9b      	ldrb	r3, [r3, r2]
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d107      	bne.n	80039de <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	223c      	movs	r2, #60	@ 0x3c
 80039d2:	2100      	movs	r1, #0
 80039d4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	0018      	movs	r0, r3
 80039da:	f7fe fcd1 	bl	8002380 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	223d      	movs	r2, #61	@ 0x3d
 80039e2:	2102      	movs	r1, #2
 80039e4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	3304      	adds	r3, #4
 80039ee:	0019      	movs	r1, r3
 80039f0:	0010      	movs	r0, r2
 80039f2:	f000 fdfb 	bl	80045ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2248      	movs	r2, #72	@ 0x48
 80039fa:	2101      	movs	r1, #1
 80039fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	223e      	movs	r2, #62	@ 0x3e
 8003a02:	2101      	movs	r1, #1
 8003a04:	5499      	strb	r1, [r3, r2]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	223f      	movs	r2, #63	@ 0x3f
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	5499      	strb	r1, [r3, r2]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2240      	movs	r2, #64	@ 0x40
 8003a12:	2101      	movs	r1, #1
 8003a14:	5499      	strb	r1, [r3, r2]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2241      	movs	r2, #65	@ 0x41
 8003a1a:	2101      	movs	r1, #1
 8003a1c:	5499      	strb	r1, [r3, r2]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2242      	movs	r2, #66	@ 0x42
 8003a22:	2101      	movs	r1, #1
 8003a24:	5499      	strb	r1, [r3, r2]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2243      	movs	r2, #67	@ 0x43
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2244      	movs	r2, #68	@ 0x44
 8003a32:	2101      	movs	r1, #1
 8003a34:	5499      	strb	r1, [r3, r2]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2245      	movs	r2, #69	@ 0x45
 8003a3a:	2101      	movs	r1, #1
 8003a3c:	5499      	strb	r1, [r3, r2]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2246      	movs	r2, #70	@ 0x46
 8003a42:	2101      	movs	r1, #1
 8003a44:	5499      	strb	r1, [r3, r2]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2247      	movs	r2, #71	@ 0x47
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	223d      	movs	r2, #61	@ 0x3d
 8003a52:	2101      	movs	r1, #1
 8003a54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	0018      	movs	r0, r3
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	b002      	add	sp, #8
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a6a:	230f      	movs	r3, #15
 8003a6c:	18fb      	adds	r3, r7, r3
 8003a6e:	2200      	movs	r2, #0
 8003a70:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d108      	bne.n	8003a8a <HAL_TIM_OC_Start_IT+0x2a>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	223e      	movs	r2, #62	@ 0x3e
 8003a7c:	5c9b      	ldrb	r3, [r3, r2]
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	3b01      	subs	r3, #1
 8003a82:	1e5a      	subs	r2, r3, #1
 8003a84:	4193      	sbcs	r3, r2
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	e037      	b.n	8003afa <HAL_TIM_OC_Start_IT+0x9a>
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	2b04      	cmp	r3, #4
 8003a8e:	d108      	bne.n	8003aa2 <HAL_TIM_OC_Start_IT+0x42>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	223f      	movs	r2, #63	@ 0x3f
 8003a94:	5c9b      	ldrb	r3, [r3, r2]
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	1e5a      	subs	r2, r3, #1
 8003a9c:	4193      	sbcs	r3, r2
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	e02b      	b.n	8003afa <HAL_TIM_OC_Start_IT+0x9a>
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	2b08      	cmp	r3, #8
 8003aa6:	d108      	bne.n	8003aba <HAL_TIM_OC_Start_IT+0x5a>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2240      	movs	r2, #64	@ 0x40
 8003aac:	5c9b      	ldrb	r3, [r3, r2]
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	1e5a      	subs	r2, r3, #1
 8003ab4:	4193      	sbcs	r3, r2
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	e01f      	b.n	8003afa <HAL_TIM_OC_Start_IT+0x9a>
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	2b0c      	cmp	r3, #12
 8003abe:	d108      	bne.n	8003ad2 <HAL_TIM_OC_Start_IT+0x72>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2241      	movs	r2, #65	@ 0x41
 8003ac4:	5c9b      	ldrb	r3, [r3, r2]
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	1e5a      	subs	r2, r3, #1
 8003acc:	4193      	sbcs	r3, r2
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	e013      	b.n	8003afa <HAL_TIM_OC_Start_IT+0x9a>
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	2b10      	cmp	r3, #16
 8003ad6:	d108      	bne.n	8003aea <HAL_TIM_OC_Start_IT+0x8a>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2242      	movs	r2, #66	@ 0x42
 8003adc:	5c9b      	ldrb	r3, [r3, r2]
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	1e5a      	subs	r2, r3, #1
 8003ae4:	4193      	sbcs	r3, r2
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	e007      	b.n	8003afa <HAL_TIM_OC_Start_IT+0x9a>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2243      	movs	r2, #67	@ 0x43
 8003aee:	5c9b      	ldrb	r3, [r3, r2]
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	3b01      	subs	r3, #1
 8003af4:	1e5a      	subs	r2, r3, #1
 8003af6:	4193      	sbcs	r3, r2
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <HAL_TIM_OC_Start_IT+0xa2>
  {
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e0be      	b.n	8003c80 <HAL_TIM_OC_Start_IT+0x220>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d104      	bne.n	8003b12 <HAL_TIM_OC_Start_IT+0xb2>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	223e      	movs	r2, #62	@ 0x3e
 8003b0c:	2102      	movs	r1, #2
 8003b0e:	5499      	strb	r1, [r3, r2]
 8003b10:	e023      	b.n	8003b5a <HAL_TIM_OC_Start_IT+0xfa>
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2b04      	cmp	r3, #4
 8003b16:	d104      	bne.n	8003b22 <HAL_TIM_OC_Start_IT+0xc2>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	223f      	movs	r2, #63	@ 0x3f
 8003b1c:	2102      	movs	r1, #2
 8003b1e:	5499      	strb	r1, [r3, r2]
 8003b20:	e01b      	b.n	8003b5a <HAL_TIM_OC_Start_IT+0xfa>
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	2b08      	cmp	r3, #8
 8003b26:	d104      	bne.n	8003b32 <HAL_TIM_OC_Start_IT+0xd2>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2240      	movs	r2, #64	@ 0x40
 8003b2c:	2102      	movs	r1, #2
 8003b2e:	5499      	strb	r1, [r3, r2]
 8003b30:	e013      	b.n	8003b5a <HAL_TIM_OC_Start_IT+0xfa>
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	2b0c      	cmp	r3, #12
 8003b36:	d104      	bne.n	8003b42 <HAL_TIM_OC_Start_IT+0xe2>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2241      	movs	r2, #65	@ 0x41
 8003b3c:	2102      	movs	r1, #2
 8003b3e:	5499      	strb	r1, [r3, r2]
 8003b40:	e00b      	b.n	8003b5a <HAL_TIM_OC_Start_IT+0xfa>
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	2b10      	cmp	r3, #16
 8003b46:	d104      	bne.n	8003b52 <HAL_TIM_OC_Start_IT+0xf2>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2242      	movs	r2, #66	@ 0x42
 8003b4c:	2102      	movs	r1, #2
 8003b4e:	5499      	strb	r1, [r3, r2]
 8003b50:	e003      	b.n	8003b5a <HAL_TIM_OC_Start_IT+0xfa>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2243      	movs	r2, #67	@ 0x43
 8003b56:	2102      	movs	r1, #2
 8003b58:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	2b0c      	cmp	r3, #12
 8003b5e:	d02a      	beq.n	8003bb6 <HAL_TIM_OC_Start_IT+0x156>
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	2b0c      	cmp	r3, #12
 8003b64:	d830      	bhi.n	8003bc8 <HAL_TIM_OC_Start_IT+0x168>
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	2b08      	cmp	r3, #8
 8003b6a:	d01b      	beq.n	8003ba4 <HAL_TIM_OC_Start_IT+0x144>
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	2b08      	cmp	r3, #8
 8003b70:	d82a      	bhi.n	8003bc8 <HAL_TIM_OC_Start_IT+0x168>
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d003      	beq.n	8003b80 <HAL_TIM_OC_Start_IT+0x120>
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	2b04      	cmp	r3, #4
 8003b7c:	d009      	beq.n	8003b92 <HAL_TIM_OC_Start_IT+0x132>
 8003b7e:	e023      	b.n	8003bc8 <HAL_TIM_OC_Start_IT+0x168>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68da      	ldr	r2, [r3, #12]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2102      	movs	r1, #2
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	60da      	str	r2, [r3, #12]
      break;
 8003b90:	e01f      	b.n	8003bd2 <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68da      	ldr	r2, [r3, #12]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2104      	movs	r1, #4
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	60da      	str	r2, [r3, #12]
      break;
 8003ba2:	e016      	b.n	8003bd2 <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68da      	ldr	r2, [r3, #12]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2108      	movs	r1, #8
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	60da      	str	r2, [r3, #12]
      break;
 8003bb4:	e00d      	b.n	8003bd2 <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68da      	ldr	r2, [r3, #12]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2110      	movs	r1, #16
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	60da      	str	r2, [r3, #12]
      break;
 8003bc6:	e004      	b.n	8003bd2 <HAL_TIM_OC_Start_IT+0x172>
    }

    default:
      status = HAL_ERROR;
 8003bc8:	230f      	movs	r3, #15
 8003bca:	18fb      	adds	r3, r7, r3
 8003bcc:	2201      	movs	r2, #1
 8003bce:	701a      	strb	r2, [r3, #0]
      break;
 8003bd0:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8003bd2:	230f      	movs	r3, #15
 8003bd4:	18fb      	adds	r3, r7, r3
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d14e      	bne.n	8003c7a <HAL_TIM_OC_Start_IT+0x21a>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	6839      	ldr	r1, [r7, #0]
 8003be2:	2201      	movs	r2, #1
 8003be4:	0018      	movs	r0, r3
 8003be6:	f001 f9cd 	bl	8004f84 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a26      	ldr	r2, [pc, #152]	@ (8003c88 <HAL_TIM_OC_Start_IT+0x228>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d009      	beq.n	8003c08 <HAL_TIM_OC_Start_IT+0x1a8>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a24      	ldr	r2, [pc, #144]	@ (8003c8c <HAL_TIM_OC_Start_IT+0x22c>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d004      	beq.n	8003c08 <HAL_TIM_OC_Start_IT+0x1a8>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a23      	ldr	r2, [pc, #140]	@ (8003c90 <HAL_TIM_OC_Start_IT+0x230>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d101      	bne.n	8003c0c <HAL_TIM_OC_Start_IT+0x1ac>
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e000      	b.n	8003c0e <HAL_TIM_OC_Start_IT+0x1ae>
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d008      	beq.n	8003c24 <HAL_TIM_OC_Start_IT+0x1c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2180      	movs	r1, #128	@ 0x80
 8003c1e:	0209      	lsls	r1, r1, #8
 8003c20:	430a      	orrs	r2, r1
 8003c22:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a17      	ldr	r2, [pc, #92]	@ (8003c88 <HAL_TIM_OC_Start_IT+0x228>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d004      	beq.n	8003c38 <HAL_TIM_OC_Start_IT+0x1d8>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a18      	ldr	r2, [pc, #96]	@ (8003c94 <HAL_TIM_OC_Start_IT+0x234>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d116      	bne.n	8003c66 <HAL_TIM_OC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	4a16      	ldr	r2, [pc, #88]	@ (8003c98 <HAL_TIM_OC_Start_IT+0x238>)
 8003c40:	4013      	ands	r3, r2
 8003c42:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	2b06      	cmp	r3, #6
 8003c48:	d016      	beq.n	8003c78 <HAL_TIM_OC_Start_IT+0x218>
 8003c4a:	68ba      	ldr	r2, [r7, #8]
 8003c4c:	2380      	movs	r3, #128	@ 0x80
 8003c4e:	025b      	lsls	r3, r3, #9
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d011      	beq.n	8003c78 <HAL_TIM_OC_Start_IT+0x218>
      {
        __HAL_TIM_ENABLE(htim);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2101      	movs	r1, #1
 8003c60:	430a      	orrs	r2, r1
 8003c62:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c64:	e008      	b.n	8003c78 <HAL_TIM_OC_Start_IT+0x218>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2101      	movs	r1, #1
 8003c72:	430a      	orrs	r2, r1
 8003c74:	601a      	str	r2, [r3, #0]
 8003c76:	e000      	b.n	8003c7a <HAL_TIM_OC_Start_IT+0x21a>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c78:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8003c7a:	230f      	movs	r3, #15
 8003c7c:	18fb      	adds	r3, r7, r3
 8003c7e:	781b      	ldrb	r3, [r3, #0]
}
 8003c80:	0018      	movs	r0, r3
 8003c82:	46bd      	mov	sp, r7
 8003c84:	b004      	add	sp, #16
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	40012c00 	.word	0x40012c00
 8003c8c:	40014400 	.word	0x40014400
 8003c90:	40014800 	.word	0x40014800
 8003c94:	40000400 	.word	0x40000400
 8003c98:	00010007 	.word	0x00010007

08003c9c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e04a      	b.n	8003d44 <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	223d      	movs	r2, #61	@ 0x3d
 8003cb2:	5c9b      	ldrb	r3, [r3, r2]
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d107      	bne.n	8003cca <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	223c      	movs	r2, #60	@ 0x3c
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	0018      	movs	r0, r3
 8003cc6:	f7fe fafb 	bl	80022c0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	223d      	movs	r2, #61	@ 0x3d
 8003cce:	2102      	movs	r1, #2
 8003cd0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	3304      	adds	r3, #4
 8003cda:	0019      	movs	r1, r3
 8003cdc:	0010      	movs	r0, r2
 8003cde:	f000 fc85 	bl	80045ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2248      	movs	r2, #72	@ 0x48
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	223e      	movs	r2, #62	@ 0x3e
 8003cee:	2101      	movs	r1, #1
 8003cf0:	5499      	strb	r1, [r3, r2]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	223f      	movs	r2, #63	@ 0x3f
 8003cf6:	2101      	movs	r1, #1
 8003cf8:	5499      	strb	r1, [r3, r2]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2240      	movs	r2, #64	@ 0x40
 8003cfe:	2101      	movs	r1, #1
 8003d00:	5499      	strb	r1, [r3, r2]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2241      	movs	r2, #65	@ 0x41
 8003d06:	2101      	movs	r1, #1
 8003d08:	5499      	strb	r1, [r3, r2]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2242      	movs	r2, #66	@ 0x42
 8003d0e:	2101      	movs	r1, #1
 8003d10:	5499      	strb	r1, [r3, r2]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2243      	movs	r2, #67	@ 0x43
 8003d16:	2101      	movs	r1, #1
 8003d18:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2244      	movs	r2, #68	@ 0x44
 8003d1e:	2101      	movs	r1, #1
 8003d20:	5499      	strb	r1, [r3, r2]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2245      	movs	r2, #69	@ 0x45
 8003d26:	2101      	movs	r1, #1
 8003d28:	5499      	strb	r1, [r3, r2]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2246      	movs	r2, #70	@ 0x46
 8003d2e:	2101      	movs	r1, #1
 8003d30:	5499      	strb	r1, [r3, r2]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2247      	movs	r2, #71	@ 0x47
 8003d36:	2101      	movs	r1, #1
 8003d38:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	223d      	movs	r2, #61	@ 0x3d
 8003d3e:	2101      	movs	r1, #1
 8003d40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	0018      	movs	r0, r3
 8003d46:	46bd      	mov	sp, r7
 8003d48:	b002      	add	sp, #8
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d56:	230f      	movs	r3, #15
 8003d58:	18fb      	adds	r3, r7, r3
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d104      	bne.n	8003d6e <HAL_TIM_IC_Start_IT+0x22>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	223e      	movs	r2, #62	@ 0x3e
 8003d68:	5c9b      	ldrb	r3, [r3, r2]
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	e023      	b.n	8003db6 <HAL_TIM_IC_Start_IT+0x6a>
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	2b04      	cmp	r3, #4
 8003d72:	d104      	bne.n	8003d7e <HAL_TIM_IC_Start_IT+0x32>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	223f      	movs	r2, #63	@ 0x3f
 8003d78:	5c9b      	ldrb	r3, [r3, r2]
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	e01b      	b.n	8003db6 <HAL_TIM_IC_Start_IT+0x6a>
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	2b08      	cmp	r3, #8
 8003d82:	d104      	bne.n	8003d8e <HAL_TIM_IC_Start_IT+0x42>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2240      	movs	r2, #64	@ 0x40
 8003d88:	5c9b      	ldrb	r3, [r3, r2]
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	e013      	b.n	8003db6 <HAL_TIM_IC_Start_IT+0x6a>
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	2b0c      	cmp	r3, #12
 8003d92:	d104      	bne.n	8003d9e <HAL_TIM_IC_Start_IT+0x52>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2241      	movs	r2, #65	@ 0x41
 8003d98:	5c9b      	ldrb	r3, [r3, r2]
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	e00b      	b.n	8003db6 <HAL_TIM_IC_Start_IT+0x6a>
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	2b10      	cmp	r3, #16
 8003da2:	d104      	bne.n	8003dae <HAL_TIM_IC_Start_IT+0x62>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2242      	movs	r2, #66	@ 0x42
 8003da8:	5c9b      	ldrb	r3, [r3, r2]
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	e003      	b.n	8003db6 <HAL_TIM_IC_Start_IT+0x6a>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2243      	movs	r2, #67	@ 0x43
 8003db2:	5c9b      	ldrb	r3, [r3, r2]
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	220e      	movs	r2, #14
 8003db8:	18ba      	adds	r2, r7, r2
 8003dba:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d104      	bne.n	8003dcc <HAL_TIM_IC_Start_IT+0x80>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2244      	movs	r2, #68	@ 0x44
 8003dc6:	5c9b      	ldrb	r3, [r3, r2]
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	e013      	b.n	8003df4 <HAL_TIM_IC_Start_IT+0xa8>
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	2b04      	cmp	r3, #4
 8003dd0:	d104      	bne.n	8003ddc <HAL_TIM_IC_Start_IT+0x90>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2245      	movs	r2, #69	@ 0x45
 8003dd6:	5c9b      	ldrb	r3, [r3, r2]
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	e00b      	b.n	8003df4 <HAL_TIM_IC_Start_IT+0xa8>
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	2b08      	cmp	r3, #8
 8003de0:	d104      	bne.n	8003dec <HAL_TIM_IC_Start_IT+0xa0>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2246      	movs	r2, #70	@ 0x46
 8003de6:	5c9b      	ldrb	r3, [r3, r2]
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	e003      	b.n	8003df4 <HAL_TIM_IC_Start_IT+0xa8>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2247      	movs	r2, #71	@ 0x47
 8003df0:	5c9b      	ldrb	r3, [r3, r2]
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	210d      	movs	r1, #13
 8003df6:	187a      	adds	r2, r7, r1
 8003df8:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003dfa:	230e      	movs	r3, #14
 8003dfc:	18fb      	adds	r3, r7, r3
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d103      	bne.n	8003e0c <HAL_TIM_IC_Start_IT+0xc0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e04:	187b      	adds	r3, r7, r1
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d001      	beq.n	8003e10 <HAL_TIM_IC_Start_IT+0xc4>
  {
    return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e0bd      	b.n	8003f8c <HAL_TIM_IC_Start_IT+0x240>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d104      	bne.n	8003e20 <HAL_TIM_IC_Start_IT+0xd4>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	223e      	movs	r2, #62	@ 0x3e
 8003e1a:	2102      	movs	r1, #2
 8003e1c:	5499      	strb	r1, [r3, r2]
 8003e1e:	e023      	b.n	8003e68 <HAL_TIM_IC_Start_IT+0x11c>
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	2b04      	cmp	r3, #4
 8003e24:	d104      	bne.n	8003e30 <HAL_TIM_IC_Start_IT+0xe4>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	223f      	movs	r2, #63	@ 0x3f
 8003e2a:	2102      	movs	r1, #2
 8003e2c:	5499      	strb	r1, [r3, r2]
 8003e2e:	e01b      	b.n	8003e68 <HAL_TIM_IC_Start_IT+0x11c>
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	2b08      	cmp	r3, #8
 8003e34:	d104      	bne.n	8003e40 <HAL_TIM_IC_Start_IT+0xf4>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2240      	movs	r2, #64	@ 0x40
 8003e3a:	2102      	movs	r1, #2
 8003e3c:	5499      	strb	r1, [r3, r2]
 8003e3e:	e013      	b.n	8003e68 <HAL_TIM_IC_Start_IT+0x11c>
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	2b0c      	cmp	r3, #12
 8003e44:	d104      	bne.n	8003e50 <HAL_TIM_IC_Start_IT+0x104>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2241      	movs	r2, #65	@ 0x41
 8003e4a:	2102      	movs	r1, #2
 8003e4c:	5499      	strb	r1, [r3, r2]
 8003e4e:	e00b      	b.n	8003e68 <HAL_TIM_IC_Start_IT+0x11c>
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	2b10      	cmp	r3, #16
 8003e54:	d104      	bne.n	8003e60 <HAL_TIM_IC_Start_IT+0x114>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2242      	movs	r2, #66	@ 0x42
 8003e5a:	2102      	movs	r1, #2
 8003e5c:	5499      	strb	r1, [r3, r2]
 8003e5e:	e003      	b.n	8003e68 <HAL_TIM_IC_Start_IT+0x11c>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2243      	movs	r2, #67	@ 0x43
 8003e64:	2102      	movs	r1, #2
 8003e66:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d104      	bne.n	8003e78 <HAL_TIM_IC_Start_IT+0x12c>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2244      	movs	r2, #68	@ 0x44
 8003e72:	2102      	movs	r1, #2
 8003e74:	5499      	strb	r1, [r3, r2]
 8003e76:	e013      	b.n	8003ea0 <HAL_TIM_IC_Start_IT+0x154>
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	2b04      	cmp	r3, #4
 8003e7c:	d104      	bne.n	8003e88 <HAL_TIM_IC_Start_IT+0x13c>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2245      	movs	r2, #69	@ 0x45
 8003e82:	2102      	movs	r1, #2
 8003e84:	5499      	strb	r1, [r3, r2]
 8003e86:	e00b      	b.n	8003ea0 <HAL_TIM_IC_Start_IT+0x154>
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	2b08      	cmp	r3, #8
 8003e8c:	d104      	bne.n	8003e98 <HAL_TIM_IC_Start_IT+0x14c>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2246      	movs	r2, #70	@ 0x46
 8003e92:	2102      	movs	r1, #2
 8003e94:	5499      	strb	r1, [r3, r2]
 8003e96:	e003      	b.n	8003ea0 <HAL_TIM_IC_Start_IT+0x154>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2247      	movs	r2, #71	@ 0x47
 8003e9c:	2102      	movs	r1, #2
 8003e9e:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	2b0c      	cmp	r3, #12
 8003ea4:	d02a      	beq.n	8003efc <HAL_TIM_IC_Start_IT+0x1b0>
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	2b0c      	cmp	r3, #12
 8003eaa:	d830      	bhi.n	8003f0e <HAL_TIM_IC_Start_IT+0x1c2>
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	2b08      	cmp	r3, #8
 8003eb0:	d01b      	beq.n	8003eea <HAL_TIM_IC_Start_IT+0x19e>
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	2b08      	cmp	r3, #8
 8003eb6:	d82a      	bhi.n	8003f0e <HAL_TIM_IC_Start_IT+0x1c2>
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d003      	beq.n	8003ec6 <HAL_TIM_IC_Start_IT+0x17a>
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	2b04      	cmp	r3, #4
 8003ec2:	d009      	beq.n	8003ed8 <HAL_TIM_IC_Start_IT+0x18c>
 8003ec4:	e023      	b.n	8003f0e <HAL_TIM_IC_Start_IT+0x1c2>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68da      	ldr	r2, [r3, #12]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2102      	movs	r1, #2
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	60da      	str	r2, [r3, #12]
      break;
 8003ed6:	e01f      	b.n	8003f18 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68da      	ldr	r2, [r3, #12]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2104      	movs	r1, #4
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	60da      	str	r2, [r3, #12]
      break;
 8003ee8:	e016      	b.n	8003f18 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68da      	ldr	r2, [r3, #12]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2108      	movs	r1, #8
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	60da      	str	r2, [r3, #12]
      break;
 8003efa:	e00d      	b.n	8003f18 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68da      	ldr	r2, [r3, #12]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2110      	movs	r1, #16
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	60da      	str	r2, [r3, #12]
      break;
 8003f0c:	e004      	b.n	8003f18 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    default:
      status = HAL_ERROR;
 8003f0e:	230f      	movs	r3, #15
 8003f10:	18fb      	adds	r3, r7, r3
 8003f12:	2201      	movs	r2, #1
 8003f14:	701a      	strb	r2, [r3, #0]
      break;
 8003f16:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8003f18:	230f      	movs	r3, #15
 8003f1a:	18fb      	adds	r3, r7, r3
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d131      	bne.n	8003f86 <HAL_TIM_IC_Start_IT+0x23a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	6839      	ldr	r1, [r7, #0]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	0018      	movs	r0, r3
 8003f2c:	f001 f82a 	bl	8004f84 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a17      	ldr	r2, [pc, #92]	@ (8003f94 <HAL_TIM_IC_Start_IT+0x248>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d004      	beq.n	8003f44 <HAL_TIM_IC_Start_IT+0x1f8>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a16      	ldr	r2, [pc, #88]	@ (8003f98 <HAL_TIM_IC_Start_IT+0x24c>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d116      	bne.n	8003f72 <HAL_TIM_IC_Start_IT+0x226>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	4a14      	ldr	r2, [pc, #80]	@ (8003f9c <HAL_TIM_IC_Start_IT+0x250>)
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	2b06      	cmp	r3, #6
 8003f54:	d016      	beq.n	8003f84 <HAL_TIM_IC_Start_IT+0x238>
 8003f56:	68ba      	ldr	r2, [r7, #8]
 8003f58:	2380      	movs	r3, #128	@ 0x80
 8003f5a:	025b      	lsls	r3, r3, #9
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d011      	beq.n	8003f84 <HAL_TIM_IC_Start_IT+0x238>
      {
        __HAL_TIM_ENABLE(htim);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2101      	movs	r1, #1
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f70:	e008      	b.n	8003f84 <HAL_TIM_IC_Start_IT+0x238>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2101      	movs	r1, #1
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	601a      	str	r2, [r3, #0]
 8003f82:	e000      	b.n	8003f86 <HAL_TIM_IC_Start_IT+0x23a>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f84:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8003f86:	230f      	movs	r3, #15
 8003f88:	18fb      	adds	r3, r7, r3
 8003f8a:	781b      	ldrb	r3, [r3, #0]
}
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	b004      	add	sp, #16
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	40012c00 	.word	0x40012c00
 8003f98:	40000400 	.word	0x40000400
 8003f9c:	00010007 	.word	0x00010007

08003fa0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	2202      	movs	r2, #2
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	d021      	beq.n	8004004 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	d01d      	beq.n	8004004 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2203      	movs	r2, #3
 8003fce:	4252      	negs	r2, r2
 8003fd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	2203      	movs	r2, #3
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	d004      	beq.n	8003fee <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	0018      	movs	r0, r3
 8003fe8:	f7fe f826 	bl	8002038 <HAL_TIM_IC_CaptureCallback>
 8003fec:	e007      	b.n	8003ffe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	0018      	movs	r0, r3
 8003ff2:	f7fd fdc9 	bl	8001b88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	0018      	movs	r0, r3
 8003ffa:	f000 fae7 	bl	80045cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	2204      	movs	r2, #4
 8004008:	4013      	ands	r3, r2
 800400a:	d022      	beq.n	8004052 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2204      	movs	r2, #4
 8004010:	4013      	ands	r3, r2
 8004012:	d01e      	beq.n	8004052 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2205      	movs	r2, #5
 800401a:	4252      	negs	r2, r2
 800401c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2202      	movs	r2, #2
 8004022:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	699a      	ldr	r2, [r3, #24]
 800402a:	23c0      	movs	r3, #192	@ 0xc0
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	4013      	ands	r3, r2
 8004030:	d004      	beq.n	800403c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	0018      	movs	r0, r3
 8004036:	f7fd ffff 	bl	8002038 <HAL_TIM_IC_CaptureCallback>
 800403a:	e007      	b.n	800404c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	0018      	movs	r0, r3
 8004040:	f7fd fda2 	bl	8001b88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	0018      	movs	r0, r3
 8004048:	f000 fac0 	bl	80045cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	2208      	movs	r2, #8
 8004056:	4013      	ands	r3, r2
 8004058:	d021      	beq.n	800409e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2208      	movs	r2, #8
 800405e:	4013      	ands	r3, r2
 8004060:	d01d      	beq.n	800409e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2209      	movs	r2, #9
 8004068:	4252      	negs	r2, r2
 800406a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2204      	movs	r2, #4
 8004070:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	69db      	ldr	r3, [r3, #28]
 8004078:	2203      	movs	r2, #3
 800407a:	4013      	ands	r3, r2
 800407c:	d004      	beq.n	8004088 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	0018      	movs	r0, r3
 8004082:	f7fd ffd9 	bl	8002038 <HAL_TIM_IC_CaptureCallback>
 8004086:	e007      	b.n	8004098 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	0018      	movs	r0, r3
 800408c:	f7fd fd7c 	bl	8001b88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	0018      	movs	r0, r3
 8004094:	f000 fa9a 	bl	80045cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	2210      	movs	r2, #16
 80040a2:	4013      	ands	r3, r2
 80040a4:	d022      	beq.n	80040ec <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2210      	movs	r2, #16
 80040aa:	4013      	ands	r3, r2
 80040ac:	d01e      	beq.n	80040ec <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2211      	movs	r2, #17
 80040b4:	4252      	negs	r2, r2
 80040b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2208      	movs	r2, #8
 80040bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	69da      	ldr	r2, [r3, #28]
 80040c4:	23c0      	movs	r3, #192	@ 0xc0
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	4013      	ands	r3, r2
 80040ca:	d004      	beq.n	80040d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	0018      	movs	r0, r3
 80040d0:	f7fd ffb2 	bl	8002038 <HAL_TIM_IC_CaptureCallback>
 80040d4:	e007      	b.n	80040e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	0018      	movs	r0, r3
 80040da:	f7fd fd55 	bl	8001b88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	0018      	movs	r0, r3
 80040e2:	f000 fa73 	bl	80045cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	2201      	movs	r2, #1
 80040f0:	4013      	ands	r3, r2
 80040f2:	d00c      	beq.n	800410e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2201      	movs	r2, #1
 80040f8:	4013      	ands	r3, r2
 80040fa:	d008      	beq.n	800410e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2202      	movs	r2, #2
 8004102:	4252      	negs	r2, r2
 8004104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	0018      	movs	r0, r3
 800410a:	f7fe f86d 	bl	80021e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	2280      	movs	r2, #128	@ 0x80
 8004112:	4013      	ands	r3, r2
 8004114:	d104      	bne.n	8004120 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004116:	68ba      	ldr	r2, [r7, #8]
 8004118:	2380      	movs	r3, #128	@ 0x80
 800411a:	019b      	lsls	r3, r3, #6
 800411c:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800411e:	d00b      	beq.n	8004138 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2280      	movs	r2, #128	@ 0x80
 8004124:	4013      	ands	r3, r2
 8004126:	d007      	beq.n	8004138 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a1e      	ldr	r2, [pc, #120]	@ (80041a8 <HAL_TIM_IRQHandler+0x208>)
 800412e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	0018      	movs	r0, r3
 8004134:	f000 ffb4 	bl	80050a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004138:	68ba      	ldr	r2, [r7, #8]
 800413a:	2380      	movs	r3, #128	@ 0x80
 800413c:	005b      	lsls	r3, r3, #1
 800413e:	4013      	ands	r3, r2
 8004140:	d00b      	beq.n	800415a <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2280      	movs	r2, #128	@ 0x80
 8004146:	4013      	ands	r3, r2
 8004148:	d007      	beq.n	800415a <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a17      	ldr	r2, [pc, #92]	@ (80041ac <HAL_TIM_IRQHandler+0x20c>)
 8004150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	0018      	movs	r0, r3
 8004156:	f000 ffab 	bl	80050b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	2240      	movs	r2, #64	@ 0x40
 800415e:	4013      	ands	r3, r2
 8004160:	d00c      	beq.n	800417c <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2240      	movs	r2, #64	@ 0x40
 8004166:	4013      	ands	r3, r2
 8004168:	d008      	beq.n	800417c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2241      	movs	r2, #65	@ 0x41
 8004170:	4252      	negs	r2, r2
 8004172:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	0018      	movs	r0, r3
 8004178:	f000 fa30 	bl	80045dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	2220      	movs	r2, #32
 8004180:	4013      	ands	r3, r2
 8004182:	d00c      	beq.n	800419e <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2220      	movs	r2, #32
 8004188:	4013      	ands	r3, r2
 800418a:	d008      	beq.n	800419e <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2221      	movs	r2, #33	@ 0x21
 8004192:	4252      	negs	r2, r2
 8004194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	0018      	movs	r0, r3
 800419a:	f000 ff79 	bl	8005090 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800419e:	46c0      	nop			@ (mov r8, r8)
 80041a0:	46bd      	mov	sp, r7
 80041a2:	b004      	add	sp, #16
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	46c0      	nop			@ (mov r8, r8)
 80041a8:	ffffdf7f 	.word	0xffffdf7f
 80041ac:	fffffeff 	.word	0xfffffeff

080041b0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041bc:	2317      	movs	r3, #23
 80041be:	18fb      	adds	r3, r7, r3
 80041c0:	2200      	movs	r2, #0
 80041c2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	223c      	movs	r2, #60	@ 0x3c
 80041c8:	5c9b      	ldrb	r3, [r3, r2]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d101      	bne.n	80041d2 <HAL_TIM_OC_ConfigChannel+0x22>
 80041ce:	2302      	movs	r3, #2
 80041d0:	e048      	b.n	8004264 <HAL_TIM_OC_ConfigChannel+0xb4>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	223c      	movs	r2, #60	@ 0x3c
 80041d6:	2101      	movs	r1, #1
 80041d8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2b14      	cmp	r3, #20
 80041de:	d835      	bhi.n	800424c <HAL_TIM_OC_ConfigChannel+0x9c>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	009a      	lsls	r2, r3, #2
 80041e4:	4b21      	ldr	r3, [pc, #132]	@ (800426c <HAL_TIM_OC_ConfigChannel+0xbc>)
 80041e6:	18d3      	adds	r3, r2, r3
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68ba      	ldr	r2, [r7, #8]
 80041f2:	0011      	movs	r1, r2
 80041f4:	0018      	movs	r0, r3
 80041f6:	f000 fa73 	bl	80046e0 <TIM_OC1_SetConfig>
      break;
 80041fa:	e02c      	b.n	8004256 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68ba      	ldr	r2, [r7, #8]
 8004202:	0011      	movs	r1, r2
 8004204:	0018      	movs	r0, r3
 8004206:	f000 faeb 	bl	80047e0 <TIM_OC2_SetConfig>
      break;
 800420a:	e024      	b.n	8004256 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68ba      	ldr	r2, [r7, #8]
 8004212:	0011      	movs	r1, r2
 8004214:	0018      	movs	r0, r3
 8004216:	f000 fb61 	bl	80048dc <TIM_OC3_SetConfig>
      break;
 800421a:	e01c      	b.n	8004256 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68ba      	ldr	r2, [r7, #8]
 8004222:	0011      	movs	r1, r2
 8004224:	0018      	movs	r0, r3
 8004226:	f000 fbdb 	bl	80049e0 <TIM_OC4_SetConfig>
      break;
 800422a:	e014      	b.n	8004256 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68ba      	ldr	r2, [r7, #8]
 8004232:	0011      	movs	r1, r2
 8004234:	0018      	movs	r0, r3
 8004236:	f000 fc37 	bl	8004aa8 <TIM_OC5_SetConfig>
      break;
 800423a:	e00c      	b.n	8004256 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68ba      	ldr	r2, [r7, #8]
 8004242:	0011      	movs	r1, r2
 8004244:	0018      	movs	r0, r3
 8004246:	f000 fc89 	bl	8004b5c <TIM_OC6_SetConfig>
      break;
 800424a:	e004      	b.n	8004256 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800424c:	2317      	movs	r3, #23
 800424e:	18fb      	adds	r3, r7, r3
 8004250:	2201      	movs	r2, #1
 8004252:	701a      	strb	r2, [r3, #0]
      break;
 8004254:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	223c      	movs	r2, #60	@ 0x3c
 800425a:	2100      	movs	r1, #0
 800425c:	5499      	strb	r1, [r3, r2]

  return status;
 800425e:	2317      	movs	r3, #23
 8004260:	18fb      	adds	r3, r7, r3
 8004262:	781b      	ldrb	r3, [r3, #0]
}
 8004264:	0018      	movs	r0, r3
 8004266:	46bd      	mov	sp, r7
 8004268:	b006      	add	sp, #24
 800426a:	bd80      	pop	{r7, pc}
 800426c:	08007e7c 	.word	0x08007e7c

08004270 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800427c:	2317      	movs	r3, #23
 800427e:	18fb      	adds	r3, r7, r3
 8004280:	2200      	movs	r2, #0
 8004282:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	223c      	movs	r2, #60	@ 0x3c
 8004288:	5c9b      	ldrb	r3, [r3, r2]
 800428a:	2b01      	cmp	r3, #1
 800428c:	d101      	bne.n	8004292 <HAL_TIM_IC_ConfigChannel+0x22>
 800428e:	2302      	movs	r3, #2
 8004290:	e08c      	b.n	80043ac <HAL_TIM_IC_ConfigChannel+0x13c>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	223c      	movs	r2, #60	@ 0x3c
 8004296:	2101      	movs	r1, #1
 8004298:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d11b      	bne.n	80042d8 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80042b0:	f000 fcb2 	bl	8004c18 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	699a      	ldr	r2, [r3, #24]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	210c      	movs	r1, #12
 80042c0:	438a      	bics	r2, r1
 80042c2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6999      	ldr	r1, [r3, #24]
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	689a      	ldr	r2, [r3, #8]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	430a      	orrs	r2, r1
 80042d4:	619a      	str	r2, [r3, #24]
 80042d6:	e062      	b.n	800439e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b04      	cmp	r3, #4
 80042dc:	d11c      	bne.n	8004318 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80042ee:	f000 fd13 	bl	8004d18 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	699a      	ldr	r2, [r3, #24]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	492d      	ldr	r1, [pc, #180]	@ (80043b4 <HAL_TIM_IC_ConfigChannel+0x144>)
 80042fe:	400a      	ands	r2, r1
 8004300:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	6999      	ldr	r1, [r3, #24]
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	021a      	lsls	r2, r3, #8
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	430a      	orrs	r2, r1
 8004314:	619a      	str	r2, [r3, #24]
 8004316:	e042      	b.n	800439e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b08      	cmp	r3, #8
 800431c:	d11b      	bne.n	8004356 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800432e:	f000 fd67 	bl	8004e00 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	69da      	ldr	r2, [r3, #28]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	210c      	movs	r1, #12
 800433e:	438a      	bics	r2, r1
 8004340:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	69d9      	ldr	r1, [r3, #28]
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	689a      	ldr	r2, [r3, #8]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	430a      	orrs	r2, r1
 8004352:	61da      	str	r2, [r3, #28]
 8004354:	e023      	b.n	800439e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2b0c      	cmp	r3, #12
 800435a:	d11c      	bne.n	8004396 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800436c:	f000 fd88 	bl	8004e80 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	69da      	ldr	r2, [r3, #28]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	490e      	ldr	r1, [pc, #56]	@ (80043b4 <HAL_TIM_IC_ConfigChannel+0x144>)
 800437c:	400a      	ands	r2, r1
 800437e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	69d9      	ldr	r1, [r3, #28]
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	021a      	lsls	r2, r3, #8
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	430a      	orrs	r2, r1
 8004392:	61da      	str	r2, [r3, #28]
 8004394:	e003      	b.n	800439e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8004396:	2317      	movs	r3, #23
 8004398:	18fb      	adds	r3, r7, r3
 800439a:	2201      	movs	r2, #1
 800439c:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	223c      	movs	r2, #60	@ 0x3c
 80043a2:	2100      	movs	r1, #0
 80043a4:	5499      	strb	r1, [r3, r2]

  return status;
 80043a6:	2317      	movs	r3, #23
 80043a8:	18fb      	adds	r3, r7, r3
 80043aa:	781b      	ldrb	r3, [r3, #0]
}
 80043ac:	0018      	movs	r0, r3
 80043ae:	46bd      	mov	sp, r7
 80043b0:	b006      	add	sp, #24
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	fffff3ff 	.word	0xfffff3ff

080043b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043c2:	230f      	movs	r3, #15
 80043c4:	18fb      	adds	r3, r7, r3
 80043c6:	2200      	movs	r2, #0
 80043c8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	223c      	movs	r2, #60	@ 0x3c
 80043ce:	5c9b      	ldrb	r3, [r3, r2]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d101      	bne.n	80043d8 <HAL_TIM_ConfigClockSource+0x20>
 80043d4:	2302      	movs	r3, #2
 80043d6:	e0bc      	b.n	8004552 <HAL_TIM_ConfigClockSource+0x19a>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	223c      	movs	r2, #60	@ 0x3c
 80043dc:	2101      	movs	r1, #1
 80043de:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	223d      	movs	r2, #61	@ 0x3d
 80043e4:	2102      	movs	r1, #2
 80043e6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	4a5a      	ldr	r2, [pc, #360]	@ (800455c <HAL_TIM_ConfigClockSource+0x1a4>)
 80043f4:	4013      	ands	r3, r2
 80043f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	4a59      	ldr	r2, [pc, #356]	@ (8004560 <HAL_TIM_ConfigClockSource+0x1a8>)
 80043fc:	4013      	ands	r3, r2
 80043fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68ba      	ldr	r2, [r7, #8]
 8004406:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2280      	movs	r2, #128	@ 0x80
 800440e:	0192      	lsls	r2, r2, #6
 8004410:	4293      	cmp	r3, r2
 8004412:	d040      	beq.n	8004496 <HAL_TIM_ConfigClockSource+0xde>
 8004414:	2280      	movs	r2, #128	@ 0x80
 8004416:	0192      	lsls	r2, r2, #6
 8004418:	4293      	cmp	r3, r2
 800441a:	d900      	bls.n	800441e <HAL_TIM_ConfigClockSource+0x66>
 800441c:	e088      	b.n	8004530 <HAL_TIM_ConfigClockSource+0x178>
 800441e:	2280      	movs	r2, #128	@ 0x80
 8004420:	0152      	lsls	r2, r2, #5
 8004422:	4293      	cmp	r3, r2
 8004424:	d100      	bne.n	8004428 <HAL_TIM_ConfigClockSource+0x70>
 8004426:	e088      	b.n	800453a <HAL_TIM_ConfigClockSource+0x182>
 8004428:	2280      	movs	r2, #128	@ 0x80
 800442a:	0152      	lsls	r2, r2, #5
 800442c:	4293      	cmp	r3, r2
 800442e:	d900      	bls.n	8004432 <HAL_TIM_ConfigClockSource+0x7a>
 8004430:	e07e      	b.n	8004530 <HAL_TIM_ConfigClockSource+0x178>
 8004432:	2b70      	cmp	r3, #112	@ 0x70
 8004434:	d018      	beq.n	8004468 <HAL_TIM_ConfigClockSource+0xb0>
 8004436:	d900      	bls.n	800443a <HAL_TIM_ConfigClockSource+0x82>
 8004438:	e07a      	b.n	8004530 <HAL_TIM_ConfigClockSource+0x178>
 800443a:	2b60      	cmp	r3, #96	@ 0x60
 800443c:	d04f      	beq.n	80044de <HAL_TIM_ConfigClockSource+0x126>
 800443e:	d900      	bls.n	8004442 <HAL_TIM_ConfigClockSource+0x8a>
 8004440:	e076      	b.n	8004530 <HAL_TIM_ConfigClockSource+0x178>
 8004442:	2b50      	cmp	r3, #80	@ 0x50
 8004444:	d03b      	beq.n	80044be <HAL_TIM_ConfigClockSource+0x106>
 8004446:	d900      	bls.n	800444a <HAL_TIM_ConfigClockSource+0x92>
 8004448:	e072      	b.n	8004530 <HAL_TIM_ConfigClockSource+0x178>
 800444a:	2b40      	cmp	r3, #64	@ 0x40
 800444c:	d057      	beq.n	80044fe <HAL_TIM_ConfigClockSource+0x146>
 800444e:	d900      	bls.n	8004452 <HAL_TIM_ConfigClockSource+0x9a>
 8004450:	e06e      	b.n	8004530 <HAL_TIM_ConfigClockSource+0x178>
 8004452:	2b30      	cmp	r3, #48	@ 0x30
 8004454:	d063      	beq.n	800451e <HAL_TIM_ConfigClockSource+0x166>
 8004456:	d86b      	bhi.n	8004530 <HAL_TIM_ConfigClockSource+0x178>
 8004458:	2b20      	cmp	r3, #32
 800445a:	d060      	beq.n	800451e <HAL_TIM_ConfigClockSource+0x166>
 800445c:	d868      	bhi.n	8004530 <HAL_TIM_ConfigClockSource+0x178>
 800445e:	2b00      	cmp	r3, #0
 8004460:	d05d      	beq.n	800451e <HAL_TIM_ConfigClockSource+0x166>
 8004462:	2b10      	cmp	r3, #16
 8004464:	d05b      	beq.n	800451e <HAL_TIM_ConfigClockSource+0x166>
 8004466:	e063      	b.n	8004530 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004478:	f000 fd64 	bl	8004f44 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	2277      	movs	r2, #119	@ 0x77
 8004488:	4313      	orrs	r3, r2
 800448a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68ba      	ldr	r2, [r7, #8]
 8004492:	609a      	str	r2, [r3, #8]
      break;
 8004494:	e052      	b.n	800453c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044a6:	f000 fd4d 	bl	8004f44 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	689a      	ldr	r2, [r3, #8]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2180      	movs	r1, #128	@ 0x80
 80044b6:	01c9      	lsls	r1, r1, #7
 80044b8:	430a      	orrs	r2, r1
 80044ba:	609a      	str	r2, [r3, #8]
      break;
 80044bc:	e03e      	b.n	800453c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044ca:	001a      	movs	r2, r3
 80044cc:	f000 fbf6 	bl	8004cbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2150      	movs	r1, #80	@ 0x50
 80044d6:	0018      	movs	r0, r3
 80044d8:	f000 fd18 	bl	8004f0c <TIM_ITRx_SetConfig>
      break;
 80044dc:	e02e      	b.n	800453c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044ea:	001a      	movs	r2, r3
 80044ec:	f000 fc56 	bl	8004d9c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2160      	movs	r1, #96	@ 0x60
 80044f6:	0018      	movs	r0, r3
 80044f8:	f000 fd08 	bl	8004f0c <TIM_ITRx_SetConfig>
      break;
 80044fc:	e01e      	b.n	800453c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800450a:	001a      	movs	r2, r3
 800450c:	f000 fbd6 	bl	8004cbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2140      	movs	r1, #64	@ 0x40
 8004516:	0018      	movs	r0, r3
 8004518:	f000 fcf8 	bl	8004f0c <TIM_ITRx_SetConfig>
      break;
 800451c:	e00e      	b.n	800453c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	0019      	movs	r1, r3
 8004528:	0010      	movs	r0, r2
 800452a:	f000 fcef 	bl	8004f0c <TIM_ITRx_SetConfig>
      break;
 800452e:	e005      	b.n	800453c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004530:	230f      	movs	r3, #15
 8004532:	18fb      	adds	r3, r7, r3
 8004534:	2201      	movs	r2, #1
 8004536:	701a      	strb	r2, [r3, #0]
      break;
 8004538:	e000      	b.n	800453c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800453a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	223d      	movs	r2, #61	@ 0x3d
 8004540:	2101      	movs	r1, #1
 8004542:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	223c      	movs	r2, #60	@ 0x3c
 8004548:	2100      	movs	r1, #0
 800454a:	5499      	strb	r1, [r3, r2]

  return status;
 800454c:	230f      	movs	r3, #15
 800454e:	18fb      	adds	r3, r7, r3
 8004550:	781b      	ldrb	r3, [r3, #0]
}
 8004552:	0018      	movs	r0, r3
 8004554:	46bd      	mov	sp, r7
 8004556:	b004      	add	sp, #16
 8004558:	bd80      	pop	{r7, pc}
 800455a:	46c0      	nop			@ (mov r8, r8)
 800455c:	ffceff88 	.word	0xffceff88
 8004560:	ffff00ff 	.word	0xffff00ff

08004564 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800456e:	2300      	movs	r3, #0
 8004570:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	2b0c      	cmp	r3, #12
 8004576:	d01e      	beq.n	80045b6 <HAL_TIM_ReadCapturedValue+0x52>
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	2b0c      	cmp	r3, #12
 800457c:	d820      	bhi.n	80045c0 <HAL_TIM_ReadCapturedValue+0x5c>
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	2b08      	cmp	r3, #8
 8004582:	d013      	beq.n	80045ac <HAL_TIM_ReadCapturedValue+0x48>
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	2b08      	cmp	r3, #8
 8004588:	d81a      	bhi.n	80045c0 <HAL_TIM_ReadCapturedValue+0x5c>
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d003      	beq.n	8004598 <HAL_TIM_ReadCapturedValue+0x34>
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	2b04      	cmp	r3, #4
 8004594:	d005      	beq.n	80045a2 <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 8004596:	e013      	b.n	80045c0 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800459e:	60fb      	str	r3, [r7, #12]
      break;
 80045a0:	e00f      	b.n	80045c2 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045a8:	60fb      	str	r3, [r7, #12]
      break;
 80045aa:	e00a      	b.n	80045c2 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045b2:	60fb      	str	r3, [r7, #12]
      break;
 80045b4:	e005      	b.n	80045c2 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045bc:	60fb      	str	r3, [r7, #12]
      break;
 80045be:	e000      	b.n	80045c2 <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 80045c0:	46c0      	nop			@ (mov r8, r8)
  }

  return tmpreg;
 80045c2:	68fb      	ldr	r3, [r7, #12]
}
 80045c4:	0018      	movs	r0, r3
 80045c6:	46bd      	mov	sp, r7
 80045c8:	b004      	add	sp, #16
 80045ca:	bd80      	pop	{r7, pc}

080045cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045d4:	46c0      	nop			@ (mov r8, r8)
 80045d6:	46bd      	mov	sp, r7
 80045d8:	b002      	add	sp, #8
 80045da:	bd80      	pop	{r7, pc}

080045dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045e4:	46c0      	nop			@ (mov r8, r8)
 80045e6:	46bd      	mov	sp, r7
 80045e8:	b002      	add	sp, #8
 80045ea:	bd80      	pop	{r7, pc}

080045ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a32      	ldr	r2, [pc, #200]	@ (80046c8 <TIM_Base_SetConfig+0xdc>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d003      	beq.n	800460c <TIM_Base_SetConfig+0x20>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a31      	ldr	r2, [pc, #196]	@ (80046cc <TIM_Base_SetConfig+0xe0>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d108      	bne.n	800461e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2270      	movs	r2, #112	@ 0x70
 8004610:	4393      	bics	r3, r2
 8004612:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	4313      	orrs	r3, r2
 800461c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a29      	ldr	r2, [pc, #164]	@ (80046c8 <TIM_Base_SetConfig+0xdc>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d00f      	beq.n	8004646 <TIM_Base_SetConfig+0x5a>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a28      	ldr	r2, [pc, #160]	@ (80046cc <TIM_Base_SetConfig+0xe0>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d00b      	beq.n	8004646 <TIM_Base_SetConfig+0x5a>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a27      	ldr	r2, [pc, #156]	@ (80046d0 <TIM_Base_SetConfig+0xe4>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d007      	beq.n	8004646 <TIM_Base_SetConfig+0x5a>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a26      	ldr	r2, [pc, #152]	@ (80046d4 <TIM_Base_SetConfig+0xe8>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d003      	beq.n	8004646 <TIM_Base_SetConfig+0x5a>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a25      	ldr	r2, [pc, #148]	@ (80046d8 <TIM_Base_SetConfig+0xec>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d108      	bne.n	8004658 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	4a24      	ldr	r2, [pc, #144]	@ (80046dc <TIM_Base_SetConfig+0xf0>)
 800464a:	4013      	ands	r3, r2
 800464c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	68fa      	ldr	r2, [r7, #12]
 8004654:	4313      	orrs	r3, r2
 8004656:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2280      	movs	r2, #128	@ 0x80
 800465c:	4393      	bics	r3, r2
 800465e:	001a      	movs	r2, r3
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	695b      	ldr	r3, [r3, #20]
 8004664:	4313      	orrs	r3, r2
 8004666:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	689a      	ldr	r2, [r3, #8]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a11      	ldr	r2, [pc, #68]	@ (80046c8 <TIM_Base_SetConfig+0xdc>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d007      	beq.n	8004696 <TIM_Base_SetConfig+0xaa>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a12      	ldr	r2, [pc, #72]	@ (80046d4 <TIM_Base_SetConfig+0xe8>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d003      	beq.n	8004696 <TIM_Base_SetConfig+0xaa>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a11      	ldr	r2, [pc, #68]	@ (80046d8 <TIM_Base_SetConfig+0xec>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d103      	bne.n	800469e <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	691a      	ldr	r2, [r3, #16]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2201      	movs	r2, #1
 80046a2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	2201      	movs	r2, #1
 80046aa:	4013      	ands	r3, r2
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d106      	bne.n	80046be <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	2201      	movs	r2, #1
 80046b6:	4393      	bics	r3, r2
 80046b8:	001a      	movs	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	611a      	str	r2, [r3, #16]
  }
}
 80046be:	46c0      	nop			@ (mov r8, r8)
 80046c0:	46bd      	mov	sp, r7
 80046c2:	b004      	add	sp, #16
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	46c0      	nop			@ (mov r8, r8)
 80046c8:	40012c00 	.word	0x40012c00
 80046cc:	40000400 	.word	0x40000400
 80046d0:	40002000 	.word	0x40002000
 80046d4:	40014400 	.word	0x40014400
 80046d8:	40014800 	.word	0x40014800
 80046dc:	fffffcff 	.word	0xfffffcff

080046e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b086      	sub	sp, #24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a1b      	ldr	r3, [r3, #32]
 80046f4:	2201      	movs	r2, #1
 80046f6:	4393      	bics	r3, r2
 80046f8:	001a      	movs	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	4a2e      	ldr	r2, [pc, #184]	@ (80047c8 <TIM_OC1_SetConfig+0xe8>)
 800470e:	4013      	ands	r3, r2
 8004710:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2203      	movs	r2, #3
 8004716:	4393      	bics	r3, r2
 8004718:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	4313      	orrs	r3, r2
 8004722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	2202      	movs	r2, #2
 8004728:	4393      	bics	r3, r2
 800472a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	4313      	orrs	r3, r2
 8004734:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a24      	ldr	r2, [pc, #144]	@ (80047cc <TIM_OC1_SetConfig+0xec>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d007      	beq.n	800474e <TIM_OC1_SetConfig+0x6e>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a23      	ldr	r2, [pc, #140]	@ (80047d0 <TIM_OC1_SetConfig+0xf0>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d003      	beq.n	800474e <TIM_OC1_SetConfig+0x6e>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a22      	ldr	r2, [pc, #136]	@ (80047d4 <TIM_OC1_SetConfig+0xf4>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d10c      	bne.n	8004768 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	2208      	movs	r2, #8
 8004752:	4393      	bics	r3, r2
 8004754:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	697a      	ldr	r2, [r7, #20]
 800475c:	4313      	orrs	r3, r2
 800475e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	2204      	movs	r2, #4
 8004764:	4393      	bics	r3, r2
 8004766:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a18      	ldr	r2, [pc, #96]	@ (80047cc <TIM_OC1_SetConfig+0xec>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d007      	beq.n	8004780 <TIM_OC1_SetConfig+0xa0>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a17      	ldr	r2, [pc, #92]	@ (80047d0 <TIM_OC1_SetConfig+0xf0>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d003      	beq.n	8004780 <TIM_OC1_SetConfig+0xa0>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a16      	ldr	r2, [pc, #88]	@ (80047d4 <TIM_OC1_SetConfig+0xf4>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d111      	bne.n	80047a4 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	4a15      	ldr	r2, [pc, #84]	@ (80047d8 <TIM_OC1_SetConfig+0xf8>)
 8004784:	4013      	ands	r3, r2
 8004786:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	4a14      	ldr	r2, [pc, #80]	@ (80047dc <TIM_OC1_SetConfig+0xfc>)
 800478c:	4013      	ands	r3, r2
 800478e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	695b      	ldr	r3, [r3, #20]
 8004794:	693a      	ldr	r2, [r7, #16]
 8004796:	4313      	orrs	r3, r2
 8004798:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685a      	ldr	r2, [r3, #4]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	697a      	ldr	r2, [r7, #20]
 80047bc:	621a      	str	r2, [r3, #32]
}
 80047be:	46c0      	nop			@ (mov r8, r8)
 80047c0:	46bd      	mov	sp, r7
 80047c2:	b006      	add	sp, #24
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	46c0      	nop			@ (mov r8, r8)
 80047c8:	fffeff8f 	.word	0xfffeff8f
 80047cc:	40012c00 	.word	0x40012c00
 80047d0:	40014400 	.word	0x40014400
 80047d4:	40014800 	.word	0x40014800
 80047d8:	fffffeff 	.word	0xfffffeff
 80047dc:	fffffdff 	.word	0xfffffdff

080047e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a1b      	ldr	r3, [r3, #32]
 80047f4:	2210      	movs	r2, #16
 80047f6:	4393      	bics	r3, r2
 80047f8:	001a      	movs	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	4a2c      	ldr	r2, [pc, #176]	@ (80048c0 <TIM_OC2_SetConfig+0xe0>)
 800480e:	4013      	ands	r3, r2
 8004810:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	4a2b      	ldr	r2, [pc, #172]	@ (80048c4 <TIM_OC2_SetConfig+0xe4>)
 8004816:	4013      	ands	r3, r2
 8004818:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	021b      	lsls	r3, r3, #8
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	4313      	orrs	r3, r2
 8004824:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	2220      	movs	r2, #32
 800482a:	4393      	bics	r3, r2
 800482c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	011b      	lsls	r3, r3, #4
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	4313      	orrs	r3, r2
 8004838:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a22      	ldr	r2, [pc, #136]	@ (80048c8 <TIM_OC2_SetConfig+0xe8>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d10d      	bne.n	800485e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	2280      	movs	r2, #128	@ 0x80
 8004846:	4393      	bics	r3, r2
 8004848:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	011b      	lsls	r3, r3, #4
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	4313      	orrs	r3, r2
 8004854:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	2240      	movs	r2, #64	@ 0x40
 800485a:	4393      	bics	r3, r2
 800485c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a19      	ldr	r2, [pc, #100]	@ (80048c8 <TIM_OC2_SetConfig+0xe8>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d007      	beq.n	8004876 <TIM_OC2_SetConfig+0x96>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a18      	ldr	r2, [pc, #96]	@ (80048cc <TIM_OC2_SetConfig+0xec>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d003      	beq.n	8004876 <TIM_OC2_SetConfig+0x96>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a17      	ldr	r2, [pc, #92]	@ (80048d0 <TIM_OC2_SetConfig+0xf0>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d113      	bne.n	800489e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	4a16      	ldr	r2, [pc, #88]	@ (80048d4 <TIM_OC2_SetConfig+0xf4>)
 800487a:	4013      	ands	r3, r2
 800487c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	4a15      	ldr	r2, [pc, #84]	@ (80048d8 <TIM_OC2_SetConfig+0xf8>)
 8004882:	4013      	ands	r3, r2
 8004884:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	4313      	orrs	r3, r2
 8004890:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	4313      	orrs	r3, r2
 800489c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	685a      	ldr	r2, [r3, #4]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	697a      	ldr	r2, [r7, #20]
 80048b6:	621a      	str	r2, [r3, #32]
}
 80048b8:	46c0      	nop			@ (mov r8, r8)
 80048ba:	46bd      	mov	sp, r7
 80048bc:	b006      	add	sp, #24
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	feff8fff 	.word	0xfeff8fff
 80048c4:	fffffcff 	.word	0xfffffcff
 80048c8:	40012c00 	.word	0x40012c00
 80048cc:	40014400 	.word	0x40014400
 80048d0:	40014800 	.word	0x40014800
 80048d4:	fffffbff 	.word	0xfffffbff
 80048d8:	fffff7ff 	.word	0xfffff7ff

080048dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b086      	sub	sp, #24
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a1b      	ldr	r3, [r3, #32]
 80048f0:	4a31      	ldr	r2, [pc, #196]	@ (80049b8 <TIM_OC3_SetConfig+0xdc>)
 80048f2:	401a      	ands	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	69db      	ldr	r3, [r3, #28]
 8004902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4a2d      	ldr	r2, [pc, #180]	@ (80049bc <TIM_OC3_SetConfig+0xe0>)
 8004908:	4013      	ands	r3, r2
 800490a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2203      	movs	r2, #3
 8004910:	4393      	bics	r3, r2
 8004912:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	4313      	orrs	r3, r2
 800491c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	4a27      	ldr	r2, [pc, #156]	@ (80049c0 <TIM_OC3_SetConfig+0xe4>)
 8004922:	4013      	ands	r3, r2
 8004924:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	021b      	lsls	r3, r3, #8
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	4313      	orrs	r3, r2
 8004930:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a23      	ldr	r2, [pc, #140]	@ (80049c4 <TIM_OC3_SetConfig+0xe8>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d10d      	bne.n	8004956 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	4a22      	ldr	r2, [pc, #136]	@ (80049c8 <TIM_OC3_SetConfig+0xec>)
 800493e:	4013      	ands	r3, r2
 8004940:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	021b      	lsls	r3, r3, #8
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	4313      	orrs	r3, r2
 800494c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	4a1e      	ldr	r2, [pc, #120]	@ (80049cc <TIM_OC3_SetConfig+0xf0>)
 8004952:	4013      	ands	r3, r2
 8004954:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a1a      	ldr	r2, [pc, #104]	@ (80049c4 <TIM_OC3_SetConfig+0xe8>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d007      	beq.n	800496e <TIM_OC3_SetConfig+0x92>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a1b      	ldr	r2, [pc, #108]	@ (80049d0 <TIM_OC3_SetConfig+0xf4>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d003      	beq.n	800496e <TIM_OC3_SetConfig+0x92>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a1a      	ldr	r2, [pc, #104]	@ (80049d4 <TIM_OC3_SetConfig+0xf8>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d113      	bne.n	8004996 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	4a19      	ldr	r2, [pc, #100]	@ (80049d8 <TIM_OC3_SetConfig+0xfc>)
 8004972:	4013      	ands	r3, r2
 8004974:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	4a18      	ldr	r2, [pc, #96]	@ (80049dc <TIM_OC3_SetConfig+0x100>)
 800497a:	4013      	ands	r3, r2
 800497c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	011b      	lsls	r3, r3, #4
 8004984:	693a      	ldr	r2, [r7, #16]
 8004986:	4313      	orrs	r3, r2
 8004988:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	011b      	lsls	r3, r3, #4
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	4313      	orrs	r3, r2
 8004994:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	693a      	ldr	r2, [r7, #16]
 800499a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	685a      	ldr	r2, [r3, #4]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	621a      	str	r2, [r3, #32]
}
 80049b0:	46c0      	nop			@ (mov r8, r8)
 80049b2:	46bd      	mov	sp, r7
 80049b4:	b006      	add	sp, #24
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	fffffeff 	.word	0xfffffeff
 80049bc:	fffeff8f 	.word	0xfffeff8f
 80049c0:	fffffdff 	.word	0xfffffdff
 80049c4:	40012c00 	.word	0x40012c00
 80049c8:	fffff7ff 	.word	0xfffff7ff
 80049cc:	fffffbff 	.word	0xfffffbff
 80049d0:	40014400 	.word	0x40014400
 80049d4:	40014800 	.word	0x40014800
 80049d8:	ffffefff 	.word	0xffffefff
 80049dc:	ffffdfff 	.word	0xffffdfff

080049e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a1b      	ldr	r3, [r3, #32]
 80049ee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a1b      	ldr	r3, [r3, #32]
 80049f4:	4a24      	ldr	r2, [pc, #144]	@ (8004a88 <TIM_OC4_SetConfig+0xa8>)
 80049f6:	401a      	ands	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	69db      	ldr	r3, [r3, #28]
 8004a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	4a20      	ldr	r2, [pc, #128]	@ (8004a8c <TIM_OC4_SetConfig+0xac>)
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	4a1f      	ldr	r2, [pc, #124]	@ (8004a90 <TIM_OC4_SetConfig+0xb0>)
 8004a14:	4013      	ands	r3, r2
 8004a16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	021b      	lsls	r3, r3, #8
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	4a1b      	ldr	r2, [pc, #108]	@ (8004a94 <TIM_OC4_SetConfig+0xb4>)
 8004a28:	4013      	ands	r3, r2
 8004a2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	031b      	lsls	r3, r3, #12
 8004a32:	693a      	ldr	r2, [r7, #16]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a17      	ldr	r2, [pc, #92]	@ (8004a98 <TIM_OC4_SetConfig+0xb8>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d007      	beq.n	8004a50 <TIM_OC4_SetConfig+0x70>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a16      	ldr	r2, [pc, #88]	@ (8004a9c <TIM_OC4_SetConfig+0xbc>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d003      	beq.n	8004a50 <TIM_OC4_SetConfig+0x70>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a15      	ldr	r2, [pc, #84]	@ (8004aa0 <TIM_OC4_SetConfig+0xc0>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d109      	bne.n	8004a64 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	4a14      	ldr	r2, [pc, #80]	@ (8004aa4 <TIM_OC4_SetConfig+0xc4>)
 8004a54:	4013      	ands	r3, r2
 8004a56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	019b      	lsls	r3, r3, #6
 8004a5e:	697a      	ldr	r2, [r7, #20]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685a      	ldr	r2, [r3, #4]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	621a      	str	r2, [r3, #32]
}
 8004a7e:	46c0      	nop			@ (mov r8, r8)
 8004a80:	46bd      	mov	sp, r7
 8004a82:	b006      	add	sp, #24
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	46c0      	nop			@ (mov r8, r8)
 8004a88:	ffffefff 	.word	0xffffefff
 8004a8c:	feff8fff 	.word	0xfeff8fff
 8004a90:	fffffcff 	.word	0xfffffcff
 8004a94:	ffffdfff 	.word	0xffffdfff
 8004a98:	40012c00 	.word	0x40012c00
 8004a9c:	40014400 	.word	0x40014400
 8004aa0:	40014800 	.word	0x40014800
 8004aa4:	ffffbfff 	.word	0xffffbfff

08004aa8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b086      	sub	sp, #24
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a1b      	ldr	r3, [r3, #32]
 8004abc:	4a21      	ldr	r2, [pc, #132]	@ (8004b44 <TIM_OC5_SetConfig+0x9c>)
 8004abe:	401a      	ands	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	4a1d      	ldr	r2, [pc, #116]	@ (8004b48 <TIM_OC5_SetConfig+0xa0>)
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	4a19      	ldr	r2, [pc, #100]	@ (8004b4c <TIM_OC5_SetConfig+0xa4>)
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	041b      	lsls	r3, r3, #16
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a15      	ldr	r2, [pc, #84]	@ (8004b50 <TIM_OC5_SetConfig+0xa8>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d007      	beq.n	8004b0e <TIM_OC5_SetConfig+0x66>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a14      	ldr	r2, [pc, #80]	@ (8004b54 <TIM_OC5_SetConfig+0xac>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d003      	beq.n	8004b0e <TIM_OC5_SetConfig+0x66>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a13      	ldr	r2, [pc, #76]	@ (8004b58 <TIM_OC5_SetConfig+0xb0>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d109      	bne.n	8004b22 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	4a0c      	ldr	r2, [pc, #48]	@ (8004b44 <TIM_OC5_SetConfig+0x9c>)
 8004b12:	4013      	ands	r3, r2
 8004b14:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	021b      	lsls	r3, r3, #8
 8004b1c:	697a      	ldr	r2, [r7, #20]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	697a      	ldr	r2, [r7, #20]
 8004b26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	621a      	str	r2, [r3, #32]
}
 8004b3c:	46c0      	nop			@ (mov r8, r8)
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	b006      	add	sp, #24
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	fffeffff 	.word	0xfffeffff
 8004b48:	fffeff8f 	.word	0xfffeff8f
 8004b4c:	fffdffff 	.word	0xfffdffff
 8004b50:	40012c00 	.word	0x40012c00
 8004b54:	40014400 	.word	0x40014400
 8004b58:	40014800 	.word	0x40014800

08004b5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a1b      	ldr	r3, [r3, #32]
 8004b70:	4a22      	ldr	r2, [pc, #136]	@ (8004bfc <TIM_OC6_SetConfig+0xa0>)
 8004b72:	401a      	ands	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	4a1e      	ldr	r2, [pc, #120]	@ (8004c00 <TIM_OC6_SetConfig+0xa4>)
 8004b88:	4013      	ands	r3, r2
 8004b8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	021b      	lsls	r3, r3, #8
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	4a1a      	ldr	r2, [pc, #104]	@ (8004c04 <TIM_OC6_SetConfig+0xa8>)
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	051b      	lsls	r3, r3, #20
 8004ba6:	693a      	ldr	r2, [r7, #16]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a16      	ldr	r2, [pc, #88]	@ (8004c08 <TIM_OC6_SetConfig+0xac>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d007      	beq.n	8004bc4 <TIM_OC6_SetConfig+0x68>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a15      	ldr	r2, [pc, #84]	@ (8004c0c <TIM_OC6_SetConfig+0xb0>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d003      	beq.n	8004bc4 <TIM_OC6_SetConfig+0x68>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a14      	ldr	r2, [pc, #80]	@ (8004c10 <TIM_OC6_SetConfig+0xb4>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d109      	bne.n	8004bd8 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	4a13      	ldr	r2, [pc, #76]	@ (8004c14 <TIM_OC6_SetConfig+0xb8>)
 8004bc8:	4013      	ands	r3, r2
 8004bca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	695b      	ldr	r3, [r3, #20]
 8004bd0:	029b      	lsls	r3, r3, #10
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	697a      	ldr	r2, [r7, #20]
 8004bdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	685a      	ldr	r2, [r3, #4]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	693a      	ldr	r2, [r7, #16]
 8004bf0:	621a      	str	r2, [r3, #32]
}
 8004bf2:	46c0      	nop			@ (mov r8, r8)
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	b006      	add	sp, #24
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	46c0      	nop			@ (mov r8, r8)
 8004bfc:	ffefffff 	.word	0xffefffff
 8004c00:	feff8fff 	.word	0xfeff8fff
 8004c04:	ffdfffff 	.word	0xffdfffff
 8004c08:	40012c00 	.word	0x40012c00
 8004c0c:	40014400 	.word	0x40014400
 8004c10:	40014800 	.word	0x40014800
 8004c14:	fffbffff 	.word	0xfffbffff

08004c18 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b086      	sub	sp, #24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
 8004c24:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6a1b      	ldr	r3, [r3, #32]
 8004c30:	2201      	movs	r2, #1
 8004c32:	4393      	bics	r3, r2
 8004c34:	001a      	movs	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	4a1c      	ldr	r2, [pc, #112]	@ (8004cb4 <TIM_TI1_SetConfig+0x9c>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d003      	beq.n	8004c50 <TIM_TI1_SetConfig+0x38>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	4a1b      	ldr	r2, [pc, #108]	@ (8004cb8 <TIM_TI1_SetConfig+0xa0>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d101      	bne.n	8004c54 <TIM_TI1_SetConfig+0x3c>
 8004c50:	2301      	movs	r3, #1
 8004c52:	e000      	b.n	8004c56 <TIM_TI1_SetConfig+0x3e>
 8004c54:	2300      	movs	r3, #0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d008      	beq.n	8004c6c <TIM_TI1_SetConfig+0x54>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	2203      	movs	r2, #3
 8004c5e:	4393      	bics	r3, r2
 8004c60:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	617b      	str	r3, [r7, #20]
 8004c6a:	e003      	b.n	8004c74 <TIM_TI1_SetConfig+0x5c>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	4313      	orrs	r3, r2
 8004c72:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	22f0      	movs	r2, #240	@ 0xf0
 8004c78:	4393      	bics	r3, r2
 8004c7a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	011b      	lsls	r3, r3, #4
 8004c80:	22ff      	movs	r2, #255	@ 0xff
 8004c82:	4013      	ands	r3, r2
 8004c84:	697a      	ldr	r2, [r7, #20]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	220a      	movs	r2, #10
 8004c8e:	4393      	bics	r3, r2
 8004c90:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	220a      	movs	r2, #10
 8004c96:	4013      	ands	r3, r2
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	697a      	ldr	r2, [r7, #20]
 8004ca2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	621a      	str	r2, [r3, #32]
}
 8004caa:	46c0      	nop			@ (mov r8, r8)
 8004cac:	46bd      	mov	sp, r7
 8004cae:	b006      	add	sp, #24
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	46c0      	nop			@ (mov r8, r8)
 8004cb4:	40012c00 	.word	0x40012c00
 8004cb8:	40000400 	.word	0x40000400

08004cbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b086      	sub	sp, #24
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6a1b      	ldr	r3, [r3, #32]
 8004ccc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6a1b      	ldr	r3, [r3, #32]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	4393      	bics	r3, r2
 8004cd6:	001a      	movs	r2, r3
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	22f0      	movs	r2, #240	@ 0xf0
 8004ce6:	4393      	bics	r3, r2
 8004ce8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	011b      	lsls	r3, r3, #4
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	220a      	movs	r2, #10
 8004cf8:	4393      	bics	r3, r2
 8004cfa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cfc:	697a      	ldr	r2, [r7, #20]
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	697a      	ldr	r2, [r7, #20]
 8004d0e:	621a      	str	r2, [r3, #32]
}
 8004d10:	46c0      	nop			@ (mov r8, r8)
 8004d12:	46bd      	mov	sp, r7
 8004d14:	b006      	add	sp, #24
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b086      	sub	sp, #24
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	607a      	str	r2, [r7, #4]
 8004d24:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6a1b      	ldr	r3, [r3, #32]
 8004d2a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6a1b      	ldr	r3, [r3, #32]
 8004d30:	2210      	movs	r2, #16
 8004d32:	4393      	bics	r3, r2
 8004d34:	001a      	movs	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	4a14      	ldr	r2, [pc, #80]	@ (8004d94 <TIM_TI2_SetConfig+0x7c>)
 8004d44:	4013      	ands	r3, r2
 8004d46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	021b      	lsls	r3, r3, #8
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	4a10      	ldr	r2, [pc, #64]	@ (8004d98 <TIM_TI2_SetConfig+0x80>)
 8004d56:	4013      	ands	r3, r2
 8004d58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	031b      	lsls	r3, r3, #12
 8004d5e:	041b      	lsls	r3, r3, #16
 8004d60:	0c1b      	lsrs	r3, r3, #16
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	22a0      	movs	r2, #160	@ 0xa0
 8004d6c:	4393      	bics	r3, r2
 8004d6e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	011b      	lsls	r3, r3, #4
 8004d74:	22a0      	movs	r2, #160	@ 0xa0
 8004d76:	4013      	ands	r3, r2
 8004d78:	697a      	ldr	r2, [r7, #20]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	697a      	ldr	r2, [r7, #20]
 8004d88:	621a      	str	r2, [r3, #32]
}
 8004d8a:	46c0      	nop			@ (mov r8, r8)
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	b006      	add	sp, #24
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	46c0      	nop			@ (mov r8, r8)
 8004d94:	fffffcff 	.word	0xfffffcff
 8004d98:	ffff0fff 	.word	0xffff0fff

08004d9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b086      	sub	sp, #24
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6a1b      	ldr	r3, [r3, #32]
 8004dac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6a1b      	ldr	r3, [r3, #32]
 8004db2:	2210      	movs	r2, #16
 8004db4:	4393      	bics	r3, r2
 8004db6:	001a      	movs	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	4a0d      	ldr	r2, [pc, #52]	@ (8004dfc <TIM_TI2_ConfigInputStage+0x60>)
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	031b      	lsls	r3, r3, #12
 8004dce:	693a      	ldr	r2, [r7, #16]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	22a0      	movs	r2, #160	@ 0xa0
 8004dd8:	4393      	bics	r3, r2
 8004dda:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	011b      	lsls	r3, r3, #4
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	693a      	ldr	r2, [r7, #16]
 8004dea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	621a      	str	r2, [r3, #32]
}
 8004df2:	46c0      	nop			@ (mov r8, r8)
 8004df4:	46bd      	mov	sp, r7
 8004df6:	b006      	add	sp, #24
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	46c0      	nop			@ (mov r8, r8)
 8004dfc:	ffff0fff 	.word	0xffff0fff

08004e00 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]
 8004e0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6a1b      	ldr	r3, [r3, #32]
 8004e18:	4a17      	ldr	r2, [pc, #92]	@ (8004e78 <TIM_TI3_SetConfig+0x78>)
 8004e1a:	401a      	ands	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	69db      	ldr	r3, [r3, #28]
 8004e24:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	2203      	movs	r2, #3
 8004e2a:	4393      	bics	r3, r2
 8004e2c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	22f0      	movs	r2, #240	@ 0xf0
 8004e3a:	4393      	bics	r3, r2
 8004e3c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	011b      	lsls	r3, r3, #4
 8004e42:	22ff      	movs	r2, #255	@ 0xff
 8004e44:	4013      	ands	r3, r2
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	4a0b      	ldr	r2, [pc, #44]	@ (8004e7c <TIM_TI3_SetConfig+0x7c>)
 8004e50:	4013      	ands	r3, r2
 8004e52:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	021a      	lsls	r2, r3, #8
 8004e58:	23a0      	movs	r3, #160	@ 0xa0
 8004e5a:	011b      	lsls	r3, r3, #4
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	697a      	ldr	r2, [r7, #20]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	697a      	ldr	r2, [r7, #20]
 8004e6e:	621a      	str	r2, [r3, #32]
}
 8004e70:	46c0      	nop			@ (mov r8, r8)
 8004e72:	46bd      	mov	sp, r7
 8004e74:	b006      	add	sp, #24
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	fffffeff 	.word	0xfffffeff
 8004e7c:	fffff5ff 	.word	0xfffff5ff

08004e80 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
 8004e8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6a1b      	ldr	r3, [r3, #32]
 8004e98:	4a18      	ldr	r2, [pc, #96]	@ (8004efc <TIM_TI4_SetConfig+0x7c>)
 8004e9a:	401a      	ands	r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	69db      	ldr	r3, [r3, #28]
 8004ea4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	4a15      	ldr	r2, [pc, #84]	@ (8004f00 <TIM_TI4_SetConfig+0x80>)
 8004eaa:	4013      	ands	r3, r2
 8004eac:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	021b      	lsls	r3, r3, #8
 8004eb2:	693a      	ldr	r2, [r7, #16]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	4a12      	ldr	r2, [pc, #72]	@ (8004f04 <TIM_TI4_SetConfig+0x84>)
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	031b      	lsls	r3, r3, #12
 8004ec4:	041b      	lsls	r3, r3, #16
 8004ec6:	0c1b      	lsrs	r3, r3, #16
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	4a0d      	ldr	r2, [pc, #52]	@ (8004f08 <TIM_TI4_SetConfig+0x88>)
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	031a      	lsls	r2, r3, #12
 8004eda:	23a0      	movs	r3, #160	@ 0xa0
 8004edc:	021b      	lsls	r3, r3, #8
 8004ede:	4013      	ands	r3, r2
 8004ee0:	697a      	ldr	r2, [r7, #20]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	693a      	ldr	r2, [r7, #16]
 8004eea:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	621a      	str	r2, [r3, #32]
}
 8004ef2:	46c0      	nop			@ (mov r8, r8)
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	b006      	add	sp, #24
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	46c0      	nop			@ (mov r8, r8)
 8004efc:	ffffefff 	.word	0xffffefff
 8004f00:	fffffcff 	.word	0xfffffcff
 8004f04:	ffff0fff 	.word	0xffff0fff
 8004f08:	ffff5fff 	.word	0xffff5fff

08004f0c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	4a08      	ldr	r2, [pc, #32]	@ (8004f40 <TIM_ITRx_SetConfig+0x34>)
 8004f20:	4013      	ands	r3, r2
 8004f22:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f24:	683a      	ldr	r2, [r7, #0]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	2207      	movs	r2, #7
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	609a      	str	r2, [r3, #8]
}
 8004f36:	46c0      	nop			@ (mov r8, r8)
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	b004      	add	sp, #16
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	46c0      	nop			@ (mov r8, r8)
 8004f40:	ffcfff8f 	.word	0xffcfff8f

08004f44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b086      	sub	sp, #24
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	60b9      	str	r1, [r7, #8]
 8004f4e:	607a      	str	r2, [r7, #4]
 8004f50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	4a09      	ldr	r2, [pc, #36]	@ (8004f80 <TIM_ETR_SetConfig+0x3c>)
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	021a      	lsls	r2, r3, #8
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	431a      	orrs	r2, r3
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	697a      	ldr	r2, [r7, #20]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	609a      	str	r2, [r3, #8]
}
 8004f78:	46c0      	nop			@ (mov r8, r8)
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	b006      	add	sp, #24
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	ffff00ff 	.word	0xffff00ff

08004f84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b086      	sub	sp, #24
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	221f      	movs	r2, #31
 8004f94:	4013      	ands	r3, r2
 8004f96:	2201      	movs	r2, #1
 8004f98:	409a      	lsls	r2, r3
 8004f9a:	0013      	movs	r3, r2
 8004f9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	43d2      	mvns	r2, r2
 8004fa6:	401a      	ands	r2, r3
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6a1a      	ldr	r2, [r3, #32]
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	211f      	movs	r1, #31
 8004fb4:	400b      	ands	r3, r1
 8004fb6:	6879      	ldr	r1, [r7, #4]
 8004fb8:	4099      	lsls	r1, r3
 8004fba:	000b      	movs	r3, r1
 8004fbc:	431a      	orrs	r2, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	621a      	str	r2, [r3, #32]
}
 8004fc2:	46c0      	nop			@ (mov r8, r8)
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	b006      	add	sp, #24
 8004fc8:	bd80      	pop	{r7, pc}
	...

08004fcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	223c      	movs	r2, #60	@ 0x3c
 8004fda:	5c9b      	ldrb	r3, [r3, r2]
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d101      	bne.n	8004fe4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	e04a      	b.n	800507a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	223c      	movs	r2, #60	@ 0x3c
 8004fe8:	2101      	movs	r1, #1
 8004fea:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	223d      	movs	r2, #61	@ 0x3d
 8004ff0:	2102      	movs	r1, #2
 8004ff2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a1e      	ldr	r2, [pc, #120]	@ (8005084 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d108      	bne.n	8005020 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	4a1d      	ldr	r2, [pc, #116]	@ (8005088 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005012:	4013      	ands	r3, r2
 8005014:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	4313      	orrs	r3, r2
 800501e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2270      	movs	r2, #112	@ 0x70
 8005024:	4393      	bics	r3, r2
 8005026:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	4313      	orrs	r3, r2
 8005030:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a11      	ldr	r2, [pc, #68]	@ (8005084 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d004      	beq.n	800504e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a10      	ldr	r2, [pc, #64]	@ (800508c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d10c      	bne.n	8005068 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	2280      	movs	r2, #128	@ 0x80
 8005052:	4393      	bics	r3, r2
 8005054:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	4313      	orrs	r3, r2
 800505e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68ba      	ldr	r2, [r7, #8]
 8005066:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	223d      	movs	r2, #61	@ 0x3d
 800506c:	2101      	movs	r1, #1
 800506e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	223c      	movs	r2, #60	@ 0x3c
 8005074:	2100      	movs	r1, #0
 8005076:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	0018      	movs	r0, r3
 800507c:	46bd      	mov	sp, r7
 800507e:	b004      	add	sp, #16
 8005080:	bd80      	pop	{r7, pc}
 8005082:	46c0      	nop			@ (mov r8, r8)
 8005084:	40012c00 	.word	0x40012c00
 8005088:	ff0fffff 	.word	0xff0fffff
 800508c:	40000400 	.word	0x40000400

08005090 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005098:	46c0      	nop			@ (mov r8, r8)
 800509a:	46bd      	mov	sp, r7
 800509c:	b002      	add	sp, #8
 800509e:	bd80      	pop	{r7, pc}

080050a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050a8:	46c0      	nop			@ (mov r8, r8)
 80050aa:	46bd      	mov	sp, r7
 80050ac:	b002      	add	sp, #8
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80050b8:	46c0      	nop			@ (mov r8, r8)
 80050ba:	46bd      	mov	sp, r7
 80050bc:	b002      	add	sp, #8
 80050be:	bd80      	pop	{r7, pc}

080050c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d101      	bne.n	80050d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e046      	b.n	8005160 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2288      	movs	r2, #136	@ 0x88
 80050d6:	589b      	ldr	r3, [r3, r2]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d107      	bne.n	80050ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2284      	movs	r2, #132	@ 0x84
 80050e0:	2100      	movs	r1, #0
 80050e2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	0018      	movs	r0, r3
 80050e8:	f7fd f996 	bl	8002418 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2288      	movs	r2, #136	@ 0x88
 80050f0:	2124      	movs	r1, #36	@ 0x24
 80050f2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2101      	movs	r1, #1
 8005100:	438a      	bics	r2, r1
 8005102:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005108:	2b00      	cmp	r3, #0
 800510a:	d003      	beq.n	8005114 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	0018      	movs	r0, r3
 8005110:	f001 f804 	bl	800611c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	0018      	movs	r0, r3
 8005118:	f000 fe82 	bl	8005e20 <UART_SetConfig>
 800511c:	0003      	movs	r3, r0
 800511e:	2b01      	cmp	r3, #1
 8005120:	d101      	bne.n	8005126 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e01c      	b.n	8005160 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	685a      	ldr	r2, [r3, #4]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	490d      	ldr	r1, [pc, #52]	@ (8005168 <HAL_UART_Init+0xa8>)
 8005132:	400a      	ands	r2, r1
 8005134:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	689a      	ldr	r2, [r3, #8]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	212a      	movs	r1, #42	@ 0x2a
 8005142:	438a      	bics	r2, r1
 8005144:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2101      	movs	r1, #1
 8005152:	430a      	orrs	r2, r1
 8005154:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	0018      	movs	r0, r3
 800515a:	f001 f893 	bl	8006284 <UART_CheckIdleState>
 800515e:	0003      	movs	r3, r0
}
 8005160:	0018      	movs	r0, r3
 8005162:	46bd      	mov	sp, r7
 8005164:	b002      	add	sp, #8
 8005166:	bd80      	pop	{r7, pc}
 8005168:	ffffb7ff 	.word	0xffffb7ff

0800516c <HAL_LIN_Init>:
  *          @arg @ref UART_LINBREAKDETECTLENGTH_10B 10-bit break detection
  *          @arg @ref UART_LINBREAKDETECTLENGTH_11B 11-bit break detection
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d101      	bne.n	8005180 <HAL_LIN_Init+0x14>
  {
    return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e068      	b.n	8005252 <HAL_LIN_Init+0xe6>
  assert_param(IS_UART_LIN_INSTANCE(huart->Instance));
  /* Check the Break detection length parameter */
  assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));

  /* LIN mode limited to 16-bit oversampling only */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	69da      	ldr	r2, [r3, #28]
 8005184:	2380      	movs	r3, #128	@ 0x80
 8005186:	021b      	lsls	r3, r3, #8
 8005188:	429a      	cmp	r2, r3
 800518a:	d101      	bne.n	8005190 <HAL_LIN_Init+0x24>
  {
    return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e060      	b.n	8005252 <HAL_LIN_Init+0xe6>
  }
  /* LIN mode limited to 8-bit data length */
  if (huart->Init.WordLength != UART_WORDLENGTH_8B)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d001      	beq.n	800519c <HAL_LIN_Init+0x30>
  {
    return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e05a      	b.n	8005252 <HAL_LIN_Init+0xe6>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2288      	movs	r2, #136	@ 0x88
 80051a0:	589b      	ldr	r3, [r3, r2]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d107      	bne.n	80051b6 <HAL_LIN_Init+0x4a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2284      	movs	r2, #132	@ 0x84
 80051aa:	2100      	movs	r1, #0
 80051ac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	0018      	movs	r0, r3
 80051b2:	f7fd f931 	bl	8002418 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2288      	movs	r2, #136	@ 0x88
 80051ba:	2124      	movs	r1, #36	@ 0x24
 80051bc:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2101      	movs	r1, #1
 80051ca:	438a      	bics	r2, r1
 80051cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d003      	beq.n	80051de <HAL_LIN_Init+0x72>
  {
    UART_AdvFeatureConfig(huart);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	0018      	movs	r0, r3
 80051da:	f000 ff9f 	bl	800611c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	0018      	movs	r0, r3
 80051e2:	f000 fe1d 	bl	8005e20 <UART_SetConfig>
 80051e6:	0003      	movs	r3, r0
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d101      	bne.n	80051f0 <HAL_LIN_Init+0x84>
  {
    return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e030      	b.n	8005252 <HAL_LIN_Init+0xe6>
  }

  /* In LIN mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	685a      	ldr	r2, [r3, #4]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4918      	ldr	r1, [pc, #96]	@ (800525c <HAL_LIN_Init+0xf0>)
 80051fc:	400a      	ands	r2, r1
 80051fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	689a      	ldr	r2, [r3, #8]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	212a      	movs	r1, #42	@ 0x2a
 800520c:	438a      	bics	r2, r1
 800520e:	609a      	str	r2, [r3, #8]

  /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	685a      	ldr	r2, [r3, #4]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2180      	movs	r1, #128	@ 0x80
 800521c:	01c9      	lsls	r1, r1, #7
 800521e:	430a      	orrs	r2, r1
 8005220:	605a      	str	r2, [r3, #4]

  /* Set the USART LIN Break detection length. */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_LBDL, BreakDetectLength);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	2220      	movs	r2, #32
 800522a:	4393      	bics	r3, r2
 800522c:	0019      	movs	r1, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	683a      	ldr	r2, [r7, #0]
 8005234:	430a      	orrs	r2, r1
 8005236:	605a      	str	r2, [r3, #4]

  __HAL_UART_ENABLE(huart);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2101      	movs	r1, #1
 8005244:	430a      	orrs	r2, r1
 8005246:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	0018      	movs	r0, r3
 800524c:	f001 f81a 	bl	8006284 <UART_CheckIdleState>
 8005250:	0003      	movs	r3, r0
}
 8005252:	0018      	movs	r0, r3
 8005254:	46bd      	mov	sp, r7
 8005256:	b002      	add	sp, #8
 8005258:	bd80      	pop	{r7, pc}
 800525a:	46c0      	nop			@ (mov r8, r8)
 800525c:	fffff7ff 	.word	0xfffff7ff

08005260 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b08c      	sub	sp, #48	@ 0x30
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	1dbb      	adds	r3, r7, #6
 800526c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2288      	movs	r2, #136	@ 0x88
 8005272:	589b      	ldr	r3, [r3, r2]
 8005274:	2b20      	cmp	r3, #32
 8005276:	d000      	beq.n	800527a <HAL_UART_Transmit_IT+0x1a>
 8005278:	e08d      	b.n	8005396 <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d003      	beq.n	8005288 <HAL_UART_Transmit_IT+0x28>
 8005280:	1dbb      	adds	r3, r7, #6
 8005282:	881b      	ldrh	r3, [r3, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d101      	bne.n	800528c <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e085      	b.n	8005398 <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	689a      	ldr	r2, [r3, #8]
 8005290:	2380      	movs	r3, #128	@ 0x80
 8005292:	015b      	lsls	r3, r3, #5
 8005294:	429a      	cmp	r2, r3
 8005296:	d109      	bne.n	80052ac <HAL_UART_Transmit_IT+0x4c>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d105      	bne.n	80052ac <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	2201      	movs	r2, #1
 80052a4:	4013      	ands	r3, r2
 80052a6:	d001      	beq.n	80052ac <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e075      	b.n	8005398 <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	68ba      	ldr	r2, [r7, #8]
 80052b0:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	1dba      	adds	r2, r7, #6
 80052b6:	2154      	movs	r1, #84	@ 0x54
 80052b8:	8812      	ldrh	r2, [r2, #0]
 80052ba:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	1dba      	adds	r2, r7, #6
 80052c0:	2156      	movs	r1, #86	@ 0x56
 80052c2:	8812      	ldrh	r2, [r2, #0]
 80052c4:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2290      	movs	r2, #144	@ 0x90
 80052d0:	2100      	movs	r1, #0
 80052d2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2288      	movs	r2, #136	@ 0x88
 80052d8:	2121      	movs	r1, #33	@ 0x21
 80052da:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80052e0:	2380      	movs	r3, #128	@ 0x80
 80052e2:	059b      	lsls	r3, r3, #22
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d12a      	bne.n	800533e <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	689a      	ldr	r2, [r3, #8]
 80052ec:	2380      	movs	r3, #128	@ 0x80
 80052ee:	015b      	lsls	r3, r3, #5
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d107      	bne.n	8005304 <HAL_UART_Transmit_IT+0xa4>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d103      	bne.n	8005304 <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	4a28      	ldr	r2, [pc, #160]	@ (80053a0 <HAL_UART_Transmit_IT+0x140>)
 8005300:	679a      	str	r2, [r3, #120]	@ 0x78
 8005302:	e002      	b.n	800530a <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	4a27      	ldr	r2, [pc, #156]	@ (80053a4 <HAL_UART_Transmit_IT+0x144>)
 8005308:	679a      	str	r2, [r3, #120]	@ 0x78
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800530a:	f3ef 8310 	mrs	r3, PRIMASK
 800530e:	61fb      	str	r3, [r7, #28]
  return(result);
 8005310:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005312:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005314:	2301      	movs	r3, #1
 8005316:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005318:	6a3b      	ldr	r3, [r7, #32]
 800531a:	f383 8810 	msr	PRIMASK, r3
}
 800531e:	46c0      	nop			@ (mov r8, r8)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	689a      	ldr	r2, [r3, #8]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2180      	movs	r1, #128	@ 0x80
 800532c:	0409      	lsls	r1, r1, #16
 800532e:	430a      	orrs	r2, r1
 8005330:	609a      	str	r2, [r3, #8]
 8005332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005334:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005338:	f383 8810 	msr	PRIMASK, r3
}
 800533c:	e029      	b.n	8005392 <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	689a      	ldr	r2, [r3, #8]
 8005342:	2380      	movs	r3, #128	@ 0x80
 8005344:	015b      	lsls	r3, r3, #5
 8005346:	429a      	cmp	r2, r3
 8005348:	d107      	bne.n	800535a <HAL_UART_Transmit_IT+0xfa>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d103      	bne.n	800535a <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	4a14      	ldr	r2, [pc, #80]	@ (80053a8 <HAL_UART_Transmit_IT+0x148>)
 8005356:	679a      	str	r2, [r3, #120]	@ 0x78
 8005358:	e002      	b.n	8005360 <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	4a13      	ldr	r2, [pc, #76]	@ (80053ac <HAL_UART_Transmit_IT+0x14c>)
 800535e:	679a      	str	r2, [r3, #120]	@ 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005360:	f3ef 8310 	mrs	r3, PRIMASK
 8005364:	613b      	str	r3, [r7, #16]
  return(result);
 8005366:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005368:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800536a:	2301      	movs	r3, #1
 800536c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	f383 8810 	msr	PRIMASK, r3
}
 8005374:	46c0      	nop			@ (mov r8, r8)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2180      	movs	r1, #128	@ 0x80
 8005382:	430a      	orrs	r2, r1
 8005384:	601a      	str	r2, [r3, #0]
 8005386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005388:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	f383 8810 	msr	PRIMASK, r3
}
 8005390:	46c0      	nop			@ (mov r8, r8)
    }

    return HAL_OK;
 8005392:	2300      	movs	r3, #0
 8005394:	e000      	b.n	8005398 <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 8005396:	2302      	movs	r3, #2
  }
}
 8005398:	0018      	movs	r0, r3
 800539a:	46bd      	mov	sp, r7
 800539c:	b00c      	add	sp, #48	@ 0x30
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	08006ae9 	.word	0x08006ae9
 80053a4:	080069fd 	.word	0x080069fd
 80053a8:	0800693d 	.word	0x0800693d
 80053ac:	08006889 	.word	0x08006889

080053b0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b088      	sub	sp, #32
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	1dbb      	adds	r3, r7, #6
 80053bc:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	228c      	movs	r2, #140	@ 0x8c
 80053c2:	589b      	ldr	r3, [r3, r2]
 80053c4:	2b20      	cmp	r3, #32
 80053c6:	d145      	bne.n	8005454 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d003      	beq.n	80053d6 <HAL_UART_Receive_IT+0x26>
 80053ce:	1dbb      	adds	r3, r7, #6
 80053d0:	881b      	ldrh	r3, [r3, #0]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d101      	bne.n	80053da <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e03d      	b.n	8005456 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	689a      	ldr	r2, [r3, #8]
 80053de:	2380      	movs	r3, #128	@ 0x80
 80053e0:	015b      	lsls	r3, r3, #5
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d109      	bne.n	80053fa <HAL_UART_Receive_IT+0x4a>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d105      	bne.n	80053fa <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	2201      	movs	r2, #1
 80053f2:	4013      	ands	r3, r2
 80053f4:	d001      	beq.n	80053fa <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e02d      	b.n	8005456 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2200      	movs	r2, #0
 80053fe:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	685a      	ldr	r2, [r3, #4]
 8005406:	2380      	movs	r3, #128	@ 0x80
 8005408:	041b      	lsls	r3, r3, #16
 800540a:	4013      	ands	r3, r2
 800540c:	d019      	beq.n	8005442 <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800540e:	f3ef 8310 	mrs	r3, PRIMASK
 8005412:	613b      	str	r3, [r7, #16]
  return(result);
 8005414:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005416:	61fb      	str	r3, [r7, #28]
 8005418:	2301      	movs	r3, #1
 800541a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	f383 8810 	msr	PRIMASK, r3
}
 8005422:	46c0      	nop			@ (mov r8, r8)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2180      	movs	r1, #128	@ 0x80
 8005430:	04c9      	lsls	r1, r1, #19
 8005432:	430a      	orrs	r2, r1
 8005434:	601a      	str	r2, [r3, #0]
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	f383 8810 	msr	PRIMASK, r3
}
 8005440:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005442:	1dbb      	adds	r3, r7, #6
 8005444:	881a      	ldrh	r2, [r3, #0]
 8005446:	68b9      	ldr	r1, [r7, #8]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	0018      	movs	r0, r3
 800544c:	f001 f834 	bl	80064b8 <UART_Start_Receive_IT>
 8005450:	0003      	movs	r3, r0
 8005452:	e000      	b.n	8005456 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8005454:	2302      	movs	r3, #2
  }
}
 8005456:	0018      	movs	r0, r3
 8005458:	46bd      	mov	sp, r7
 800545a:	b008      	add	sp, #32
 800545c:	bd80      	pop	{r7, pc}
	...

08005460 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b08e      	sub	sp, #56	@ 0x38
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005468:	f3ef 8310 	mrs	r3, PRIMASK
 800546c:	617b      	str	r3, [r7, #20]
  return(result);
 800546e:	697b      	ldr	r3, [r7, #20]
  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TCIE | USART_CR1_TXEIE_TXFNFIE));
 8005470:	637b      	str	r3, [r7, #52]	@ 0x34
 8005472:	2301      	movs	r3, #1
 8005474:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	f383 8810 	msr	PRIMASK, r3
}
 800547c:	46c0      	nop			@ (mov r8, r8)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	21c0      	movs	r1, #192	@ 0xc0
 800548a:	438a      	bics	r2, r1
 800548c:	601a      	str	r2, [r3, #0]
 800548e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005490:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	f383 8810 	msr	PRIMASK, r3
}
 8005498:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800549a:	f3ef 8310 	mrs	r3, PRIMASK
 800549e:	623b      	str	r3, [r7, #32]
  return(result);
 80054a0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80054a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80054a4:	2301      	movs	r3, #1
 80054a6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054aa:	f383 8810 	msr	PRIMASK, r3
}
 80054ae:	46c0      	nop			@ (mov r8, r8)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	689a      	ldr	r2, [r3, #8]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4939      	ldr	r1, [pc, #228]	@ (80055a0 <HAL_UART_AbortTransmit_IT+0x140>)
 80054bc:	400a      	ands	r2, r1
 80054be:	609a      	str	r2, [r3, #8]
 80054c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054c6:	f383 8810 	msr	PRIMASK, r3
}
 80054ca:	46c0      	nop			@ (mov r8, r8)

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	2280      	movs	r2, #128	@ 0x80
 80054d4:	4013      	ands	r3, r2
 80054d6:	2b80      	cmp	r3, #128	@ 0x80
 80054d8:	d13f      	bne.n	800555a <HAL_UART_AbortTransmit_IT+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80054da:	f3ef 8310 	mrs	r3, PRIMASK
 80054de:	60bb      	str	r3, [r7, #8]
  return(result);
 80054e0:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80054e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054e4:	2301      	movs	r3, #1
 80054e6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f383 8810 	msr	PRIMASK, r3
}
 80054ee:	46c0      	nop			@ (mov r8, r8)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	689a      	ldr	r2, [r3, #8]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2180      	movs	r1, #128	@ 0x80
 80054fc:	438a      	bics	r2, r1
 80054fe:	609a      	str	r2, [r3, #8]
 8005500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005502:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	f383 8810 	msr	PRIMASK, r3
}
 800550a:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005510:	2b00      	cmp	r3, #0
 8005512:	d012      	beq.n	800553a <HAL_UART_AbortTransmit_IT+0xda>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005518:	4a22      	ldr	r2, [pc, #136]	@ (80055a4 <HAL_UART_AbortTransmit_IT+0x144>)
 800551a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005520:	0018      	movs	r0, r3
 8005522:	f7fd fad3 	bl	8002acc <HAL_DMA_Abort_IT>
 8005526:	1e03      	subs	r3, r0, #0
 8005528:	d034      	beq.n	8005594 <HAL_UART_AbortTransmit_IT+0x134>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800552e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005534:	0018      	movs	r0, r3
 8005536:	4790      	blx	r2
 8005538:	e02c      	b.n	8005594 <HAL_UART_AbortTransmit_IT+0x134>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0U;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2256      	movs	r2, #86	@ 0x56
 800553e:	2100      	movs	r1, #0
 8005540:	5299      	strh	r1, [r3, r2]

      /* Clear TxISR function pointers */
      huart->TxISR = NULL;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2288      	movs	r2, #136	@ 0x88
 800554c:	2120      	movs	r1, #32
 800554e:	5099      	str	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	0018      	movs	r0, r3
 8005554:	f000 fc3e 	bl	8005dd4 <HAL_UART_AbortTransmitCpltCallback>
 8005558:	e01c      	b.n	8005594 <HAL_UART_AbortTransmit_IT+0x134>
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0U;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2256      	movs	r2, #86	@ 0x56
 800555e:	2100      	movs	r1, #0
 8005560:	5299      	strh	r1, [r3, r2]

    /* Clear TxISR function pointers */
    huart->TxISR = NULL;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Flush the whole TX FIFO (if needed) */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800556c:	2380      	movs	r3, #128	@ 0x80
 800556e:	059b      	lsls	r3, r3, #22
 8005570:	429a      	cmp	r2, r3
 8005572:	d107      	bne.n	8005584 <HAL_UART_AbortTransmit_IT+0x124>
    {
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	699a      	ldr	r2, [r3, #24]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2110      	movs	r1, #16
 8005580:	430a      	orrs	r2, r1
 8005582:	619a      	str	r2, [r3, #24]
    }

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2288      	movs	r2, #136	@ 0x88
 8005588:	2120      	movs	r1, #32
 800558a:	5099      	str	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	0018      	movs	r0, r3
 8005590:	f000 fc20 	bl	8005dd4 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	0018      	movs	r0, r3
 8005598:	46bd      	mov	sp, r7
 800559a:	b00e      	add	sp, #56	@ 0x38
 800559c:	bd80      	pop	{r7, pc}
 800559e:	46c0      	nop			@ (mov r8, r8)
 80055a0:	ff7fffff 	.word	0xff7fffff
 80055a4:	080067f3 	.word	0x080067f3

080055a8 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b092      	sub	sp, #72	@ 0x48
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80055b0:	f3ef 8310 	mrs	r3, PRIMASK
 80055b4:	623b      	str	r3, [r7, #32]
  return(result);
 80055b6:	6a3b      	ldr	r3, [r7, #32]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 80055b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80055ba:	2301      	movs	r3, #1
 80055bc:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c0:	f383 8810 	msr	PRIMASK, r3
}
 80055c4:	46c0      	nop			@ (mov r8, r8)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	495a      	ldr	r1, [pc, #360]	@ (800573c <HAL_UART_AbortReceive_IT+0x194>)
 80055d2:	400a      	ands	r2, r1
 80055d4:	601a      	str	r2, [r3, #0]
 80055d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055dc:	f383 8810 	msr	PRIMASK, r3
}
 80055e0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80055e2:	f3ef 8310 	mrs	r3, PRIMASK
 80055e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80055e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80055ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80055ec:	2301      	movs	r3, #1
 80055ee:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f2:	f383 8810 	msr	PRIMASK, r3
}
 80055f6:	46c0      	nop			@ (mov r8, r8)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	689a      	ldr	r2, [r3, #8]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	494f      	ldr	r1, [pc, #316]	@ (8005740 <HAL_UART_AbortReceive_IT+0x198>)
 8005604:	400a      	ands	r2, r1
 8005606:	609a      	str	r2, [r3, #8]
 8005608:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800560a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800560c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800560e:	f383 8810 	msr	PRIMASK, r3
}
 8005612:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005618:	2b01      	cmp	r3, #1
 800561a:	d118      	bne.n	800564e <HAL_UART_AbortReceive_IT+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800561c:	f3ef 8310 	mrs	r3, PRIMASK
 8005620:	617b      	str	r3, [r7, #20]
  return(result);
 8005622:	697b      	ldr	r3, [r7, #20]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8005624:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005626:	2301      	movs	r3, #1
 8005628:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	f383 8810 	msr	PRIMASK, r3
}
 8005630:	46c0      	nop			@ (mov r8, r8)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2110      	movs	r1, #16
 800563e:	438a      	bics	r2, r1
 8005640:	601a      	str	r2, [r3, #0]
 8005642:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005644:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	f383 8810 	msr	PRIMASK, r3
}
 800564c:	46c0      	nop			@ (mov r8, r8)
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	2240      	movs	r2, #64	@ 0x40
 8005656:	4013      	ands	r3, r2
 8005658:	2b40      	cmp	r3, #64	@ 0x40
 800565a:	d153      	bne.n	8005704 <HAL_UART_AbortReceive_IT+0x15c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800565c:	f3ef 8310 	mrs	r3, PRIMASK
 8005660:	60bb      	str	r3, [r7, #8]
  return(result);
 8005662:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005664:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005666:	2301      	movs	r3, #1
 8005668:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f383 8810 	msr	PRIMASK, r3
}
 8005670:	46c0      	nop			@ (mov r8, r8)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	689a      	ldr	r2, [r3, #8]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2140      	movs	r1, #64	@ 0x40
 800567e:	438a      	bics	r2, r1
 8005680:	609a      	str	r2, [r3, #8]
 8005682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005684:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	f383 8810 	msr	PRIMASK, r3
}
 800568c:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2280      	movs	r2, #128	@ 0x80
 8005692:	589b      	ldr	r3, [r3, r2]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d016      	beq.n	80056c6 <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2280      	movs	r2, #128	@ 0x80
 800569c:	589b      	ldr	r3, [r3, r2]
 800569e:	4a29      	ldr	r2, [pc, #164]	@ (8005744 <HAL_UART_AbortReceive_IT+0x19c>)
 80056a0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2280      	movs	r2, #128	@ 0x80
 80056a6:	589b      	ldr	r3, [r3, r2]
 80056a8:	0018      	movs	r0, r3
 80056aa:	f7fd fa0f 	bl	8002acc <HAL_DMA_Abort_IT>
 80056ae:	1e03      	subs	r3, r0, #0
 80056b0:	d03e      	beq.n	8005730 <HAL_UART_AbortReceive_IT+0x188>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2280      	movs	r2, #128	@ 0x80
 80056b6:	589b      	ldr	r3, [r3, r2]
 80056b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	2180      	movs	r1, #128	@ 0x80
 80056be:	5852      	ldr	r2, [r2, r1]
 80056c0:	0010      	movs	r0, r2
 80056c2:	4798      	blx	r3
 80056c4:	e034      	b.n	8005730 <HAL_UART_AbortReceive_IT+0x188>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	225e      	movs	r2, #94	@ 0x5e
 80056ca:	2100      	movs	r1, #0
 80056cc:	5299      	strh	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	220f      	movs	r2, #15
 80056da:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	699a      	ldr	r2, [r3, #24]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2108      	movs	r1, #8
 80056e8:	430a      	orrs	r2, r1
 80056ea:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	228c      	movs	r2, #140	@ 0x8c
 80056f0:	2120      	movs	r1, #32
 80056f2:	5099      	str	r1, [r3, r2]
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	0018      	movs	r0, r3
 80056fe:	f000 fb71 	bl	8005de4 <HAL_UART_AbortReceiveCpltCallback>
 8005702:	e015      	b.n	8005730 <HAL_UART_AbortReceive_IT+0x188>
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	225e      	movs	r2, #94	@ 0x5e
 8005708:	2100      	movs	r1, #0
 800570a:	5299      	strh	r1, [r3, r2]

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	220f      	movs	r2, #15
 8005718:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	228c      	movs	r2, #140	@ 0x8c
 800571e:	2120      	movs	r1, #32
 8005720:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	0018      	movs	r0, r3
 800572c:	f000 fb5a 	bl	8005de4 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	0018      	movs	r0, r3
 8005734:	46bd      	mov	sp, r7
 8005736:	b012      	add	sp, #72	@ 0x48
 8005738:	bd80      	pop	{r7, pc}
 800573a:	46c0      	nop			@ (mov r8, r8)
 800573c:	fffffedf 	.word	0xfffffedf
 8005740:	effffffe 	.word	0xeffffffe
 8005744:	0800683d 	.word	0x0800683d

08005748 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005748:	b5b0      	push	{r4, r5, r7, lr}
 800574a:	b0aa      	sub	sp, #168	@ 0xa8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	69db      	ldr	r3, [r3, #28]
 8005756:	22a4      	movs	r2, #164	@ 0xa4
 8005758:	18b9      	adds	r1, r7, r2
 800575a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	20a0      	movs	r0, #160	@ 0xa0
 8005764:	1839      	adds	r1, r7, r0
 8005766:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	249c      	movs	r4, #156	@ 0x9c
 8005770:	1939      	adds	r1, r7, r4
 8005772:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005774:	0011      	movs	r1, r2
 8005776:	18bb      	adds	r3, r7, r2
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4aa2      	ldr	r2, [pc, #648]	@ (8005a04 <HAL_UART_IRQHandler+0x2bc>)
 800577c:	4013      	ands	r3, r2
 800577e:	2298      	movs	r2, #152	@ 0x98
 8005780:	18bd      	adds	r5, r7, r2
 8005782:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8005784:	18bb      	adds	r3, r7, r2
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d11a      	bne.n	80057c2 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800578c:	187b      	adds	r3, r7, r1
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2220      	movs	r2, #32
 8005792:	4013      	ands	r3, r2
 8005794:	d015      	beq.n	80057c2 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005796:	183b      	adds	r3, r7, r0
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2220      	movs	r2, #32
 800579c:	4013      	ands	r3, r2
 800579e:	d105      	bne.n	80057ac <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80057a0:	193b      	adds	r3, r7, r4
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	2380      	movs	r3, #128	@ 0x80
 80057a6:	055b      	lsls	r3, r3, #21
 80057a8:	4013      	ands	r3, r2
 80057aa:	d00a      	beq.n	80057c2 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d100      	bne.n	80057b6 <HAL_UART_IRQHandler+0x6e>
 80057b4:	e2fb      	b.n	8005dae <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	0010      	movs	r0, r2
 80057be:	4798      	blx	r3
      }
      return;
 80057c0:	e2f5      	b.n	8005dae <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80057c2:	2398      	movs	r3, #152	@ 0x98
 80057c4:	18fb      	adds	r3, r7, r3
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d100      	bne.n	80057ce <HAL_UART_IRQHandler+0x86>
 80057cc:	e122      	b.n	8005a14 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80057ce:	239c      	movs	r3, #156	@ 0x9c
 80057d0:	18fb      	adds	r3, r7, r3
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a8c      	ldr	r2, [pc, #560]	@ (8005a08 <HAL_UART_IRQHandler+0x2c0>)
 80057d6:	4013      	ands	r3, r2
 80057d8:	d106      	bne.n	80057e8 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80057da:	23a0      	movs	r3, #160	@ 0xa0
 80057dc:	18fb      	adds	r3, r7, r3
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a8a      	ldr	r2, [pc, #552]	@ (8005a0c <HAL_UART_IRQHandler+0x2c4>)
 80057e2:	4013      	ands	r3, r2
 80057e4:	d100      	bne.n	80057e8 <HAL_UART_IRQHandler+0xa0>
 80057e6:	e115      	b.n	8005a14 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80057e8:	23a4      	movs	r3, #164	@ 0xa4
 80057ea:	18fb      	adds	r3, r7, r3
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2201      	movs	r2, #1
 80057f0:	4013      	ands	r3, r2
 80057f2:	d012      	beq.n	800581a <HAL_UART_IRQHandler+0xd2>
 80057f4:	23a0      	movs	r3, #160	@ 0xa0
 80057f6:	18fb      	adds	r3, r7, r3
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	2380      	movs	r3, #128	@ 0x80
 80057fc:	005b      	lsls	r3, r3, #1
 80057fe:	4013      	ands	r3, r2
 8005800:	d00b      	beq.n	800581a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2201      	movs	r2, #1
 8005808:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2290      	movs	r2, #144	@ 0x90
 800580e:	589b      	ldr	r3, [r3, r2]
 8005810:	2201      	movs	r2, #1
 8005812:	431a      	orrs	r2, r3
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2190      	movs	r1, #144	@ 0x90
 8005818:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800581a:	23a4      	movs	r3, #164	@ 0xa4
 800581c:	18fb      	adds	r3, r7, r3
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2202      	movs	r2, #2
 8005822:	4013      	ands	r3, r2
 8005824:	d011      	beq.n	800584a <HAL_UART_IRQHandler+0x102>
 8005826:	239c      	movs	r3, #156	@ 0x9c
 8005828:	18fb      	adds	r3, r7, r3
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2201      	movs	r2, #1
 800582e:	4013      	ands	r3, r2
 8005830:	d00b      	beq.n	800584a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2202      	movs	r2, #2
 8005838:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2290      	movs	r2, #144	@ 0x90
 800583e:	589b      	ldr	r3, [r3, r2]
 8005840:	2204      	movs	r2, #4
 8005842:	431a      	orrs	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2190      	movs	r1, #144	@ 0x90
 8005848:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800584a:	23a4      	movs	r3, #164	@ 0xa4
 800584c:	18fb      	adds	r3, r7, r3
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2204      	movs	r2, #4
 8005852:	4013      	ands	r3, r2
 8005854:	d011      	beq.n	800587a <HAL_UART_IRQHandler+0x132>
 8005856:	239c      	movs	r3, #156	@ 0x9c
 8005858:	18fb      	adds	r3, r7, r3
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2201      	movs	r2, #1
 800585e:	4013      	ands	r3, r2
 8005860:	d00b      	beq.n	800587a <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2204      	movs	r2, #4
 8005868:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2290      	movs	r2, #144	@ 0x90
 800586e:	589b      	ldr	r3, [r3, r2]
 8005870:	2202      	movs	r2, #2
 8005872:	431a      	orrs	r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2190      	movs	r1, #144	@ 0x90
 8005878:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800587a:	23a4      	movs	r3, #164	@ 0xa4
 800587c:	18fb      	adds	r3, r7, r3
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2208      	movs	r2, #8
 8005882:	4013      	ands	r3, r2
 8005884:	d017      	beq.n	80058b6 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005886:	23a0      	movs	r3, #160	@ 0xa0
 8005888:	18fb      	adds	r3, r7, r3
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2220      	movs	r2, #32
 800588e:	4013      	ands	r3, r2
 8005890:	d105      	bne.n	800589e <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005892:	239c      	movs	r3, #156	@ 0x9c
 8005894:	18fb      	adds	r3, r7, r3
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a5b      	ldr	r2, [pc, #364]	@ (8005a08 <HAL_UART_IRQHandler+0x2c0>)
 800589a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800589c:	d00b      	beq.n	80058b6 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2208      	movs	r2, #8
 80058a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2290      	movs	r2, #144	@ 0x90
 80058aa:	589b      	ldr	r3, [r3, r2]
 80058ac:	2208      	movs	r2, #8
 80058ae:	431a      	orrs	r2, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2190      	movs	r1, #144	@ 0x90
 80058b4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80058b6:	23a4      	movs	r3, #164	@ 0xa4
 80058b8:	18fb      	adds	r3, r7, r3
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	2380      	movs	r3, #128	@ 0x80
 80058be:	011b      	lsls	r3, r3, #4
 80058c0:	4013      	ands	r3, r2
 80058c2:	d013      	beq.n	80058ec <HAL_UART_IRQHandler+0x1a4>
 80058c4:	23a0      	movs	r3, #160	@ 0xa0
 80058c6:	18fb      	adds	r3, r7, r3
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	2380      	movs	r3, #128	@ 0x80
 80058cc:	04db      	lsls	r3, r3, #19
 80058ce:	4013      	ands	r3, r2
 80058d0:	d00c      	beq.n	80058ec <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2280      	movs	r2, #128	@ 0x80
 80058d8:	0112      	lsls	r2, r2, #4
 80058da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2290      	movs	r2, #144	@ 0x90
 80058e0:	589b      	ldr	r3, [r3, r2]
 80058e2:	2220      	movs	r2, #32
 80058e4:	431a      	orrs	r2, r3
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2190      	movs	r1, #144	@ 0x90
 80058ea:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2290      	movs	r2, #144	@ 0x90
 80058f0:	589b      	ldr	r3, [r3, r2]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d100      	bne.n	80058f8 <HAL_UART_IRQHandler+0x1b0>
 80058f6:	e25c      	b.n	8005db2 <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80058f8:	23a4      	movs	r3, #164	@ 0xa4
 80058fa:	18fb      	adds	r3, r7, r3
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2220      	movs	r2, #32
 8005900:	4013      	ands	r3, r2
 8005902:	d015      	beq.n	8005930 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005904:	23a0      	movs	r3, #160	@ 0xa0
 8005906:	18fb      	adds	r3, r7, r3
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2220      	movs	r2, #32
 800590c:	4013      	ands	r3, r2
 800590e:	d106      	bne.n	800591e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005910:	239c      	movs	r3, #156	@ 0x9c
 8005912:	18fb      	adds	r3, r7, r3
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	2380      	movs	r3, #128	@ 0x80
 8005918:	055b      	lsls	r3, r3, #21
 800591a:	4013      	ands	r3, r2
 800591c:	d008      	beq.n	8005930 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005922:	2b00      	cmp	r3, #0
 8005924:	d004      	beq.n	8005930 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	0010      	movs	r0, r2
 800592e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2290      	movs	r2, #144	@ 0x90
 8005934:	589b      	ldr	r3, [r3, r2]
 8005936:	2194      	movs	r1, #148	@ 0x94
 8005938:	187a      	adds	r2, r7, r1
 800593a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	2240      	movs	r2, #64	@ 0x40
 8005944:	4013      	ands	r3, r2
 8005946:	2b40      	cmp	r3, #64	@ 0x40
 8005948:	d004      	beq.n	8005954 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800594a:	187b      	adds	r3, r7, r1
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2228      	movs	r2, #40	@ 0x28
 8005950:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005952:	d04c      	beq.n	80059ee <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	0018      	movs	r0, r3
 8005958:	f000 fed2 	bl	8006700 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	2240      	movs	r2, #64	@ 0x40
 8005964:	4013      	ands	r3, r2
 8005966:	2b40      	cmp	r3, #64	@ 0x40
 8005968:	d13c      	bne.n	80059e4 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800596a:	f3ef 8310 	mrs	r3, PRIMASK
 800596e:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8005970:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005972:	2090      	movs	r0, #144	@ 0x90
 8005974:	183a      	adds	r2, r7, r0
 8005976:	6013      	str	r3, [r2, #0]
 8005978:	2301      	movs	r3, #1
 800597a:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800597c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800597e:	f383 8810 	msr	PRIMASK, r3
}
 8005982:	46c0      	nop			@ (mov r8, r8)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	689a      	ldr	r2, [r3, #8]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2140      	movs	r1, #64	@ 0x40
 8005990:	438a      	bics	r2, r1
 8005992:	609a      	str	r2, [r3, #8]
 8005994:	183b      	adds	r3, r7, r0
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800599a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800599c:	f383 8810 	msr	PRIMASK, r3
}
 80059a0:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2280      	movs	r2, #128	@ 0x80
 80059a6:	589b      	ldr	r3, [r3, r2]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d016      	beq.n	80059da <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2280      	movs	r2, #128	@ 0x80
 80059b0:	589b      	ldr	r3, [r3, r2]
 80059b2:	4a17      	ldr	r2, [pc, #92]	@ (8005a10 <HAL_UART_IRQHandler+0x2c8>)
 80059b4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2280      	movs	r2, #128	@ 0x80
 80059ba:	589b      	ldr	r3, [r3, r2]
 80059bc:	0018      	movs	r0, r3
 80059be:	f7fd f885 	bl	8002acc <HAL_DMA_Abort_IT>
 80059c2:	1e03      	subs	r3, r0, #0
 80059c4:	d01c      	beq.n	8005a00 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2280      	movs	r2, #128	@ 0x80
 80059ca:	589b      	ldr	r3, [r3, r2]
 80059cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	2180      	movs	r1, #128	@ 0x80
 80059d2:	5852      	ldr	r2, [r2, r1]
 80059d4:	0010      	movs	r0, r2
 80059d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059d8:	e012      	b.n	8005a00 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	0018      	movs	r0, r3
 80059de:	f7fc f8a9 	bl	8001b34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059e2:	e00d      	b.n	8005a00 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	0018      	movs	r0, r3
 80059e8:	f7fc f8a4 	bl	8001b34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059ec:	e008      	b.n	8005a00 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	0018      	movs	r0, r3
 80059f2:	f7fc f89f 	bl	8001b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2290      	movs	r2, #144	@ 0x90
 80059fa:	2100      	movs	r1, #0
 80059fc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80059fe:	e1d8      	b.n	8005db2 <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a00:	46c0      	nop			@ (mov r8, r8)
    return;
 8005a02:	e1d6      	b.n	8005db2 <HAL_UART_IRQHandler+0x66a>
 8005a04:	0000080f 	.word	0x0000080f
 8005a08:	10000001 	.word	0x10000001
 8005a0c:	04000120 	.word	0x04000120
 8005a10:	080067cd 	.word	0x080067cd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d000      	beq.n	8005a1e <HAL_UART_IRQHandler+0x2d6>
 8005a1c:	e15d      	b.n	8005cda <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005a1e:	23a4      	movs	r3, #164	@ 0xa4
 8005a20:	18fb      	adds	r3, r7, r3
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2210      	movs	r2, #16
 8005a26:	4013      	ands	r3, r2
 8005a28:	d100      	bne.n	8005a2c <HAL_UART_IRQHandler+0x2e4>
 8005a2a:	e156      	b.n	8005cda <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005a2c:	23a0      	movs	r3, #160	@ 0xa0
 8005a2e:	18fb      	adds	r3, r7, r3
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2210      	movs	r2, #16
 8005a34:	4013      	ands	r3, r2
 8005a36:	d100      	bne.n	8005a3a <HAL_UART_IRQHandler+0x2f2>
 8005a38:	e14f      	b.n	8005cda <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2210      	movs	r2, #16
 8005a40:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	2240      	movs	r2, #64	@ 0x40
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	2b40      	cmp	r3, #64	@ 0x40
 8005a4e:	d000      	beq.n	8005a52 <HAL_UART_IRQHandler+0x30a>
 8005a50:	e0c3      	b.n	8005bda <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2280      	movs	r2, #128	@ 0x80
 8005a56:	589b      	ldr	r3, [r3, r2]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	685a      	ldr	r2, [r3, #4]
 8005a5c:	217e      	movs	r1, #126	@ 0x7e
 8005a5e:	187b      	adds	r3, r7, r1
 8005a60:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005a62:	187b      	adds	r3, r7, r1
 8005a64:	881b      	ldrh	r3, [r3, #0]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d100      	bne.n	8005a6c <HAL_UART_IRQHandler+0x324>
 8005a6a:	e097      	b.n	8005b9c <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	225c      	movs	r2, #92	@ 0x5c
 8005a70:	5a9b      	ldrh	r3, [r3, r2]
 8005a72:	187a      	adds	r2, r7, r1
 8005a74:	8812      	ldrh	r2, [r2, #0]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d300      	bcc.n	8005a7c <HAL_UART_IRQHandler+0x334>
 8005a7a:	e08f      	b.n	8005b9c <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	187a      	adds	r2, r7, r1
 8005a80:	215e      	movs	r1, #94	@ 0x5e
 8005a82:	8812      	ldrh	r2, [r2, #0]
 8005a84:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2280      	movs	r2, #128	@ 0x80
 8005a8a:	589b      	ldr	r3, [r3, r2]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2220      	movs	r2, #32
 8005a92:	4013      	ands	r3, r2
 8005a94:	d170      	bne.n	8005b78 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005a96:	f3ef 8310 	mrs	r3, PRIMASK
 8005a9a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a9e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aa6:	f383 8810 	msr	PRIMASK, r3
}
 8005aaa:	46c0      	nop			@ (mov r8, r8)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	49c4      	ldr	r1, [pc, #784]	@ (8005dc8 <HAL_UART_IRQHandler+0x680>)
 8005ab8:	400a      	ands	r2, r1
 8005aba:	601a      	str	r2, [r3, #0]
 8005abc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005abe:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ac2:	f383 8810 	msr	PRIMASK, r3
}
 8005ac6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005ac8:	f3ef 8310 	mrs	r3, PRIMASK
 8005acc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8005ace:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ad0:	677b      	str	r3, [r7, #116]	@ 0x74
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ad6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ad8:	f383 8810 	msr	PRIMASK, r3
}
 8005adc:	46c0      	nop			@ (mov r8, r8)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	689a      	ldr	r2, [r3, #8]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2101      	movs	r1, #1
 8005aea:	438a      	bics	r2, r1
 8005aec:	609a      	str	r2, [r3, #8]
 8005aee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005af0:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005af2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005af4:	f383 8810 	msr	PRIMASK, r3
}
 8005af8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005afa:	f3ef 8310 	mrs	r3, PRIMASK
 8005afe:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8005b00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b02:	673b      	str	r3, [r7, #112]	@ 0x70
 8005b04:	2301      	movs	r3, #1
 8005b06:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b0a:	f383 8810 	msr	PRIMASK, r3
}
 8005b0e:	46c0      	nop			@ (mov r8, r8)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	689a      	ldr	r2, [r3, #8]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2140      	movs	r1, #64	@ 0x40
 8005b1c:	438a      	bics	r2, r1
 8005b1e:	609a      	str	r2, [r3, #8]
 8005b20:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005b22:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b26:	f383 8810 	msr	PRIMASK, r3
}
 8005b2a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	228c      	movs	r2, #140	@ 0x8c
 8005b30:	2120      	movs	r1, #32
 8005b32:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005b3a:	f3ef 8310 	mrs	r3, PRIMASK
 8005b3e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8005b40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b42:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005b44:	2301      	movs	r3, #1
 8005b46:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b48:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005b4a:	f383 8810 	msr	PRIMASK, r3
}
 8005b4e:	46c0      	nop			@ (mov r8, r8)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2110      	movs	r1, #16
 8005b5c:	438a      	bics	r2, r1
 8005b5e:	601a      	str	r2, [r3, #0]
 8005b60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b62:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b66:	f383 8810 	msr	PRIMASK, r3
}
 8005b6a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2280      	movs	r2, #128	@ 0x80
 8005b70:	589b      	ldr	r3, [r3, r2]
 8005b72:	0018      	movs	r0, r3
 8005b74:	f7fc ff48 	bl	8002a08 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2202      	movs	r2, #2
 8005b7c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	225c      	movs	r2, #92	@ 0x5c
 8005b82:	5a9a      	ldrh	r2, [r3, r2]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	215e      	movs	r1, #94	@ 0x5e
 8005b88:	5a5b      	ldrh	r3, [r3, r1]
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	0011      	movs	r1, r2
 8005b94:	0018      	movs	r0, r3
 8005b96:	f000 f92d 	bl	8005df4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005b9a:	e10c      	b.n	8005db6 <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	225c      	movs	r2, #92	@ 0x5c
 8005ba0:	5a9b      	ldrh	r3, [r3, r2]
 8005ba2:	227e      	movs	r2, #126	@ 0x7e
 8005ba4:	18ba      	adds	r2, r7, r2
 8005ba6:	8812      	ldrh	r2, [r2, #0]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d000      	beq.n	8005bae <HAL_UART_IRQHandler+0x466>
 8005bac:	e103      	b.n	8005db6 <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2280      	movs	r2, #128	@ 0x80
 8005bb2:	589b      	ldr	r3, [r3, r2]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2220      	movs	r2, #32
 8005bba:	4013      	ands	r3, r2
 8005bbc:	2b20      	cmp	r3, #32
 8005bbe:	d000      	beq.n	8005bc2 <HAL_UART_IRQHandler+0x47a>
 8005bc0:	e0f9      	b.n	8005db6 <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2202      	movs	r2, #2
 8005bc6:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	225c      	movs	r2, #92	@ 0x5c
 8005bcc:	5a9a      	ldrh	r2, [r3, r2]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	0011      	movs	r1, r2
 8005bd2:	0018      	movs	r0, r3
 8005bd4:	f000 f90e 	bl	8005df4 <HAL_UARTEx_RxEventCallback>
      return;
 8005bd8:	e0ed      	b.n	8005db6 <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	225c      	movs	r2, #92	@ 0x5c
 8005bde:	5a99      	ldrh	r1, [r3, r2]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	225e      	movs	r2, #94	@ 0x5e
 8005be4:	5a9b      	ldrh	r3, [r3, r2]
 8005be6:	b29a      	uxth	r2, r3
 8005be8:	208e      	movs	r0, #142	@ 0x8e
 8005bea:	183b      	adds	r3, r7, r0
 8005bec:	1a8a      	subs	r2, r1, r2
 8005bee:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	225e      	movs	r2, #94	@ 0x5e
 8005bf4:	5a9b      	ldrh	r3, [r3, r2]
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d100      	bne.n	8005bfe <HAL_UART_IRQHandler+0x4b6>
 8005bfc:	e0dd      	b.n	8005dba <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 8005bfe:	183b      	adds	r3, r7, r0
 8005c00:	881b      	ldrh	r3, [r3, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d100      	bne.n	8005c08 <HAL_UART_IRQHandler+0x4c0>
 8005c06:	e0d8      	b.n	8005dba <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005c08:	f3ef 8310 	mrs	r3, PRIMASK
 8005c0c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c10:	2488      	movs	r4, #136	@ 0x88
 8005c12:	193a      	adds	r2, r7, r4
 8005c14:	6013      	str	r3, [r2, #0]
 8005c16:	2301      	movs	r3, #1
 8005c18:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	f383 8810 	msr	PRIMASK, r3
}
 8005c20:	46c0      	nop			@ (mov r8, r8)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4967      	ldr	r1, [pc, #412]	@ (8005dcc <HAL_UART_IRQHandler+0x684>)
 8005c2e:	400a      	ands	r2, r1
 8005c30:	601a      	str	r2, [r3, #0]
 8005c32:	193b      	adds	r3, r7, r4
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	f383 8810 	msr	PRIMASK, r3
}
 8005c3e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005c40:	f3ef 8310 	mrs	r3, PRIMASK
 8005c44:	61bb      	str	r3, [r7, #24]
  return(result);
 8005c46:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c48:	2484      	movs	r4, #132	@ 0x84
 8005c4a:	193a      	adds	r2, r7, r4
 8005c4c:	6013      	str	r3, [r2, #0]
 8005c4e:	2301      	movs	r3, #1
 8005c50:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	f383 8810 	msr	PRIMASK, r3
}
 8005c58:	46c0      	nop			@ (mov r8, r8)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	689a      	ldr	r2, [r3, #8]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	495a      	ldr	r1, [pc, #360]	@ (8005dd0 <HAL_UART_IRQHandler+0x688>)
 8005c66:	400a      	ands	r2, r1
 8005c68:	609a      	str	r2, [r3, #8]
 8005c6a:	193b      	adds	r3, r7, r4
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c70:	6a3b      	ldr	r3, [r7, #32]
 8005c72:	f383 8810 	msr	PRIMASK, r3
}
 8005c76:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	228c      	movs	r2, #140	@ 0x8c
 8005c7c:	2120      	movs	r1, #32
 8005c7e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005c8c:	f3ef 8310 	mrs	r3, PRIMASK
 8005c90:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c94:	2480      	movs	r4, #128	@ 0x80
 8005c96:	193a      	adds	r2, r7, r4
 8005c98:	6013      	str	r3, [r2, #0]
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ca0:	f383 8810 	msr	PRIMASK, r3
}
 8005ca4:	46c0      	nop			@ (mov r8, r8)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2110      	movs	r1, #16
 8005cb2:	438a      	bics	r2, r1
 8005cb4:	601a      	str	r2, [r3, #0]
 8005cb6:	193b      	adds	r3, r7, r4
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cbe:	f383 8810 	msr	PRIMASK, r3
}
 8005cc2:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2202      	movs	r2, #2
 8005cc8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005cca:	183b      	adds	r3, r7, r0
 8005ccc:	881a      	ldrh	r2, [r3, #0]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	0011      	movs	r1, r2
 8005cd2:	0018      	movs	r0, r3
 8005cd4:	f000 f88e 	bl	8005df4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005cd8:	e06f      	b.n	8005dba <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005cda:	23a4      	movs	r3, #164	@ 0xa4
 8005cdc:	18fb      	adds	r3, r7, r3
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	2380      	movs	r3, #128	@ 0x80
 8005ce2:	035b      	lsls	r3, r3, #13
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	d010      	beq.n	8005d0a <HAL_UART_IRQHandler+0x5c2>
 8005ce8:	239c      	movs	r3, #156	@ 0x9c
 8005cea:	18fb      	adds	r3, r7, r3
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	2380      	movs	r3, #128	@ 0x80
 8005cf0:	03db      	lsls	r3, r3, #15
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	d009      	beq.n	8005d0a <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2280      	movs	r2, #128	@ 0x80
 8005cfc:	0352      	lsls	r2, r2, #13
 8005cfe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	0018      	movs	r0, r3
 8005d04:	f001 fc8e 	bl	8007624 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005d08:	e05a      	b.n	8005dc0 <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005d0a:	23a4      	movs	r3, #164	@ 0xa4
 8005d0c:	18fb      	adds	r3, r7, r3
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2280      	movs	r2, #128	@ 0x80
 8005d12:	4013      	ands	r3, r2
 8005d14:	d016      	beq.n	8005d44 <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005d16:	23a0      	movs	r3, #160	@ 0xa0
 8005d18:	18fb      	adds	r3, r7, r3
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2280      	movs	r2, #128	@ 0x80
 8005d1e:	4013      	ands	r3, r2
 8005d20:	d106      	bne.n	8005d30 <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005d22:	239c      	movs	r3, #156	@ 0x9c
 8005d24:	18fb      	adds	r3, r7, r3
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	2380      	movs	r3, #128	@ 0x80
 8005d2a:	041b      	lsls	r3, r3, #16
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	d009      	beq.n	8005d44 <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d042      	beq.n	8005dbe <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	0010      	movs	r0, r2
 8005d40:	4798      	blx	r3
    }
    return;
 8005d42:	e03c      	b.n	8005dbe <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005d44:	23a4      	movs	r3, #164	@ 0xa4
 8005d46:	18fb      	adds	r3, r7, r3
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2240      	movs	r2, #64	@ 0x40
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	d00a      	beq.n	8005d66 <HAL_UART_IRQHandler+0x61e>
 8005d50:	23a0      	movs	r3, #160	@ 0xa0
 8005d52:	18fb      	adds	r3, r7, r3
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2240      	movs	r2, #64	@ 0x40
 8005d58:	4013      	ands	r3, r2
 8005d5a:	d004      	beq.n	8005d66 <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	0018      	movs	r0, r3
 8005d60:	f000 ff3c 	bl	8006bdc <UART_EndTransmit_IT>
    return;
 8005d64:	e02c      	b.n	8005dc0 <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005d66:	23a4      	movs	r3, #164	@ 0xa4
 8005d68:	18fb      	adds	r3, r7, r3
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	2380      	movs	r3, #128	@ 0x80
 8005d6e:	041b      	lsls	r3, r3, #16
 8005d70:	4013      	ands	r3, r2
 8005d72:	d00b      	beq.n	8005d8c <HAL_UART_IRQHandler+0x644>
 8005d74:	23a0      	movs	r3, #160	@ 0xa0
 8005d76:	18fb      	adds	r3, r7, r3
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	2380      	movs	r3, #128	@ 0x80
 8005d7c:	05db      	lsls	r3, r3, #23
 8005d7e:	4013      	ands	r3, r2
 8005d80:	d004      	beq.n	8005d8c <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	0018      	movs	r0, r3
 8005d86:	f001 fc5d 	bl	8007644 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005d8a:	e019      	b.n	8005dc0 <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005d8c:	23a4      	movs	r3, #164	@ 0xa4
 8005d8e:	18fb      	adds	r3, r7, r3
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	2380      	movs	r3, #128	@ 0x80
 8005d94:	045b      	lsls	r3, r3, #17
 8005d96:	4013      	ands	r3, r2
 8005d98:	d012      	beq.n	8005dc0 <HAL_UART_IRQHandler+0x678>
 8005d9a:	23a0      	movs	r3, #160	@ 0xa0
 8005d9c:	18fb      	adds	r3, r7, r3
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	da0d      	bge.n	8005dc0 <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	0018      	movs	r0, r3
 8005da8:	f001 fc44 	bl	8007634 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005dac:	e008      	b.n	8005dc0 <HAL_UART_IRQHandler+0x678>
      return;
 8005dae:	46c0      	nop			@ (mov r8, r8)
 8005db0:	e006      	b.n	8005dc0 <HAL_UART_IRQHandler+0x678>
    return;
 8005db2:	46c0      	nop			@ (mov r8, r8)
 8005db4:	e004      	b.n	8005dc0 <HAL_UART_IRQHandler+0x678>
      return;
 8005db6:	46c0      	nop			@ (mov r8, r8)
 8005db8:	e002      	b.n	8005dc0 <HAL_UART_IRQHandler+0x678>
      return;
 8005dba:	46c0      	nop			@ (mov r8, r8)
 8005dbc:	e000      	b.n	8005dc0 <HAL_UART_IRQHandler+0x678>
    return;
 8005dbe:	46c0      	nop			@ (mov r8, r8)
  }
}
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	b02a      	add	sp, #168	@ 0xa8
 8005dc4:	bdb0      	pop	{r4, r5, r7, pc}
 8005dc6:	46c0      	nop			@ (mov r8, r8)
 8005dc8:	fffffeff 	.word	0xfffffeff
 8005dcc:	fffffedf 	.word	0xfffffedf
 8005dd0:	effffffe 	.word	0xeffffffe

08005dd4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8005ddc:	46c0      	nop			@ (mov r8, r8)
 8005dde:	46bd      	mov	sp, r7
 8005de0:	b002      	add	sp, #8
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8005dec:	46c0      	nop			@ (mov r8, r8)
 8005dee:	46bd      	mov	sp, r7
 8005df0:	b002      	add	sp, #8
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b082      	sub	sp, #8
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	000a      	movs	r2, r1
 8005dfe:	1cbb      	adds	r3, r7, #2
 8005e00:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e02:	46c0      	nop			@ (mov r8, r8)
 8005e04:	46bd      	mov	sp, r7
 8005e06:	b002      	add	sp, #8
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	b082      	sub	sp, #8
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2290      	movs	r2, #144	@ 0x90
 8005e16:	589b      	ldr	r3, [r3, r2]
}
 8005e18:	0018      	movs	r0, r3
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	b002      	add	sp, #8
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b088      	sub	sp, #32
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e28:	231e      	movs	r3, #30
 8005e2a:	18fb      	adds	r3, r7, r3
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	689a      	ldr	r2, [r3, #8]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	431a      	orrs	r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	431a      	orrs	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	69db      	ldr	r3, [r3, #28]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4aab      	ldr	r2, [pc, #684]	@ (80060fc <UART_SetConfig+0x2dc>)
 8005e50:	4013      	ands	r3, r2
 8005e52:	0019      	movs	r1, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	697a      	ldr	r2, [r7, #20]
 8005e5a:	430a      	orrs	r2, r1
 8005e5c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	4aa6      	ldr	r2, [pc, #664]	@ (8006100 <UART_SetConfig+0x2e0>)
 8005e66:	4013      	ands	r3, r2
 8005e68:	0019      	movs	r1, r3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	68da      	ldr	r2, [r3, #12]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	430a      	orrs	r2, r1
 8005e74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	699b      	ldr	r3, [r3, #24]
 8005e7a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a1b      	ldr	r3, [r3, #32]
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	4a9d      	ldr	r2, [pc, #628]	@ (8006104 <UART_SetConfig+0x2e4>)
 8005e8e:	4013      	ands	r3, r2
 8005e90:	0019      	movs	r1, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	697a      	ldr	r2, [r7, #20]
 8005e98:	430a      	orrs	r2, r1
 8005e9a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ea2:	220f      	movs	r2, #15
 8005ea4:	4393      	bics	r3, r2
 8005ea6:	0019      	movs	r1, r3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	430a      	orrs	r2, r1
 8005eb2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a93      	ldr	r2, [pc, #588]	@ (8006108 <UART_SetConfig+0x2e8>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d127      	bne.n	8005f0e <UART_SetConfig+0xee>
 8005ebe:	4b93      	ldr	r3, [pc, #588]	@ (800610c <UART_SetConfig+0x2ec>)
 8005ec0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ec2:	2203      	movs	r2, #3
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	2b03      	cmp	r3, #3
 8005ec8:	d017      	beq.n	8005efa <UART_SetConfig+0xda>
 8005eca:	d81b      	bhi.n	8005f04 <UART_SetConfig+0xe4>
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d00a      	beq.n	8005ee6 <UART_SetConfig+0xc6>
 8005ed0:	d818      	bhi.n	8005f04 <UART_SetConfig+0xe4>
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d002      	beq.n	8005edc <UART_SetConfig+0xbc>
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d00a      	beq.n	8005ef0 <UART_SetConfig+0xd0>
 8005eda:	e013      	b.n	8005f04 <UART_SetConfig+0xe4>
 8005edc:	231f      	movs	r3, #31
 8005ede:	18fb      	adds	r3, r7, r3
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	701a      	strb	r2, [r3, #0]
 8005ee4:	e021      	b.n	8005f2a <UART_SetConfig+0x10a>
 8005ee6:	231f      	movs	r3, #31
 8005ee8:	18fb      	adds	r3, r7, r3
 8005eea:	2202      	movs	r2, #2
 8005eec:	701a      	strb	r2, [r3, #0]
 8005eee:	e01c      	b.n	8005f2a <UART_SetConfig+0x10a>
 8005ef0:	231f      	movs	r3, #31
 8005ef2:	18fb      	adds	r3, r7, r3
 8005ef4:	2204      	movs	r2, #4
 8005ef6:	701a      	strb	r2, [r3, #0]
 8005ef8:	e017      	b.n	8005f2a <UART_SetConfig+0x10a>
 8005efa:	231f      	movs	r3, #31
 8005efc:	18fb      	adds	r3, r7, r3
 8005efe:	2208      	movs	r2, #8
 8005f00:	701a      	strb	r2, [r3, #0]
 8005f02:	e012      	b.n	8005f2a <UART_SetConfig+0x10a>
 8005f04:	231f      	movs	r3, #31
 8005f06:	18fb      	adds	r3, r7, r3
 8005f08:	2210      	movs	r2, #16
 8005f0a:	701a      	strb	r2, [r3, #0]
 8005f0c:	e00d      	b.n	8005f2a <UART_SetConfig+0x10a>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a7f      	ldr	r2, [pc, #508]	@ (8006110 <UART_SetConfig+0x2f0>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d104      	bne.n	8005f22 <UART_SetConfig+0x102>
 8005f18:	231f      	movs	r3, #31
 8005f1a:	18fb      	adds	r3, r7, r3
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	701a      	strb	r2, [r3, #0]
 8005f20:	e003      	b.n	8005f2a <UART_SetConfig+0x10a>
 8005f22:	231f      	movs	r3, #31
 8005f24:	18fb      	adds	r3, r7, r3
 8005f26:	2210      	movs	r2, #16
 8005f28:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	69da      	ldr	r2, [r3, #28]
 8005f2e:	2380      	movs	r3, #128	@ 0x80
 8005f30:	021b      	lsls	r3, r3, #8
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d000      	beq.n	8005f38 <UART_SetConfig+0x118>
 8005f36:	e06f      	b.n	8006018 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8005f38:	231f      	movs	r3, #31
 8005f3a:	18fb      	adds	r3, r7, r3
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	2b08      	cmp	r3, #8
 8005f40:	d01f      	beq.n	8005f82 <UART_SetConfig+0x162>
 8005f42:	dc22      	bgt.n	8005f8a <UART_SetConfig+0x16a>
 8005f44:	2b04      	cmp	r3, #4
 8005f46:	d017      	beq.n	8005f78 <UART_SetConfig+0x158>
 8005f48:	dc1f      	bgt.n	8005f8a <UART_SetConfig+0x16a>
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d002      	beq.n	8005f54 <UART_SetConfig+0x134>
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	d005      	beq.n	8005f5e <UART_SetConfig+0x13e>
 8005f52:	e01a      	b.n	8005f8a <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f54:	f7fd fb16 	bl	8003584 <HAL_RCC_GetPCLK1Freq>
 8005f58:	0003      	movs	r3, r0
 8005f5a:	61bb      	str	r3, [r7, #24]
        break;
 8005f5c:	e01c      	b.n	8005f98 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8005f5e:	4b6b      	ldr	r3, [pc, #428]	@ (800610c <UART_SetConfig+0x2ec>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	095b      	lsrs	r3, r3, #5
 8005f64:	2207      	movs	r2, #7
 8005f66:	4013      	ands	r3, r2
 8005f68:	3301      	adds	r3, #1
 8005f6a:	0019      	movs	r1, r3
 8005f6c:	4869      	ldr	r0, [pc, #420]	@ (8006114 <UART_SetConfig+0x2f4>)
 8005f6e:	f7fa f8cb 	bl	8000108 <__udivsi3>
 8005f72:	0003      	movs	r3, r0
 8005f74:	61bb      	str	r3, [r7, #24]
        break;
 8005f76:	e00f      	b.n	8005f98 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f78:	f7fd faa4 	bl	80034c4 <HAL_RCC_GetSysClockFreq>
 8005f7c:	0003      	movs	r3, r0
 8005f7e:	61bb      	str	r3, [r7, #24]
        break;
 8005f80:	e00a      	b.n	8005f98 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f82:	2380      	movs	r3, #128	@ 0x80
 8005f84:	021b      	lsls	r3, r3, #8
 8005f86:	61bb      	str	r3, [r7, #24]
        break;
 8005f88:	e006      	b.n	8005f98 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005f8e:	231e      	movs	r3, #30
 8005f90:	18fb      	adds	r3, r7, r3
 8005f92:	2201      	movs	r2, #1
 8005f94:	701a      	strb	r2, [r3, #0]
        break;
 8005f96:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d100      	bne.n	8005fa0 <UART_SetConfig+0x180>
 8005f9e:	e097      	b.n	80060d0 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005fa4:	4b5c      	ldr	r3, [pc, #368]	@ (8006118 <UART_SetConfig+0x2f8>)
 8005fa6:	0052      	lsls	r2, r2, #1
 8005fa8:	5ad3      	ldrh	r3, [r2, r3]
 8005faa:	0019      	movs	r1, r3
 8005fac:	69b8      	ldr	r0, [r7, #24]
 8005fae:	f7fa f8ab 	bl	8000108 <__udivsi3>
 8005fb2:	0003      	movs	r3, r0
 8005fb4:	005a      	lsls	r2, r3, #1
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	085b      	lsrs	r3, r3, #1
 8005fbc:	18d2      	adds	r2, r2, r3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	0019      	movs	r1, r3
 8005fc4:	0010      	movs	r0, r2
 8005fc6:	f7fa f89f 	bl	8000108 <__udivsi3>
 8005fca:	0003      	movs	r3, r0
 8005fcc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	2b0f      	cmp	r3, #15
 8005fd2:	d91c      	bls.n	800600e <UART_SetConfig+0x1ee>
 8005fd4:	693a      	ldr	r2, [r7, #16]
 8005fd6:	2380      	movs	r3, #128	@ 0x80
 8005fd8:	025b      	lsls	r3, r3, #9
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d217      	bcs.n	800600e <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	200e      	movs	r0, #14
 8005fe4:	183b      	adds	r3, r7, r0
 8005fe6:	210f      	movs	r1, #15
 8005fe8:	438a      	bics	r2, r1
 8005fea:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	085b      	lsrs	r3, r3, #1
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	2207      	movs	r2, #7
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	b299      	uxth	r1, r3
 8005ff8:	183b      	adds	r3, r7, r0
 8005ffa:	183a      	adds	r2, r7, r0
 8005ffc:	8812      	ldrh	r2, [r2, #0]
 8005ffe:	430a      	orrs	r2, r1
 8006000:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	183a      	adds	r2, r7, r0
 8006008:	8812      	ldrh	r2, [r2, #0]
 800600a:	60da      	str	r2, [r3, #12]
 800600c:	e060      	b.n	80060d0 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 800600e:	231e      	movs	r3, #30
 8006010:	18fb      	adds	r3, r7, r3
 8006012:	2201      	movs	r2, #1
 8006014:	701a      	strb	r2, [r3, #0]
 8006016:	e05b      	b.n	80060d0 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006018:	231f      	movs	r3, #31
 800601a:	18fb      	adds	r3, r7, r3
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	2b08      	cmp	r3, #8
 8006020:	d01f      	beq.n	8006062 <UART_SetConfig+0x242>
 8006022:	dc22      	bgt.n	800606a <UART_SetConfig+0x24a>
 8006024:	2b04      	cmp	r3, #4
 8006026:	d017      	beq.n	8006058 <UART_SetConfig+0x238>
 8006028:	dc1f      	bgt.n	800606a <UART_SetConfig+0x24a>
 800602a:	2b00      	cmp	r3, #0
 800602c:	d002      	beq.n	8006034 <UART_SetConfig+0x214>
 800602e:	2b02      	cmp	r3, #2
 8006030:	d005      	beq.n	800603e <UART_SetConfig+0x21e>
 8006032:	e01a      	b.n	800606a <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006034:	f7fd faa6 	bl	8003584 <HAL_RCC_GetPCLK1Freq>
 8006038:	0003      	movs	r3, r0
 800603a:	61bb      	str	r3, [r7, #24]
        break;
 800603c:	e01c      	b.n	8006078 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800603e:	4b33      	ldr	r3, [pc, #204]	@ (800610c <UART_SetConfig+0x2ec>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	095b      	lsrs	r3, r3, #5
 8006044:	2207      	movs	r2, #7
 8006046:	4013      	ands	r3, r2
 8006048:	3301      	adds	r3, #1
 800604a:	0019      	movs	r1, r3
 800604c:	4831      	ldr	r0, [pc, #196]	@ (8006114 <UART_SetConfig+0x2f4>)
 800604e:	f7fa f85b 	bl	8000108 <__udivsi3>
 8006052:	0003      	movs	r3, r0
 8006054:	61bb      	str	r3, [r7, #24]
        break;
 8006056:	e00f      	b.n	8006078 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006058:	f7fd fa34 	bl	80034c4 <HAL_RCC_GetSysClockFreq>
 800605c:	0003      	movs	r3, r0
 800605e:	61bb      	str	r3, [r7, #24]
        break;
 8006060:	e00a      	b.n	8006078 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006062:	2380      	movs	r3, #128	@ 0x80
 8006064:	021b      	lsls	r3, r3, #8
 8006066:	61bb      	str	r3, [r7, #24]
        break;
 8006068:	e006      	b.n	8006078 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 800606a:	2300      	movs	r3, #0
 800606c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800606e:	231e      	movs	r3, #30
 8006070:	18fb      	adds	r3, r7, r3
 8006072:	2201      	movs	r2, #1
 8006074:	701a      	strb	r2, [r3, #0]
        break;
 8006076:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d028      	beq.n	80060d0 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006082:	4b25      	ldr	r3, [pc, #148]	@ (8006118 <UART_SetConfig+0x2f8>)
 8006084:	0052      	lsls	r2, r2, #1
 8006086:	5ad3      	ldrh	r3, [r2, r3]
 8006088:	0019      	movs	r1, r3
 800608a:	69b8      	ldr	r0, [r7, #24]
 800608c:	f7fa f83c 	bl	8000108 <__udivsi3>
 8006090:	0003      	movs	r3, r0
 8006092:	001a      	movs	r2, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	085b      	lsrs	r3, r3, #1
 800609a:	18d2      	adds	r2, r2, r3
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	0019      	movs	r1, r3
 80060a2:	0010      	movs	r0, r2
 80060a4:	f7fa f830 	bl	8000108 <__udivsi3>
 80060a8:	0003      	movs	r3, r0
 80060aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	2b0f      	cmp	r3, #15
 80060b0:	d90a      	bls.n	80060c8 <UART_SetConfig+0x2a8>
 80060b2:	693a      	ldr	r2, [r7, #16]
 80060b4:	2380      	movs	r3, #128	@ 0x80
 80060b6:	025b      	lsls	r3, r3, #9
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d205      	bcs.n	80060c8 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	b29a      	uxth	r2, r3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	60da      	str	r2, [r3, #12]
 80060c6:	e003      	b.n	80060d0 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80060c8:	231e      	movs	r3, #30
 80060ca:	18fb      	adds	r3, r7, r3
 80060cc:	2201      	movs	r2, #1
 80060ce:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	226a      	movs	r2, #106	@ 0x6a
 80060d4:	2101      	movs	r1, #1
 80060d6:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2268      	movs	r2, #104	@ 0x68
 80060dc:	2101      	movs	r1, #1
 80060de:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80060ec:	231e      	movs	r3, #30
 80060ee:	18fb      	adds	r3, r7, r3
 80060f0:	781b      	ldrb	r3, [r3, #0]
}
 80060f2:	0018      	movs	r0, r3
 80060f4:	46bd      	mov	sp, r7
 80060f6:	b008      	add	sp, #32
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	46c0      	nop			@ (mov r8, r8)
 80060fc:	cfff69f3 	.word	0xcfff69f3
 8006100:	ffffcfff 	.word	0xffffcfff
 8006104:	11fff4ff 	.word	0x11fff4ff
 8006108:	40013800 	.word	0x40013800
 800610c:	40021000 	.word	0x40021000
 8006110:	40004400 	.word	0x40004400
 8006114:	02dc6c00 	.word	0x02dc6c00
 8006118:	08007ed0 	.word	0x08007ed0

0800611c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006128:	2208      	movs	r2, #8
 800612a:	4013      	ands	r3, r2
 800612c:	d00b      	beq.n	8006146 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	4a4a      	ldr	r2, [pc, #296]	@ (8006260 <UART_AdvFeatureConfig+0x144>)
 8006136:	4013      	ands	r3, r2
 8006138:	0019      	movs	r1, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	430a      	orrs	r2, r1
 8006144:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800614a:	2201      	movs	r2, #1
 800614c:	4013      	ands	r3, r2
 800614e:	d00b      	beq.n	8006168 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	4a43      	ldr	r2, [pc, #268]	@ (8006264 <UART_AdvFeatureConfig+0x148>)
 8006158:	4013      	ands	r3, r2
 800615a:	0019      	movs	r1, r3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	430a      	orrs	r2, r1
 8006166:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800616c:	2202      	movs	r2, #2
 800616e:	4013      	ands	r3, r2
 8006170:	d00b      	beq.n	800618a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	4a3b      	ldr	r2, [pc, #236]	@ (8006268 <UART_AdvFeatureConfig+0x14c>)
 800617a:	4013      	ands	r3, r2
 800617c:	0019      	movs	r1, r3
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	430a      	orrs	r2, r1
 8006188:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800618e:	2204      	movs	r2, #4
 8006190:	4013      	ands	r3, r2
 8006192:	d00b      	beq.n	80061ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	4a34      	ldr	r2, [pc, #208]	@ (800626c <UART_AdvFeatureConfig+0x150>)
 800619c:	4013      	ands	r3, r2
 800619e:	0019      	movs	r1, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	430a      	orrs	r2, r1
 80061aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061b0:	2210      	movs	r2, #16
 80061b2:	4013      	ands	r3, r2
 80061b4:	d00b      	beq.n	80061ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	4a2c      	ldr	r2, [pc, #176]	@ (8006270 <UART_AdvFeatureConfig+0x154>)
 80061be:	4013      	ands	r3, r2
 80061c0:	0019      	movs	r1, r3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	430a      	orrs	r2, r1
 80061cc:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061d2:	2220      	movs	r2, #32
 80061d4:	4013      	ands	r3, r2
 80061d6:	d00b      	beq.n	80061f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	4a25      	ldr	r2, [pc, #148]	@ (8006274 <UART_AdvFeatureConfig+0x158>)
 80061e0:	4013      	ands	r3, r2
 80061e2:	0019      	movs	r1, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	430a      	orrs	r2, r1
 80061ee:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061f4:	2240      	movs	r2, #64	@ 0x40
 80061f6:	4013      	ands	r3, r2
 80061f8:	d01d      	beq.n	8006236 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	4a1d      	ldr	r2, [pc, #116]	@ (8006278 <UART_AdvFeatureConfig+0x15c>)
 8006202:	4013      	ands	r3, r2
 8006204:	0019      	movs	r1, r3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	430a      	orrs	r2, r1
 8006210:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006216:	2380      	movs	r3, #128	@ 0x80
 8006218:	035b      	lsls	r3, r3, #13
 800621a:	429a      	cmp	r2, r3
 800621c:	d10b      	bne.n	8006236 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	4a15      	ldr	r2, [pc, #84]	@ (800627c <UART_AdvFeatureConfig+0x160>)
 8006226:	4013      	ands	r3, r2
 8006228:	0019      	movs	r1, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	430a      	orrs	r2, r1
 8006234:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800623a:	2280      	movs	r2, #128	@ 0x80
 800623c:	4013      	ands	r3, r2
 800623e:	d00b      	beq.n	8006258 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	4a0e      	ldr	r2, [pc, #56]	@ (8006280 <UART_AdvFeatureConfig+0x164>)
 8006248:	4013      	ands	r3, r2
 800624a:	0019      	movs	r1, r3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	430a      	orrs	r2, r1
 8006256:	605a      	str	r2, [r3, #4]
  }
}
 8006258:	46c0      	nop			@ (mov r8, r8)
 800625a:	46bd      	mov	sp, r7
 800625c:	b002      	add	sp, #8
 800625e:	bd80      	pop	{r7, pc}
 8006260:	ffff7fff 	.word	0xffff7fff
 8006264:	fffdffff 	.word	0xfffdffff
 8006268:	fffeffff 	.word	0xfffeffff
 800626c:	fffbffff 	.word	0xfffbffff
 8006270:	ffffefff 	.word	0xffffefff
 8006274:	ffffdfff 	.word	0xffffdfff
 8006278:	ffefffff 	.word	0xffefffff
 800627c:	ff9fffff 	.word	0xff9fffff
 8006280:	fff7ffff 	.word	0xfff7ffff

08006284 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b092      	sub	sp, #72	@ 0x48
 8006288:	af02      	add	r7, sp, #8
 800628a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2290      	movs	r2, #144	@ 0x90
 8006290:	2100      	movs	r1, #0
 8006292:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006294:	f7fc fa92 	bl	80027bc <HAL_GetTick>
 8006298:	0003      	movs	r3, r0
 800629a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2208      	movs	r2, #8
 80062a4:	4013      	ands	r3, r2
 80062a6:	2b08      	cmp	r3, #8
 80062a8:	d12d      	bne.n	8006306 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062ac:	2280      	movs	r2, #128	@ 0x80
 80062ae:	0391      	lsls	r1, r2, #14
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	4a47      	ldr	r2, [pc, #284]	@ (80063d0 <UART_CheckIdleState+0x14c>)
 80062b4:	9200      	str	r2, [sp, #0]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f000 f88e 	bl	80063d8 <UART_WaitOnFlagUntilTimeout>
 80062bc:	1e03      	subs	r3, r0, #0
 80062be:	d022      	beq.n	8006306 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80062c0:	f3ef 8310 	mrs	r3, PRIMASK
 80062c4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80062c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80062c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80062ca:	2301      	movs	r3, #1
 80062cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062d0:	f383 8810 	msr	PRIMASK, r3
}
 80062d4:	46c0      	nop			@ (mov r8, r8)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2180      	movs	r1, #128	@ 0x80
 80062e2:	438a      	bics	r2, r1
 80062e4:	601a      	str	r2, [r3, #0]
 80062e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ec:	f383 8810 	msr	PRIMASK, r3
}
 80062f0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2288      	movs	r2, #136	@ 0x88
 80062f6:	2120      	movs	r1, #32
 80062f8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2284      	movs	r2, #132	@ 0x84
 80062fe:	2100      	movs	r1, #0
 8006300:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006302:	2303      	movs	r3, #3
 8006304:	e060      	b.n	80063c8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2204      	movs	r2, #4
 800630e:	4013      	ands	r3, r2
 8006310:	2b04      	cmp	r3, #4
 8006312:	d146      	bne.n	80063a2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006314:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006316:	2280      	movs	r2, #128	@ 0x80
 8006318:	03d1      	lsls	r1, r2, #15
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	4a2c      	ldr	r2, [pc, #176]	@ (80063d0 <UART_CheckIdleState+0x14c>)
 800631e:	9200      	str	r2, [sp, #0]
 8006320:	2200      	movs	r2, #0
 8006322:	f000 f859 	bl	80063d8 <UART_WaitOnFlagUntilTimeout>
 8006326:	1e03      	subs	r3, r0, #0
 8006328:	d03b      	beq.n	80063a2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800632a:	f3ef 8310 	mrs	r3, PRIMASK
 800632e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006330:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006332:	637b      	str	r3, [r7, #52]	@ 0x34
 8006334:	2301      	movs	r3, #1
 8006336:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	f383 8810 	msr	PRIMASK, r3
}
 800633e:	46c0      	nop			@ (mov r8, r8)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4922      	ldr	r1, [pc, #136]	@ (80063d4 <UART_CheckIdleState+0x150>)
 800634c:	400a      	ands	r2, r1
 800634e:	601a      	str	r2, [r3, #0]
 8006350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006352:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	f383 8810 	msr	PRIMASK, r3
}
 800635a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800635c:	f3ef 8310 	mrs	r3, PRIMASK
 8006360:	61bb      	str	r3, [r7, #24]
  return(result);
 8006362:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006364:	633b      	str	r3, [r7, #48]	@ 0x30
 8006366:	2301      	movs	r3, #1
 8006368:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	f383 8810 	msr	PRIMASK, r3
}
 8006370:	46c0      	nop			@ (mov r8, r8)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	689a      	ldr	r2, [r3, #8]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2101      	movs	r1, #1
 800637e:	438a      	bics	r2, r1
 8006380:	609a      	str	r2, [r3, #8]
 8006382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006384:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006386:	6a3b      	ldr	r3, [r7, #32]
 8006388:	f383 8810 	msr	PRIMASK, r3
}
 800638c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	228c      	movs	r2, #140	@ 0x8c
 8006392:	2120      	movs	r1, #32
 8006394:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2284      	movs	r2, #132	@ 0x84
 800639a:	2100      	movs	r1, #0
 800639c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	e012      	b.n	80063c8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2288      	movs	r2, #136	@ 0x88
 80063a6:	2120      	movs	r1, #32
 80063a8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	228c      	movs	r2, #140	@ 0x8c
 80063ae:	2120      	movs	r1, #32
 80063b0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2284      	movs	r2, #132	@ 0x84
 80063c2:	2100      	movs	r1, #0
 80063c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	0018      	movs	r0, r3
 80063ca:	46bd      	mov	sp, r7
 80063cc:	b010      	add	sp, #64	@ 0x40
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	01ffffff 	.word	0x01ffffff
 80063d4:	fffffedf 	.word	0xfffffedf

080063d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	603b      	str	r3, [r7, #0]
 80063e4:	1dfb      	adds	r3, r7, #7
 80063e6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063e8:	e051      	b.n	800648e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	3301      	adds	r3, #1
 80063ee:	d04e      	beq.n	800648e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063f0:	f7fc f9e4 	bl	80027bc <HAL_GetTick>
 80063f4:	0002      	movs	r2, r0
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	69ba      	ldr	r2, [r7, #24]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d302      	bcc.n	8006406 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d101      	bne.n	800640a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006406:	2303      	movs	r3, #3
 8006408:	e051      	b.n	80064ae <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2204      	movs	r2, #4
 8006412:	4013      	ands	r3, r2
 8006414:	d03b      	beq.n	800648e <UART_WaitOnFlagUntilTimeout+0xb6>
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	2b80      	cmp	r3, #128	@ 0x80
 800641a:	d038      	beq.n	800648e <UART_WaitOnFlagUntilTimeout+0xb6>
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	2b40      	cmp	r3, #64	@ 0x40
 8006420:	d035      	beq.n	800648e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	69db      	ldr	r3, [r3, #28]
 8006428:	2208      	movs	r2, #8
 800642a:	4013      	ands	r3, r2
 800642c:	2b08      	cmp	r3, #8
 800642e:	d111      	bne.n	8006454 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2208      	movs	r2, #8
 8006436:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	0018      	movs	r0, r3
 800643c:	f000 f960 	bl	8006700 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2290      	movs	r2, #144	@ 0x90
 8006444:	2108      	movs	r1, #8
 8006446:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2284      	movs	r2, #132	@ 0x84
 800644c:	2100      	movs	r1, #0
 800644e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e02c      	b.n	80064ae <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	69da      	ldr	r2, [r3, #28]
 800645a:	2380      	movs	r3, #128	@ 0x80
 800645c:	011b      	lsls	r3, r3, #4
 800645e:	401a      	ands	r2, r3
 8006460:	2380      	movs	r3, #128	@ 0x80
 8006462:	011b      	lsls	r3, r3, #4
 8006464:	429a      	cmp	r2, r3
 8006466:	d112      	bne.n	800648e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2280      	movs	r2, #128	@ 0x80
 800646e:	0112      	lsls	r2, r2, #4
 8006470:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	0018      	movs	r0, r3
 8006476:	f000 f943 	bl	8006700 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2290      	movs	r2, #144	@ 0x90
 800647e:	2120      	movs	r1, #32
 8006480:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2284      	movs	r2, #132	@ 0x84
 8006486:	2100      	movs	r1, #0
 8006488:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800648a:	2303      	movs	r3, #3
 800648c:	e00f      	b.n	80064ae <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	69db      	ldr	r3, [r3, #28]
 8006494:	68ba      	ldr	r2, [r7, #8]
 8006496:	4013      	ands	r3, r2
 8006498:	68ba      	ldr	r2, [r7, #8]
 800649a:	1ad3      	subs	r3, r2, r3
 800649c:	425a      	negs	r2, r3
 800649e:	4153      	adcs	r3, r2
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	001a      	movs	r2, r3
 80064a4:	1dfb      	adds	r3, r7, #7
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d09e      	beq.n	80063ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	0018      	movs	r0, r3
 80064b0:	46bd      	mov	sp, r7
 80064b2:	b004      	add	sp, #16
 80064b4:	bd80      	pop	{r7, pc}
	...

080064b8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b098      	sub	sp, #96	@ 0x60
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	1dbb      	adds	r3, r7, #6
 80064c4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	68ba      	ldr	r2, [r7, #8]
 80064ca:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	1dba      	adds	r2, r7, #6
 80064d0:	215c      	movs	r1, #92	@ 0x5c
 80064d2:	8812      	ldrh	r2, [r2, #0]
 80064d4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	1dba      	adds	r2, r7, #6
 80064da:	215e      	movs	r1, #94	@ 0x5e
 80064dc:	8812      	ldrh	r2, [r2, #0]
 80064de:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2200      	movs	r2, #0
 80064e4:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	689a      	ldr	r2, [r3, #8]
 80064ea:	2380      	movs	r3, #128	@ 0x80
 80064ec:	015b      	lsls	r3, r3, #5
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d10d      	bne.n	800650e <UART_Start_Receive_IT+0x56>
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d104      	bne.n	8006504 <UART_Start_Receive_IT+0x4c>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2260      	movs	r2, #96	@ 0x60
 80064fe:	497b      	ldr	r1, [pc, #492]	@ (80066ec <UART_Start_Receive_IT+0x234>)
 8006500:	5299      	strh	r1, [r3, r2]
 8006502:	e02e      	b.n	8006562 <UART_Start_Receive_IT+0xaa>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2260      	movs	r2, #96	@ 0x60
 8006508:	21ff      	movs	r1, #255	@ 0xff
 800650a:	5299      	strh	r1, [r3, r2]
 800650c:	e029      	b.n	8006562 <UART_Start_Receive_IT+0xaa>
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d10d      	bne.n	8006532 <UART_Start_Receive_IT+0x7a>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d104      	bne.n	8006528 <UART_Start_Receive_IT+0x70>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2260      	movs	r2, #96	@ 0x60
 8006522:	21ff      	movs	r1, #255	@ 0xff
 8006524:	5299      	strh	r1, [r3, r2]
 8006526:	e01c      	b.n	8006562 <UART_Start_Receive_IT+0xaa>
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2260      	movs	r2, #96	@ 0x60
 800652c:	217f      	movs	r1, #127	@ 0x7f
 800652e:	5299      	strh	r1, [r3, r2]
 8006530:	e017      	b.n	8006562 <UART_Start_Receive_IT+0xaa>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	689a      	ldr	r2, [r3, #8]
 8006536:	2380      	movs	r3, #128	@ 0x80
 8006538:	055b      	lsls	r3, r3, #21
 800653a:	429a      	cmp	r2, r3
 800653c:	d10d      	bne.n	800655a <UART_Start_Receive_IT+0xa2>
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d104      	bne.n	8006550 <UART_Start_Receive_IT+0x98>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2260      	movs	r2, #96	@ 0x60
 800654a:	217f      	movs	r1, #127	@ 0x7f
 800654c:	5299      	strh	r1, [r3, r2]
 800654e:	e008      	b.n	8006562 <UART_Start_Receive_IT+0xaa>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2260      	movs	r2, #96	@ 0x60
 8006554:	213f      	movs	r1, #63	@ 0x3f
 8006556:	5299      	strh	r1, [r3, r2]
 8006558:	e003      	b.n	8006562 <UART_Start_Receive_IT+0xaa>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2260      	movs	r2, #96	@ 0x60
 800655e:	2100      	movs	r1, #0
 8006560:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2290      	movs	r2, #144	@ 0x90
 8006566:	2100      	movs	r1, #0
 8006568:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	228c      	movs	r2, #140	@ 0x8c
 800656e:	2122      	movs	r1, #34	@ 0x22
 8006570:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006572:	f3ef 8310 	mrs	r3, PRIMASK
 8006576:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8006578:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800657a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800657c:	2301      	movs	r3, #1
 800657e:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006580:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006582:	f383 8810 	msr	PRIMASK, r3
}
 8006586:	46c0      	nop			@ (mov r8, r8)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	689a      	ldr	r2, [r3, #8]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2101      	movs	r1, #1
 8006594:	430a      	orrs	r2, r1
 8006596:	609a      	str	r2, [r3, #8]
 8006598:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800659a:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800659c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800659e:	f383 8810 	msr	PRIMASK, r3
}
 80065a2:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80065a8:	2380      	movs	r3, #128	@ 0x80
 80065aa:	059b      	lsls	r3, r3, #22
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d150      	bne.n	8006652 <UART_Start_Receive_IT+0x19a>
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2268      	movs	r2, #104	@ 0x68
 80065b4:	5a9b      	ldrh	r3, [r3, r2]
 80065b6:	1dba      	adds	r2, r7, #6
 80065b8:	8812      	ldrh	r2, [r2, #0]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d349      	bcc.n	8006652 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	689a      	ldr	r2, [r3, #8]
 80065c2:	2380      	movs	r3, #128	@ 0x80
 80065c4:	015b      	lsls	r3, r3, #5
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d107      	bne.n	80065da <UART_Start_Receive_IT+0x122>
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d103      	bne.n	80065da <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	4a46      	ldr	r2, [pc, #280]	@ (80066f0 <UART_Start_Receive_IT+0x238>)
 80065d6:	675a      	str	r2, [r3, #116]	@ 0x74
 80065d8:	e002      	b.n	80065e0 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	4a45      	ldr	r2, [pc, #276]	@ (80066f4 <UART_Start_Receive_IT+0x23c>)
 80065de:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d019      	beq.n	800661c <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80065e8:	f3ef 8310 	mrs	r3, PRIMASK
 80065ec:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 80065ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80065f2:	2301      	movs	r3, #1
 80065f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065f8:	f383 8810 	msr	PRIMASK, r3
}
 80065fc:	46c0      	nop			@ (mov r8, r8)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	2180      	movs	r1, #128	@ 0x80
 800660a:	0049      	lsls	r1, r1, #1
 800660c:	430a      	orrs	r2, r1
 800660e:	601a      	str	r2, [r3, #0]
 8006610:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006612:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006614:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006616:	f383 8810 	msr	PRIMASK, r3
}
 800661a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800661c:	f3ef 8310 	mrs	r3, PRIMASK
 8006620:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8006622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006624:	657b      	str	r3, [r7, #84]	@ 0x54
 8006626:	2301      	movs	r3, #1
 8006628:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800662a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800662c:	f383 8810 	msr	PRIMASK, r3
}
 8006630:	46c0      	nop			@ (mov r8, r8)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	689a      	ldr	r2, [r3, #8]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2180      	movs	r1, #128	@ 0x80
 800663e:	0549      	lsls	r1, r1, #21
 8006640:	430a      	orrs	r2, r1
 8006642:	609a      	str	r2, [r3, #8]
 8006644:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006646:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800664a:	f383 8810 	msr	PRIMASK, r3
}
 800664e:	46c0      	nop			@ (mov r8, r8)
 8006650:	e047      	b.n	80066e2 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	689a      	ldr	r2, [r3, #8]
 8006656:	2380      	movs	r3, #128	@ 0x80
 8006658:	015b      	lsls	r3, r3, #5
 800665a:	429a      	cmp	r2, r3
 800665c:	d107      	bne.n	800666e <UART_Start_Receive_IT+0x1b6>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d103      	bne.n	800666e <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	4a23      	ldr	r2, [pc, #140]	@ (80066f8 <UART_Start_Receive_IT+0x240>)
 800666a:	675a      	str	r2, [r3, #116]	@ 0x74
 800666c:	e002      	b.n	8006674 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	4a22      	ldr	r2, [pc, #136]	@ (80066fc <UART_Start_Receive_IT+0x244>)
 8006672:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	691b      	ldr	r3, [r3, #16]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d019      	beq.n	80066b0 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800667c:	f3ef 8310 	mrs	r3, PRIMASK
 8006680:	61fb      	str	r3, [r7, #28]
  return(result);
 8006682:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006684:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006686:	2301      	movs	r3, #1
 8006688:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800668a:	6a3b      	ldr	r3, [r7, #32]
 800668c:	f383 8810 	msr	PRIMASK, r3
}
 8006690:	46c0      	nop			@ (mov r8, r8)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2190      	movs	r1, #144	@ 0x90
 800669e:	0049      	lsls	r1, r1, #1
 80066a0:	430a      	orrs	r2, r1
 80066a2:	601a      	str	r2, [r3, #0]
 80066a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066a6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066aa:	f383 8810 	msr	PRIMASK, r3
}
 80066ae:	e018      	b.n	80066e2 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80066b0:	f3ef 8310 	mrs	r3, PRIMASK
 80066b4:	613b      	str	r3, [r7, #16]
  return(result);
 80066b6:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80066b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80066ba:	2301      	movs	r3, #1
 80066bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	f383 8810 	msr	PRIMASK, r3
}
 80066c4:	46c0      	nop			@ (mov r8, r8)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2120      	movs	r1, #32
 80066d2:	430a      	orrs	r2, r1
 80066d4:	601a      	str	r2, [r3, #0]
 80066d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066d8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	f383 8810 	msr	PRIMASK, r3
}
 80066e0:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	0018      	movs	r0, r3
 80066e6:	46bd      	mov	sp, r7
 80066e8:	b018      	add	sp, #96	@ 0x60
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	000001ff 	.word	0x000001ff
 80066f0:	080072d9 	.word	0x080072d9
 80066f4:	08006fa5 	.word	0x08006fa5
 80066f8:	08006ded 	.word	0x08006ded
 80066fc:	08006c35 	.word	0x08006c35

08006700 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b08e      	sub	sp, #56	@ 0x38
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006708:	f3ef 8310 	mrs	r3, PRIMASK
 800670c:	617b      	str	r3, [r7, #20]
  return(result);
 800670e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006710:	637b      	str	r3, [r7, #52]	@ 0x34
 8006712:	2301      	movs	r3, #1
 8006714:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	f383 8810 	msr	PRIMASK, r3
}
 800671c:	46c0      	nop			@ (mov r8, r8)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4926      	ldr	r1, [pc, #152]	@ (80067c4 <UART_EndRxTransfer+0xc4>)
 800672a:	400a      	ands	r2, r1
 800672c:	601a      	str	r2, [r3, #0]
 800672e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006730:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	f383 8810 	msr	PRIMASK, r3
}
 8006738:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800673a:	f3ef 8310 	mrs	r3, PRIMASK
 800673e:	623b      	str	r3, [r7, #32]
  return(result);
 8006740:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006742:	633b      	str	r3, [r7, #48]	@ 0x30
 8006744:	2301      	movs	r3, #1
 8006746:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800674a:	f383 8810 	msr	PRIMASK, r3
}
 800674e:	46c0      	nop			@ (mov r8, r8)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	689a      	ldr	r2, [r3, #8]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	491b      	ldr	r1, [pc, #108]	@ (80067c8 <UART_EndRxTransfer+0xc8>)
 800675c:	400a      	ands	r2, r1
 800675e:	609a      	str	r2, [r3, #8]
 8006760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006762:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006766:	f383 8810 	msr	PRIMASK, r3
}
 800676a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006770:	2b01      	cmp	r3, #1
 8006772:	d118      	bne.n	80067a6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006774:	f3ef 8310 	mrs	r3, PRIMASK
 8006778:	60bb      	str	r3, [r7, #8]
  return(result);
 800677a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800677c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800677e:	2301      	movs	r3, #1
 8006780:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f383 8810 	msr	PRIMASK, r3
}
 8006788:	46c0      	nop			@ (mov r8, r8)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2110      	movs	r1, #16
 8006796:	438a      	bics	r2, r1
 8006798:	601a      	str	r2, [r3, #0]
 800679a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800679c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	f383 8810 	msr	PRIMASK, r3
}
 80067a4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	228c      	movs	r2, #140	@ 0x8c
 80067aa:	2120      	movs	r1, #32
 80067ac:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80067ba:	46c0      	nop			@ (mov r8, r8)
 80067bc:	46bd      	mov	sp, r7
 80067be:	b00e      	add	sp, #56	@ 0x38
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	46c0      	nop			@ (mov r8, r8)
 80067c4:	fffffedf 	.word	0xfffffedf
 80067c8:	effffffe 	.word	0xeffffffe

080067cc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	225e      	movs	r2, #94	@ 0x5e
 80067de:	2100      	movs	r1, #0
 80067e0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	0018      	movs	r0, r3
 80067e6:	f7fb f9a5 	bl	8001b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067ea:	46c0      	nop			@ (mov r8, r8)
 80067ec:	46bd      	mov	sp, r7
 80067ee:	b004      	add	sp, #16
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <UART_DMATxOnlyAbortCallback>:
  *         and leads to user Tx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b084      	sub	sp, #16
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067fe:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0U;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2256      	movs	r2, #86	@ 0x56
 8006804:	2100      	movs	r1, #0
 8006806:	5299      	strh	r1, [r3, r2]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800680c:	2380      	movs	r3, #128	@ 0x80
 800680e:	059b      	lsls	r3, r3, #22
 8006810:	429a      	cmp	r2, r3
 8006812:	d107      	bne.n	8006824 <UART_DMATxOnlyAbortCallback+0x32>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	699a      	ldr	r2, [r3, #24]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	2110      	movs	r1, #16
 8006820:	430a      	orrs	r2, r1
 8006822:	619a      	str	r2, [r3, #24]
  }

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2288      	movs	r2, #136	@ 0x88
 8006828:	2120      	movs	r1, #32
 800682a:	5099      	str	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	0018      	movs	r0, r3
 8006830:	f7ff fad0 	bl	8005dd4 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006834:	46c0      	nop			@ (mov r8, r8)
 8006836:	46bd      	mov	sp, r7
 8006838:	b004      	add	sp, #16
 800683a:	bd80      	pop	{r7, pc}

0800683c <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006848:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	225e      	movs	r2, #94	@ 0x5e
 800684e:	2100      	movs	r1, #0
 8006850:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	220f      	movs	r2, #15
 8006858:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	699a      	ldr	r2, [r3, #24]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2108      	movs	r1, #8
 8006866:	430a      	orrs	r2, r1
 8006868:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	228c      	movs	r2, #140	@ 0x8c
 800686e:	2120      	movs	r1, #32
 8006870:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	0018      	movs	r0, r3
 800687c:	f7ff fab2 	bl	8005de4 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006880:	46c0      	nop			@ (mov r8, r8)
 8006882:	46bd      	mov	sp, r7
 8006884:	b004      	add	sp, #16
 8006886:	bd80      	pop	{r7, pc}

08006888 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b08a      	sub	sp, #40	@ 0x28
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2288      	movs	r2, #136	@ 0x88
 8006894:	589b      	ldr	r3, [r3, r2]
 8006896:	2b21      	cmp	r3, #33	@ 0x21
 8006898:	d14c      	bne.n	8006934 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2256      	movs	r2, #86	@ 0x56
 800689e:	5a9b      	ldrh	r3, [r3, r2]
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d132      	bne.n	800690c <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80068a6:	f3ef 8310 	mrs	r3, PRIMASK
 80068aa:	60bb      	str	r3, [r7, #8]
  return(result);
 80068ac:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80068ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80068b0:	2301      	movs	r3, #1
 80068b2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f383 8810 	msr	PRIMASK, r3
}
 80068ba:	46c0      	nop			@ (mov r8, r8)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	2180      	movs	r1, #128	@ 0x80
 80068c8:	438a      	bics	r2, r1
 80068ca:	601a      	str	r2, [r3, #0]
 80068cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	f383 8810 	msr	PRIMASK, r3
}
 80068d6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80068d8:	f3ef 8310 	mrs	r3, PRIMASK
 80068dc:	617b      	str	r3, [r7, #20]
  return(result);
 80068de:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068e0:	623b      	str	r3, [r7, #32]
 80068e2:	2301      	movs	r3, #1
 80068e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	f383 8810 	msr	PRIMASK, r3
}
 80068ec:	46c0      	nop			@ (mov r8, r8)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2140      	movs	r1, #64	@ 0x40
 80068fa:	430a      	orrs	r2, r1
 80068fc:	601a      	str	r2, [r3, #0]
 80068fe:	6a3b      	ldr	r3, [r7, #32]
 8006900:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	f383 8810 	msr	PRIMASK, r3
}
 8006908:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800690a:	e013      	b.n	8006934 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006910:	781a      	ldrb	r2, [r3, #0]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800691c:	1c5a      	adds	r2, r3, #1
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2256      	movs	r2, #86	@ 0x56
 8006926:	5a9b      	ldrh	r3, [r3, r2]
 8006928:	b29b      	uxth	r3, r3
 800692a:	3b01      	subs	r3, #1
 800692c:	b299      	uxth	r1, r3
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2256      	movs	r2, #86	@ 0x56
 8006932:	5299      	strh	r1, [r3, r2]
}
 8006934:	46c0      	nop			@ (mov r8, r8)
 8006936:	46bd      	mov	sp, r7
 8006938:	b00a      	add	sp, #40	@ 0x28
 800693a:	bd80      	pop	{r7, pc}

0800693c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b08c      	sub	sp, #48	@ 0x30
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2288      	movs	r2, #136	@ 0x88
 8006948:	589b      	ldr	r3, [r3, r2]
 800694a:	2b21      	cmp	r3, #33	@ 0x21
 800694c:	d151      	bne.n	80069f2 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2256      	movs	r2, #86	@ 0x56
 8006952:	5a9b      	ldrh	r3, [r3, r2]
 8006954:	b29b      	uxth	r3, r3
 8006956:	2b00      	cmp	r3, #0
 8006958:	d132      	bne.n	80069c0 <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800695a:	f3ef 8310 	mrs	r3, PRIMASK
 800695e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006960:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006962:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006964:	2301      	movs	r3, #1
 8006966:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	f383 8810 	msr	PRIMASK, r3
}
 800696e:	46c0      	nop			@ (mov r8, r8)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2180      	movs	r1, #128	@ 0x80
 800697c:	438a      	bics	r2, r1
 800697e:	601a      	str	r2, [r3, #0]
 8006980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006982:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	f383 8810 	msr	PRIMASK, r3
}
 800698a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800698c:	f3ef 8310 	mrs	r3, PRIMASK
 8006990:	61bb      	str	r3, [r7, #24]
  return(result);
 8006992:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006994:	627b      	str	r3, [r7, #36]	@ 0x24
 8006996:	2301      	movs	r3, #1
 8006998:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	f383 8810 	msr	PRIMASK, r3
}
 80069a0:	46c0      	nop			@ (mov r8, r8)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2140      	movs	r1, #64	@ 0x40
 80069ae:	430a      	orrs	r2, r1
 80069b0:	601a      	str	r2, [r3, #0]
 80069b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069b6:	6a3b      	ldr	r3, [r7, #32]
 80069b8:	f383 8810 	msr	PRIMASK, r3
}
 80069bc:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80069be:	e018      	b.n	80069f2 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80069c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069c8:	881b      	ldrh	r3, [r3, #0]
 80069ca:	001a      	movs	r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	05d2      	lsls	r2, r2, #23
 80069d2:	0dd2      	lsrs	r2, r2, #23
 80069d4:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069da:	1c9a      	adds	r2, r3, #2
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2256      	movs	r2, #86	@ 0x56
 80069e4:	5a9b      	ldrh	r3, [r3, r2]
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	3b01      	subs	r3, #1
 80069ea:	b299      	uxth	r1, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2256      	movs	r2, #86	@ 0x56
 80069f0:	5299      	strh	r1, [r3, r2]
}
 80069f2:	46c0      	nop			@ (mov r8, r8)
 80069f4:	46bd      	mov	sp, r7
 80069f6:	b00c      	add	sp, #48	@ 0x30
 80069f8:	bd80      	pop	{r7, pc}
	...

080069fc <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b08c      	sub	sp, #48	@ 0x30
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2288      	movs	r2, #136	@ 0x88
 8006a08:	589b      	ldr	r3, [r3, r2]
 8006a0a:	2b21      	cmp	r3, #33	@ 0x21
 8006a0c:	d165      	bne.n	8006ada <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006a0e:	232e      	movs	r3, #46	@ 0x2e
 8006a10:	18fb      	adds	r3, r7, r3
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	216a      	movs	r1, #106	@ 0x6a
 8006a16:	5a52      	ldrh	r2, [r2, r1]
 8006a18:	801a      	strh	r2, [r3, #0]
 8006a1a:	e059      	b.n	8006ad0 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2256      	movs	r2, #86	@ 0x56
 8006a20:	5a9b      	ldrh	r3, [r3, r2]
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d133      	bne.n	8006a90 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006a28:	f3ef 8310 	mrs	r3, PRIMASK
 8006a2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006a30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a32:	2301      	movs	r3, #1
 8006a34:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	f383 8810 	msr	PRIMASK, r3
}
 8006a3c:	46c0      	nop			@ (mov r8, r8)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	689a      	ldr	r2, [r3, #8]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4926      	ldr	r1, [pc, #152]	@ (8006ae4 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 8006a4a:	400a      	ands	r2, r1
 8006a4c:	609a      	str	r2, [r3, #8]
 8006a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a50:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	f383 8810 	msr	PRIMASK, r3
}
 8006a58:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006a5a:	f3ef 8310 	mrs	r3, PRIMASK
 8006a5e:	61bb      	str	r3, [r7, #24]
  return(result);
 8006a60:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a62:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a64:	2301      	movs	r3, #1
 8006a66:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	f383 8810 	msr	PRIMASK, r3
}
 8006a6e:	46c0      	nop			@ (mov r8, r8)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2140      	movs	r1, #64	@ 0x40
 8006a7c:	430a      	orrs	r2, r1
 8006a7e:	601a      	str	r2, [r3, #0]
 8006a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a82:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a84:	6a3b      	ldr	r3, [r7, #32]
 8006a86:	f383 8810 	msr	PRIMASK, r3
}
 8006a8a:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 8006a8c:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8006a8e:	e024      	b.n	8006ada <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	69db      	ldr	r3, [r3, #28]
 8006a96:	2280      	movs	r2, #128	@ 0x80
 8006a98:	4013      	ands	r3, r2
 8006a9a:	d013      	beq.n	8006ac4 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006aa0:	781a      	ldrb	r2, [r3, #0]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006aac:	1c5a      	adds	r2, r3, #1
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2256      	movs	r2, #86	@ 0x56
 8006ab6:	5a9b      	ldrh	r3, [r3, r2]
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	3b01      	subs	r3, #1
 8006abc:	b299      	uxth	r1, r3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2256      	movs	r2, #86	@ 0x56
 8006ac2:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006ac4:	212e      	movs	r1, #46	@ 0x2e
 8006ac6:	187b      	adds	r3, r7, r1
 8006ac8:	881a      	ldrh	r2, [r3, #0]
 8006aca:	187b      	adds	r3, r7, r1
 8006acc:	3a01      	subs	r2, #1
 8006ace:	801a      	strh	r2, [r3, #0]
 8006ad0:	232e      	movs	r3, #46	@ 0x2e
 8006ad2:	18fb      	adds	r3, r7, r3
 8006ad4:	881b      	ldrh	r3, [r3, #0]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d1a0      	bne.n	8006a1c <UART_TxISR_8BIT_FIFOEN+0x20>
}
 8006ada:	46c0      	nop			@ (mov r8, r8)
 8006adc:	46bd      	mov	sp, r7
 8006ade:	b00c      	add	sp, #48	@ 0x30
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	46c0      	nop			@ (mov r8, r8)
 8006ae4:	ff7fffff 	.word	0xff7fffff

08006ae8 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b08c      	sub	sp, #48	@ 0x30
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2288      	movs	r2, #136	@ 0x88
 8006af4:	589b      	ldr	r3, [r3, r2]
 8006af6:	2b21      	cmp	r3, #33	@ 0x21
 8006af8:	d16a      	bne.n	8006bd0 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006afa:	232e      	movs	r3, #46	@ 0x2e
 8006afc:	18fb      	adds	r3, r7, r3
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	216a      	movs	r1, #106	@ 0x6a
 8006b02:	5a52      	ldrh	r2, [r2, r1]
 8006b04:	801a      	strh	r2, [r3, #0]
 8006b06:	e05e      	b.n	8006bc6 <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2256      	movs	r2, #86	@ 0x56
 8006b0c:	5a9b      	ldrh	r3, [r3, r2]
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d133      	bne.n	8006b7c <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006b14:	f3ef 8310 	mrs	r3, PRIMASK
 8006b18:	60bb      	str	r3, [r7, #8]
  return(result);
 8006b1a:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006b1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b1e:	2301      	movs	r3, #1
 8006b20:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f383 8810 	msr	PRIMASK, r3
}
 8006b28:	46c0      	nop			@ (mov r8, r8)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	689a      	ldr	r2, [r3, #8]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4928      	ldr	r1, [pc, #160]	@ (8006bd8 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 8006b36:	400a      	ands	r2, r1
 8006b38:	609a      	str	r2, [r3, #8]
 8006b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	f383 8810 	msr	PRIMASK, r3
}
 8006b44:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006b46:	f3ef 8310 	mrs	r3, PRIMASK
 8006b4a:	617b      	str	r3, [r7, #20]
  return(result);
 8006b4c:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b4e:	623b      	str	r3, [r7, #32]
 8006b50:	2301      	movs	r3, #1
 8006b52:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b54:	69bb      	ldr	r3, [r7, #24]
 8006b56:	f383 8810 	msr	PRIMASK, r3
}
 8006b5a:	46c0      	nop			@ (mov r8, r8)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2140      	movs	r1, #64	@ 0x40
 8006b68:	430a      	orrs	r2, r1
 8006b6a:	601a      	str	r2, [r3, #0]
 8006b6c:	6a3b      	ldr	r3, [r7, #32]
 8006b6e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	f383 8810 	msr	PRIMASK, r3
}
 8006b76:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 8006b78:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8006b7a:	e029      	b.n	8006bd0 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	69db      	ldr	r3, [r3, #28]
 8006b82:	2280      	movs	r2, #128	@ 0x80
 8006b84:	4013      	ands	r3, r2
 8006b86:	d018      	beq.n	8006bba <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b90:	881b      	ldrh	r3, [r3, #0]
 8006b92:	001a      	movs	r2, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	05d2      	lsls	r2, r2, #23
 8006b9a:	0dd2      	lsrs	r2, r2, #23
 8006b9c:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ba2:	1c9a      	adds	r2, r3, #2
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2256      	movs	r2, #86	@ 0x56
 8006bac:	5a9b      	ldrh	r3, [r3, r2]
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	3b01      	subs	r3, #1
 8006bb2:	b299      	uxth	r1, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2256      	movs	r2, #86	@ 0x56
 8006bb8:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006bba:	212e      	movs	r1, #46	@ 0x2e
 8006bbc:	187b      	adds	r3, r7, r1
 8006bbe:	881a      	ldrh	r2, [r3, #0]
 8006bc0:	187b      	adds	r3, r7, r1
 8006bc2:	3a01      	subs	r2, #1
 8006bc4:	801a      	strh	r2, [r3, #0]
 8006bc6:	232e      	movs	r3, #46	@ 0x2e
 8006bc8:	18fb      	adds	r3, r7, r3
 8006bca:	881b      	ldrh	r3, [r3, #0]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d19b      	bne.n	8006b08 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 8006bd0:	46c0      	nop			@ (mov r8, r8)
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	b00c      	add	sp, #48	@ 0x30
 8006bd6:	bd80      	pop	{r7, pc}
 8006bd8:	ff7fffff 	.word	0xff7fffff

08006bdc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b086      	sub	sp, #24
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006be4:	f3ef 8310 	mrs	r3, PRIMASK
 8006be8:	60bb      	str	r3, [r7, #8]
  return(result);
 8006bea:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006bec:	617b      	str	r3, [r7, #20]
 8006bee:	2301      	movs	r3, #1
 8006bf0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f383 8810 	msr	PRIMASK, r3
}
 8006bf8:	46c0      	nop			@ (mov r8, r8)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	2140      	movs	r1, #64	@ 0x40
 8006c06:	438a      	bics	r2, r1
 8006c08:	601a      	str	r2, [r3, #0]
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	f383 8810 	msr	PRIMASK, r3
}
 8006c14:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2288      	movs	r2, #136	@ 0x88
 8006c1a:	2120      	movs	r1, #32
 8006c1c:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	0018      	movs	r0, r3
 8006c28:	f7fa fdae 	bl	8001788 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c2c:	46c0      	nop			@ (mov r8, r8)
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	b006      	add	sp, #24
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b094      	sub	sp, #80	@ 0x50
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006c3c:	204e      	movs	r0, #78	@ 0x4e
 8006c3e:	183b      	adds	r3, r7, r0
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	2160      	movs	r1, #96	@ 0x60
 8006c44:	5a52      	ldrh	r2, [r2, r1]
 8006c46:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	228c      	movs	r2, #140	@ 0x8c
 8006c4c:	589b      	ldr	r3, [r3, r2]
 8006c4e:	2b22      	cmp	r3, #34	@ 0x22
 8006c50:	d000      	beq.n	8006c54 <UART_RxISR_8BIT+0x20>
 8006c52:	e0ba      	b.n	8006dca <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006c5a:	214c      	movs	r1, #76	@ 0x4c
 8006c5c:	187b      	adds	r3, r7, r1
 8006c5e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006c60:	187b      	adds	r3, r7, r1
 8006c62:	881b      	ldrh	r3, [r3, #0]
 8006c64:	b2da      	uxtb	r2, r3
 8006c66:	183b      	adds	r3, r7, r0
 8006c68:	881b      	ldrh	r3, [r3, #0]
 8006c6a:	b2d9      	uxtb	r1, r3
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c70:	400a      	ands	r2, r1
 8006c72:	b2d2      	uxtb	r2, r2
 8006c74:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c7a:	1c5a      	adds	r2, r3, #1
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	225e      	movs	r2, #94	@ 0x5e
 8006c84:	5a9b      	ldrh	r3, [r3, r2]
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	3b01      	subs	r3, #1
 8006c8a:	b299      	uxth	r1, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	225e      	movs	r2, #94	@ 0x5e
 8006c90:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	225e      	movs	r2, #94	@ 0x5e
 8006c96:	5a9b      	ldrh	r3, [r3, r2]
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d000      	beq.n	8006ca0 <UART_RxISR_8BIT+0x6c>
 8006c9e:	e09c      	b.n	8006dda <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006ca0:	f3ef 8310 	mrs	r3, PRIMASK
 8006ca4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ca8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006caa:	2301      	movs	r3, #1
 8006cac:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cb0:	f383 8810 	msr	PRIMASK, r3
}
 8006cb4:	46c0      	nop			@ (mov r8, r8)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4948      	ldr	r1, [pc, #288]	@ (8006de4 <UART_RxISR_8BIT+0x1b0>)
 8006cc2:	400a      	ands	r2, r1
 8006cc4:	601a      	str	r2, [r3, #0]
 8006cc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ccc:	f383 8810 	msr	PRIMASK, r3
}
 8006cd0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006cd2:	f3ef 8310 	mrs	r3, PRIMASK
 8006cd6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8006cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cda:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cdc:	2301      	movs	r3, #1
 8006cde:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ce0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ce2:	f383 8810 	msr	PRIMASK, r3
}
 8006ce6:	46c0      	nop			@ (mov r8, r8)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	689a      	ldr	r2, [r3, #8]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2101      	movs	r1, #1
 8006cf4:	438a      	bics	r2, r1
 8006cf6:	609a      	str	r2, [r3, #8]
 8006cf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cfa:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cfe:	f383 8810 	msr	PRIMASK, r3
}
 8006d02:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	228c      	movs	r2, #140	@ 0x8c
 8006d08:	2120      	movs	r1, #32
 8006d0a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	685a      	ldr	r2, [r3, #4]
 8006d1e:	2380      	movs	r3, #128	@ 0x80
 8006d20:	041b      	lsls	r3, r3, #16
 8006d22:	4013      	ands	r3, r2
 8006d24:	d018      	beq.n	8006d58 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006d26:	f3ef 8310 	mrs	r3, PRIMASK
 8006d2a:	61bb      	str	r3, [r7, #24]
  return(result);
 8006d2c:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006d2e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d30:	2301      	movs	r3, #1
 8006d32:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	f383 8810 	msr	PRIMASK, r3
}
 8006d3a:	46c0      	nop			@ (mov r8, r8)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4928      	ldr	r1, [pc, #160]	@ (8006de8 <UART_RxISR_8BIT+0x1b4>)
 8006d48:	400a      	ands	r2, r1
 8006d4a:	601a      	str	r2, [r3, #0]
 8006d4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d4e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d50:	6a3b      	ldr	r3, [r7, #32]
 8006d52:	f383 8810 	msr	PRIMASK, r3
}
 8006d56:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d12f      	bne.n	8006dc0 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006d66:	f3ef 8310 	mrs	r3, PRIMASK
 8006d6a:	60fb      	str	r3, [r7, #12]
  return(result);
 8006d6c:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d70:	2301      	movs	r3, #1
 8006d72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	f383 8810 	msr	PRIMASK, r3
}
 8006d7a:	46c0      	nop			@ (mov r8, r8)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2110      	movs	r1, #16
 8006d88:	438a      	bics	r2, r1
 8006d8a:	601a      	str	r2, [r3, #0]
 8006d8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	f383 8810 	msr	PRIMASK, r3
}
 8006d96:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	69db      	ldr	r3, [r3, #28]
 8006d9e:	2210      	movs	r2, #16
 8006da0:	4013      	ands	r3, r2
 8006da2:	2b10      	cmp	r3, #16
 8006da4:	d103      	bne.n	8006dae <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2210      	movs	r2, #16
 8006dac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	225c      	movs	r2, #92	@ 0x5c
 8006db2:	5a9a      	ldrh	r2, [r3, r2]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	0011      	movs	r1, r2
 8006db8:	0018      	movs	r0, r3
 8006dba:	f7ff f81b 	bl	8005df4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006dbe:	e00c      	b.n	8006dda <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	0018      	movs	r0, r3
 8006dc4:	f7fa fd9a 	bl	80018fc <HAL_UART_RxCpltCallback>
}
 8006dc8:	e007      	b.n	8006dda <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	699a      	ldr	r2, [r3, #24]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2108      	movs	r1, #8
 8006dd6:	430a      	orrs	r2, r1
 8006dd8:	619a      	str	r2, [r3, #24]
}
 8006dda:	46c0      	nop			@ (mov r8, r8)
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	b014      	add	sp, #80	@ 0x50
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	46c0      	nop			@ (mov r8, r8)
 8006de4:	fffffedf 	.word	0xfffffedf
 8006de8:	fbffffff 	.word	0xfbffffff

08006dec <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b094      	sub	sp, #80	@ 0x50
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006df4:	204e      	movs	r0, #78	@ 0x4e
 8006df6:	183b      	adds	r3, r7, r0
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	2160      	movs	r1, #96	@ 0x60
 8006dfc:	5a52      	ldrh	r2, [r2, r1]
 8006dfe:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	228c      	movs	r2, #140	@ 0x8c
 8006e04:	589b      	ldr	r3, [r3, r2]
 8006e06:	2b22      	cmp	r3, #34	@ 0x22
 8006e08:	d000      	beq.n	8006e0c <UART_RxISR_16BIT+0x20>
 8006e0a:	e0ba      	b.n	8006f82 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e12:	214c      	movs	r1, #76	@ 0x4c
 8006e14:	187b      	adds	r3, r7, r1
 8006e16:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e1c:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8006e1e:	187b      	adds	r3, r7, r1
 8006e20:	183a      	adds	r2, r7, r0
 8006e22:	881b      	ldrh	r3, [r3, #0]
 8006e24:	8812      	ldrh	r2, [r2, #0]
 8006e26:	4013      	ands	r3, r2
 8006e28:	b29a      	uxth	r2, r3
 8006e2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e2c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e32:	1c9a      	adds	r2, r3, #2
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	225e      	movs	r2, #94	@ 0x5e
 8006e3c:	5a9b      	ldrh	r3, [r3, r2]
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	3b01      	subs	r3, #1
 8006e42:	b299      	uxth	r1, r3
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	225e      	movs	r2, #94	@ 0x5e
 8006e48:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	225e      	movs	r2, #94	@ 0x5e
 8006e4e:	5a9b      	ldrh	r3, [r3, r2]
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d000      	beq.n	8006e58 <UART_RxISR_16BIT+0x6c>
 8006e56:	e09c      	b.n	8006f92 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006e58:	f3ef 8310 	mrs	r3, PRIMASK
 8006e5c:	623b      	str	r3, [r7, #32]
  return(result);
 8006e5e:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e60:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e62:	2301      	movs	r3, #1
 8006e64:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e68:	f383 8810 	msr	PRIMASK, r3
}
 8006e6c:	46c0      	nop			@ (mov r8, r8)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4948      	ldr	r1, [pc, #288]	@ (8006f9c <UART_RxISR_16BIT+0x1b0>)
 8006e7a:	400a      	ands	r2, r1
 8006e7c:	601a      	str	r2, [r3, #0]
 8006e7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e80:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e84:	f383 8810 	msr	PRIMASK, r3
}
 8006e88:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006e8a:	f3ef 8310 	mrs	r3, PRIMASK
 8006e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8006e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e92:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e94:	2301      	movs	r3, #1
 8006e96:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e9a:	f383 8810 	msr	PRIMASK, r3
}
 8006e9e:	46c0      	nop			@ (mov r8, r8)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	689a      	ldr	r2, [r3, #8]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2101      	movs	r1, #1
 8006eac:	438a      	bics	r2, r1
 8006eae:	609a      	str	r2, [r3, #8]
 8006eb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006eb2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eb6:	f383 8810 	msr	PRIMASK, r3
}
 8006eba:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	228c      	movs	r2, #140	@ 0x8c
 8006ec0:	2120      	movs	r1, #32
 8006ec2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	685a      	ldr	r2, [r3, #4]
 8006ed6:	2380      	movs	r3, #128	@ 0x80
 8006ed8:	041b      	lsls	r3, r3, #16
 8006eda:	4013      	ands	r3, r2
 8006edc:	d018      	beq.n	8006f10 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006ede:	f3ef 8310 	mrs	r3, PRIMASK
 8006ee2:	617b      	str	r3, [r7, #20]
  return(result);
 8006ee4:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ee8:	2301      	movs	r3, #1
 8006eea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	f383 8810 	msr	PRIMASK, r3
}
 8006ef2:	46c0      	nop			@ (mov r8, r8)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4928      	ldr	r1, [pc, #160]	@ (8006fa0 <UART_RxISR_16BIT+0x1b4>)
 8006f00:	400a      	ands	r2, r1
 8006f02:	601a      	str	r2, [r3, #0]
 8006f04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f06:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	f383 8810 	msr	PRIMASK, r3
}
 8006f0e:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d12f      	bne.n	8006f78 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006f1e:	f3ef 8310 	mrs	r3, PRIMASK
 8006f22:	60bb      	str	r3, [r7, #8]
  return(result);
 8006f24:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006f28:	2301      	movs	r3, #1
 8006f2a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f383 8810 	msr	PRIMASK, r3
}
 8006f32:	46c0      	nop			@ (mov r8, r8)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2110      	movs	r1, #16
 8006f40:	438a      	bics	r2, r1
 8006f42:	601a      	str	r2, [r3, #0]
 8006f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	f383 8810 	msr	PRIMASK, r3
}
 8006f4e:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	69db      	ldr	r3, [r3, #28]
 8006f56:	2210      	movs	r2, #16
 8006f58:	4013      	ands	r3, r2
 8006f5a:	2b10      	cmp	r3, #16
 8006f5c:	d103      	bne.n	8006f66 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	2210      	movs	r2, #16
 8006f64:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	225c      	movs	r2, #92	@ 0x5c
 8006f6a:	5a9a      	ldrh	r2, [r3, r2]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	0011      	movs	r1, r2
 8006f70:	0018      	movs	r0, r3
 8006f72:	f7fe ff3f 	bl	8005df4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f76:	e00c      	b.n	8006f92 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	0018      	movs	r0, r3
 8006f7c:	f7fa fcbe 	bl	80018fc <HAL_UART_RxCpltCallback>
}
 8006f80:	e007      	b.n	8006f92 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	699a      	ldr	r2, [r3, #24]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	2108      	movs	r1, #8
 8006f8e:	430a      	orrs	r2, r1
 8006f90:	619a      	str	r2, [r3, #24]
}
 8006f92:	46c0      	nop			@ (mov r8, r8)
 8006f94:	46bd      	mov	sp, r7
 8006f96:	b014      	add	sp, #80	@ 0x50
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	46c0      	nop			@ (mov r8, r8)
 8006f9c:	fffffedf 	.word	0xfffffedf
 8006fa0:	fbffffff 	.word	0xfbffffff

08006fa4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b0a0      	sub	sp, #128	@ 0x80
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006fac:	237a      	movs	r3, #122	@ 0x7a
 8006fae:	18fb      	adds	r3, r7, r3
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	2160      	movs	r1, #96	@ 0x60
 8006fb4:	5a52      	ldrh	r2, [r2, r1]
 8006fb6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	69db      	ldr	r3, [r3, #28]
 8006fbe:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	228c      	movs	r2, #140	@ 0x8c
 8006fd4:	589b      	ldr	r3, [r3, r2]
 8006fd6:	2b22      	cmp	r3, #34	@ 0x22
 8006fd8:	d000      	beq.n	8006fdc <UART_RxISR_8BIT_FIFOEN+0x38>
 8006fda:	e166      	b.n	80072aa <UART_RxISR_8BIT_FIFOEN+0x306>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006fdc:	236e      	movs	r3, #110	@ 0x6e
 8006fde:	18fb      	adds	r3, r7, r3
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	2168      	movs	r1, #104	@ 0x68
 8006fe4:	5a52      	ldrh	r2, [r2, r1]
 8006fe6:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006fe8:	e10d      	b.n	8007206 <UART_RxISR_8BIT_FIFOEN+0x262>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006ff0:	216c      	movs	r1, #108	@ 0x6c
 8006ff2:	187b      	adds	r3, r7, r1
 8006ff4:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006ff6:	187b      	adds	r3, r7, r1
 8006ff8:	881b      	ldrh	r3, [r3, #0]
 8006ffa:	b2da      	uxtb	r2, r3
 8006ffc:	237a      	movs	r3, #122	@ 0x7a
 8006ffe:	18fb      	adds	r3, r7, r3
 8007000:	881b      	ldrh	r3, [r3, #0]
 8007002:	b2d9      	uxtb	r1, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007008:	400a      	ands	r2, r1
 800700a:	b2d2      	uxtb	r2, r2
 800700c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007012:	1c5a      	adds	r2, r3, #1
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	225e      	movs	r2, #94	@ 0x5e
 800701c:	5a9b      	ldrh	r3, [r3, r2]
 800701e:	b29b      	uxth	r3, r3
 8007020:	3b01      	subs	r3, #1
 8007022:	b299      	uxth	r1, r3
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	225e      	movs	r2, #94	@ 0x5e
 8007028:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	69db      	ldr	r3, [r3, #28]
 8007030:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007032:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007034:	2207      	movs	r2, #7
 8007036:	4013      	ands	r3, r2
 8007038:	d049      	beq.n	80070ce <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800703a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800703c:	2201      	movs	r2, #1
 800703e:	4013      	ands	r3, r2
 8007040:	d010      	beq.n	8007064 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8007042:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007044:	2380      	movs	r3, #128	@ 0x80
 8007046:	005b      	lsls	r3, r3, #1
 8007048:	4013      	ands	r3, r2
 800704a:	d00b      	beq.n	8007064 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	2201      	movs	r2, #1
 8007052:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2290      	movs	r2, #144	@ 0x90
 8007058:	589b      	ldr	r3, [r3, r2]
 800705a:	2201      	movs	r2, #1
 800705c:	431a      	orrs	r2, r3
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2190      	movs	r1, #144	@ 0x90
 8007062:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007064:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007066:	2202      	movs	r2, #2
 8007068:	4013      	ands	r3, r2
 800706a:	d00f      	beq.n	800708c <UART_RxISR_8BIT_FIFOEN+0xe8>
 800706c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800706e:	2201      	movs	r2, #1
 8007070:	4013      	ands	r3, r2
 8007072:	d00b      	beq.n	800708c <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	2202      	movs	r2, #2
 800707a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2290      	movs	r2, #144	@ 0x90
 8007080:	589b      	ldr	r3, [r3, r2]
 8007082:	2204      	movs	r2, #4
 8007084:	431a      	orrs	r2, r3
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2190      	movs	r1, #144	@ 0x90
 800708a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800708c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800708e:	2204      	movs	r2, #4
 8007090:	4013      	ands	r3, r2
 8007092:	d00f      	beq.n	80070b4 <UART_RxISR_8BIT_FIFOEN+0x110>
 8007094:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007096:	2201      	movs	r2, #1
 8007098:	4013      	ands	r3, r2
 800709a:	d00b      	beq.n	80070b4 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	2204      	movs	r2, #4
 80070a2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2290      	movs	r2, #144	@ 0x90
 80070a8:	589b      	ldr	r3, [r3, r2]
 80070aa:	2202      	movs	r2, #2
 80070ac:	431a      	orrs	r2, r3
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2190      	movs	r1, #144	@ 0x90
 80070b2:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2290      	movs	r2, #144	@ 0x90
 80070b8:	589b      	ldr	r3, [r3, r2]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d007      	beq.n	80070ce <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	0018      	movs	r0, r3
 80070c2:	f7fa fd37 	bl	8001b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2290      	movs	r2, #144	@ 0x90
 80070ca:	2100      	movs	r1, #0
 80070cc:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	225e      	movs	r2, #94	@ 0x5e
 80070d2:	5a9b      	ldrh	r3, [r3, r2]
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d000      	beq.n	80070dc <UART_RxISR_8BIT_FIFOEN+0x138>
 80070da:	e094      	b.n	8007206 <UART_RxISR_8BIT_FIFOEN+0x262>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80070dc:	f3ef 8310 	mrs	r3, PRIMASK
 80070e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 80070e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80070e6:	2301      	movs	r3, #1
 80070e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070ec:	f383 8810 	msr	PRIMASK, r3
}
 80070f0:	46c0      	nop			@ (mov r8, r8)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4971      	ldr	r1, [pc, #452]	@ (80072c4 <UART_RxISR_8BIT_FIFOEN+0x320>)
 80070fe:	400a      	ands	r2, r1
 8007100:	601a      	str	r2, [r3, #0]
 8007102:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007104:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007106:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007108:	f383 8810 	msr	PRIMASK, r3
}
 800710c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800710e:	f3ef 8310 	mrs	r3, PRIMASK
 8007112:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8007114:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007116:	667b      	str	r3, [r7, #100]	@ 0x64
 8007118:	2301      	movs	r3, #1
 800711a:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800711c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800711e:	f383 8810 	msr	PRIMASK, r3
}
 8007122:	46c0      	nop			@ (mov r8, r8)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	689a      	ldr	r2, [r3, #8]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4966      	ldr	r1, [pc, #408]	@ (80072c8 <UART_RxISR_8BIT_FIFOEN+0x324>)
 8007130:	400a      	ands	r2, r1
 8007132:	609a      	str	r2, [r3, #8]
 8007134:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007136:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007138:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800713a:	f383 8810 	msr	PRIMASK, r3
}
 800713e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	228c      	movs	r2, #140	@ 0x8c
 8007144:	2120      	movs	r1, #32
 8007146:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	685a      	ldr	r2, [r3, #4]
 800715a:	2380      	movs	r3, #128	@ 0x80
 800715c:	041b      	lsls	r3, r3, #16
 800715e:	4013      	ands	r3, r2
 8007160:	d018      	beq.n	8007194 <UART_RxISR_8BIT_FIFOEN+0x1f0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007162:	f3ef 8310 	mrs	r3, PRIMASK
 8007166:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8007168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800716a:	663b      	str	r3, [r7, #96]	@ 0x60
 800716c:	2301      	movs	r3, #1
 800716e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007172:	f383 8810 	msr	PRIMASK, r3
}
 8007176:	46c0      	nop			@ (mov r8, r8)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4952      	ldr	r1, [pc, #328]	@ (80072cc <UART_RxISR_8BIT_FIFOEN+0x328>)
 8007184:	400a      	ands	r2, r1
 8007186:	601a      	str	r2, [r3, #0]
 8007188:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800718a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800718c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800718e:	f383 8810 	msr	PRIMASK, r3
}
 8007192:	46c0      	nop			@ (mov r8, r8)
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007198:	2b01      	cmp	r3, #1
 800719a:	d12f      	bne.n	80071fc <UART_RxISR_8BIT_FIFOEN+0x258>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80071a2:	f3ef 8310 	mrs	r3, PRIMASK
 80071a6:	623b      	str	r3, [r7, #32]
  return(result);
 80071a8:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80071ac:	2301      	movs	r3, #1
 80071ae:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b2:	f383 8810 	msr	PRIMASK, r3
}
 80071b6:	46c0      	nop			@ (mov r8, r8)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2110      	movs	r1, #16
 80071c4:	438a      	bics	r2, r1
 80071c6:	601a      	str	r2, [r3, #0]
 80071c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80071ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ce:	f383 8810 	msr	PRIMASK, r3
}
 80071d2:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	69db      	ldr	r3, [r3, #28]
 80071da:	2210      	movs	r2, #16
 80071dc:	4013      	ands	r3, r2
 80071de:	2b10      	cmp	r3, #16
 80071e0:	d103      	bne.n	80071ea <UART_RxISR_8BIT_FIFOEN+0x246>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	2210      	movs	r2, #16
 80071e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	225c      	movs	r2, #92	@ 0x5c
 80071ee:	5a9a      	ldrh	r2, [r3, r2]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	0011      	movs	r1, r2
 80071f4:	0018      	movs	r0, r3
 80071f6:	f7fe fdfd 	bl	8005df4 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80071fa:	e00e      	b.n	800721a <UART_RxISR_8BIT_FIFOEN+0x276>
          HAL_UART_RxCpltCallback(huart);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	0018      	movs	r0, r3
 8007200:	f7fa fb7c 	bl	80018fc <HAL_UART_RxCpltCallback>
        break;
 8007204:	e009      	b.n	800721a <UART_RxISR_8BIT_FIFOEN+0x276>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007206:	236e      	movs	r3, #110	@ 0x6e
 8007208:	18fb      	adds	r3, r7, r3
 800720a:	881b      	ldrh	r3, [r3, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d004      	beq.n	800721a <UART_RxISR_8BIT_FIFOEN+0x276>
 8007210:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007212:	2220      	movs	r2, #32
 8007214:	4013      	ands	r3, r2
 8007216:	d000      	beq.n	800721a <UART_RxISR_8BIT_FIFOEN+0x276>
 8007218:	e6e7      	b.n	8006fea <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800721a:	205a      	movs	r0, #90	@ 0x5a
 800721c:	183b      	adds	r3, r7, r0
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	215e      	movs	r1, #94	@ 0x5e
 8007222:	5a52      	ldrh	r2, [r2, r1]
 8007224:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007226:	0001      	movs	r1, r0
 8007228:	187b      	adds	r3, r7, r1
 800722a:	881b      	ldrh	r3, [r3, #0]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d044      	beq.n	80072ba <UART_RxISR_8BIT_FIFOEN+0x316>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2268      	movs	r2, #104	@ 0x68
 8007234:	5a9b      	ldrh	r3, [r3, r2]
 8007236:	187a      	adds	r2, r7, r1
 8007238:	8812      	ldrh	r2, [r2, #0]
 800723a:	429a      	cmp	r2, r3
 800723c:	d23d      	bcs.n	80072ba <UART_RxISR_8BIT_FIFOEN+0x316>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800723e:	f3ef 8310 	mrs	r3, PRIMASK
 8007242:	60bb      	str	r3, [r7, #8]
  return(result);
 8007244:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007246:	657b      	str	r3, [r7, #84]	@ 0x54
 8007248:	2301      	movs	r3, #1
 800724a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f383 8810 	msr	PRIMASK, r3
}
 8007252:	46c0      	nop			@ (mov r8, r8)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	689a      	ldr	r2, [r3, #8]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	491c      	ldr	r1, [pc, #112]	@ (80072d0 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 8007260:	400a      	ands	r2, r1
 8007262:	609a      	str	r2, [r3, #8]
 8007264:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007266:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	f383 8810 	msr	PRIMASK, r3
}
 800726e:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	4a18      	ldr	r2, [pc, #96]	@ (80072d4 <UART_RxISR_8BIT_FIFOEN+0x330>)
 8007274:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007276:	f3ef 8310 	mrs	r3, PRIMASK
 800727a:	617b      	str	r3, [r7, #20]
  return(result);
 800727c:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800727e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007280:	2301      	movs	r3, #1
 8007282:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	f383 8810 	msr	PRIMASK, r3
}
 800728a:	46c0      	nop			@ (mov r8, r8)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	2120      	movs	r1, #32
 8007298:	430a      	orrs	r2, r1
 800729a:	601a      	str	r2, [r3, #0]
 800729c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800729e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072a0:	69fb      	ldr	r3, [r7, #28]
 80072a2:	f383 8810 	msr	PRIMASK, r3
}
 80072a6:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80072a8:	e007      	b.n	80072ba <UART_RxISR_8BIT_FIFOEN+0x316>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	699a      	ldr	r2, [r3, #24]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2108      	movs	r1, #8
 80072b6:	430a      	orrs	r2, r1
 80072b8:	619a      	str	r2, [r3, #24]
}
 80072ba:	46c0      	nop			@ (mov r8, r8)
 80072bc:	46bd      	mov	sp, r7
 80072be:	b020      	add	sp, #128	@ 0x80
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	46c0      	nop			@ (mov r8, r8)
 80072c4:	fffffeff 	.word	0xfffffeff
 80072c8:	effffffe 	.word	0xeffffffe
 80072cc:	fbffffff 	.word	0xfbffffff
 80072d0:	efffffff 	.word	0xefffffff
 80072d4:	08006c35 	.word	0x08006c35

080072d8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b0a2      	sub	sp, #136	@ 0x88
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80072e0:	2382      	movs	r3, #130	@ 0x82
 80072e2:	18fb      	adds	r3, r7, r3
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	2160      	movs	r1, #96	@ 0x60
 80072e8:	5a52      	ldrh	r2, [r2, r1]
 80072ea:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	69db      	ldr	r3, [r3, #28]
 80072f2:	2284      	movs	r2, #132	@ 0x84
 80072f4:	18ba      	adds	r2, r7, r2
 80072f6:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	228c      	movs	r2, #140	@ 0x8c
 800730c:	589b      	ldr	r3, [r3, r2]
 800730e:	2b22      	cmp	r3, #34	@ 0x22
 8007310:	d000      	beq.n	8007314 <UART_RxISR_16BIT_FIFOEN+0x3c>
 8007312:	e170      	b.n	80075f6 <UART_RxISR_16BIT_FIFOEN+0x31e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007314:	2376      	movs	r3, #118	@ 0x76
 8007316:	18fb      	adds	r3, r7, r3
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	2168      	movs	r1, #104	@ 0x68
 800731c:	5a52      	ldrh	r2, [r2, r1]
 800731e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007320:	e115      	b.n	800754e <UART_RxISR_16BIT_FIFOEN+0x276>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007328:	2174      	movs	r1, #116	@ 0x74
 800732a:	187b      	adds	r3, r7, r1
 800732c:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007332:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8007334:	187b      	adds	r3, r7, r1
 8007336:	2282      	movs	r2, #130	@ 0x82
 8007338:	18ba      	adds	r2, r7, r2
 800733a:	881b      	ldrh	r3, [r3, #0]
 800733c:	8812      	ldrh	r2, [r2, #0]
 800733e:	4013      	ands	r3, r2
 8007340:	b29a      	uxth	r2, r3
 8007342:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007344:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800734a:	1c9a      	adds	r2, r3, #2
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	225e      	movs	r2, #94	@ 0x5e
 8007354:	5a9b      	ldrh	r3, [r3, r2]
 8007356:	b29b      	uxth	r3, r3
 8007358:	3b01      	subs	r3, #1
 800735a:	b299      	uxth	r1, r3
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	225e      	movs	r2, #94	@ 0x5e
 8007360:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	69db      	ldr	r3, [r3, #28]
 8007368:	2184      	movs	r1, #132	@ 0x84
 800736a:	187a      	adds	r2, r7, r1
 800736c:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800736e:	187b      	adds	r3, r7, r1
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	2207      	movs	r2, #7
 8007374:	4013      	ands	r3, r2
 8007376:	d04e      	beq.n	8007416 <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007378:	187b      	adds	r3, r7, r1
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	2201      	movs	r2, #1
 800737e:	4013      	ands	r3, r2
 8007380:	d010      	beq.n	80073a4 <UART_RxISR_16BIT_FIFOEN+0xcc>
 8007382:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007384:	2380      	movs	r3, #128	@ 0x80
 8007386:	005b      	lsls	r3, r3, #1
 8007388:	4013      	ands	r3, r2
 800738a:	d00b      	beq.n	80073a4 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	2201      	movs	r2, #1
 8007392:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2290      	movs	r2, #144	@ 0x90
 8007398:	589b      	ldr	r3, [r3, r2]
 800739a:	2201      	movs	r2, #1
 800739c:	431a      	orrs	r2, r3
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2190      	movs	r1, #144	@ 0x90
 80073a2:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80073a4:	2384      	movs	r3, #132	@ 0x84
 80073a6:	18fb      	adds	r3, r7, r3
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2202      	movs	r2, #2
 80073ac:	4013      	ands	r3, r2
 80073ae:	d00f      	beq.n	80073d0 <UART_RxISR_16BIT_FIFOEN+0xf8>
 80073b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80073b2:	2201      	movs	r2, #1
 80073b4:	4013      	ands	r3, r2
 80073b6:	d00b      	beq.n	80073d0 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	2202      	movs	r2, #2
 80073be:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2290      	movs	r2, #144	@ 0x90
 80073c4:	589b      	ldr	r3, [r3, r2]
 80073c6:	2204      	movs	r2, #4
 80073c8:	431a      	orrs	r2, r3
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2190      	movs	r1, #144	@ 0x90
 80073ce:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80073d0:	2384      	movs	r3, #132	@ 0x84
 80073d2:	18fb      	adds	r3, r7, r3
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	2204      	movs	r2, #4
 80073d8:	4013      	ands	r3, r2
 80073da:	d00f      	beq.n	80073fc <UART_RxISR_16BIT_FIFOEN+0x124>
 80073dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80073de:	2201      	movs	r2, #1
 80073e0:	4013      	ands	r3, r2
 80073e2:	d00b      	beq.n	80073fc <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	2204      	movs	r2, #4
 80073ea:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2290      	movs	r2, #144	@ 0x90
 80073f0:	589b      	ldr	r3, [r3, r2]
 80073f2:	2202      	movs	r2, #2
 80073f4:	431a      	orrs	r2, r3
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2190      	movs	r1, #144	@ 0x90
 80073fa:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2290      	movs	r2, #144	@ 0x90
 8007400:	589b      	ldr	r3, [r3, r2]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d007      	beq.n	8007416 <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	0018      	movs	r0, r3
 800740a:	f7fa fb93 	bl	8001b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2290      	movs	r2, #144	@ 0x90
 8007412:	2100      	movs	r1, #0
 8007414:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	225e      	movs	r2, #94	@ 0x5e
 800741a:	5a9b      	ldrh	r3, [r3, r2]
 800741c:	b29b      	uxth	r3, r3
 800741e:	2b00      	cmp	r3, #0
 8007420:	d000      	beq.n	8007424 <UART_RxISR_16BIT_FIFOEN+0x14c>
 8007422:	e094      	b.n	800754e <UART_RxISR_16BIT_FIFOEN+0x276>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007424:	f3ef 8310 	mrs	r3, PRIMASK
 8007428:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800742a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800742c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800742e:	2301      	movs	r3, #1
 8007430:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007432:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007434:	f383 8810 	msr	PRIMASK, r3
}
 8007438:	46c0      	nop			@ (mov r8, r8)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4972      	ldr	r1, [pc, #456]	@ (8007610 <UART_RxISR_16BIT_FIFOEN+0x338>)
 8007446:	400a      	ands	r2, r1
 8007448:	601a      	str	r2, [r3, #0]
 800744a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800744c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800744e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007450:	f383 8810 	msr	PRIMASK, r3
}
 8007454:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007456:	f3ef 8310 	mrs	r3, PRIMASK
 800745a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800745c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800745e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007460:	2301      	movs	r3, #1
 8007462:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007464:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007466:	f383 8810 	msr	PRIMASK, r3
}
 800746a:	46c0      	nop			@ (mov r8, r8)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	689a      	ldr	r2, [r3, #8]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4967      	ldr	r1, [pc, #412]	@ (8007614 <UART_RxISR_16BIT_FIFOEN+0x33c>)
 8007478:	400a      	ands	r2, r1
 800747a:	609a      	str	r2, [r3, #8]
 800747c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800747e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007480:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007482:	f383 8810 	msr	PRIMASK, r3
}
 8007486:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	228c      	movs	r2, #140	@ 0x8c
 800748c:	2120      	movs	r1, #32
 800748e:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	685a      	ldr	r2, [r3, #4]
 80074a2:	2380      	movs	r3, #128	@ 0x80
 80074a4:	041b      	lsls	r3, r3, #16
 80074a6:	4013      	ands	r3, r2
 80074a8:	d018      	beq.n	80074dc <UART_RxISR_16BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80074aa:	f3ef 8310 	mrs	r3, PRIMASK
 80074ae:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80074b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80074b2:	667b      	str	r3, [r7, #100]	@ 0x64
 80074b4:	2301      	movs	r3, #1
 80074b6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074ba:	f383 8810 	msr	PRIMASK, r3
}
 80074be:	46c0      	nop			@ (mov r8, r8)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4953      	ldr	r1, [pc, #332]	@ (8007618 <UART_RxISR_16BIT_FIFOEN+0x340>)
 80074cc:	400a      	ands	r2, r1
 80074ce:	601a      	str	r2, [r3, #0]
 80074d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80074d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074d6:	f383 8810 	msr	PRIMASK, r3
}
 80074da:	46c0      	nop			@ (mov r8, r8)
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d12f      	bne.n	8007544 <UART_RxISR_16BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80074ea:	f3ef 8310 	mrs	r3, PRIMASK
 80074ee:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80074f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074f2:	663b      	str	r3, [r7, #96]	@ 0x60
 80074f4:	2301      	movs	r3, #1
 80074f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074fa:	f383 8810 	msr	PRIMASK, r3
}
 80074fe:	46c0      	nop			@ (mov r8, r8)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	2110      	movs	r1, #16
 800750c:	438a      	bics	r2, r1
 800750e:	601a      	str	r2, [r3, #0]
 8007510:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007512:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007516:	f383 8810 	msr	PRIMASK, r3
}
 800751a:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	69db      	ldr	r3, [r3, #28]
 8007522:	2210      	movs	r2, #16
 8007524:	4013      	ands	r3, r2
 8007526:	2b10      	cmp	r3, #16
 8007528:	d103      	bne.n	8007532 <UART_RxISR_16BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	2210      	movs	r2, #16
 8007530:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	225c      	movs	r2, #92	@ 0x5c
 8007536:	5a9a      	ldrh	r2, [r3, r2]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	0011      	movs	r1, r2
 800753c:	0018      	movs	r0, r3
 800753e:	f7fe fc59 	bl	8005df4 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007542:	e010      	b.n	8007566 <UART_RxISR_16BIT_FIFOEN+0x28e>
          HAL_UART_RxCpltCallback(huart);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	0018      	movs	r0, r3
 8007548:	f7fa f9d8 	bl	80018fc <HAL_UART_RxCpltCallback>
        break;
 800754c:	e00b      	b.n	8007566 <UART_RxISR_16BIT_FIFOEN+0x28e>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800754e:	2376      	movs	r3, #118	@ 0x76
 8007550:	18fb      	adds	r3, r7, r3
 8007552:	881b      	ldrh	r3, [r3, #0]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d006      	beq.n	8007566 <UART_RxISR_16BIT_FIFOEN+0x28e>
 8007558:	2384      	movs	r3, #132	@ 0x84
 800755a:	18fb      	adds	r3, r7, r3
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2220      	movs	r2, #32
 8007560:	4013      	ands	r3, r2
 8007562:	d000      	beq.n	8007566 <UART_RxISR_16BIT_FIFOEN+0x28e>
 8007564:	e6dd      	b.n	8007322 <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007566:	205e      	movs	r0, #94	@ 0x5e
 8007568:	183b      	adds	r3, r7, r0
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	215e      	movs	r1, #94	@ 0x5e
 800756e:	5a52      	ldrh	r2, [r2, r1]
 8007570:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007572:	0001      	movs	r1, r0
 8007574:	187b      	adds	r3, r7, r1
 8007576:	881b      	ldrh	r3, [r3, #0]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d044      	beq.n	8007606 <UART_RxISR_16BIT_FIFOEN+0x32e>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2268      	movs	r2, #104	@ 0x68
 8007580:	5a9b      	ldrh	r3, [r3, r2]
 8007582:	187a      	adds	r2, r7, r1
 8007584:	8812      	ldrh	r2, [r2, #0]
 8007586:	429a      	cmp	r2, r3
 8007588:	d23d      	bcs.n	8007606 <UART_RxISR_16BIT_FIFOEN+0x32e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800758a:	f3ef 8310 	mrs	r3, PRIMASK
 800758e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007590:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007592:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007594:	2301      	movs	r3, #1
 8007596:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	f383 8810 	msr	PRIMASK, r3
}
 800759e:	46c0      	nop			@ (mov r8, r8)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	689a      	ldr	r2, [r3, #8]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	491c      	ldr	r1, [pc, #112]	@ (800761c <UART_RxISR_16BIT_FIFOEN+0x344>)
 80075ac:	400a      	ands	r2, r1
 80075ae:	609a      	str	r2, [r3, #8]
 80075b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80075b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	f383 8810 	msr	PRIMASK, r3
}
 80075ba:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	4a18      	ldr	r2, [pc, #96]	@ (8007620 <UART_RxISR_16BIT_FIFOEN+0x348>)
 80075c0:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80075c2:	f3ef 8310 	mrs	r3, PRIMASK
 80075c6:	61bb      	str	r3, [r7, #24]
  return(result);
 80075c8:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80075ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80075cc:	2301      	movs	r3, #1
 80075ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075d0:	69fb      	ldr	r3, [r7, #28]
 80075d2:	f383 8810 	msr	PRIMASK, r3
}
 80075d6:	46c0      	nop			@ (mov r8, r8)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2120      	movs	r1, #32
 80075e4:	430a      	orrs	r2, r1
 80075e6:	601a      	str	r2, [r3, #0]
 80075e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075ea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075ec:	6a3b      	ldr	r3, [r7, #32]
 80075ee:	f383 8810 	msr	PRIMASK, r3
}
 80075f2:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80075f4:	e007      	b.n	8007606 <UART_RxISR_16BIT_FIFOEN+0x32e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	699a      	ldr	r2, [r3, #24]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2108      	movs	r1, #8
 8007602:	430a      	orrs	r2, r1
 8007604:	619a      	str	r2, [r3, #24]
}
 8007606:	46c0      	nop			@ (mov r8, r8)
 8007608:	46bd      	mov	sp, r7
 800760a:	b022      	add	sp, #136	@ 0x88
 800760c:	bd80      	pop	{r7, pc}
 800760e:	46c0      	nop			@ (mov r8, r8)
 8007610:	fffffeff 	.word	0xfffffeff
 8007614:	effffffe 	.word	0xeffffffe
 8007618:	fbffffff 	.word	0xfbffffff
 800761c:	efffffff 	.word	0xefffffff
 8007620:	08006ded 	.word	0x08006ded

08007624 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b082      	sub	sp, #8
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800762c:	46c0      	nop			@ (mov r8, r8)
 800762e:	46bd      	mov	sp, r7
 8007630:	b002      	add	sp, #8
 8007632:	bd80      	pop	{r7, pc}

08007634 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b082      	sub	sp, #8
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800763c:	46c0      	nop			@ (mov r8, r8)
 800763e:	46bd      	mov	sp, r7
 8007640:	b002      	add	sp, #8
 8007642:	bd80      	pop	{r7, pc}

08007644 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800764c:	46c0      	nop			@ (mov r8, r8)
 800764e:	46bd      	mov	sp, r7
 8007650:	b002      	add	sp, #8
 8007652:	bd80      	pop	{r7, pc}

08007654 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b084      	sub	sp, #16
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2284      	movs	r2, #132	@ 0x84
 8007662:	5c9b      	ldrb	r3, [r3, r2]
 8007664:	2b01      	cmp	r3, #1
 8007666:	d101      	bne.n	800766c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007668:	2302      	movs	r3, #2
 800766a:	e02e      	b.n	80076ca <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2284      	movs	r2, #132	@ 0x84
 8007670:	2101      	movs	r1, #1
 8007672:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2288      	movs	r2, #136	@ 0x88
 8007678:	2124      	movs	r1, #36	@ 0x24
 800767a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2101      	movs	r1, #1
 8007690:	438a      	bics	r2, r1
 8007692:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	00db      	lsls	r3, r3, #3
 800769c:	08d9      	lsrs	r1, r3, #3
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	683a      	ldr	r2, [r7, #0]
 80076a4:	430a      	orrs	r2, r1
 80076a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	0018      	movs	r0, r3
 80076ac:	f000 f854 	bl	8007758 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	68fa      	ldr	r2, [r7, #12]
 80076b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2288      	movs	r2, #136	@ 0x88
 80076bc:	2120      	movs	r1, #32
 80076be:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2284      	movs	r2, #132	@ 0x84
 80076c4:	2100      	movs	r1, #0
 80076c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	0018      	movs	r0, r3
 80076cc:	46bd      	mov	sp, r7
 80076ce:	b004      	add	sp, #16
 80076d0:	bd80      	pop	{r7, pc}
	...

080076d4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b084      	sub	sp, #16
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2284      	movs	r2, #132	@ 0x84
 80076e2:	5c9b      	ldrb	r3, [r3, r2]
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d101      	bne.n	80076ec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80076e8:	2302      	movs	r3, #2
 80076ea:	e02f      	b.n	800774c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2284      	movs	r2, #132	@ 0x84
 80076f0:	2101      	movs	r1, #1
 80076f2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2288      	movs	r2, #136	@ 0x88
 80076f8:	2124      	movs	r1, #36	@ 0x24
 80076fa:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	2101      	movs	r1, #1
 8007710:	438a      	bics	r2, r1
 8007712:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	4a0e      	ldr	r2, [pc, #56]	@ (8007754 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800771c:	4013      	ands	r3, r2
 800771e:	0019      	movs	r1, r3
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	683a      	ldr	r2, [r7, #0]
 8007726:	430a      	orrs	r2, r1
 8007728:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	0018      	movs	r0, r3
 800772e:	f000 f813 	bl	8007758 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	68fa      	ldr	r2, [r7, #12]
 8007738:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2288      	movs	r2, #136	@ 0x88
 800773e:	2120      	movs	r1, #32
 8007740:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2284      	movs	r2, #132	@ 0x84
 8007746:	2100      	movs	r1, #0
 8007748:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800774a:	2300      	movs	r3, #0
}
 800774c:	0018      	movs	r0, r3
 800774e:	46bd      	mov	sp, r7
 8007750:	b004      	add	sp, #16
 8007752:	bd80      	pop	{r7, pc}
 8007754:	f1ffffff 	.word	0xf1ffffff

08007758 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007764:	2b00      	cmp	r3, #0
 8007766:	d108      	bne.n	800777a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	226a      	movs	r2, #106	@ 0x6a
 800776c:	2101      	movs	r1, #1
 800776e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2268      	movs	r2, #104	@ 0x68
 8007774:	2101      	movs	r1, #1
 8007776:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007778:	e043      	b.n	8007802 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800777a:	260f      	movs	r6, #15
 800777c:	19bb      	adds	r3, r7, r6
 800777e:	2208      	movs	r2, #8
 8007780:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007782:	200e      	movs	r0, #14
 8007784:	183b      	adds	r3, r7, r0
 8007786:	2208      	movs	r2, #8
 8007788:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	0e5b      	lsrs	r3, r3, #25
 8007792:	b2da      	uxtb	r2, r3
 8007794:	240d      	movs	r4, #13
 8007796:	193b      	adds	r3, r7, r4
 8007798:	2107      	movs	r1, #7
 800779a:	400a      	ands	r2, r1
 800779c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	0f5b      	lsrs	r3, r3, #29
 80077a6:	b2da      	uxtb	r2, r3
 80077a8:	250c      	movs	r5, #12
 80077aa:	197b      	adds	r3, r7, r5
 80077ac:	2107      	movs	r1, #7
 80077ae:	400a      	ands	r2, r1
 80077b0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80077b2:	183b      	adds	r3, r7, r0
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	197a      	adds	r2, r7, r5
 80077b8:	7812      	ldrb	r2, [r2, #0]
 80077ba:	4914      	ldr	r1, [pc, #80]	@ (800780c <UARTEx_SetNbDataToProcess+0xb4>)
 80077bc:	5c8a      	ldrb	r2, [r1, r2]
 80077be:	435a      	muls	r2, r3
 80077c0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80077c2:	197b      	adds	r3, r7, r5
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	4a12      	ldr	r2, [pc, #72]	@ (8007810 <UARTEx_SetNbDataToProcess+0xb8>)
 80077c8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80077ca:	0019      	movs	r1, r3
 80077cc:	f7f8 fd26 	bl	800021c <__divsi3>
 80077d0:	0003      	movs	r3, r0
 80077d2:	b299      	uxth	r1, r3
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	226a      	movs	r2, #106	@ 0x6a
 80077d8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077da:	19bb      	adds	r3, r7, r6
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	193a      	adds	r2, r7, r4
 80077e0:	7812      	ldrb	r2, [r2, #0]
 80077e2:	490a      	ldr	r1, [pc, #40]	@ (800780c <UARTEx_SetNbDataToProcess+0xb4>)
 80077e4:	5c8a      	ldrb	r2, [r1, r2]
 80077e6:	435a      	muls	r2, r3
 80077e8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80077ea:	193b      	adds	r3, r7, r4
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	4a08      	ldr	r2, [pc, #32]	@ (8007810 <UARTEx_SetNbDataToProcess+0xb8>)
 80077f0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077f2:	0019      	movs	r1, r3
 80077f4:	f7f8 fd12 	bl	800021c <__divsi3>
 80077f8:	0003      	movs	r3, r0
 80077fa:	b299      	uxth	r1, r3
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2268      	movs	r2, #104	@ 0x68
 8007800:	5299      	strh	r1, [r3, r2]
}
 8007802:	46c0      	nop			@ (mov r8, r8)
 8007804:	46bd      	mov	sp, r7
 8007806:	b005      	add	sp, #20
 8007808:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800780a:	46c0      	nop			@ (mov r8, r8)
 800780c:	08007ee8 	.word	0x08007ee8
 8007810:	08007ef0 	.word	0x08007ef0

08007814 <calloc>:
 8007814:	b510      	push	{r4, lr}
 8007816:	4b03      	ldr	r3, [pc, #12]	@ (8007824 <calloc+0x10>)
 8007818:	000a      	movs	r2, r1
 800781a:	0001      	movs	r1, r0
 800781c:	6818      	ldr	r0, [r3, #0]
 800781e:	f000 f803 	bl	8007828 <_calloc_r>
 8007822:	bd10      	pop	{r4, pc}
 8007824:	2000000c 	.word	0x2000000c

08007828 <_calloc_r>:
 8007828:	b570      	push	{r4, r5, r6, lr}
 800782a:	0c0b      	lsrs	r3, r1, #16
 800782c:	0c15      	lsrs	r5, r2, #16
 800782e:	2b00      	cmp	r3, #0
 8007830:	d11e      	bne.n	8007870 <_calloc_r+0x48>
 8007832:	2d00      	cmp	r5, #0
 8007834:	d10c      	bne.n	8007850 <_calloc_r+0x28>
 8007836:	b289      	uxth	r1, r1
 8007838:	b294      	uxth	r4, r2
 800783a:	434c      	muls	r4, r1
 800783c:	0021      	movs	r1, r4
 800783e:	f000 f857 	bl	80078f0 <_malloc_r>
 8007842:	1e05      	subs	r5, r0, #0
 8007844:	d01a      	beq.n	800787c <_calloc_r+0x54>
 8007846:	0022      	movs	r2, r4
 8007848:	2100      	movs	r1, #0
 800784a:	f000 f8e1 	bl	8007a10 <memset>
 800784e:	e016      	b.n	800787e <_calloc_r+0x56>
 8007850:	1c2b      	adds	r3, r5, #0
 8007852:	1c0c      	adds	r4, r1, #0
 8007854:	b289      	uxth	r1, r1
 8007856:	b292      	uxth	r2, r2
 8007858:	434a      	muls	r2, r1
 800785a:	b29b      	uxth	r3, r3
 800785c:	b2a1      	uxth	r1, r4
 800785e:	4359      	muls	r1, r3
 8007860:	0c14      	lsrs	r4, r2, #16
 8007862:	190c      	adds	r4, r1, r4
 8007864:	0c23      	lsrs	r3, r4, #16
 8007866:	d107      	bne.n	8007878 <_calloc_r+0x50>
 8007868:	0424      	lsls	r4, r4, #16
 800786a:	b292      	uxth	r2, r2
 800786c:	4314      	orrs	r4, r2
 800786e:	e7e5      	b.n	800783c <_calloc_r+0x14>
 8007870:	2d00      	cmp	r5, #0
 8007872:	d101      	bne.n	8007878 <_calloc_r+0x50>
 8007874:	1c14      	adds	r4, r2, #0
 8007876:	e7ed      	b.n	8007854 <_calloc_r+0x2c>
 8007878:	230c      	movs	r3, #12
 800787a:	6003      	str	r3, [r0, #0]
 800787c:	2500      	movs	r5, #0
 800787e:	0028      	movs	r0, r5
 8007880:	bd70      	pop	{r4, r5, r6, pc}
	...

08007884 <malloc>:
 8007884:	b510      	push	{r4, lr}
 8007886:	4b03      	ldr	r3, [pc, #12]	@ (8007894 <malloc+0x10>)
 8007888:	0001      	movs	r1, r0
 800788a:	6818      	ldr	r0, [r3, #0]
 800788c:	f000 f830 	bl	80078f0 <_malloc_r>
 8007890:	bd10      	pop	{r4, pc}
 8007892:	46c0      	nop			@ (mov r8, r8)
 8007894:	2000000c 	.word	0x2000000c

08007898 <free>:
 8007898:	b510      	push	{r4, lr}
 800789a:	4b03      	ldr	r3, [pc, #12]	@ (80078a8 <free+0x10>)
 800789c:	0001      	movs	r1, r0
 800789e:	6818      	ldr	r0, [r3, #0]
 80078a0:	f000 f906 	bl	8007ab0 <_free_r>
 80078a4:	bd10      	pop	{r4, pc}
 80078a6:	46c0      	nop			@ (mov r8, r8)
 80078a8:	2000000c 	.word	0x2000000c

080078ac <sbrk_aligned>:
 80078ac:	b570      	push	{r4, r5, r6, lr}
 80078ae:	4e0f      	ldr	r6, [pc, #60]	@ (80078ec <sbrk_aligned+0x40>)
 80078b0:	000d      	movs	r5, r1
 80078b2:	6831      	ldr	r1, [r6, #0]
 80078b4:	0004      	movs	r4, r0
 80078b6:	2900      	cmp	r1, #0
 80078b8:	d102      	bne.n	80078c0 <sbrk_aligned+0x14>
 80078ba:	f000 f8b1 	bl	8007a20 <_sbrk_r>
 80078be:	6030      	str	r0, [r6, #0]
 80078c0:	0029      	movs	r1, r5
 80078c2:	0020      	movs	r0, r4
 80078c4:	f000 f8ac 	bl	8007a20 <_sbrk_r>
 80078c8:	1c43      	adds	r3, r0, #1
 80078ca:	d103      	bne.n	80078d4 <sbrk_aligned+0x28>
 80078cc:	2501      	movs	r5, #1
 80078ce:	426d      	negs	r5, r5
 80078d0:	0028      	movs	r0, r5
 80078d2:	bd70      	pop	{r4, r5, r6, pc}
 80078d4:	2303      	movs	r3, #3
 80078d6:	1cc5      	adds	r5, r0, #3
 80078d8:	439d      	bics	r5, r3
 80078da:	42a8      	cmp	r0, r5
 80078dc:	d0f8      	beq.n	80078d0 <sbrk_aligned+0x24>
 80078de:	1a29      	subs	r1, r5, r0
 80078e0:	0020      	movs	r0, r4
 80078e2:	f000 f89d 	bl	8007a20 <_sbrk_r>
 80078e6:	3001      	adds	r0, #1
 80078e8:	d1f2      	bne.n	80078d0 <sbrk_aligned+0x24>
 80078ea:	e7ef      	b.n	80078cc <sbrk_aligned+0x20>
 80078ec:	20000200 	.word	0x20000200

080078f0 <_malloc_r>:
 80078f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078f2:	2203      	movs	r2, #3
 80078f4:	1ccb      	adds	r3, r1, #3
 80078f6:	4393      	bics	r3, r2
 80078f8:	3308      	adds	r3, #8
 80078fa:	0005      	movs	r5, r0
 80078fc:	001f      	movs	r7, r3
 80078fe:	2b0c      	cmp	r3, #12
 8007900:	d234      	bcs.n	800796c <_malloc_r+0x7c>
 8007902:	270c      	movs	r7, #12
 8007904:	42b9      	cmp	r1, r7
 8007906:	d833      	bhi.n	8007970 <_malloc_r+0x80>
 8007908:	0028      	movs	r0, r5
 800790a:	f000 f871 	bl	80079f0 <__malloc_lock>
 800790e:	4e37      	ldr	r6, [pc, #220]	@ (80079ec <_malloc_r+0xfc>)
 8007910:	6833      	ldr	r3, [r6, #0]
 8007912:	001c      	movs	r4, r3
 8007914:	2c00      	cmp	r4, #0
 8007916:	d12f      	bne.n	8007978 <_malloc_r+0x88>
 8007918:	0039      	movs	r1, r7
 800791a:	0028      	movs	r0, r5
 800791c:	f7ff ffc6 	bl	80078ac <sbrk_aligned>
 8007920:	0004      	movs	r4, r0
 8007922:	1c43      	adds	r3, r0, #1
 8007924:	d15f      	bne.n	80079e6 <_malloc_r+0xf6>
 8007926:	6834      	ldr	r4, [r6, #0]
 8007928:	9400      	str	r4, [sp, #0]
 800792a:	9b00      	ldr	r3, [sp, #0]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d14a      	bne.n	80079c6 <_malloc_r+0xd6>
 8007930:	2c00      	cmp	r4, #0
 8007932:	d052      	beq.n	80079da <_malloc_r+0xea>
 8007934:	6823      	ldr	r3, [r4, #0]
 8007936:	0028      	movs	r0, r5
 8007938:	18e3      	adds	r3, r4, r3
 800793a:	9900      	ldr	r1, [sp, #0]
 800793c:	9301      	str	r3, [sp, #4]
 800793e:	f000 f86f 	bl	8007a20 <_sbrk_r>
 8007942:	9b01      	ldr	r3, [sp, #4]
 8007944:	4283      	cmp	r3, r0
 8007946:	d148      	bne.n	80079da <_malloc_r+0xea>
 8007948:	6823      	ldr	r3, [r4, #0]
 800794a:	0028      	movs	r0, r5
 800794c:	1aff      	subs	r7, r7, r3
 800794e:	0039      	movs	r1, r7
 8007950:	f7ff ffac 	bl	80078ac <sbrk_aligned>
 8007954:	3001      	adds	r0, #1
 8007956:	d040      	beq.n	80079da <_malloc_r+0xea>
 8007958:	6823      	ldr	r3, [r4, #0]
 800795a:	19db      	adds	r3, r3, r7
 800795c:	6023      	str	r3, [r4, #0]
 800795e:	6833      	ldr	r3, [r6, #0]
 8007960:	685a      	ldr	r2, [r3, #4]
 8007962:	2a00      	cmp	r2, #0
 8007964:	d133      	bne.n	80079ce <_malloc_r+0xde>
 8007966:	9b00      	ldr	r3, [sp, #0]
 8007968:	6033      	str	r3, [r6, #0]
 800796a:	e019      	b.n	80079a0 <_malloc_r+0xb0>
 800796c:	2b00      	cmp	r3, #0
 800796e:	dac9      	bge.n	8007904 <_malloc_r+0x14>
 8007970:	230c      	movs	r3, #12
 8007972:	602b      	str	r3, [r5, #0]
 8007974:	2000      	movs	r0, #0
 8007976:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007978:	6821      	ldr	r1, [r4, #0]
 800797a:	1bc9      	subs	r1, r1, r7
 800797c:	d420      	bmi.n	80079c0 <_malloc_r+0xd0>
 800797e:	290b      	cmp	r1, #11
 8007980:	d90a      	bls.n	8007998 <_malloc_r+0xa8>
 8007982:	19e2      	adds	r2, r4, r7
 8007984:	6027      	str	r7, [r4, #0]
 8007986:	42a3      	cmp	r3, r4
 8007988:	d104      	bne.n	8007994 <_malloc_r+0xa4>
 800798a:	6032      	str	r2, [r6, #0]
 800798c:	6863      	ldr	r3, [r4, #4]
 800798e:	6011      	str	r1, [r2, #0]
 8007990:	6053      	str	r3, [r2, #4]
 8007992:	e005      	b.n	80079a0 <_malloc_r+0xb0>
 8007994:	605a      	str	r2, [r3, #4]
 8007996:	e7f9      	b.n	800798c <_malloc_r+0x9c>
 8007998:	6862      	ldr	r2, [r4, #4]
 800799a:	42a3      	cmp	r3, r4
 800799c:	d10e      	bne.n	80079bc <_malloc_r+0xcc>
 800799e:	6032      	str	r2, [r6, #0]
 80079a0:	0028      	movs	r0, r5
 80079a2:	f000 f82d 	bl	8007a00 <__malloc_unlock>
 80079a6:	0020      	movs	r0, r4
 80079a8:	2207      	movs	r2, #7
 80079aa:	300b      	adds	r0, #11
 80079ac:	1d23      	adds	r3, r4, #4
 80079ae:	4390      	bics	r0, r2
 80079b0:	1ac2      	subs	r2, r0, r3
 80079b2:	4298      	cmp	r0, r3
 80079b4:	d0df      	beq.n	8007976 <_malloc_r+0x86>
 80079b6:	1a1b      	subs	r3, r3, r0
 80079b8:	50a3      	str	r3, [r4, r2]
 80079ba:	e7dc      	b.n	8007976 <_malloc_r+0x86>
 80079bc:	605a      	str	r2, [r3, #4]
 80079be:	e7ef      	b.n	80079a0 <_malloc_r+0xb0>
 80079c0:	0023      	movs	r3, r4
 80079c2:	6864      	ldr	r4, [r4, #4]
 80079c4:	e7a6      	b.n	8007914 <_malloc_r+0x24>
 80079c6:	9c00      	ldr	r4, [sp, #0]
 80079c8:	6863      	ldr	r3, [r4, #4]
 80079ca:	9300      	str	r3, [sp, #0]
 80079cc:	e7ad      	b.n	800792a <_malloc_r+0x3a>
 80079ce:	001a      	movs	r2, r3
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	42a3      	cmp	r3, r4
 80079d4:	d1fb      	bne.n	80079ce <_malloc_r+0xde>
 80079d6:	2300      	movs	r3, #0
 80079d8:	e7da      	b.n	8007990 <_malloc_r+0xa0>
 80079da:	230c      	movs	r3, #12
 80079dc:	0028      	movs	r0, r5
 80079de:	602b      	str	r3, [r5, #0]
 80079e0:	f000 f80e 	bl	8007a00 <__malloc_unlock>
 80079e4:	e7c6      	b.n	8007974 <_malloc_r+0x84>
 80079e6:	6007      	str	r7, [r0, #0]
 80079e8:	e7da      	b.n	80079a0 <_malloc_r+0xb0>
 80079ea:	46c0      	nop			@ (mov r8, r8)
 80079ec:	20000204 	.word	0x20000204

080079f0 <__malloc_lock>:
 80079f0:	b510      	push	{r4, lr}
 80079f2:	4802      	ldr	r0, [pc, #8]	@ (80079fc <__malloc_lock+0xc>)
 80079f4:	f000 f850 	bl	8007a98 <__retarget_lock_acquire_recursive>
 80079f8:	bd10      	pop	{r4, pc}
 80079fa:	46c0      	nop			@ (mov r8, r8)
 80079fc:	20000344 	.word	0x20000344

08007a00 <__malloc_unlock>:
 8007a00:	b510      	push	{r4, lr}
 8007a02:	4802      	ldr	r0, [pc, #8]	@ (8007a0c <__malloc_unlock+0xc>)
 8007a04:	f000 f849 	bl	8007a9a <__retarget_lock_release_recursive>
 8007a08:	bd10      	pop	{r4, pc}
 8007a0a:	46c0      	nop			@ (mov r8, r8)
 8007a0c:	20000344 	.word	0x20000344

08007a10 <memset>:
 8007a10:	0003      	movs	r3, r0
 8007a12:	1882      	adds	r2, r0, r2
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d100      	bne.n	8007a1a <memset+0xa>
 8007a18:	4770      	bx	lr
 8007a1a:	7019      	strb	r1, [r3, #0]
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	e7f9      	b.n	8007a14 <memset+0x4>

08007a20 <_sbrk_r>:
 8007a20:	2300      	movs	r3, #0
 8007a22:	b570      	push	{r4, r5, r6, lr}
 8007a24:	4d06      	ldr	r5, [pc, #24]	@ (8007a40 <_sbrk_r+0x20>)
 8007a26:	0004      	movs	r4, r0
 8007a28:	0008      	movs	r0, r1
 8007a2a:	602b      	str	r3, [r5, #0]
 8007a2c:	f7fa fdce 	bl	80025cc <_sbrk>
 8007a30:	1c43      	adds	r3, r0, #1
 8007a32:	d103      	bne.n	8007a3c <_sbrk_r+0x1c>
 8007a34:	682b      	ldr	r3, [r5, #0]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d000      	beq.n	8007a3c <_sbrk_r+0x1c>
 8007a3a:	6023      	str	r3, [r4, #0]
 8007a3c:	bd70      	pop	{r4, r5, r6, pc}
 8007a3e:	46c0      	nop			@ (mov r8, r8)
 8007a40:	20000340 	.word	0x20000340

08007a44 <__errno>:
 8007a44:	4b01      	ldr	r3, [pc, #4]	@ (8007a4c <__errno+0x8>)
 8007a46:	6818      	ldr	r0, [r3, #0]
 8007a48:	4770      	bx	lr
 8007a4a:	46c0      	nop			@ (mov r8, r8)
 8007a4c:	2000000c 	.word	0x2000000c

08007a50 <__libc_init_array>:
 8007a50:	b570      	push	{r4, r5, r6, lr}
 8007a52:	2600      	movs	r6, #0
 8007a54:	4c0c      	ldr	r4, [pc, #48]	@ (8007a88 <__libc_init_array+0x38>)
 8007a56:	4d0d      	ldr	r5, [pc, #52]	@ (8007a8c <__libc_init_array+0x3c>)
 8007a58:	1b64      	subs	r4, r4, r5
 8007a5a:	10a4      	asrs	r4, r4, #2
 8007a5c:	42a6      	cmp	r6, r4
 8007a5e:	d109      	bne.n	8007a74 <__libc_init_array+0x24>
 8007a60:	2600      	movs	r6, #0
 8007a62:	f000 f86f 	bl	8007b44 <_init>
 8007a66:	4c0a      	ldr	r4, [pc, #40]	@ (8007a90 <__libc_init_array+0x40>)
 8007a68:	4d0a      	ldr	r5, [pc, #40]	@ (8007a94 <__libc_init_array+0x44>)
 8007a6a:	1b64      	subs	r4, r4, r5
 8007a6c:	10a4      	asrs	r4, r4, #2
 8007a6e:	42a6      	cmp	r6, r4
 8007a70:	d105      	bne.n	8007a7e <__libc_init_array+0x2e>
 8007a72:	bd70      	pop	{r4, r5, r6, pc}
 8007a74:	00b3      	lsls	r3, r6, #2
 8007a76:	58eb      	ldr	r3, [r5, r3]
 8007a78:	4798      	blx	r3
 8007a7a:	3601      	adds	r6, #1
 8007a7c:	e7ee      	b.n	8007a5c <__libc_init_array+0xc>
 8007a7e:	00b3      	lsls	r3, r6, #2
 8007a80:	58eb      	ldr	r3, [r5, r3]
 8007a82:	4798      	blx	r3
 8007a84:	3601      	adds	r6, #1
 8007a86:	e7f2      	b.n	8007a6e <__libc_init_array+0x1e>
 8007a88:	08007ef8 	.word	0x08007ef8
 8007a8c:	08007ef8 	.word	0x08007ef8
 8007a90:	08007efc 	.word	0x08007efc
 8007a94:	08007ef8 	.word	0x08007ef8

08007a98 <__retarget_lock_acquire_recursive>:
 8007a98:	4770      	bx	lr

08007a9a <__retarget_lock_release_recursive>:
 8007a9a:	4770      	bx	lr

08007a9c <memcpy>:
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	b510      	push	{r4, lr}
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d100      	bne.n	8007aa6 <memcpy+0xa>
 8007aa4:	bd10      	pop	{r4, pc}
 8007aa6:	5ccc      	ldrb	r4, [r1, r3]
 8007aa8:	54c4      	strb	r4, [r0, r3]
 8007aaa:	3301      	adds	r3, #1
 8007aac:	e7f8      	b.n	8007aa0 <memcpy+0x4>
	...

08007ab0 <_free_r>:
 8007ab0:	b570      	push	{r4, r5, r6, lr}
 8007ab2:	0005      	movs	r5, r0
 8007ab4:	1e0c      	subs	r4, r1, #0
 8007ab6:	d010      	beq.n	8007ada <_free_r+0x2a>
 8007ab8:	3c04      	subs	r4, #4
 8007aba:	6823      	ldr	r3, [r4, #0]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	da00      	bge.n	8007ac2 <_free_r+0x12>
 8007ac0:	18e4      	adds	r4, r4, r3
 8007ac2:	0028      	movs	r0, r5
 8007ac4:	f7ff ff94 	bl	80079f0 <__malloc_lock>
 8007ac8:	4a1d      	ldr	r2, [pc, #116]	@ (8007b40 <_free_r+0x90>)
 8007aca:	6813      	ldr	r3, [r2, #0]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d105      	bne.n	8007adc <_free_r+0x2c>
 8007ad0:	6063      	str	r3, [r4, #4]
 8007ad2:	6014      	str	r4, [r2, #0]
 8007ad4:	0028      	movs	r0, r5
 8007ad6:	f7ff ff93 	bl	8007a00 <__malloc_unlock>
 8007ada:	bd70      	pop	{r4, r5, r6, pc}
 8007adc:	42a3      	cmp	r3, r4
 8007ade:	d908      	bls.n	8007af2 <_free_r+0x42>
 8007ae0:	6820      	ldr	r0, [r4, #0]
 8007ae2:	1821      	adds	r1, r4, r0
 8007ae4:	428b      	cmp	r3, r1
 8007ae6:	d1f3      	bne.n	8007ad0 <_free_r+0x20>
 8007ae8:	6819      	ldr	r1, [r3, #0]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	1809      	adds	r1, r1, r0
 8007aee:	6021      	str	r1, [r4, #0]
 8007af0:	e7ee      	b.n	8007ad0 <_free_r+0x20>
 8007af2:	001a      	movs	r2, r3
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d001      	beq.n	8007afe <_free_r+0x4e>
 8007afa:	42a3      	cmp	r3, r4
 8007afc:	d9f9      	bls.n	8007af2 <_free_r+0x42>
 8007afe:	6811      	ldr	r1, [r2, #0]
 8007b00:	1850      	adds	r0, r2, r1
 8007b02:	42a0      	cmp	r0, r4
 8007b04:	d10b      	bne.n	8007b1e <_free_r+0x6e>
 8007b06:	6820      	ldr	r0, [r4, #0]
 8007b08:	1809      	adds	r1, r1, r0
 8007b0a:	1850      	adds	r0, r2, r1
 8007b0c:	6011      	str	r1, [r2, #0]
 8007b0e:	4283      	cmp	r3, r0
 8007b10:	d1e0      	bne.n	8007ad4 <_free_r+0x24>
 8007b12:	6818      	ldr	r0, [r3, #0]
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	1841      	adds	r1, r0, r1
 8007b18:	6011      	str	r1, [r2, #0]
 8007b1a:	6053      	str	r3, [r2, #4]
 8007b1c:	e7da      	b.n	8007ad4 <_free_r+0x24>
 8007b1e:	42a0      	cmp	r0, r4
 8007b20:	d902      	bls.n	8007b28 <_free_r+0x78>
 8007b22:	230c      	movs	r3, #12
 8007b24:	602b      	str	r3, [r5, #0]
 8007b26:	e7d5      	b.n	8007ad4 <_free_r+0x24>
 8007b28:	6820      	ldr	r0, [r4, #0]
 8007b2a:	1821      	adds	r1, r4, r0
 8007b2c:	428b      	cmp	r3, r1
 8007b2e:	d103      	bne.n	8007b38 <_free_r+0x88>
 8007b30:	6819      	ldr	r1, [r3, #0]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	1809      	adds	r1, r1, r0
 8007b36:	6021      	str	r1, [r4, #0]
 8007b38:	6063      	str	r3, [r4, #4]
 8007b3a:	6054      	str	r4, [r2, #4]
 8007b3c:	e7ca      	b.n	8007ad4 <_free_r+0x24>
 8007b3e:	46c0      	nop			@ (mov r8, r8)
 8007b40:	20000204 	.word	0x20000204

08007b44 <_init>:
 8007b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b46:	46c0      	nop			@ (mov r8, r8)
 8007b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b4a:	bc08      	pop	{r3}
 8007b4c:	469e      	mov	lr, r3
 8007b4e:	4770      	bx	lr

08007b50 <_fini>:
 8007b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b52:	46c0      	nop			@ (mov r8, r8)
 8007b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b56:	bc08      	pop	{r3}
 8007b58:	469e      	mov	lr, r3
 8007b5a:	4770      	bx	lr
